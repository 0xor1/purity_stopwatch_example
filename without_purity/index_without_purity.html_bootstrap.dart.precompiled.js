// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
(function($) {
function dart(){ this.x = 0 }var A = new dart;
delete A.x;
var B = new dart;
delete B.x;
var C = new dart;
delete C.x;
var D = new dart;
delete D.x;
var E = new dart;
delete E.x;
var F = new dart;
delete F.x;
var G = new dart;
delete G.x;
var H = new dart;
delete H.x;
var J = new dart;
delete J.x;
var K = new dart;
delete K.x;
var L = new dart;
delete L.x;
var M = new dart;
delete M.x;
var N = new dart;
delete N.x;
var O = new dart;
delete O.x;
var P = new dart;
delete P.x;
var Q = new dart;
delete Q.x;
var R = new dart;
delete R.x;
var S = new dart;
delete S.x;
var T = new dart;
delete T.x;
var U = new dart;
delete U.x;
var V = new dart;
delete V.x;
var W = new dart;
delete W.x;
var X = new dart;
delete X.x;
var Y = new dart;
delete Y.x;
var Z = new dart;
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
init.mangledNames = {_core0$_invoke$1: "_core0$_invoke:1:0", _handleTick$1: "_handleTick:1:0", _initialiseIndexes$2: "_initialiseIndexes:2:0", _invoke$2: "_invoke:2:0", addEventAction$2: "addEventAction:2:0", call$0: "call:0:0", call$1: "call:1:0", call$1$growable: "call:1:0:growable", call$1$skipChanges: "call:1:0:skipChanges", call$1$specification: "call:1:0:specification", call$2: "call:2:0", call$2$onError: "call:2:0:onError", call$2$runGuarded: "call:2:0:runGuarded", call$2$thisArg: "call:2:0:thisArg", call$3: "call:3:0", call$3$async: "call:3:0:async", call$3$attributeFilter$attributes: "call:3:0:attributeFilter:attributes", call$3$globals: "call:3:0:globals", call$3$onDone$onError: "call:3:0:onDone:onError", call$3$oneTime: "call:3:0:oneTime", call$3$treeSanitizer$validator: "call:3:0:treeSanitizer:validator", call$4: "call:4:0", call$4$cancelOnError$onDone$onError: "call:4:0:cancelOnError:onDone:onError", call$5: "call:5:0", call$6: "call:6:0", emitEvent$1: "emitEvent:1:0", get$_actionQueues: "_actionQueues", get$_core$_duration: "_core$_duration", get$_core0$_this: "_core0$_this", get$_du: "_du", get$_duration: "_duration", get$_emitterIndexes: "_emitterIndexes", get$_emittingType: "_emittingType", get$_isRunning: "_isRunning", get$_purityId: "_purityId", get$_timer: "_timer", get$_typeIndexes: "_typeIndexes", get$blurAction: "blurAction", get$contextMenuAction: "contextMenuAction", get$counter: "counter", get$data: "data", get$downAction: "downAction", get$duration: "duration", get$emittingType: "emittingType", get$endPointName: "endPointName", get$focusAction: "focusAction", get$icon: "icon", get$iconSrc: "iconSrc", get$isEmitting: "isEmitting", get$isEmpty: "isEmpty", get$isNotEmpty: "isNotEmpty", get$isProxyToSource: "isProxyToSource", get$keys: "keys", get$label: "label", get$length: "length", get$message: "message", get$method: "method", get$namArgs: "namArgs", get$posArgs: "posArgs", get$proxies: "proxies", get$proxy: "proxy", get$raisedButton: "raisedButton", get$reset: "reset", get$src: "src", get$start: "start", get$stop: "stop", get$upAction: "upAction", get$value: "value", get$values: "values", get$z: "z", ignoreAllEvents$0: "ignoreAllEvents:0:0", ignoreAllEventsFrom$1: "ignoreAllEventsFrom:1:0", ignoreAllEventsOfType$1: "ignoreAllEventsOfType:1:0", ignoreSpecificEventBinding$2: "ignoreSpecificEventBinding:2:0", listen$1: "listen:1:0", listen$3: "listen:3:0", listen$3$onDone$onError: "listen:3:0:onDone:onError", registerCallback$1: "registerCallback:1:0", removeEventAction$2: "removeEventAction:2:0", reset$0: "reset:0:0", set$_actionQueues: "_actionQueues=", set$_core0$_this: "_core0$_this=", set$_du: "_du=", set$_duration: "_duration=", set$_emitterIndexes: "_emitterIndexes=", set$_emittingType: "_emittingType=", set$_purityId: "_purityId=", set$_timer: "_timer=", set$_typeIndexes: "_typeIndexes=", set$counter: "counter=", set$data: "data=", set$duration: "duration=", set$endPointName: "endPointName=", set$icon: "icon=", set$iconSrc: "iconSrc=", set$isProxyToSource: "isProxyToSource=", set$length: "length=", set$message: "message=", set$method: "method=", set$namArgs: "namArgs=", set$posArgs: "posArgs=", set$proxies: "proxies=", set$proxy: "proxy=", set$src: "src=", set$value: "value=", set$z: "z=", start$0: "start:0:0", stop$0: "stop:0:0"};
(function(reflectionData) {
  "use strict";
  function map(x) {
    x = {x: x};
    delete x.x;
    return x;
  }
  function processStatics(descriptor) {
    for (var property in descriptor) {
      if (!hasOwnProperty.call(descriptor, property))
        continue;
      if (property === "^")
        continue;
      var element = descriptor[property];
      var firstChar = property.substring(0, 1);
      var previousProperty;
      if (firstChar === "+") {
        mangledGlobalNames[previousProperty] = property.substring(1);
        var flag = descriptor[property];
        if (flag > 0)
          descriptor[previousProperty].$reflectable = flag;
        if (element && element.length)
          init.typeInformation[previousProperty] = element;
      } else if (firstChar === "@") {
        property = property.substring(1);
        $[property]["@"] = element;
      } else if (firstChar === "*") {
        globalObject[previousProperty].$defaultValues = element;
        var optionalMethods = descriptor.$methodsWithOptionalArguments;
        if (!optionalMethods) {
          descriptor.$methodsWithOptionalArguments = optionalMethods = {};
        }
        optionalMethods[property] = previousProperty;
      } else if (typeof element === "function") {
        globalObject[previousProperty = property] = element;
        functions.push(property);
        init.globalFunctions[property] = element;
      } else if (element.constructor === Array) {
        addStubs(globalObject, element, property, true, descriptor, functions);
      } else {
        previousProperty = property;
        var newDesc = {};
        var previousProp;
        for (var prop in element) {
          if (!hasOwnProperty.call(element, prop))
            continue;
          firstChar = prop.substring(0, 1);
          if (prop === "static") {
            processStatics(init.statics[property] = element[prop]);
          } else if (firstChar === "+") {
            mangledNames[previousProp] = prop.substring(1);
            var flag = element[prop];
            if (flag > 0)
              element[previousProp].$reflectable = flag;
          } else if (firstChar === "@" && prop !== "@") {
            newDesc[prop.substring(1)]["@"] = element[prop];
          } else if (firstChar === "*") {
            newDesc[previousProp].$defaultValues = element[prop];
            var optionalMethods = newDesc.$methodsWithOptionalArguments;
            if (!optionalMethods) {
              newDesc.$methodsWithOptionalArguments = optionalMethods = {};
            }
            optionalMethods[prop] = previousProp;
          } else {
            var elem = element[prop];
            if (prop !== "^" && elem != null && elem.constructor === Array && prop !== "<>") {
              addStubs(newDesc, elem, prop, false, element, []);
            } else {
              newDesc[previousProp = prop] = elem;
            }
          }
        }
        $$[property] = [globalObject, newDesc];
        classes.push(property);
      }
    }
  }
  function addStubs(descriptor, array, name, isStatic, originalDescriptor, functions) {
    var f, funcs = [originalDescriptor[name] = descriptor[name] = f = array[0]];
    f.$stubName = name;
    functions.push(name);
    for (var index = 0; index < array.length; index += 2) {
      f = array[index + 1];
      if (typeof f != "function")
        break;
      f.$stubName = array[index + 2];
      funcs.push(f);
      if (f.$stubName) {
        originalDescriptor[f.$stubName] = descriptor[f.$stubName] = f;
        functions.push(f.$stubName);
      }
    }
    for (var i = 0; i < funcs.length; index++, i++) {
      funcs[i].$callName = array[index + 1];
    }
    var getterStubName = array[++index];
    array = array.slice(++index);
    var requiredParameterInfo = array[0];
    var requiredParameterCount = requiredParameterInfo >> 1;
    var isAccessor = (requiredParameterInfo & 1) === 1;
    var isSetter = requiredParameterInfo === 3;
    var isGetter = requiredParameterInfo === 1;
    var optionalParameterInfo = array[1];
    var optionalParameterCount = optionalParameterInfo >> 1;
    var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
    var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
    var functionTypeIndex = array[2];
    var unmangledNameIndex = 3 * optionalParameterCount + 2 * requiredParameterCount + 3;
    var isReflectable = array.length > unmangledNameIndex;
    if (getterStubName) {
      f = tearOff(funcs, array, isStatic, name, isIntercepted);
      descriptor[name].$getter = f;
      f.$getterStub = true;
      if (isStatic)
        init.globalFunctions[name] = f;
      originalDescriptor[getterStubName] = descriptor[getterStubName] = f;
      funcs.push(f);
      if (getterStubName)
        functions.push(getterStubName);
      f.$stubName = getterStubName;
      f.$callName = null;
      if (isIntercepted)
        init.interceptedNames[getterStubName] = true;
    }
    if (isReflectable) {
      for (var i = 0; i < funcs.length; i++) {
        funcs[i].$reflectable = 1;
        funcs[i].$reflectionInfo = array;
      }
      var mangledNames = isStatic ? init.mangledGlobalNames : init.mangledNames;
      var unmangledName = array[unmangledNameIndex];
      var reflectionName = unmangledName;
      if (getterStubName)
        mangledNames[getterStubName] = reflectionName;
      if (isSetter) {
        reflectionName += "=";
      } else if (!isGetter) {
        reflectionName += ":" + requiredParameterCount + ":" + optionalParameterCount;
      }
      mangledNames[name] = reflectionName;
      funcs[0].$reflectionName = reflectionName;
      funcs[0].$metadataIndex = unmangledNameIndex + 1;
      if (optionalParameterCount)
        descriptor[unmangledName + "*"] = funcs[0];
    }
  }
  function tearOffGetterNoCsp(funcs, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(x) {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [x], name);" + "return new c(this, funcs[0], x, name);" + "}")(funcs, reflectionInfo, name, H, null) : new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [], name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, reflectionInfo, name, H, null);
  }
  function tearOffGetterCsp(funcs, reflectionInfo, name, isIntercepted) {
    var cache = null;
    return isIntercepted ? function(x) {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [x], name);
      return new cache(this, funcs[0], x, name);
    } : function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [], name);
      return new cache(this, funcs[0], null, name);
    };
  }
  function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
    var cache;
    return isStatic ? function() {
      if (cache === void 0)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
      return cache;
    } : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
  }
  var functionCounter = 0;
  var tearOffGetter = typeof dart_precompiled == "function" ? tearOffGetterCsp : tearOffGetterNoCsp;
  if (!init.libraries)
    init.libraries = [];
  if (!init.mangledNames)
    init.mangledNames = map();
  if (!init.mangledGlobalNames)
    init.mangledGlobalNames = map();
  if (!init.statics)
    init.statics = map();
  if (!init.typeInformation)
    init.typeInformation = map();
  if (!init.globalFunctions)
    init.globalFunctions = map();
  if (!init.interceptedNames)
    init.interceptedNames = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor["^"];
    if (fields instanceof Array)
      fields = fields[0];
    var classes = [];
    var functions = [];
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
  }
})([
["_foreign_helper", "dart:_foreign_helper", , H, {
  "^": "",
  JS_CONST: {
    "^": "Object;code"
  }
}],
["_interceptors", "dart:_interceptors", , J, {
  "^": "",
  getInterceptor: function(object) {
    return void 0;
  },
  makeDispatchRecord: function(interceptor, proto, extension, indexability) {
    return {i: interceptor, p: proto, e: extension, x: indexability};
  },
  getNativeInterceptor: function(object) {
    var record, proto, objectProto, interceptor;
    record = object[init.dispatchPropertyName];
    if (record == null)
      if ($.initNativeDispatchFlag == null) {
        H.initNativeDispatch();
        record = object[init.dispatchPropertyName];
      }
    if (record != null) {
      proto = record.p;
      if (false === proto)
        return record.i;
      if (true === proto)
        return object;
      objectProto = Object.getPrototypeOf(object);
      if (proto === objectProto)
        return record.i;
      if (record.e === objectProto)
        throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
    }
    interceptor = H.lookupAndCacheInterceptor(object);
    if (interceptor == null) {
      proto = Object.getPrototypeOf(object);
      if (proto == null || proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      else
        return C.UnknownJavaScriptObject_methods;
    }
    return interceptor;
  },
  findIndexForNativeSubclassType: function(type) {
    var t1, map, t2, i;
    t1 = $.mapTypeToInterceptor;
    if (t1 == null)
      return;
    map = t1;
    for (t1 = map.length, t2 = J.getInterceptor(type), i = 0; i + 1 < t1; i += 3) {
      if (i >= t1)
        return H.ioore(map, i);
      if (t2.$eq(type, map[i]))
        return i;
    }
    return;
  },
  findInterceptorConstructorForType: function(type) {
    var index, map, t1;
    index = J.findIndexForNativeSubclassType(type);
    if (index == null)
      return;
    map = $.mapTypeToInterceptor;
    t1 = index + 1;
    if (t1 >= map.length)
      return H.ioore(map, t1);
    return map[t1];
  },
  findConstructorForNativeSubclassType: function(type, $name) {
    var index, map, t1;
    index = J.findIndexForNativeSubclassType(type);
    if (index == null)
      return;
    map = $.mapTypeToInterceptor;
    t1 = index + 2;
    if (t1 >= map.length)
      return H.ioore(map, t1);
    return map[t1][$name];
  },
  Interceptor: {
    "^": "Object;",
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToString(receiver);
    },
    noSuchMethod$1: [function(receiver, invocation) {
      throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    }, "call$1", "get$noSuchMethod", 2, 0, null, 91, []],
    get$runtimeType: function(receiver) {
      return new H.TypeImpl(H.getRuntimeTypeString(receiver), null);
    },
    "%": "MediaError|MediaKeyError|Navigator|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString"
  },
  JSBool: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType: function(receiver) {
      return C.Type_EsU;
    },
    $isbool: true
  },
  JSNull: {
    "^": "Interceptor;",
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    get$runtimeType: function(receiver) {
      return C.Type_eZO;
    },
    noSuchMethod$1: [function(receiver, invocation) {
      return J.Interceptor.prototype.noSuchMethod$1.call(this, receiver, invocation);
    }, "call$1", "get$noSuchMethod", 2, 0, null, 91, []]
  },
  JavaScriptObject: {
    "^": "Interceptor;",
    get$hashCode: function(_) {
      return 0;
    },
    get$runtimeType: function(_) {
      return C.Type_XXD;
    }
  },
  PlainJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  UnknownJavaScriptObject: {
    "^": "JavaScriptObject;",
    toString$0: function(receiver) {
      return String(receiver);
    }
  },
  JSArray: {
    "^": "Interceptor;",
    add$1: function(receiver, value) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index < 0 || index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeAt"));
      return receiver.splice(index, 1)[0];
    },
    insert$2: function(receiver, index, value) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index < 0 || index > receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("insert"));
      receiver.splice(index, 0, value);
    },
    removeLast$0: function(receiver) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeLast"));
      if (receiver.length === 0)
        throw H.wrapException(P.RangeError$value(-1));
      return receiver.pop();
    },
    remove$1: function(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    where$1: function(receiver, f) {
      var t1, t2;
      t1 = new H.IterableMixinWorkaround();
      t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(receiver, 0)];
      t2 = new H.WhereIterable(receiver, f);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      return t2;
    },
    addAll$1: function(receiver, collection) {
      var t1;
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0() === true;)
        this.add$1(receiver, t1.get$current());
    },
    clear$0: function(receiver) {
      this.set$length(receiver, 0);
    },
    forEach$1: function(receiver, f) {
      return H.IterableMixinWorkaround_forEach(receiver, f);
    },
    map$1: function(receiver, f) {
      var t1 = new H.MappedListIterable(receiver, f);
      t1.$builtinTypeInfo = [null, null];
      return t1;
    },
    join$1: function(receiver, separator) {
      var t1, list, i, t2;
      t1 = receiver.length;
      list = Array(t1);
      list.fixed$length = init;
      for (i = 0; i < receiver.length; ++i) {
        t2 = H.S(receiver[i]);
        if (i >= t1)
          return H.ioore(list, i);
        list[i] = t2;
      }
      return list.join(separator);
    },
    skip$1: function(receiver, n) {
      var t1 = new H.IterableMixinWorkaround();
      t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(receiver, 0)];
      return H.SubListIterable$(receiver, n, null, H.getTypeArgumentByIndex(t1, 0));
    },
    fold$2: function(receiver, initialValue, combine) {
      return H.IterableMixinWorkaround_fold(receiver, initialValue, combine);
    },
    firstWhere$2$orElse: function(receiver, test, orElse) {
      return H.IterableMixinWorkaround_firstWhere(receiver, test, orElse);
    },
    firstWhere$1: function($receiver, test) {
      return this.firstWhere$2$orElse($receiver, test, null);
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      var t1;
      if (start == null)
        H.throwExpression(P.ArgumentError$(null));
      if (typeof start !== "number" || Math.floor(start) !== start)
        throw H.wrapException(P.ArgumentError$(start));
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      if (end == null)
        end = receiver.length;
      else {
        if (typeof end !== "number" || Math.floor(end) !== end)
          throw H.wrapException(P.ArgumentError$(end));
        if (end < start || end > receiver.length)
          throw H.wrapException(P.RangeError$range(end, start, receiver.length));
      }
      if (start === end) {
        t1 = [];
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(receiver, 0)];
        return t1;
      }
      t1 = receiver.slice(start, end);
      t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(receiver, 0)];
      return t1;
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    getRange$2: function(receiver, start, end) {
      var t1 = new H.IterableMixinWorkaround();
      t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(receiver, 0)];
      H.IterableMixinWorkaround__rangeCheck(receiver, start, end);
      return H.SubListIterable$(receiver, start, end, H.getTypeArgumentByIndex(t1, 0));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    any$1: function(receiver, f) {
      return H.IterableMixinWorkaround_any(receiver, f);
    },
    indexOf$2: function(receiver, element, start) {
      return H.Lists_indexOf(receiver, element, start, receiver.length);
    },
    indexOf$1: function($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    },
    lastIndexOf$2: function(receiver, element, start) {
      return H.Lists_lastIndexOf(receiver, element, receiver.length - 1);
    },
    lastIndexOf$1: function($receiver, element) {
      return this.lastIndexOf$2($receiver, element, null);
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1;
      if (growable) {
        t1 = receiver.slice();
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(receiver, 0)];
        return t1;
      } else {
        t1 = receiver.slice();
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(receiver, 0)];
        t1.fixed$length = init;
        return t1;
      }
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator: function(receiver) {
      var t1 = new H.ListIterator(receiver, receiver.length, 0, null);
      t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(receiver, 0)];
      return t1;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
        throw H.wrapException(P.ArgumentError$(newLength));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$value(newLength));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      receiver[index] = value;
    },
    $isJSArray: true,
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null,
    static: {JSArray_JSArray$fixed: function($length, $E) {
        var t1;
        if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
          throw H.wrapException(P.ArgumentError$("Length must be a non-negative integer: " + H.S($length)));
        t1 = new Array($length);
        t1.$builtinTypeInfo = [$E];
        t1.fixed$length = init;
        return t1;
      }}
  },
  JSMutableArray: {
    "^": "JSArray;",
    $isJSMutableArray: true
  },
  JSFixedArray: {
    "^": "JSMutableArray;"
  },
  JSExtendableArray: {
    "^": "JSMutableArray;",
    $isJSExtendableArray: true
  },
  JSNumber: {
    "^": "Interceptor;",
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      if (typeof b !== "number")
        throw H.wrapException(P.ArgumentError$(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (this.get$isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$isNaN: function(receiver) {
      return isNaN(receiver);
    },
    remainder$1: function(receiver, b) {
      return receiver % b;
    },
    abs$0: function(receiver) {
      return Math.abs(receiver);
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$('' + receiver));
    },
    round$0: function(receiver) {
      return this.toInt$0(this.roundToDouble$0(receiver));
    },
    roundToDouble$0: function(receiver) {
      if (receiver < 0)
        return -Math.round(-receiver);
      else
        return Math.round(receiver);
    },
    toRadixString$1: function(receiver, radix) {
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$(radix));
      return receiver.toString(radix);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      return receiver & 0x1FFFFFFF;
    },
    $negate: function(receiver) {
      return -receiver;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver - other;
    },
    $div: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver / other;
    },
    $mul: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver * other;
    },
    $mod: function(receiver, other) {
      var result;
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    $tdiv: function(receiver, other) {
      if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
        return receiver / other | 0;
      else
        return this.toInt$0(receiver / other);
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
    },
    $shl: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shlPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr: function(receiver, other) {
      var t1;
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    $and: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return (receiver & other) >>> 0;
    },
    $or: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return (receiver | other) >>> 0;
    },
    $xor: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return (receiver ^ other) >>> 0;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver > other;
    },
    $le: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver <= other;
    },
    $ge: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver >= other;
    },
    get$runtimeType: function(receiver) {
      return C.Type_xM7;
    },
    $isnum: true,
    static: {"^": "JSNumber__MIN_INT32,JSNumber__MAX_INT32"}
  },
  JSInt: {
    "^": "JSNumber;",
    get$runtimeType: function(receiver) {
      return C.Type_SnA;
    },
    $not: function(receiver) {
      return ~receiver >>> 0;
    },
    $is$double: true,
    $isnum: true,
    $is$int: true
  },
  JSDouble: {
    "^": "JSNumber;",
    get$runtimeType: function(receiver) {
      return C.Type_qq1;
    },
    $is$double: true,
    $isnum: true
  },
  JSPositiveInt: {
    "^": "JSInt;"
  },
  JSUInt32: {
    "^": "JSPositiveInt;"
  },
  JSUInt31: {
    "^": "JSUInt32;"
  },
  JSString: {
    "^": "Interceptor;",
    codeUnitAt$1: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      return receiver.charCodeAt(index);
    },
    allMatches$2: function(receiver, string, start) {
      if (start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length));
      return H.allMatchesInStringUnchecked(receiver, string, start);
    },
    allMatches$1: function($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength, t1;
      otherLength = other.length;
      t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    replaceAll$2: function(receiver, from, to) {
      return H.stringReplaceAllUnchecked(receiver, from, to);
    },
    replaceAllMapped$2: function(receiver, from, convert) {
      return H.stringReplaceAllFuncUnchecked(receiver, from, convert, null);
    },
    replaceFirst$2: function(receiver, from, to) {
      return H.stringReplaceFirstUnchecked(receiver, from, to);
    },
    split$1: function(receiver, pattern) {
      if (pattern == null)
        H.throwExpression(P.ArgumentError$(null));
      if (typeof pattern === "string")
        return receiver.split(pattern);
      else if (!!J.getInterceptor(pattern).$isJSSyntaxRegExp)
        return receiver.split(pattern._nativeRegExp);
      else
        throw H.wrapException("String.split(Pattern) UNIMPLEMENTED");
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      if (index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      var t1;
      if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
        H.throwExpression(P.ArgumentError$(startIndex));
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
        H.throwExpression(P.ArgumentError$(endIndex));
      t1 = J.getInterceptor$n(startIndex);
      if (t1.$lt(startIndex, 0) === true)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (t1.$gt(startIndex, endIndex) === true)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (J.$gt$n(endIndex, receiver.length) === true)
        throw H.wrapException(P.RangeError$value(endIndex));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    toUpperCase$0: function(receiver) {
      return receiver.toUpperCase();
    },
    trim$0: function(receiver) {
      var result, endIndex, startIndex, t1, endIndex0;
      result = receiver.trim();
      endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this.codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul: function(receiver, times) {
      var s, result;
      if (typeof times !== "number")
        return H.iae(times);
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    get$codeUnits: function(receiver) {
      return new J._CodeUnits(receiver);
    },
    indexOf$2: function(receiver, pattern, start) {
      if (typeof start !== "number" || Math.floor(start) !== start)
        throw H.wrapException(P.ArgumentError$(start));
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      return receiver.indexOf(pattern, start);
    },
    indexOf$1: function($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    lastIndexOf$2: function(receiver, pattern, start) {
      var t1, t2;
      start = receiver.length;
      t1 = pattern.length;
      t2 = receiver.length;
      if (start + t1 > t2)
        start = t2 - t1;
      return receiver.lastIndexOf(pattern, start);
    },
    lastIndexOf$1: function($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    contains$2: function(receiver, other, startIndex) {
      if (other == null)
        H.throwExpression(P.ArgumentError$(null));
      if (startIndex > receiver.length)
        throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    contains$1: function($receiver, other) {
      return this.contains$2($receiver, other, 0);
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    compareTo$1: function(receiver, other) {
      var t1;
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$runtimeType: function(receiver) {
      return C.Type_Ejg;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $isString: true,
    $isPattern: true,
    static: {JSString__isWhitespace: function(codeUnit) {
        if (codeUnit < 256)
          switch (codeUnit) {
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
            case 133:
            case 160:
              return true;
            default:
              return false;
          }
        switch (codeUnit) {
          case 5760:
          case 6158:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8232:
          case 8233:
          case 8239:
          case 8287:
          case 12288:
          case 65279:
            return true;
          default:
            return false;
        }
      }, JSString__skipLeadingWhitespace: function(string, index) {
        var t1, codeUnit;
        for (t1 = string.length; index < t1;) {
          if (index >= t1)
            H.throwExpression(P.RangeError$value(index));
          codeUnit = string.charCodeAt(index);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
          ++index;
        }
        return index;
      }, JSString__skipTrailingWhitespace: function(string, index) {
        var t1, index0, codeUnit;
        for (t1 = string.length; index > 0; index = index0) {
          index0 = index - 1;
          if (index0 >= t1)
            H.throwExpression(P.RangeError$value(index0));
          codeUnit = string.charCodeAt(index0);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
        }
        return index;
      }}
  },
  _CodeUnits: {
    "^": "UnmodifiableListBase;__interceptors$_string",
    get$length: function(_) {
      return this.__interceptors$_string.length;
    },
    $index: function(_, i) {
      var t1, t2;
      t1 = this.__interceptors$_string;
      if (typeof i !== "number" || Math.floor(i) !== i)
        H.throwExpression(P.ArgumentError$(i));
      t2 = J.getInterceptor$n(i);
      if (t2.$lt(i, 0))
        H.throwExpression(P.RangeError$value(i));
      if (t2.$ge(i, t1.length))
        H.throwExpression(P.RangeError$value(i));
      return t1.charCodeAt(i);
    },
    $asUnmodifiableListBase: function() {
      return [P.$int];
    },
    $asListBase: function() {
      return [P.$int];
    },
    $asObject_ListMixin: function() {
      return [P.$int];
    },
    $asList: function() {
      return [P.$int];
    },
    $asIterable: function() {
      return [P.$int];
    }
  }
}],
["_isolate_helper", "dart:_isolate_helper", , H, {
  "^": "",
  _callInIsolate: function(isolate, $function) {
    var result = isolate.eval$1($function);
    init.globalState.topEventLoop.run$0();
    return result;
  },
  leaveJsAsync: function() {
    --init.globalState.topEventLoop._activeJsAsyncCount;
  },
  startRootIsolate: function(entry, args) {
    var t1, t2, t3, t4, t5, rootContext;
    t1 = {};
    t1.args_0 = args;
    args = args;
    t1.args_0 = args;
    if (args == null) {
      args = [];
      t1.args_0 = args;
      t2 = args;
    } else
      t2 = args;
    if (!J.getInterceptor(t2).$isList)
      throw H.wrapException(P.ArgumentError$("Arguments to main must be a List: " + H.S(t2)));
    t2 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
    t2._Manager$1(entry);
    init.globalState = t2;
    if (init.globalState.isWorker === true)
      return;
    t2 = init.globalState.nextIsolateId++;
    t3 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
    t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
    t5 = new H.RawReceivePortImpl(0, null, false);
    rootContext = new H._IsolateContext(t2, t3, t4, new Isolate(), t5, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
    t4.add$1(0, 0);
    rootContext._addRegistration$2(0, t5);
    init.globalState.rootContext = rootContext;
    init.globalState.currentContext = rootContext;
    t2 = H.getDynamicRuntimeType();
    t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
    if (t3)
      rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
    else {
      t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
      if (t2)
        rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
      else
        rootContext.eval$1(entry);
    }
    init.globalState.topEventLoop.run$0();
  },
  IsolateNatives_computeThisScript: function() {
    var currentScript = init.currentScript;
    if (currentScript != null)
      return String(currentScript.src);
    if (typeof version == "function" && typeof os == "object" && "system" in os)
      return H.IsolateNatives_computeThisScriptFromTrace();
    if (typeof version == "function" && typeof system == "function")
      return thisFilename();
    if (init.globalState.isWorker === true)
      return H.IsolateNatives_computeThisScriptFromTrace();
    return;
  },
  IsolateNatives_computeThisScriptFromTrace: function() {
    var stack, matches;
    stack = new Error().stack;
    if (stack == null) {
      stack = function() {
        try {
          throw new Error();
        } catch (e) {
          return e.stack;
        }

      }();
      if (stack == null)
        throw H.wrapException(P.UnsupportedError$("No stack trace"));
    }
    matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
    if (matches != null)
      return matches[1];
    matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
    if (matches != null)
      return matches[1];
    throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + H.S(stack) + "\""));
  },
  IsolateNatives__processWorkerMessage: [function(sender, e) {
    var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context;
    msg = H._deserializeMessage(e.data);
    t1 = J.getInterceptor$asx(msg);
    switch (t1.$index(msg, "command")) {
      case "start":
        init.globalState.currentManagerId = t1.$index(msg, "id");
        functionName = t1.$index(msg, "functionName");
        entryPoint = functionName == null ? init.globalState.entry : init.globalFunctions[functionName]();
        args = t1.$index(msg, "args");
        message = H._deserializeMessage(t1.$index(msg, "msg"));
        isSpawnUri = t1.$index(msg, "isSpawnUri");
        startPaused = t1.$index(msg, "startPaused");
        replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
        t1 = init.globalState.nextIsolateId++;
        t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
        t4 = new H.RawReceivePortImpl(0, null, false);
        context = new H._IsolateContext(t1, t2, t3, new Isolate(), t4, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
        t3.add$1(0, 0);
        context._addRegistration$2(0, t4);
        init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
        init.globalState.currentContext = context;
        init.globalState.topEventLoop.run$0();
        break;
      case "spawn-worker":
        break;
      case "message":
        if (t1.$index(msg, "port") != null)
          J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
        init.globalState.topEventLoop.run$0();
        break;
      case "close":
        init.globalState.managers.remove$1(0, $.get$IsolateNatives_workerIds().$index(0, sender));
        sender.terminate();
        init.globalState.topEventLoop.run$0();
        break;
      case "log":
        H.IsolateNatives__log(t1.$index(msg, "msg"));
        break;
      case "print":
        if (init.globalState.isWorker === true) {
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "print", "msg", msg], null, null));
          t1.toString;
          self.postMessage(t2);
        } else
          P.print(t1.$index(msg, "msg"));
        break;
      case "error":
        throw H.wrapException(t1.$index(msg, "msg"));
    }
  }, "call$2", "IsolateNatives__processWorkerMessage$closure", 4, 0, null, 1, [], 2, []],
  IsolateNatives__log: function(msg) {
    var trace, t1, t2, exception;
    if (init.globalState.isWorker === true) {
      t1 = init.globalState.mainManager;
      t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "log", "msg", msg], null, null));
      t1.toString;
      self.postMessage(t2);
    } else
      try {
        self.console.log(msg);
      } catch (exception) {
        H.unwrapException(exception);
        trace = new H._StackTrace(exception, null);
        throw H.wrapException(P.Exception_Exception(trace));
      }

  },
  IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
    var context, t1, t2;
    context = init.globalState.currentContext;
    t1 = context.id;
    $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
    $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
    t1 = context.controlPort.get$sendPort();
    t2 = context.pauseCapability;
    J.send$1$x(replyTo, ["spawned", t1, t2, context.terminateCapability]);
    t1 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri, context);
    if (startPaused === true) {
      context.addPause$2(t2, t2);
      init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(context, t1, "start isolate"));
    } else
      t1.call$0();
  },
  _serializeMessage: function(message) {
    var t1;
    if (init.globalState.supportsWorkers === true) {
      t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    } else {
      t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    }
  },
  _deserializeMessage: function(message) {
    if (init.globalState.supportsWorkers === true)
      return new H._JsDeserializer(null).deserialize$1(message);
    else
      return message;
  },
  _MessageTraverser_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  _Deserializer_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  startRootIsolate_closure: {
    "^": "Closure:14;box_0,entry_1",
    call$0: function() {
      this.entry_1.call$1(this.box_0.args_0);
    },
    $isFunction: true
  },
  startRootIsolate_closure0: {
    "^": "Closure:14;box_0,entry_2",
    call$0: function() {
      this.entry_2.call$2(this.box_0.args_0, null);
    },
    $isFunction: true
  },
  _Manager: {
    "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
    _Manager$1: function(entry) {
      var t1, t2, t3;
      t1 = self.window == null;
      t2 = self.Worker;
      t3 = t1 && !!self.postMessage;
      this.isWorker = t3;
      if (!t3)
        t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
      else
        t2 = true;
      this.supportsWorkers = t2;
      this.fromCommandLine = t1 && !t3;
      t2 = H._IsolateEvent;
      t3 = new P.ListQueue(null, 0, 0, 0);
      t3.$builtinTypeInfo = [t2];
      t3.ListQueue$1(null, t2);
      this.topEventLoop = new H._EventLoop(t3, 0);
      this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H._IsolateContext);
      this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, null);
      if (this.isWorker === true) {
        t1 = new H._MainManagerStub();
        this.mainManager = t1;
        self.onmessage = function(f, a) {
          return function(e) {
            f(a, e);
          };
        }(H.IsolateNatives__processWorkerMessage, t1);
        self.dartPrint = self.dartPrint || function(serialize) {
          return function(object) {
            if (self.console && self.console.log) {
              self.console.log(object);
            } else {
              self.postMessage(serialize(object));
            }
          };
        }(H._Manager__serializePrintMessage);
      }
    },
    static: {_Manager__serializePrintMessage: [function(object) {
        return H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "print", "msg", object], null, null));
      }, "call$1", "_Manager__serializePrintMessage$closure", 2, 0, null, 0, []]}
  },
  _IsolateContext: {
    "^": "Object;id>,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,initialized?,isPaused<,delayedEvents<,pauseTokens,doneHandlers,_scheduledControlEvents,_isExecutingEvent,errorsAreFatal,errorPorts",
    addPause$2: function(authentification, resume) {
      if (!this.pauseCapability.$eq(0, authentification))
        return;
      if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
        this.isPaused = true;
      this._updateGlobalState$0();
    },
    removePause$1: function(resume) {
      var t1, t2, $event, t3, t4, t5;
      if (!this.isPaused)
        return;
      t1 = this.pauseTokens;
      t1.remove$1(0, resume);
      if (t1._collection$_length === 0) {
        for (t1 = this.delayedEvents; t2 = t1.length, t2 !== 0;) {
          if (0 >= t2)
            return H.ioore(t1, 0);
          $event = t1.pop();
          t2 = init.globalState.topEventLoop.events;
          t3 = t2._head;
          t4 = t2._table;
          t5 = t4.length;
          t3 = (t3 - 1 & t5 - 1) >>> 0;
          t2._head = t3;
          if (t3 < 0 || t3 >= t5)
            return H.ioore(t4, t3);
          t4[t3] = $event;
          if (t3 === t2._tail)
            t2._grow$0();
          ++t2._modificationCount;
        }
        this.isPaused = false;
      }
      this._updateGlobalState$0();
    },
    addDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null) {
        t1 = [];
        this.doneHandlers = t1;
      }
      if (J.contains$1$asx(t1, responsePort))
        return;
      this.doneHandlers.push(responsePort);
    },
    removeDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null)
        return;
      J.remove$1$ax(t1, responsePort);
    },
    setErrorsFatal$2: function(authentification, errorsAreFatal) {
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      this.errorsAreFatal = errorsAreFatal;
    },
    handlePing$2: function(responsePort, pingType) {
      var t1, t2;
      t1 = J.getInterceptor(pingType);
      if (!t1.$eq(pingType, 0))
        t2 = t1.$eq(pingType, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        J.send$1$x(responsePort, null);
        return;
      }
      t2 = new H._IsolateContext_handlePing_respond(responsePort);
      if (t1.$eq(pingType, 2)) {
        init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(this, t2, "ping"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = new P.ListQueue(null, 0, 0, 0);
        t1.$builtinTypeInfo = [null];
        t1.ListQueue$1(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(0, t2);
    },
    handleKill$2: function(authentification, priority) {
      var t1, t2;
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      t1 = J.getInterceptor(priority);
      if (!t1.$eq(priority, 0))
        t2 = t1.$eq(priority, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        this.kill$0();
        return;
      }
      if (t1.$eq(priority, 2)) {
        t1 = init.globalState.topEventLoop;
        t2 = this.get$kill();
        t1.events._add$1(0, new H._IsolateEvent(this, t2, "kill"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = new P.ListQueue(null, 0, 0, 0);
        t1.$builtinTypeInfo = [null];
        t1.ListQueue$1(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(0, this.get$kill());
    },
    handleUncaughtError$2: function(error, stackTrace) {
      var t1, message, t2;
      t1 = this.errorPorts;
      if (t1._collection$_length === 0) {
        if (this.errorsAreFatal === true && this === init.globalState.rootContext)
          return;
        if (self.console && self.console.error)
          self.console.error(error, stackTrace);
        else {
          P.print(error);
          if (stackTrace != null)
            P.print(stackTrace);
        }
        return;
      }
      message = Array(2);
      message.fixed$length = init;
      message[0] = J.toString$0(error);
      message[1] = stackTrace == null ? null : J.toString$0(stackTrace);
      t2 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null);
      t2.$builtinTypeInfo = [null];
      t2._cell = t1._first;
      for (; t2.moveNext$0();)
        J.send$1$x(t2._collection$_current, message);
    },
    eval$1: function(code) {
      var old, result, e, s, exception, t1;
      old = init.globalState.currentContext;
      init.globalState.currentContext = this;
      $ = this.isolateStatics;
      result = null;
      this._isExecutingEvent = true;
      try {
        result = code.call$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.handleUncaughtError$2(e, s);
        if (this.errorsAreFatal === true) {
          this.kill$0();
          if (this === init.globalState.rootContext)
            throw exception;
        }
      }
 finally {
        this._isExecutingEvent = false;
        init.globalState.currentContext = old;
        if (old != null)
          $ = old.get$isolateStatics();
        if (this._scheduledControlEvents != null)
          for (; t1 = this._scheduledControlEvents, !t1.get$isEmpty(t1);)
            this._scheduledControlEvents.removeFirst$0().call$0();
      }
      return result;
    },
    handleControlMessage$1: function(message) {
      var t1 = J.getInterceptor$asx(message);
      switch (t1.$index(message, 0)) {
        case "pause":
          this.addPause$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "resume":
          this.removePause$1(t1.$index(message, 1));
          break;
        case "add-ondone":
          this.addDoneListener$1(t1.$index(message, 1));
          break;
        case "remove-ondone":
          this.removeDoneListener$1(t1.$index(message, 1));
          break;
        case "set-errors-fatal":
          this.setErrorsFatal$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "ping":
          this.handlePing$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "kill":
          this.handleKill$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "getErrors":
          this.errorPorts.add$1(0, t1.$index(message, 1));
          break;
        case "stopErrors":
          this.errorPorts.remove$1(0, t1.$index(message, 1));
          break;
      }
    },
    lookup$1: function(portId) {
      return this.ports.$index(0, portId);
    },
    _addRegistration$2: function(portId, port) {
      var t1 = this.ports;
      if (t1.containsKey$1(portId))
        throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
      t1.$indexSet(0, portId, port);
    },
    _updateGlobalState$0: function() {
      if (this.ports._collection$_length - this.weakPorts._collection$_length > 0 || this.isPaused || !this.initialized)
        init.globalState.isolates.$indexSet(0, this.id, this);
      else
        this.kill$0();
    },
    kill$0: [function() {
      var t1, t2, t3;
      t1 = this._scheduledControlEvents;
      if (t1 != null)
        t1.clear$0(0);
      t1 = this.ports;
      t2 = t1.get$values(t1);
      t3 = new H.MappedIterator(null, J.get$iterator$ax(t2._iterable), t2._f);
      t3.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)];
      for (; t3.moveNext$0();)
        t3._current.__isolate_helper$_close$0();
      t1.clear$0(0);
      this.weakPorts.clear$0(0);
      init.globalState.isolates.remove$1(0, this.id);
      this.errorPorts.clear$0(0);
      t1 = this.doneHandlers;
      if (t1 != null) {
        t2 = new H.ListIterator(t1, t1.length, 0, null);
        t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
        for (; t2.moveNext$0();)
          J.send$1$x(t2._current, null);
        this.doneHandlers = null;
      }
    }, "call$0", "get$kill", 0, 0, 13],
    $is_IsolateContext: true
  },
  _IsolateContext_handlePing_respond: {
    "^": "Closure:13;responsePort_0",
    call$0: [function() {
      J.send$1$x(this.responsePort_0, null);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _EventLoop: {
    "^": "Object;events,_activeJsAsyncCount",
    dequeue$0: function() {
      var t1 = this.events;
      if (t1._head === t1._tail)
        return;
      return t1.removeFirst$0();
    },
    runIteration$0: function() {
      var $event, t1, t2;
      $event = this.dequeue$0();
      if ($event == null) {
        if (init.globalState.rootContext != null && init.globalState.isolates.containsKey$1(init.globalState.rootContext.id) && init.globalState.fromCommandLine === true && init.globalState.rootContext.ports._collection$_length === 0)
          H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
        t1 = init.globalState;
        if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop._activeJsAsyncCount === 0) {
          t1 = t1.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "close"], null, null));
          t1.toString;
          self.postMessage(t2);
        }
        return false;
      }
      $event.process$0();
      return true;
    },
    _runHelper$0: function() {
      if (self.window != null)
        new H._EventLoop__runHelper_next(this).call$0();
      else
        for (; this.runIteration$0();)
          ;
    },
    run$0: function() {
      var e, trace, exception, t1, t2;
      if (init.globalState.isWorker !== true)
        this._runHelper$0();
      else
        try {
          this._runHelper$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          trace = new H._StackTrace(exception, null);
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], null, null));
          t1.toString;
          self.postMessage(t2);
        }

    }
  },
  _EventLoop__runHelper_next: {
    "^": "Closure:13;this_0",
    call$0: [function() {
      if (!this.this_0.runIteration$0())
        return;
      P.Timer_Timer(C.Duration_0, this);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _IsolateEvent: {
    "^": "Object;isolate,fn,message*",
    process$0: function() {
      var t1 = this.isolate;
      if (t1.get$isPaused() === true) {
        J.add$1$ax(t1.get$delayedEvents(), this);
        return;
      }
      t1.eval$1(this.fn);
    },
    $is_IsolateEvent: true
  },
  _MainManagerStub: {
    "^": "Object;"
  },
  IsolateNatives__processWorkerMessage_closure: {
    "^": "Closure:14;entryPoint_0,args_1,message_2,isSpawnUri_3,startPaused_4,replyTo_5",
    call$0: [function() {
      H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.startPaused_4, this.replyTo_5);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  IsolateNatives__startIsolate_runStartFunction: {
    "^": "Closure:13;topLevel_0,args_1,message_2,isSpawnUri_3,context_4",
    call$0: [function() {
      var t1, t2, t3;
      this.context_4.set$initialized(true);
      if (this.isSpawnUri_3 !== true)
        this.topLevel_0.call$1(this.message_2);
      else {
        t1 = this.topLevel_0;
        t2 = H.getDynamicRuntimeType();
        t3 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
        if (t3)
          t1.call$2(this.args_1, this.message_2);
        else {
          t2 = H.buildFunctionType(t2, [t2])._isTest$1(t1);
          if (t2)
            t1.call$1(this.args_1);
          else
            t1.call$0();
        }
      }
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _BaseSendPort: {
    "^": "Object;",
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort: {
    "^": "_BaseSendPort;_receivePort,_isolateId",
    send$1: function(_, message) {
      var t1, t2, isolate, t3, shouldSerialize;
      t1 = {};
      t2 = this._isolateId;
      isolate = init.globalState.isolates.$index(0, t2);
      if (isolate == null)
        return;
      t3 = this._receivePort;
      if (t3.get$_isClosed() === true)
        return;
      shouldSerialize = init.globalState.currentContext != null && init.globalState.currentContext.id !== t2;
      t1.msg_0 = message;
      if (shouldSerialize)
        t1.msg_0 = H._serializeMessage(message);
      if (J.$eq(isolate.get$controlPort(), t3)) {
        isolate.handleControlMessage$1(t1.msg_0);
        return;
      }
      t2 = init.globalState.topEventLoop;
      t3 = "receive " + H.S(message);
      t2.events._add$1(0, new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(t1, this, shouldSerialize), t3));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
    },
    get$hashCode: function(_) {
      return this._receivePort.get$__isolate_helper$_id();
    },
    $is_NativeJsSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort_send_closure: {
    "^": "Closure:14;box_0,this_1,shouldSerialize_2",
    call$0: [function() {
      var t1, t2;
      t1 = this.this_1._receivePort;
      if (t1.get$_isClosed() !== true) {
        if (this.shouldSerialize_2) {
          t2 = this.box_0;
          t2.msg_0 = H._deserializeMessage(t2.msg_0);
        }
        J.__isolate_helper$_add$1$x(t1, this.box_0.msg_0);
      }
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _WorkerSendPort: {
    "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
    send$1: function(_, message) {
      var workerMessage, manager;
      workerMessage = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "message", "port", this, "msg", message], null, null));
      if (init.globalState.isWorker === true) {
        init.globalState.mainManager.toString;
        self.postMessage(workerMessage);
      } else {
        manager = init.globalState.managers.$index(0, this._workerId);
        if (manager != null)
          manager.postMessage(workerMessage);
      }
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    },
    get$hashCode: function(_) {
      return J.$xor$n(J.$xor$n(J.$shl$n(this._workerId, 16), J.$shl$n(this._isolateId, 8)), this._receivePortId);
    },
    $is_WorkerSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  RawReceivePortImpl: {
    "^": "Object;__isolate_helper$_id<,_handler,_isClosed<",
    _handler$1: function(arg0) {
      return this._handler.call$1(arg0);
    },
    __isolate_helper$_close$0: function() {
      this._isClosed = true;
      this._handler = null;
    },
    close$0: function(_) {
      var t1, t2;
      if (this._isClosed)
        return;
      this._isClosed = true;
      this._handler = null;
      t1 = init.globalState.currentContext;
      t2 = this.__isolate_helper$_id;
      t1.ports.remove$1(0, t2);
      t1.weakPorts.remove$1(0, t2);
      t1._updateGlobalState$0();
    },
    __isolate_helper$_add$1: function(_, dataEvent) {
      if (this._isClosed)
        return;
      this._handler$1(dataEvent);
    },
    get$sendPort: function() {
      return new H._NativeJsSendPort(this, init.globalState.currentContext.id);
    },
    $isRawReceivePortImpl: true,
    static: {"^": "RawReceivePortImpl__nextFreeId"}
  },
  _JsSerializer: {
    "^": "_Serializer;_nextFreeRefId,_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$__isolate_helper$_id()];
      if (!!x.$is_WorkerSendPort)
        return ["sendport", x._workerId, x._isolateId, x._receivePortId];
      throw H.wrapException("Illegal underlying port " + x.toString$0(0));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return ["capability", x.__isolate_helper$_id];
      throw H.wrapException("Capability not serializable: " + x.toString$0(0));
    }
  },
  _JsCopier: {
    "^": "_Copier;_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return new H._NativeJsSendPort(x._receivePort, x._isolateId);
      if (!!x.$is_WorkerSendPort)
        return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
      throw H.wrapException("Illegal underlying port " + x.toString$0(0));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return new H.CapabilityImpl(x.__isolate_helper$_id);
      throw H.wrapException("Capability not serializable: " + x.toString$0(0));
    }
  },
  _JsDeserializer: {
    "^": "_Deserializer;_deserialized",
    deserializeSendPort$1: function(list) {
      var t1, managerId, isolateId, receivePortId, isolate, receivePort;
      t1 = J.getInterceptor$asx(list);
      managerId = t1.$index(list, 1);
      isolateId = t1.$index(list, 2);
      receivePortId = t1.$index(list, 3);
      if (J.$eq(managerId, init.globalState.currentManagerId)) {
        isolate = init.globalState.isolates.$index(0, isolateId);
        if (isolate == null)
          return;
        receivePort = isolate.lookup$1(receivePortId);
        if (receivePort == null)
          return;
        return new H._NativeJsSendPort(receivePort, isolateId);
      } else
        return new H._WorkerSendPort(managerId, receivePortId, isolateId);
    },
    deserializeCapability$1: function(list) {
      return new H.CapabilityImpl(J.$index$asx(list, 1));
    }
  },
  _JsVisitedMap: {
    "^": "Object;tagged",
    $index: function(_, object) {
      return object.__MessageTraverser__attached_info__;
    },
    $indexSet: function(_, object, info) {
      this.tagged.push(object);
      object.__MessageTraverser__attached_info__ = info;
    },
    reset$0: [function(_) {
      this.tagged = [];
    }, "call$0", "get$reset", 0, 0, 13],
    cleanup$0: function() {
      var $length, i, t1;
      for ($length = this.tagged.length, i = 0; i < $length; ++i) {
        t1 = this.tagged;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].__MessageTraverser__attached_info__ = null;
      }
      this.tagged = null;
    }
  },
  _MessageTraverserVisitedMap: {
    "^": "Object;",
    $index: function(_, object) {
      return;
    },
    $indexSet: function(_, object, info) {
    },
    reset$0: [function(_) {
    }, "call$0", "get$reset", 0, 0, 13],
    cleanup$0: function() {
    }
  },
  _MessageTraverser: {
    "^": "Object;",
    traverse$1: function(x) {
      var result;
      if (H._MessageTraverser_isPrimitive(x))
        return this.visitPrimitive$1(x);
      this._visited.reset$0(0);
      result = null;
      try {
        result = this._dispatch$1(x);
      } finally {
        this._visited.cleanup$0();
      }
      return result;
    },
    _dispatch$1: function(x) {
      var t1;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return this.visitPrimitive$1(x);
      t1 = J.getInterceptor(x);
      if (!!t1.$isList)
        return this.visitList$1(x);
      if (!!t1.$isMap)
        return this.visitMap$1(x);
      if (!!t1.$isSendPort)
        return this.visitSendPort$1(x);
      if (!!t1.$isCapability)
        return this.visitCapability$1(x);
      return this.visitObject$1(x);
    },
    visitObject$1: function(x) {
      throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
    }
  },
  _Copier: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copy, t1, len, t2, i, t3;
      copy = this._visited.$index(0, list);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      if (typeof len !== "number")
        return H.iae(len);
      copy = Array(len);
      copy.fixed$length = init;
      this._visited.$indexSet(0, list, copy);
      for (t2 = copy.length, i = 0; i < len; ++i) {
        t3 = this._dispatch$1(t1.$index(list, i));
        if (i >= t2)
          return H.ioore(copy, i);
        copy[i] = t3;
      }
      return copy;
    },
    visitMap$1: function(map) {
      var t1, copy;
      t1 = {};
      copy = this._visited.$index(0, map);
      t1.copy_0 = copy;
      if (copy != null)
        return copy;
      copy = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1.copy_0 = copy;
      this._visited.$indexSet(0, map, copy);
      map.forEach$1(0, new H._Copier_visitMap_closure(t1, this));
      return t1.copy_0;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Copier_visitMap_closure: {
    "^": "Closure:94;box_0,this_1",
    call$2: [function(key, val) {
      var t1 = this.this_1;
      J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
    }, "call$2", null, 4, 0, null, 92, [], 93, [], "call"],
    $isFunction: true
  },
  _Serializer: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copyId, t1;
      copyId = this._visited.$index(0, list);
      if (copyId != null)
        return ["ref", copyId];
      t1 = this._nextFreeRefId++;
      this._visited.$indexSet(0, list, t1);
      return ["list", t1, this._serializeList$1(list)];
    },
    visitMap$1: function(map) {
      var copyId, t1;
      copyId = this._visited.$index(0, map);
      if (copyId != null)
        return ["ref", copyId];
      t1 = this._nextFreeRefId++;
      this._visited.$indexSet(0, map, t1);
      return ["map", t1, this._serializeList$1(J.toList$0$ax(map.get$keys())), this._serializeList$1(J.toList$0$ax(map.get$values(map)))];
    },
    _serializeList$1: function(list) {
      var t1, len, result, i, t2;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      result = [];
      C.JSArray_methods.set$length(result, len);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i) {
        t2 = this._dispatch$1(t1.$index(list, i));
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t2;
      }
      return result;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Deserializer: {
    "^": "Object;",
    deserialize$1: function(x) {
      if (H._Deserializer_isPrimitive(x))
        return x;
      this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
      return this._deserializeHelper$1(x);
    },
    _deserializeHelper$1: function(x) {
      var t1, id;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      t1 = J.getInterceptor$asx(x);
      switch (t1.$index(x, 0)) {
        case "ref":
          id = t1.$index(x, 1);
          return this._deserialized.$index(0, id);
        case "list":
          return this._deserializeList$1(x);
        case "map":
          return this._deserializeMap$1(x);
        case "sendport":
          return this.deserializeSendPort$1(x);
        case "capability":
          return this.deserializeCapability$1(x);
        default:
          return this.deserializeObject$1(x);
      }
    },
    _deserializeList$1: function(x) {
      var t1, id, dartList, len, i;
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      dartList = t1.$index(x, 2);
      this._deserialized.$indexSet(0, id, dartList);
      t1 = J.getInterceptor$asx(dartList);
      len = t1.get$length(dartList);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i)
        t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
      return dartList;
    },
    _deserializeMap$1: function(x) {
      var result, t1, id, keys, values, len, t2, i;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      this._deserialized.$indexSet(0, id, result);
      keys = t1.$index(x, 2);
      values = t1.$index(x, 3);
      t1 = J.getInterceptor$asx(keys);
      len = t1.get$length(keys);
      if (typeof len !== "number")
        return H.iae(len);
      t2 = J.getInterceptor$asx(values);
      i = 0;
      for (; i < len; ++i)
        result.$indexSet(0, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
      return result;
    },
    deserializeObject$1: function(x) {
      throw H.wrapException("Unexpected serialized object");
    }
  },
  TimerImpl: {
    "^": "Object;_once,_inEventLoop,_handle",
    cancel$0: function() {
      if (self.setTimeout != null) {
        if (this._inEventLoop)
          throw H.wrapException(P.UnsupportedError$("Timer in event loop cannot be canceled."));
        if (this._handle == null)
          return;
        H.leaveJsAsync();
        var t1 = this._handle;
        if (this._once)
          self.clearTimeout(t1);
        else
          self.clearInterval(t1);
        this._handle = null;
      } else
        throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
    },
    TimerImpl$periodic$2: function(milliseconds, callback) {
      if (self.setTimeout != null) {
        ++init.globalState.topEventLoop._activeJsAsyncCount;
        this._handle = self.setInterval(H.convertDartClosureToJS(new H.TimerImpl$periodic_closure(this, callback), 0), milliseconds);
      } else
        throw H.wrapException(P.UnsupportedError$("Periodic timer."));
    },
    TimerImpl$2: function(milliseconds, callback) {
      var t1, t2;
      if (J.$eq(milliseconds, 0))
        t1 = self.setTimeout == null || init.globalState.isWorker === true;
      else
        t1 = false;
      if (t1) {
        this._handle = 1;
        t1 = init.globalState.topEventLoop;
        t2 = init.globalState.currentContext;
        t1.events._add$1(0, new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
        this._inEventLoop = true;
      } else if (self.setTimeout != null) {
        ++init.globalState.topEventLoop._activeJsAsyncCount;
        this._handle = self.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
      } else
        throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
    },
    static: {TimerImpl$: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(true, false, null);
        t1.TimerImpl$2(milliseconds, callback);
        return t1;
      }, TimerImpl$periodic: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(false, false, null);
        t1.TimerImpl$periodic$2(milliseconds, callback);
        return t1;
      }}
  },
  TimerImpl_internalCallback: {
    "^": "Closure:13;this_0,callback_1",
    call$0: [function() {
      this.this_0._handle = null;
      this.callback_1.call$0();
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  TimerImpl_internalCallback0: {
    "^": "Closure:13;this_2,callback_3",
    call$0: [function() {
      this.this_2._handle = null;
      H.leaveJsAsync();
      this.callback_3.call$0();
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  TimerImpl$periodic_closure: {
    "^": "Closure:14;this_0,callback_1",
    call$0: [function() {
      this.callback_1.call$1(this.this_0);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  CapabilityImpl: {
    "^": "Object;__isolate_helper$_id<",
    get$hashCode: function(_) {
      var hash, t1;
      hash = this.__isolate_helper$_id;
      t1 = J.getInterceptor$n(hash);
      hash = J.$xor$n(t1.$shr(hash, 0), t1.$tdiv(hash, 4294967296));
      t1 = J.getInterceptor$i(hash);
      hash = J.$and$n(J.$add$ns(t1.$not(hash), t1.$shl(hash, 15)), 4294967295);
      t1 = J.getInterceptor$n(hash);
      hash = J.$and$n(J.$mul$ns(t1.$xor(hash, t1.$shr(hash, 12)), 5), 4294967295);
      t1 = J.getInterceptor$n(hash);
      hash = J.$and$n(J.$mul$ns(t1.$xor(hash, t1.$shr(hash, 4)), 2057), 4294967295);
      t1 = J.getInterceptor$n(hash);
      return t1.$xor(hash, t1.$shr(hash, 16));
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!!J.getInterceptor(other).$isCapabilityImpl) {
        t1 = this.__isolate_helper$_id;
        t2 = other.__isolate_helper$_id;
        return t1 == null ? t2 == null : t1 === t2;
      }
      return false;
    },
    $isCapabilityImpl: true,
    $isCapability: true
  }
}],
["_js_helper", "dart:_js_helper", , H, {
  "^": "",
  isJsIndexable: function(object, record) {
    var result;
    if (record != null) {
      result = record.x;
      if (result != null)
        return result;
    }
    return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
  },
  S: function(value) {
    var res;
    if (typeof value === "string")
      return value;
    if (typeof value === "number") {
      if (value !== 0)
        return "" + value;
    } else if (true === value)
      return "true";
    else if (false === value)
      return "false";
    else if (value == null)
      return "null";
    res = J.toString$0(value);
    if (typeof res !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return res;
  },
  createInvocationMirror: function($name, internalName, kind, $arguments, argumentNames) {
    return new H.JSInvocationMirror($name, internalName, kind, $arguments, argumentNames, null);
  },
  throwInvalidReflectionError: function(memberName) {
    throw H.wrapException(P.UnsupportedError$("Can't use '" + H.S(memberName) + "' in reflection because it is not included in a @MirrorsUsed annotation."));
  },
  Primitives_objectHashCode: function(object) {
    var hash = object.$identityHash;
    if (hash == null) {
      hash = Math.random() * 0x3fffffff | 0;
      object.$identityHash = hash;
    }
    return hash;
  },
  Primitives__throwFormatException: [function(string) {
    throw H.wrapException(P.FormatException$(string, null, null));
  }, "call$1", "Primitives__throwFormatException$closure", 2, 0, 3],
  Primitives_parseInt: function(source, radix, handleError) {
    var match, t1, maxCharCode, digitsPart, i, t2;
    if (handleError == null)
      handleError = H.Primitives__throwFormatException$closure();
    if (typeof source !== "string")
      H.throwExpression(P.ArgumentError$(source));
    match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
    if (radix == null) {
      if (match != null) {
        t1 = match.length;
        if (2 >= t1)
          return H.ioore(match, 2);
        if (match[2] != null)
          return parseInt(source, 16);
        if (3 >= t1)
          return H.ioore(match, 3);
        if (match[3] != null)
          return parseInt(source, 10);
        return handleError.call$1(source);
      }
      radix = 10;
    } else {
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$("Radix " + H.S(radix) + " not in range 2..36"));
      if (match != null) {
        if (radix === 10) {
          if (3 >= match.length)
            return H.ioore(match, 3);
          t1 = match[3] != null;
        } else
          t1 = false;
        if (t1)
          return parseInt(source, 10);
        if (!(radix < 10)) {
          if (3 >= match.length)
            return H.ioore(match, 3);
          t1 = match[3] == null;
        } else
          t1 = true;
        if (t1) {
          maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
          if (1 >= match.length)
            return H.ioore(match, 1);
          digitsPart = match[1];
          t1 = J.getInterceptor$asx(digitsPart);
          i = 0;
          while (true) {
            t2 = t1.get$length(digitsPart);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(i < t2))
              break;
            J.$or$n(t1.codeUnitAt$1(digitsPart, 0), 32);
            if (J.$gt$n(t1.codeUnitAt$1(digitsPart, i), maxCharCode) === true)
              return handleError.call$1(source);
            ++i;
          }
        }
      }
    }
    if (match == null)
      return handleError.call$1(source);
    return parseInt(source, radix);
  },
  Primitives_parseDouble: function(source, handleError) {
    var result, trimmed, t1;
    if (typeof source !== "string")
      H.throwExpression(P.ArgumentError$(source));
    if (handleError == null)
      handleError = H.Primitives__throwFormatException$closure();
    if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
      return handleError.call$1(source);
    result = parseFloat(source);
    if (isNaN(result)) {
      trimmed = J.trim$0$s(source);
      t1 = J.getInterceptor(trimmed);
      if (t1.$eq(trimmed, "NaN") || t1.$eq(trimmed, "+NaN") || t1.$eq(trimmed, "-NaN"))
        return result;
      return handleError.call$1(source);
    }
    return result;
  },
  Primitives_objectTypeName: function(object) {
    var $name, decompiled;
    $name = C.JS_CONST_8ZY(J.getInterceptor(object));
    if ($name === "Object") {
      decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
      if (typeof decompiled === "string")
        $name = /^\w+$/.test(decompiled) ? decompiled : $name;
    }
    if ($name.length > 1 && C.JSString_methods.codeUnitAt$1($name, 0) === 36)
      $name = C.JSString_methods.substring$1($name, 1);
    return ($name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null)).replace(/[^<,> ]+/g, function(m) {
      return init.mangledGlobalNames[m] || m;
    });
  },
  Primitives_objectToString: function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Primitives_currentUri: function() {
    if (!!self.location)
      return self.location.href;
    return;
  },
  Primitives__fromCharCodeApply: function(array) {
    var end, t1, result, i, subarray, t2;
    end = array.length;
    for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
      if (t1)
        subarray = array;
      else {
        t2 = i + 500;
        t2 = t2 < end ? t2 : end;
        subarray = array.slice(i, t2);
      }
      result += String.fromCharCode.apply(null, subarray);
    }
    return result;
  },
  Primitives_stringFromCodePoints: function(codePoints) {
    var a, t1, i;
    a = [];
    a.$builtinTypeInfo = [P.$int];
    t1 = new H.ListIterator(codePoints, codePoints.length, 0, null);
    t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(codePoints, 0)];
    for (; t1.moveNext$0();) {
      i = t1._current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(P.ArgumentError$(i));
      if (i <= 65535)
        a.push(i);
      else if (i <= 1114111) {
        a.push(55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
        a.push(56320 + (i & 1023));
      } else
        throw H.wrapException(P.ArgumentError$(i));
    }
    return H.Primitives__fromCharCodeApply(a);
  },
  Primitives_stringFromCharCodes: function(charCodes) {
    var t1, i;
    t1 = new H.ListIterator(charCodes, charCodes.length, 0, null);
    t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(charCodes, 0)];
    for (; t1.moveNext$0();) {
      i = t1._current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(P.ArgumentError$(i));
      if (i < 0)
        throw H.wrapException(P.ArgumentError$(i));
      if (i > 65535)
        return H.Primitives_stringFromCodePoints(charCodes);
    }
    return H.Primitives__fromCharCodeApply(charCodes);
  },
  Primitives_stringFromCharCode: function(charCode) {
    var bits;
    if (typeof charCode !== "number")
      return H.iae(charCode);
    if (0 <= charCode) {
      if (charCode <= 65535)
        return String.fromCharCode(charCode);
      if (charCode <= 1114111) {
        bits = charCode - 65536;
        return String.fromCharCode((55296 | C.JSNumber_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
      }
    }
    throw H.wrapException(P.RangeError$range(charCode, 0, 1114111));
  },
  Primitives_valueFromDecomposedDate: function(years, month, day, hours, minutes, seconds, milliseconds, isUtc) {
    var jsMonth, value, t1, date;
    if (typeof years !== "number" || Math.floor(years) !== years)
      H.throwExpression(P.ArgumentError$(years));
    if (typeof month !== "number" || Math.floor(month) !== month)
      H.throwExpression(P.ArgumentError$(month));
    if (typeof day !== "number" || Math.floor(day) !== day)
      H.throwExpression(P.ArgumentError$(day));
    if (typeof hours !== "number" || Math.floor(hours) !== hours)
      H.throwExpression(P.ArgumentError$(hours));
    if (typeof minutes !== "number" || Math.floor(minutes) !== minutes)
      H.throwExpression(P.ArgumentError$(minutes));
    if (typeof seconds !== "number" || Math.floor(seconds) !== seconds)
      H.throwExpression(P.ArgumentError$(seconds));
    if (typeof milliseconds !== "number" || Math.floor(milliseconds) !== milliseconds)
      H.throwExpression(P.ArgumentError$(milliseconds));
    jsMonth = J.$sub$n(month, 1);
    value = isUtc ? Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds) : new Date(years, jsMonth, day, hours, minutes, seconds, milliseconds).valueOf();
    if (isNaN(value) || value < -8640000000000000 || value > 8640000000000000)
      return;
    t1 = J.getInterceptor$n(years);
    if (t1.$le(years, 0) === true || t1.$lt(years, 100) === true) {
      date = new Date(value);
      if (isUtc)
        date.setUTCFullYear(years);
      else
        date.setFullYear(years);
      return date.valueOf();
    }
    return value;
  },
  Primitives_lazyAsJsDate: function(receiver) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    return receiver.date;
  },
  Primitives_getProperty: function(object, key) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    return object[key];
  },
  Primitives_setProperty: function(object, key, value) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    object[key] = value;
  },
  Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
    var t1, $arguments, namedArgumentList, t2;
    t1 = {};
    t1.argumentCount_0 = 0;
    $arguments = [];
    namedArgumentList = [];
    if (positionalArguments != null) {
      t2 = J.get$length$asx(positionalArguments);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1.argumentCount_0 = 0 + t2;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
    }
    t1.names_1 = "";
    if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
      namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, $arguments, namedArgumentList));
    return J.noSuchMethod$1($function, new H.JSInvocationMirror(C.Symbol_call, "call$" + H.S(t1.argumentCount_0) + t1.names_1, 0, $arguments, namedArgumentList, null));
  },
  Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
    var t1, jsFunction, info, t2, defaultArguments, t3, i, index, $arguments, argumentCount;
    t1 = {};
    if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments)) {
      jsFunction = J.getInterceptor($function)["call*"];
      if (jsFunction == null)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      info = H.ReflectionInfo_ReflectionInfo(jsFunction);
      if (info == null || !info.areOptionalParametersNamed)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      positionalArguments = positionalArguments != null ? P.List_List$from(positionalArguments, true, null) : [];
      t2 = info.requiredParameterCount;
      if (t2 !== positionalArguments.length)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      defaultArguments = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t3 = info.optionalParameterCount, i = 0; i < t3; ++i) {
        index = i + t2;
        defaultArguments.$indexSet(0, info.parameterNameInOrder$1(index), init.metadata[info.defaultValueInOrder$1(index)]);
      }
      t1.bad_0 = false;
      namedArguments.forEach$1(0, new H.Primitives_applyFunction_closure(t1, defaultArguments));
      if (t1.bad_0)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      C.JSArray_methods.addAll$1(positionalArguments, defaultArguments.get$values(defaultArguments));
      return jsFunction.apply($function, positionalArguments);
    }
    $arguments = [];
    if (positionalArguments != null) {
      t1 = J.get$length$asx(positionalArguments);
      if (typeof t1 !== "number")
        return H.iae(t1);
      argumentCount = 0 + t1;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
    } else
      argumentCount = 0;
    jsFunction = $function["call$" + H.S(argumentCount)];
    if (jsFunction == null)
      return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
    return jsFunction.apply($function, $arguments);
  },
  JsCache_allocate: function() {
    var result = Object.create(null);
    result.x = 0;
    delete result.x;
    return result;
  },
  iae: function(argument) {
    throw H.wrapException(P.ArgumentError$(argument));
  },
  ioore: function(receiver, index) {
    if (receiver == null)
      J.get$length$asx(receiver);
    if (typeof index !== "number" || Math.floor(index) !== index)
      H.iae(index);
    throw H.wrapException(P.RangeError$value(index));
  },
  wrapException: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    return wrapper;
  },
  toStringWrapper: [function() {
    return J.toString$0(this.dartException);
  }, "call$0", "toStringWrapper$closure", 0, 0, null],
  throwExpression: function(ex) {
    throw H.wrapException(ex);
  },
  unwrapException: function(ex) {
    var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
    t1 = new H.unwrapException_saveStackTrace(ex);
    if (ex == null)
      return;
    if (typeof ex !== "object")
      return ex;
    if ("dartException" in ex)
      return t1.call$1(ex.dartException);
    else if (!("message" in ex))
      return ex;
    message = ex.message;
    if ("number" in ex && typeof ex.number == "number") {
      number = ex.number;
      ieErrorCode = number & 65535;
      if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
        switch (ieErrorCode) {
          case 438:
            return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          case 445:
          case 5007:
            t2 = H.S(message) + " (Error " + ieErrorCode + ")";
            return t1.call$1(new H.NullError(t2, null));
        }
    }
    if (ex instanceof TypeError) {
      t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
      t3 = $.get$TypeErrorDecoder_notClosurePattern();
      t4 = $.get$TypeErrorDecoder_nullCallPattern();
      nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
      t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
      t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
      t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
      $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
      t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
      t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
      match = t2.matchTypeError$1(message);
      if (match != null)
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      else {
        match = t3.matchTypeError$1(message);
        if (match != null) {
          match.method = "call";
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        } else {
          match = t4.matchTypeError$1(message);
          if (match == null) {
            match = nullLiteralCall.matchTypeError$1(message);
            if (match == null) {
              match = t5.matchTypeError$1(message);
              if (match == null) {
                match = t6.matchTypeError$1(message);
                if (match == null) {
                  match = t7.matchTypeError$1(message);
                  if (match == null) {
                    match = nullLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                      match = t8.matchTypeError$1(message);
                      if (match == null) {
                        match = t9.matchTypeError$1(message);
                        t2 = match != null;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
          if (t2) {
            t2 = match == null ? null : match.method;
            return t1.call$1(new H.NullError(message, t2));
          }
        }
      }
      t2 = typeof message === "string" ? message : "";
      return t1.call$1(new H.UnknownJsTypeError(t2));
    }
    if (ex instanceof RangeError) {
      if (typeof message === "string" && message.indexOf("call stack") !== -1)
        return new P.StackOverflowError();
      return t1.call$1(new P.ArgumentError(null));
    }
    if (typeof InternalError == "function" && ex instanceof InternalError)
      if (typeof message === "string" && message === "too much recursion")
        return new P.StackOverflowError();
    return ex;
  },
  objectHashCode: function(object) {
    if (object == null || typeof object != 'object')
      return J.get$hashCode$(object);
    else
      return H.Primitives_objectHashCode(object);
  },
  fillLiteralMap: function(keyValuePairs, result) {
    var $length, index, index0, index1;
    $length = keyValuePairs.length;
    for (index = 0; index < $length; index = index1) {
      index0 = index + 1;
      index1 = index0 + 1;
      result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
    }
    return result;
  },
  invokeClosure: [function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
    var t1 = J.getInterceptor(numberOfArguments);
    if (t1.$eq(numberOfArguments, 0))
      return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
    else if (t1.$eq(numberOfArguments, 1))
      return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
    else if (t1.$eq(numberOfArguments, 2))
      return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
    else if (t1.$eq(numberOfArguments, 3))
      return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
    else if (t1.$eq(numberOfArguments, 4))
      return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
    else
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
  }, "call$7", "invokeClosure$closure", 14, 0, null, 4, [], 5, [], 6, [], 7, [], 8, [], 9, [], 10, []],
  convertDartClosureToJS: function(closure, arity) {
    var $function;
    if (closure == null)
      return;
    $function = closure.$identity;
    if (!!$function)
      return $function;
    $function = function(closure, arity, context, invoke) {
      return function(a1, a2, a3, a4) {
        return invoke(closure, context, arity, a1, a2, a3, a4);
      };
    }(closure, arity, init.globalState.currentContext, H.invokeClosure);
    closure.$identity = $function;
    return $function;
  },
  Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
    var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
    $function = functions[0];
    $function.$stubName;
    callName = $function.$callName;
    $function.$reflectionInfo = reflectionInfo;
    functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
    $prototype = isStatic ? Object.create(new H.TearOffClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
    $prototype.$initialize = $prototype.constructor;
    if (isStatic)
      $constructor = function() {
        this.$initialize();
      };
    else if (typeof dart_precompiled == "function") {
      t1 = function(a, b, c, d) {
        this.$initialize(a, b, c, d);
      };
      $constructor = t1;
    } else {
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      t1 = new Function("a", "b", "c", "d", "this.$initialize(a,b,c,d);" + t1);
      $constructor = t1;
    }
    $prototype.constructor = $constructor;
    $constructor.prototype = $prototype;
    t1 = !isStatic;
    if (t1) {
      isIntercepted = jsArguments.length == 1 && true;
      trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
      trampoline.$reflectionInfo = reflectionInfo;
    } else {
      $prototype.$name = propertyName;
      trampoline = $function;
      isIntercepted = false;
    }
    if (typeof functionType == "number")
      signatureFunction = function(s) {
        return function() {
          return init.metadata[s];
        };
      }(functionType);
    else if (t1 && typeof functionType == "function") {
      getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
      signatureFunction = function(f, r) {
        return function() {
          return f.apply({$receiver: r(this)}, arguments);
        };
      }(functionType, getReceiver);
    } else
      throw H.wrapException("Error in reflectionInfo.");
    $prototype.$signature = signatureFunction;
    $prototype[callName] = trampoline;
    for (t1 = functions.length, i = 1; i < t1; ++i) {
      stub = functions[i];
      stubCallName = stub.$callName;
      if (stubCallName != null) {
        t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
        $prototype[stubCallName] = t2;
      }
    }
    $prototype["call*"] = trampoline;
    return $constructor;
  },
  Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
    var getSelf = H.BoundClosure_selfOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        return function(n, S) {
          return function() {
            return S(this)[n]();
          };
        }(stubName, getSelf);
      case 1:
        return function(n, S) {
          return function(a) {
            return S(this)[n](a);
          };
        }(stubName, getSelf);
      case 2:
        return function(n, S) {
          return function(a, b) {
            return S(this)[n](a, b);
          };
        }(stubName, getSelf);
      case 3:
        return function(n, S) {
          return function(a, b, c) {
            return S(this)[n](a, b, c);
          };
        }(stubName, getSelf);
      case 4:
        return function(n, S) {
          return function(a, b, c, d) {
            return S(this)[n](a, b, c, d);
          };
        }(stubName, getSelf);
      case 5:
        return function(n, S) {
          return function(a, b, c, d, e) {
            return S(this)[n](a, b, c, d, e);
          };
        }(stubName, getSelf);
      default:
        return function(f, s) {
          return function() {
            return f.apply(s(this), arguments);
          };
        }($function, getSelf);
    }
  },
  Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
    var stubName, arity, lookedUpFunction, t1, t2, $arguments;
    if (isIntercepted)
      return H.Closure_forwardInterceptedCallTo(receiver, $function);
    stubName = $function.$stubName;
    arity = $function.length;
    lookedUpFunction = receiver[stubName];
    t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (typeof dart_precompiled == "function" || !t1 || arity >= 27)
      return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
    if (arity === 0) {
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "();";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
    t1 = "return function(" + $arguments + "){return this.";
    t2 = $.BoundClosure_selfFieldNameCache;
    if (t2 == null) {
      t2 = H.BoundClosure_computeFieldNamed("self");
      $.BoundClosure_selfFieldNameCache = t2;
    }
    t2 = t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");";
    t1 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t1, 1);
    return new Function(t2 + H.S(t1) + "}")();
  },
  Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
    var getSelf, getReceiver;
    getSelf = H.BoundClosure_selfOf;
    getReceiver = H.BoundClosure_receiverOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
      case 1:
        return function(n, s, r) {
          return function() {
            return s(this)[n](r(this));
          };
        }($name, getSelf, getReceiver);
      case 2:
        return function(n, s, r) {
          return function(a) {
            return s(this)[n](r(this), a);
          };
        }($name, getSelf, getReceiver);
      case 3:
        return function(n, s, r) {
          return function(a, b) {
            return s(this)[n](r(this), a, b);
          };
        }($name, getSelf, getReceiver);
      case 4:
        return function(n, s, r) {
          return function(a, b, c) {
            return s(this)[n](r(this), a, b, c);
          };
        }($name, getSelf, getReceiver);
      case 5:
        return function(n, s, r) {
          return function(a, b, c, d) {
            return s(this)[n](r(this), a, b, c, d);
          };
        }($name, getSelf, getReceiver);
      case 6:
        return function(n, s, r) {
          return function(a, b, c, d, e) {
            return s(this)[n](r(this), a, b, c, d, e);
          };
        }($name, getSelf, getReceiver);
      default:
        return function(f, s, r, a) {
          return function() {
            a = [r(this)];
            Array.prototype.push.apply(a, arguments);
            return f.apply(s(this), a);
          };
        }($function, getSelf, getReceiver);
    }
  },
  Closure_forwardInterceptedCallTo: function(receiver, $function) {
    var selfField, t1, stubName, arity, isCsp, lookedUpFunction, t2, $arguments;
    selfField = H.BoundClosure_selfFieldName();
    t1 = $.BoundClosure_receiverFieldNameCache;
    if (t1 == null) {
      t1 = H.BoundClosure_computeFieldNamed("receiver");
      $.BoundClosure_receiverFieldNameCache = t1;
    }
    stubName = $function.$stubName;
    arity = $function.length;
    isCsp = typeof dart_precompiled == "function";
    lookedUpFunction = receiver[stubName];
    t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (isCsp || !t2 || arity >= 28)
      return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
    if (arity === 1) {
      t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
    t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
    t2 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t2, 1);
    return new Function(t1 + H.S(t2) + "}")();
  },
  closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
    functions.fixed$length = init;
    reflectionInfo.fixed$length = init;
    return H.Closure_fromTearOff(receiver, functions, reflectionInfo, !!isStatic, jsArguments, $name);
  },
  intTypeCast: function(value) {
    if (typeof value === "number" && Math.floor(value) === value || value == null)
      return value;
    throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), "int"));
  },
  propertyTypeCastError: function(value, property) {
    var t1 = J.getInterceptor$asx(property);
    throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
  },
  interceptedTypeCast: function(value, property) {
    var t1;
    if (value != null)
      t1 = typeof value === "object" && J.getInterceptor(value)[property];
    else
      t1 = true;
    if (t1)
      return value;
    H.propertyTypeCastError(value, property);
  },
  throwCyclicInit: function(staticName) {
    throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
  },
  buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
    return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
  },
  buildInterfaceType: function(rti, typeArguments) {
    var $name = rti.name;
    if (typeArguments == null || typeArguments.length === 0)
      return new H.RuntimeTypePlain($name);
    return new H.RuntimeTypeGeneric($name, typeArguments, null);
  },
  getDynamicRuntimeType: function() {
    return C.C_DynamicRuntimeType;
  },
  random64: function() {
    return (Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296;
  },
  createRuntimeType: function($name) {
    return new H.TypeImpl($name, null);
  },
  setRuntimeTypeInfo: function(target, typeInfo) {
    if (target != null)
      target.$builtinTypeInfo = typeInfo;
    return target;
  },
  getRuntimeTypeInfo: function(target) {
    if (target == null)
      return;
    return target.$builtinTypeInfo;
  },
  getRuntimeTypeArguments: function(target, substitutionName) {
    return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
  },
  getRuntimeTypeArgument: function(target, substitutionName, index) {
    var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
    return $arguments == null ? null : $arguments[index];
  },
  getTypeArgumentByIndex: function(target, index) {
    var rti = H.getRuntimeTypeInfo(target);
    return rti == null ? null : rti[index];
  },
  runtimeTypeToString: function(type, onTypeVariable) {
    if (type == null)
      return "dynamic";
    else if (typeof type === "object" && type !== null && type.constructor === Array)
      return type[0].builtin$cls + H.joinArguments(type, 1, onTypeVariable);
    else if (typeof type == "function")
      return type.builtin$cls;
    else if (typeof type === "number" && Math.floor(type) === type)
      if (onTypeVariable == null)
        return C.JSInt_methods.toString$0(type);
      else
        return onTypeVariable.call$1(type);
    else
      return;
  },
  joinArguments: function(types, startIndex, onTypeVariable) {
    var buffer, index, firstArgument, allDynamic, argument, str;
    if (types == null)
      return "";
    buffer = P.StringBuffer$("");
    for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
      if (firstArgument)
        firstArgument = false;
      else
        buffer._contents += ", ";
      argument = types[index];
      if (argument != null)
        allDynamic = false;
      str = H.runtimeTypeToString(argument, onTypeVariable);
      buffer._contents += typeof str === "string" ? str : H.S(str);
    }
    return allDynamic ? "" : "<" + H.S(buffer) + ">";
  },
  getRuntimeTypeString: function(object) {
    var className = J.getInterceptor(object).constructor.builtin$cls;
    if (object == null)
      return className;
    return className + H.joinArguments(object.$builtinTypeInfo, 0, null);
  },
  substitute: function(substitution, $arguments) {
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function") {
      substitution = H.invokeOn(substitution, null, $arguments);
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = H.invokeOn(substitution, null, $arguments);
    }
    return $arguments;
  },
  checkSubtype: function(object, isField, checks, asField) {
    var $arguments, interceptor;
    if (object == null)
      return false;
    $arguments = H.getRuntimeTypeInfo(object);
    interceptor = J.getInterceptor(object);
    if (interceptor[isField] == null)
      return false;
    return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
  },
  areSubtypes: function(s, t) {
    var len, i;
    if (s == null || t == null)
      return true;
    len = s.length;
    for (i = 0; i < len; ++i)
      if (!H.isSubtype(s[i], t[i]))
        return false;
    return true;
  },
  computeSignature: function(signature, context, contextName) {
    return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
  },
  checkSubtypeOfRuntimeType: function(o, t) {
    var rti, type;
    if (o == null)
      return t == null || t.builtin$cls === "Object" || t.builtin$cls === "Null";
    if (t == null)
      return true;
    rti = H.getRuntimeTypeInfo(o);
    o = J.getInterceptor(o);
    if (rti != null) {
      type = rti.slice();
      type.splice(0, 0, o);
    } else
      type = o;
    return H.isSubtype(type, t);
  },
  isSubtype: function(s, t) {
    var targetSignatureFunction, t1, typeOfS, t2, typeOfT, $name, substitution;
    if (s === t)
      return true;
    if (s == null || t == null)
      return true;
    if ("func" in t) {
      if (!("func" in s)) {
        if ("$is_" + H.S(t.func) in s)
          return true;
        targetSignatureFunction = s.$signature;
        if (targetSignatureFunction == null)
          return false;
        s = targetSignatureFunction.apply(s, null);
      }
      return H.isFunctionSubtype(s, t);
    }
    if (t.builtin$cls === "Function" && "func" in s)
      return true;
    t1 = typeof s === "object" && s !== null && s.constructor === Array;
    typeOfS = t1 ? s[0] : s;
    t2 = typeof t === "object" && t !== null && t.constructor === Array;
    typeOfT = t2 ? t[0] : t;
    $name = H.runtimeTypeToString(typeOfT, null);
    if (typeOfT !== typeOfS) {
      if (!("$is" + H.S($name) in typeOfS))
        return false;
      substitution = typeOfS["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
    } else
      substitution = null;
    if (!t1 && substitution == null || !t2)
      return true;
    t1 = t1 ? s.slice(1) : null;
    t2 = t2 ? t.slice(1) : null;
    return H.areSubtypes(H.substitute(substitution, t1), t2);
  },
  areAssignable: function(s, t, allowShorter) {
    var sLength, tLength, i, t1, t2;
    if (t == null && s == null)
      return true;
    if (t == null)
      return allowShorter;
    if (s == null)
      return false;
    sLength = s.length;
    tLength = t.length;
    if (allowShorter) {
      if (sLength < tLength)
        return false;
    } else if (sLength !== tLength)
      return false;
    for (i = 0; i < tLength; ++i) {
      t1 = s[i];
      t2 = t[i];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    return true;
  },
  areAssignableMaps: function(s, t) {
    var t1, names, i, $name, tType, sType;
    if (t == null)
      return true;
    if (s == null)
      return false;
    t1 = Object.getOwnPropertyNames(t);
    t1.fixed$length = init;
    names = t1;
    for (t1 = names.length, i = 0; i < t1; ++i) {
      $name = names[i];
      if (!Object.hasOwnProperty.call(s, $name))
        return false;
      tType = t[$name];
      sType = s[$name];
      if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
        return false;
    }
    return true;
  },
  isFunctionSubtype: function(s, t) {
    var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
    if (!("func" in s))
      return false;
    if ("void" in s) {
      if (!("void" in t) && "ret" in t)
        return false;
    } else if (!("void" in t)) {
      sReturnType = s.ret;
      tReturnType = t.ret;
      if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
        return false;
    }
    sParameterTypes = s.args;
    tParameterTypes = t.args;
    sOptionalParameterTypes = s.opt;
    tOptionalParameterTypes = t.opt;
    sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
    tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
    sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
    tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
    if (sParametersLen > tParametersLen)
      return false;
    if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
      return false;
    if (sParametersLen === tParametersLen) {
      if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
        return false;
      if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
        return false;
    } else {
      for (pos = 0; pos < sParametersLen; ++pos) {
        t1 = sParameterTypes[pos];
        t2 = tParameterTypes[pos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tOptionalParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
    }
    return H.areAssignableMaps(s.named, t.named);
  },
  invokeOn: function($function, receiver, $arguments) {
    return $function.apply(receiver, $arguments);
  },
  toStringForNativeObject: function(obj) {
    var t1 = $.getTagFunction;
    return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
  },
  hashCodeForNativeObject: function(object) {
    return H.Primitives_objectHashCode(object);
  },
  defineProperty: function(obj, property, value) {
    Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
  },
  lookupAndCacheInterceptor: function(obj) {
    var tag, record, interceptor, interceptorClass, mark, t1;
    tag = $.getTagFunction.call$1(obj);
    record = $.dispatchRecordsForInstanceTags[tag];
    if (record != null) {
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    interceptor = $.interceptorsForUncacheableTags[tag];
    if (interceptor != null)
      return interceptor;
    interceptorClass = init.interceptorsByTag[tag];
    if (interceptorClass == null) {
      tag = $.alternateTagFunction.call$2(obj, tag);
      if (tag != null) {
        record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null)
          return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
      }
    }
    if (interceptorClass == null)
      return;
    interceptor = interceptorClass.prototype;
    mark = tag[0];
    if (mark === "!") {
      record = H.makeLeafDispatchRecord(interceptor);
      $.dispatchRecordsForInstanceTags[tag] = record;
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    if (mark === "~") {
      $.interceptorsForUncacheableTags[tag] = interceptor;
      return interceptor;
    }
    if (mark === "-") {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    }
    if (mark === "+")
      return H.patchInteriorProto(obj, interceptor);
    if (mark === "*")
      throw H.wrapException(P.UnimplementedError$(tag));
    if (init.leafTags[tag] === true) {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    } else
      return H.patchInteriorProto(obj, interceptor);
  },
  patchInteriorProto: function(obj, interceptor) {
    var proto, record;
    proto = Object.getPrototypeOf(obj);
    record = J.makeDispatchRecord(interceptor, proto, null, null);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return interceptor;
  },
  makeLeafDispatchRecord: function(interceptor) {
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  },
  makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
    var interceptor = interceptorClass.prototype;
    if (init.leafTags[tag] === true)
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    else
      return J.makeDispatchRecord(interceptor, proto, null, null);
  },
  initNativeDispatch: function() {
    if (true === $.initNativeDispatchFlag)
      return;
    $.initNativeDispatchFlag = true;
    H.initNativeDispatchContinue();
  },
  initNativeDispatchContinue: function() {
    var map, tags, fun, i, tag, proto, record, interceptorClass;
    $.dispatchRecordsForInstanceTags = Object.create(null);
    $.interceptorsForUncacheableTags = Object.create(null);
    H.initHooks();
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    if (typeof window != "undefined") {
      window;
      fun = function() {
      };
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        proto = $.prototypeForTagFunction.call$1(tag);
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null) {
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            fun.prototype = proto;
          }
        }
      }
    }
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (/^[A-Za-z_]/.test(tag)) {
        interceptorClass = map[tag];
        map["!" + tag] = interceptorClass;
        map["~" + tag] = interceptorClass;
        map["-" + tag] = interceptorClass;
        map["+" + tag] = interceptorClass;
        map["*" + tag] = interceptorClass;
      }
    }
  },
  initHooks: function() {
    var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
    hooks = C.JS_CONST_oRe();
    hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_8ZY), hooks)))))));
    if (typeof dartNativeDispatchHooksTransformer != "undefined") {
      transformers = dartNativeDispatchHooksTransformer;
      if (typeof transformers == "function")
        transformers = [transformers];
      if (transformers.constructor == Array)
        for (i = 0; i < transformers.length; ++i) {
          transformer = transformers[i];
          if (typeof transformer == "function")
            hooks = transformer(hooks) || hooks;
        }
    }
    getTag = hooks.getTag;
    getUnknownTag = hooks.getUnknownTag;
    prototypeForTag = hooks.prototypeForTag;
    $.getTagFunction = new H.initHooks_closure(getTag);
    $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
    $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
  },
  applyHooksTransformer: function(transformer, hooks) {
    return transformer(hooks) || hooks;
  },
  allMatchesInStringUnchecked: function(needle, haystack, startIndex) {
    var result, $length, patternLength, position, endIndex;
    result = [];
    result.$builtinTypeInfo = [P.Match];
    $length = haystack.length;
    patternLength = needle.length;
    for (; true;) {
      position = C.JSString_methods.indexOf$2(haystack, needle, startIndex);
      if (position === -1)
        break;
      result.push(new H.StringMatch(position, haystack, needle));
      endIndex = position + patternLength;
      if (endIndex === $length)
        break;
      else
        startIndex = position === endIndex ? startIndex + 1 : endIndex;
    }
    return result;
  },
  stringContainsUnchecked: function(receiver, other, startIndex) {
    var t1, t2;
    if (typeof other === "string")
      return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
    else {
      t1 = J.getInterceptor(other);
      if (!!t1.$isJSSyntaxRegExp) {
        t1 = C.JSString_methods.substring$1(receiver, startIndex);
        t2 = other._nativeRegExp;
        return t2.test(t1);
      } else
        return J.get$isNotEmpty$asx(t1.allMatches$1(other, C.JSString_methods.substring$1(receiver, startIndex)));
    }
  },
  stringReplaceAllUnchecked: function(receiver, from, to) {
    var result, $length, i, t1;
    if (from === "")
      if (receiver === "")
        return to;
      else {
        result = P.StringBuffer$("");
        $length = receiver.length;
        result.write$1(to);
        for (i = 0; i < $length; ++i) {
          t1 = receiver[i];
          t1 = result._contents += t1;
          result._contents = t1 + to;
        }
        return result._contents;
      }
    else
      return receiver.replace(new RegExp(from.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), to.replace(/\$/g, "$$$$"));
  },
  _matchString: [function(match) {
    return match.$index(0, 0);
  }, "call$1", "_matchString$closure", 2, 0, 11],
  _stringIdentity: [function(string) {
    return string;
  }, "call$1", "_stringIdentity$closure", 2, 0, 12],
  stringReplaceAllFuncUnchecked: function(receiver, pattern, onMatch, onNonMatch) {
    var t1, buffer, startIndex, match, t2, str, t3;
    t1 = J.getInterceptor(pattern);
    if (!t1.$isPattern)
      throw H.wrapException(P.ArgumentError$(t1.toString$0(pattern) + " is not a Pattern"));
    onNonMatch = H._stringIdentity$closure();
    buffer = P.StringBuffer$("");
    for (t1 = t1.allMatches$1(pattern, receiver), t1 = new H._AllMatchesIterator(t1._re, t1._string, t1.__js_helper$_start, null), startIndex = 0; t1.moveNext$0();) {
      match = t1.__js_helper$_current;
      t2 = match._match;
      str = onNonMatch.call$1(C.JSString_methods.substring$2(receiver, startIndex, t2.index));
      buffer._contents += typeof str === "string" ? str : H.S(str);
      str = onMatch.call$1(match);
      buffer._contents += typeof str === "string" ? str : H.S(str);
      t3 = t2.index;
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t2 = J.get$length$asx(t2[0]);
      if (typeof t2 !== "number")
        return H.iae(t2);
      startIndex = t3 + t2;
    }
    buffer.write$1(onNonMatch.call$1(C.JSString_methods.substring$1(receiver, startIndex)));
    return buffer._contents;
  },
  stringReplaceFirstUnchecked: function(receiver, from, to) {
    return receiver.replace(from, to.replace(/\$/g, "$$$$"));
  },
  NoSideEffects: {
    "^": "Object;"
  },
  NoThrows: {
    "^": "Object;"
  },
  NoInline: {
    "^": "Object;"
  },
  Native: {
    "^": "Object;name>"
  },
  ConstantMap: {
    "^": "Object;",
    get$isEmpty: function(_) {
      return J.$eq(this.get$length(this), 0);
    },
    get$isNotEmpty: function(_) {
      return !J.$eq(this.get$length(this), 0);
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    _throwUnmodifiable$0: function() {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    $indexSet: function(_, key, val) {
      return this._throwUnmodifiable$0();
    },
    remove$1: function(_, key) {
      return this._throwUnmodifiable$0();
    },
    clear$0: function(_) {
      return this._throwUnmodifiable$0();
    },
    addAll$1: function(_, other) {
      return this._throwUnmodifiable$0();
    },
    $isMap: true
  },
  ConstantStringMap: {
    "^": "ConstantMap;length>,__js_helper$_jsObject,__js_helper$_keys",
    containsKey$1: function(key) {
      if (typeof key !== "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this.__js_helper$_jsObject.hasOwnProperty(key);
    },
    $index: function(_, key) {
      if (!this.containsKey$1(key))
        return;
      return this._fetch$1(key);
    },
    _fetch$1: function(key) {
      return this.__js_helper$_jsObject[key];
    },
    forEach$1: function(_, f) {
      var keys, i, key;
      keys = this.__js_helper$_keys;
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        f.call$2(key, this._fetch$1(key));
      }
    },
    get$keys: function() {
      var t1 = new H._ConstantMapKeyIterable(this);
      t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
      return t1;
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(this.__js_helper$_keys, new H.ConstantStringMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    $isEfficientLength: true
  },
  ConstantStringMap_values_closure: {
    "^": "Closure:54;this_0",
    call$1: [function(key) {
      return this.this_0._fetch$1(key);
    }, "call$1", null, 2, 0, null, 92, [], "call"],
    $isFunction: true
  },
  _ConstantMapKeyIterable: {
    "^": "IterableBase;__js_helper$_map",
    get$iterator: function(_) {
      return J.get$iterator$ax(this.__js_helper$_map.__js_helper$_keys);
    }
  },
  _Patch: {
    "^": "Object;"
  },
  JSInvocationMirror: {
    "^": "Object;__js_helper$_memberName,_internalName,_kind,_arguments,_namedArgumentNames,_namedIndices",
    get$memberName: function() {
      var $name, t1, unmangledName;
      $name = this.__js_helper$_memberName;
      if (!!J.getInterceptor($name).$isSymbol0)
        return $name;
      t1 = $.get$mangledNames();
      unmangledName = t1.$index(0, $name);
      if (unmangledName != null) {
        t1 = unmangledName.split(":");
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        $name = t1[0];
      } else if (t1.$index(0, this._internalName) == null)
        P.print("Warning: '" + H.S($name) + "' is used reflectively but not in MirrorsUsed. This will break minified code.");
      t1 = new H.Symbol($name);
      this.__js_helper$_memberName = t1;
      return t1;
    },
    get$isMethod: function() {
      return J.$eq(this._kind, 0);
    },
    get$isGetter: function() {
      return J.$eq(this._kind, 1);
    },
    get$isSetter: function() {
      return J.$eq(this._kind, 2);
    },
    get$positionalArguments: function() {
      var t1, t2, argumentCount, list, index;
      if (J.$eq(this._kind, 1))
        return C.List_empty;
      t1 = this._arguments;
      t2 = J.getInterceptor$asx(t1);
      argumentCount = J.$sub$n(t2.get$length(t1), J.get$length$asx(this._namedArgumentNames));
      if (J.$eq(argumentCount, 0))
        return C.List_empty;
      list = [];
      if (typeof argumentCount !== "number")
        return H.iae(argumentCount);
      index = 0;
      for (; index < argumentCount; ++index)
        list.push(t2.$index(t1, index));
      list.immutable$list = true;
      list.fixed$length = true;
      return list;
    },
    get$namedArguments: function() {
      var t1, t2, namedArgumentCount, t3, t4, namedArgumentsStartIndex, map, t5, i;
      if (!J.$eq(this._kind, 0))
        return P.LinkedHashMap_LinkedHashMap$_empty(P.Symbol0, null);
      t1 = this._namedArgumentNames;
      t2 = J.getInterceptor$asx(t1);
      namedArgumentCount = t2.get$length(t1);
      t3 = this._arguments;
      t4 = J.getInterceptor$asx(t3);
      namedArgumentsStartIndex = J.$sub$n(t4.get$length(t3), namedArgumentCount);
      if (J.$eq(namedArgumentCount, 0))
        return P.LinkedHashMap_LinkedHashMap$_empty(P.Symbol0, null);
      map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol0, null);
      if (typeof namedArgumentCount !== "number")
        return H.iae(namedArgumentCount);
      t5 = J.getInterceptor$ns(namedArgumentsStartIndex);
      i = 0;
      for (; i < namedArgumentCount; ++i)
        map.$indexSet(0, new H.Symbol(t2.$index(t1, i)), t4.$index(t3, t5.$add(namedArgumentsStartIndex, i)));
      return map;
    },
    __js_helper$_getCachedInvocation$1: function(object) {
      var interceptor, $name, isIntercepted, interceptor0, receiver, method, baseName, isCatchAll;
      interceptor = J.getInterceptor(object);
      $name = this._internalName;
      isIntercepted = Object.prototype.hasOwnProperty.call(init.interceptedNames, $name) || $.interceptedNames.indexOf($name) !== -1;
      if (isIntercepted) {
        interceptor0 = object === interceptor ? null : interceptor;
        receiver = interceptor;
        interceptor = interceptor0;
      } else {
        receiver = object;
        interceptor = null;
      }
      method = receiver[$name];
      if (typeof method != "function") {
        baseName = J.get$_name$x(this.get$memberName());
        method = receiver[baseName + "*"];
        if (method == null) {
          interceptor = J.getInterceptor(object);
          method = interceptor[baseName + "*"];
          if (method != null)
            isIntercepted = true;
          else
            interceptor = null;
        }
        isCatchAll = true;
      } else
        isCatchAll = false;
      if (typeof method == "function")
        if (isCatchAll)
          return new H.CachedCatchAllInvocation(H.ReflectionInfo_ReflectionInfo(method), $name, method, isIntercepted, interceptor);
        else
          return new H.CachedInvocation($name, method, isIntercepted, interceptor);
      else
        return new H.CachedNoSuchMethodInvocation(interceptor);
    },
    static: {"^": "JSInvocationMirror_METHOD,JSInvocationMirror_GETTER,JSInvocationMirror_SETTER"}
  },
  CachedInvocation: {
    "^": "Object;mangledName<,jsFunction<,isIntercepted<,cachedInterceptor",
    get$isNoSuchMethod: function() {
      return false;
    },
    get$isGetterStub: function() {
      return !!this.jsFunction.$getterStub;
    },
    invokeOn$2: function(victim, $arguments) {
      var receiver, arguments0;
      if (!this.isIntercepted) {
        if (typeof $arguments !== "object" || $arguments === null || $arguments.constructor !== Array)
          $arguments = P.List_List$from($arguments, true, null);
        receiver = victim;
      } else {
        arguments0 = [victim];
        C.JSArray_methods.addAll$1(arguments0, $arguments);
        receiver = this.cachedInterceptor;
        receiver = receiver != null ? receiver : victim;
        $arguments = arguments0;
      }
      return this.jsFunction.apply(receiver, $arguments);
    }
  },
  CachedCatchAllInvocation: {
    "^": "CachedInvocation;info,mangledName,jsFunction,isIntercepted,cachedInterceptor",
    info$1: function(arg0) {
      return this.info.call$1(arg0);
    },
    get$isGetterStub: function() {
      return false;
    },
    invokeOn$2: function(victim, $arguments) {
      var t1, t2, fullParameterCount, providedArgumentCount, receiver, arguments0, i;
      t1 = this.info;
      t2 = t1.requiredParameterCount;
      fullParameterCount = t2 + t1.optionalParameterCount;
      if (!this.isIntercepted) {
        if (typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array) {
          providedArgumentCount = $arguments.length;
          if (providedArgumentCount < fullParameterCount)
            $arguments = P.List_List$from($arguments, true, null);
        } else {
          $arguments = P.List_List$from($arguments, true, null);
          providedArgumentCount = $arguments.length;
        }
        receiver = victim;
      } else {
        arguments0 = [victim];
        C.JSArray_methods.addAll$1(arguments0, $arguments);
        receiver = this.cachedInterceptor;
        receiver = receiver != null ? receiver : victim;
        providedArgumentCount = arguments0.length - 1;
        $arguments = arguments0;
      }
      if (t1.areOptionalParametersNamed && providedArgumentCount > t2)
        throw H.wrapException(H.UnimplementedNoSuchMethodError$("Invocation of unstubbed method '" + t1.get$reflectionName() + "' with " + $arguments.length + " arguments."));
      else if (providedArgumentCount < t2)
        throw H.wrapException(H.UnimplementedNoSuchMethodError$("Invocation of unstubbed method '" + t1.get$reflectionName() + "' with " + providedArgumentCount + " arguments (too few)."));
      else if (providedArgumentCount > fullParameterCount)
        throw H.wrapException(H.UnimplementedNoSuchMethodError$("Invocation of unstubbed method '" + t1.get$reflectionName() + "' with " + providedArgumentCount + " arguments (too many)."));
      for (i = providedArgumentCount; i < fullParameterCount; ++i)
        C.JSArray_methods.add$1($arguments, init.metadata[t1.defaultValue$1(0, i)]);
      return this.jsFunction.apply(receiver, $arguments);
    }
  },
  CachedNoSuchMethodInvocation: {
    "^": "Object;interceptor",
    get$isNoSuchMethod: function() {
      return true;
    },
    get$isGetterStub: function() {
      return false;
    },
    invokeOn$2: function(victim, invocation) {
      var receiver = this.interceptor;
      return J.noSuchMethod$1(receiver == null ? victim : receiver, invocation);
    }
  },
  ReflectionInfo: {
    "^": "Object;jsFunction<,data>,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
    parameterName$1: function(parameter) {
      var metadataIndex = this.data[2 * parameter + this.optionalParameterCount + 3];
      return init.metadata[metadataIndex];
    },
    defaultValue$1: [function(_, parameter) {
      var t1 = this.requiredParameterCount;
      if (J.$lt$n(parameter, t1) === true)
        return;
      return this.data[3 + parameter - t1];
    }, "call$1", "get$defaultValue", 2, 0, 95],
    defaultValueInOrder$1: function(parameter) {
      var t1 = this.requiredParameterCount;
      if (parameter < t1)
        return;
      if (!this.areOptionalParametersNamed || this.optionalParameterCount === 1)
        return this.defaultValue$1(0, parameter);
      return this.defaultValue$1(0, this.sortedIndex$1(parameter - t1));
    },
    parameterNameInOrder$1: function(parameter) {
      var t1 = this.requiredParameterCount;
      if (parameter < t1)
        return;
      if (!this.areOptionalParametersNamed || this.optionalParameterCount === 1)
        return this.parameterName$1(parameter);
      return this.parameterName$1(this.sortedIndex$1(parameter - t1));
    },
    sortedIndex$1: function(unsortedIndex) {
      var t1, t2, positions, t3, i, index, compare;
      t1 = {};
      if (this.cachedSortedIndices == null) {
        t2 = this.optionalParameterCount;
        this.cachedSortedIndices = Array(t2);
        positions = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.$int);
        for (t3 = this.requiredParameterCount, i = 0; i < t2; ++i) {
          index = t3 + i;
          positions.$indexSet(0, this.parameterName$1(index), index);
        }
        t1.index_0 = 0;
        t2 = positions.get$keys().toList$0(0);
        compare = P.Comparable_compare$closure();
        H.Sort__doSort(t2, 0, t2.length - 1, compare);
        H.IterableMixinWorkaround_forEach(t2, new H.ReflectionInfo_sortedIndex_closure(t1, this, positions));
      }
      t1 = this.cachedSortedIndices;
      if (unsortedIndex < 0 || unsortedIndex >= t1.length)
        return H.ioore(t1, unsortedIndex);
      return t1[unsortedIndex];
    },
    computeFunctionRti$1: function(jsConstructor) {
      var t1, fakeInstance, t2;
      t1 = this.functionType;
      if (typeof t1 == "number")
        return init.metadata[t1];
      else if (typeof t1 == "function") {
        fakeInstance = new jsConstructor();
        t2 = fakeInstance["<>"];
        if (fakeInstance != null)
          fakeInstance.$builtinTypeInfo = t2;
        return t1.apply({$receiver: fakeInstance});
      } else
        throw H.wrapException(H.RuntimeError$("Unexpected function type"));
    },
    get$reflectionName: function() {
      return this.jsFunction.$reflectionName;
    },
    static: {"^": "ReflectionInfo_REQUIRED_PARAMETERS_INFO,ReflectionInfo_OPTIONAL_PARAMETERS_INFO,ReflectionInfo_FUNCTION_TYPE_INDEX,ReflectionInfo_FIRST_DEFAULT_ARGUMENT", ReflectionInfo_ReflectionInfo: function(jsFunction) {
        var data, requiredParametersInfo, optionalParametersInfo;
        data = jsFunction.$reflectionInfo;
        if (data == null)
          return;
        data.fixed$length = init;
        data = data;
        requiredParametersInfo = data[0];
        optionalParametersInfo = data[1];
        return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParametersInfo >> 1, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
      }}
  },
  ReflectionInfo_sortedIndex_closure: {
    "^": "Closure:3;box_0,this_1,positions_2",
    call$1: function($name) {
      var t1, t2, t3;
      t1 = this.this_1.cachedSortedIndices;
      t2 = this.box_0.index_0++;
      t3 = this.positions_2.$index(0, $name);
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      t1[t2] = t3;
    },
    $isFunction: true
  },
  Primitives_functionNoSuchMethod_closure: {
    "^": "Closure:96;box_0,arguments_1,namedArgumentList_2",
    call$2: function($name, argument) {
      var t1 = this.box_0;
      t1.names_1 = t1.names_1 + "$" + H.S($name);
      this.namedArgumentList_2.push($name);
      this.arguments_1.push(argument);
      ++t1.argumentCount_0;
    },
    $isFunction: true
  },
  Primitives_applyFunction_closure: {
    "^": "Closure:96;box_0,defaultArguments_1",
    call$2: function(parameter, value) {
      var t1 = this.defaultArguments_1;
      if (t1.containsKey$1(parameter))
        t1.$indexSet(0, parameter, value);
      else
        this.box_0.bad_0 = true;
    },
    $isFunction: true
  },
  TypeErrorDecoder: {
    "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
    matchTypeError$1: function(message) {
      var match, result, t1;
      match = new RegExp(this._pattern).exec(message);
      if (match == null)
        return;
      result = {};
      t1 = this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    },
    static: {"^": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern", TypeErrorDecoder_extractPattern: function(message) {
        var match, $arguments, argumentsExpr, expr, method, receiver;
        message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
        match = message.match(/\\\$[a-zA-Z]+\\\$/g);
        if (match == null)
          match = [];
        $arguments = match.indexOf("\\$arguments\\$");
        argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
        expr = match.indexOf("\\$expr\\$");
        method = match.indexOf("\\$method\\$");
        receiver = match.indexOf("\\$receiver\\$");
        return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
      }, TypeErrorDecoder_provokeCallErrorOn: function(expression) {
        return function($expr$) {
          var $argumentsExpr$ = '$arguments$';
          try {
            $expr$.$method$($argumentsExpr$);
          } catch (e) {
            return e.message;
          }

        }(expression);
      }, TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
        return function($expr$) {
          try {
            $expr$.$method$;
          } catch (e) {
            return e.message;
          }

        }(expression);
      }}
  },
  NullError: {
    "^": "Error;_message,_method",
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NullError: " + H.S(this._message);
      return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
    },
    $isNoSuchMethodError: true,
    $isError: true
  },
  JsNoSuchMethodError: {
    "^": "Error;_message,_method,_receiver",
    toString$0: function(_) {
      var t1, t2;
      t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      t2 = this._receiver;
      if (t2 == null)
        return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" (" + H.S(this._message) + ")";
      return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" on \"" + H.S(t2) + "\" (" + H.S(this._message) + ")";
    },
    $isNoSuchMethodError: true,
    $isError: true,
    static: {JsNoSuchMethodError$: function(_message, match) {
        var t1, t2;
        t1 = match == null;
        t2 = t1 ? null : match.method;
        t1 = t1 ? null : match.receiver;
        return new H.JsNoSuchMethodError(_message, t2, t1);
      }}
  },
  UnknownJsTypeError: {
    "^": "Error;_message",
    toString$0: function(_) {
      var t1 = this._message;
      return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
    }
  },
  unwrapException_saveStackTrace: {
    "^": "Closure:54;ex_0",
    call$1: function(error) {
      if (!!J.getInterceptor(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex_0;
      return error;
    },
    $isFunction: true
  },
  _StackTrace: {
    "^": "Object;_exception,_trace",
    toString$0: function(_) {
      var t1, trace;
      t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = typeof t1 === "object" ? t1.stack : null;
      t1 = trace == null ? "" : trace;
      this._trace = t1;
      return t1;
    }
  },
  invokeClosure_closure: {
    "^": "Closure:14;closure_0",
    call$0: function() {
      return this.closure_0.call$0();
    },
    $isFunction: true
  },
  invokeClosure_closure0: {
    "^": "Closure:14;closure_1,arg1_2",
    call$0: function() {
      return this.closure_1.call$1(this.arg1_2);
    },
    $isFunction: true
  },
  invokeClosure_closure1: {
    "^": "Closure:14;closure_3,arg1_4,arg2_5",
    call$0: function() {
      return this.closure_3.call$2(this.arg1_4, this.arg2_5);
    },
    $isFunction: true
  },
  invokeClosure_closure2: {
    "^": "Closure:14;closure_6,arg1_7,arg2_8,arg3_9",
    call$0: function() {
      return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
    },
    $isFunction: true
  },
  invokeClosure_closure3: {
    "^": "Closure:14;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
    call$0: function() {
      return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
    },
    $isFunction: true
  },
  Closure: {
    "^": "Object;",
    toString$0: function(_) {
      return "Closure";
    },
    $isClosure: true,
    $isFunction: true,
    get$$call: function() {
      return this;
    }
  },
  TearOffClosure: {
    "^": "Closure;",
    $isTearOffClosure: true
  },
  BoundClosure: {
    "^": "TearOffClosure;_self>,_target<,_receiver,__js_helper$_name>",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$isBoundClosure)
        return false;
      return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return J.$xor$n(receiverHashCode, H.Primitives_objectHashCode(this._target));
    },
    $isBoundClosure: true,
    static: {"^": "BoundClosure_selfFieldNameCache,BoundClosure_receiverFieldNameCache", BoundClosure_selfOf: function(closure) {
        return J.get$_self$x(closure);
      }, BoundClosure_receiverOf: function(closure) {
        return closure._receiver;
      }, BoundClosure_selfFieldName: function() {
        var t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        return t1;
      }, BoundClosure_computeFieldNamed: function(fieldName) {
        var template, t1, names, i, $name;
        template = new H.BoundClosure("self", "target", "receiver", "name");
        t1 = Object.getOwnPropertyNames(template);
        t1.fixed$length = init;
        names = t1;
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName)
            return $name;
        }
      }}
  },
  "+BoundClosure": [97],
  Creates: {
    "^": "Object;types"
  },
  Returns: {
    "^": "Object;types"
  },
  JSName: {
    "^": "Object;name>"
  },
  CastErrorImplementation: {
    "^": "Error;message>",
    toString$0: function(_) {
      return this.message;
    },
    $isError: true,
    static: {CastErrorImplementation$: function(actualType, expectedType) {
        return new H.CastErrorImplementation("CastError: Casting value of type " + H.S(actualType) + " to incompatible type " + H.S(expectedType));
      }}
  },
  RuntimeError: {
    "^": "Error;message>",
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    static: {RuntimeError$: function(message) {
        return new H.RuntimeError(message);
      }}
  },
  RuntimeType: {
    "^": "Object;"
  },
  RuntimeFunctionType: {
    "^": "RuntimeType;returnType,parameterTypes,optionalParameterTypes,namedParameters",
    _isTest$1: function(expression) {
      var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
      return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
    },
    _extractFunctionTypeObjectFrom$1: function(o) {
      var interceptor = J.getInterceptor(o);
      return "$signature" in interceptor ? interceptor.$signature() : null;
    },
    toRti$0: function() {
      var result, t1, t2, namedRti, keys, i, $name;
      result = {func: "dynafunc"};
      t1 = this.returnType;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isVoidRuntimeType)
        result.void = true;
      else if (!t2.$isDynamicRuntimeType)
        result.ret = t1.toRti$0();
      t1 = this.parameterTypes;
      if (t1 != null && t1.length !== 0)
        result.args = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0)
        result.opt = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.namedParameters;
      if (t1 != null) {
        namedRti = {};
        keys = H.extractKeys(t1);
        for (t2 = keys.length, i = 0; i < t2; ++i) {
          $name = keys[i];
          namedRti[$name] = t1[$name].toRti$0();
        }
        result.named = namedRti;
      }
      return result;
    },
    toString$0: function(_) {
      var t1, t2, result, needsComma, i, type, keys, $name;
      t1 = this.parameterTypes;
      if (t1 != null)
        for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
      else {
        result = "(";
        needsComma = false;
      }
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0) {
        result = (needsComma ? result + ", " : result) + "[";
        for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
        result += "]";
      } else {
        t1 = this.namedParameters;
        if (t1 != null) {
          result = (needsComma ? result + ", " : result) + "{";
          keys = H.extractKeys(t1);
          for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            $name = keys[i];
            if (needsComma)
              result += ", ";
            result += H.S(t1[$name].toRti$0()) + " " + $name;
          }
          result += "}";
        }
      }
      return result + (") -> " + H.S(this.returnType));
    },
    static: {"^": "RuntimeFunctionType_inAssert", RuntimeFunctionType_listToRti: function(list) {
        var result, t1, i;
        list = list;
        result = [];
        for (t1 = list.length, i = 0; i < t1; ++i)
          result.push(list[i].toRti$0());
        return result;
      }}
  },
  DynamicRuntimeType: {
    "^": "RuntimeType;",
    toString$0: function(_) {
      return "dynamic";
    },
    toRti$0: function() {
      return;
    },
    $isDynamicRuntimeType: true
  },
  RuntimeTypePlain: {
    "^": "RuntimeType;name>",
    toRti$0: function() {
      var t1, rti;
      t1 = this.name;
      rti = init.allClasses[t1];
      if (rti == null)
        throw H.wrapException("no type for '" + H.S(t1) + "'");
      return rti;
    },
    toString$0: function(_) {
      return this.name;
    }
  },
  RuntimeTypeGeneric: {
    "^": "RuntimeType;name>,arguments<,rti",
    toRti$0: function() {
      var t1, result, t2;
      t1 = this.rti;
      if (t1 != null)
        return t1;
      t1 = this.name;
      result = [init.allClasses[t1]];
      if (0 >= result.length)
        return H.ioore(result, 0);
      if (result[0] == null)
        throw H.wrapException("no type for '" + H.S(t1) + "<...>'");
      t1 = this.arguments;
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      for (; t2.moveNext$0();)
        result.push(t2._current.toRti$0());
      this.rti = result;
      return result;
    },
    toString$0: function(_) {
      return H.S(this.name) + "<" + J.join$1$ax(this.arguments, ", ") + ">";
    }
  },
  UnimplementedNoSuchMethodError: {
    "^": "Error;_message",
    toString$0: function(_) {
      return "Unsupported operation: " + this._message;
    },
    $isNoSuchMethodError: true,
    $isError: true,
    static: {UnimplementedNoSuchMethodError$: function(_message) {
        return new H.UnimplementedNoSuchMethodError(_message);
      }}
  },
  TypeImpl: {
    "^": "Object;_typeName<,_unmangledName",
    toString$0: function(_) {
      var t1, unmangledName;
      t1 = this._unmangledName;
      if (t1 != null)
        return t1;
      unmangledName = this._typeName.replace(/[^<,> ]+/g, function(m) {
        return init.mangledGlobalNames[m] || m;
      });
      this._unmangledName = unmangledName;
      return unmangledName;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this._typeName);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isTypeImpl && J.$eq(this._typeName, other._typeName);
    },
    $isTypeImpl: true,
    $isType: true
  },
  initHooks_closure: {
    "^": "Closure:54;getTag_0",
    call$1: function(o) {
      return this.getTag_0(o);
    },
    $isFunction: true
  },
  initHooks_closure0: {
    "^": "Closure:98;getUnknownTag_1",
    call$2: function(o, tag) {
      return this.getUnknownTag_1(o, tag);
    },
    $isFunction: true
  },
  initHooks_closure1: {
    "^": "Closure:3;prototypeForTag_2",
    call$1: function(tag) {
      return this.prototypeForTag_2(tag);
    },
    $isFunction: true
  },
  JSSyntaxRegExp: {
    "^": "Object;pattern>,_nativeRegExp,_nativeGlobalRegExp,_nativeAnchoredRegExp",
    get$_nativeGlobalVersion: function() {
      var t1 = this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = this._nativeRegExp;
      t1 = H.JSSyntaxRegExp_makeNative(this.pattern, t1.multiline, !t1.ignoreCase, true);
      this._nativeGlobalRegExp = t1;
      return t1;
    },
    firstMatch$1: function(string) {
      var m;
      if (typeof string !== "string")
        H.throwExpression(P.ArgumentError$(string));
      m = this._nativeRegExp.exec(string);
      if (m == null)
        return;
      return H._MatchImplementation$(this, m);
    },
    hasMatch$1: function(string) {
      if (typeof string !== "string")
        H.throwExpression(P.ArgumentError$(string));
      return this._nativeRegExp.test(string);
    },
    allMatches$2: function(_, string, start) {
      if (start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length));
      return new H._AllMatchesIterable(this, string, start);
    },
    allMatches$1: function($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    _execGlobal$2: function(string, start) {
      var regexp, match;
      regexp = this.get$_nativeGlobalVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      return H._MatchImplementation$(this, match);
    },
    get$isMultiLine: function() {
      return this._nativeRegExp.multiline;
    },
    get$isCaseSensitive: function() {
      return !this._nativeRegExp.ignoreCase;
    },
    $isJSSyntaxRegExp: true,
    $isRegExp: true,
    $isPattern: true,
    static: {JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, global) {
        var m, i, g, regexp, errorMessage;
        if (typeof source !== "string")
          H.throwExpression(P.ArgumentError$(source));
        m = multiLine ? "m" : "";
        i = caseSensitive ? "" : "i";
        g = global ? "g" : "";
        regexp = function() {
          try {
            return new RegExp(source, m + i + g);
          } catch (e) {
            return e;
          }

        }();
        if (regexp instanceof RegExp)
          return regexp;
        errorMessage = String(regexp);
        throw H.wrapException(P.FormatException$("Illegal RegExp pattern: " + H.S(source) + ", " + errorMessage, null, null));
      }}
  },
  _MatchImplementation: {
    "^": "Object;pattern>,_match",
    get$start: function(_) {
      return this._match.index;
    },
    start$0: function($receiver) {
      return this.get$start(this).call$0();
    },
    get$end: function() {
      var t1, t2;
      t1 = this._match;
      t2 = t1.index;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1 = J.get$length$asx(t1[0]);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return t2 + t1;
    },
    group$1: function(index) {
      var t1 = this._match;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $index: function(_, index) {
      var t1 = this._match;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    _MatchImplementation$2: function(pattern, _match) {
    },
    $isMatch: true,
    static: {_MatchImplementation$: function(pattern, _match) {
        var t1 = new H._MatchImplementation(pattern, _match);
        t1._MatchImplementation$2(pattern, _match);
        return t1;
      }}
  },
  _AllMatchesIterable: {
    "^": "IterableBase;_re,_string,__js_helper$_start",
    get$iterator: function(_) {
      return new H._AllMatchesIterator(this._re, this._string, this.__js_helper$_start, null);
    },
    $asIterableBase: function() {
      return [P.Match];
    },
    $asIterable: function() {
      return [P.Match];
    }
  },
  _AllMatchesIterator: {
    "^": "Object;_regExp,_string,_nextIndex,__js_helper$_current",
    get$current: function() {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var t1, t2, match, t3, nextIndex;
      t1 = this._string;
      if (t1 == null)
        return false;
      t2 = this._nextIndex;
      if (t2 <= t1.length) {
        match = this._regExp._execGlobal$2(t1, t2);
        if (match != null) {
          this.__js_helper$_current = match;
          t1 = match._match;
          t2 = t1.index;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t3 = J.get$length$asx(t1[0]);
          if (typeof t3 !== "number")
            return H.iae(t3);
          nextIndex = t2 + t3;
          this._nextIndex = t1.index === nextIndex ? nextIndex + 1 : nextIndex;
          return true;
        }
      }
      this.__js_helper$_current = null;
      this._string = null;
      return false;
    }
  },
  StringMatch: {
    "^": "Object;start>,input,pattern>",
    get$end: function() {
      return this.start + this.pattern.length;
    },
    $index: function(_, g) {
      if (!J.$eq(g, 0))
        H.throwExpression(P.RangeError$value(g));
      return this.pattern;
    },
    group$1: function(group_) {
      if (!J.$eq(group_, 0))
        throw H.wrapException(P.RangeError$value(group_));
      return this.pattern;
    },
    start$0: function($receiver) {
      return this.start.call$0();
    },
    $isMatch: true
  }
}],
["app_bootstrap", "index_without_purity.html_bootstrap.dart", , E, {
  "^": "",
  main: [function() {
    var t1, t2, t3, model, consumer;
    t1 = P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_blurAction, new E.main_closure(), C.Symbol_contextMenuAction, new E.main_closure0(), C.Symbol_counter, new E.main_closure1(), C.Symbol_downAction, new E.main_closure2(), C.Symbol_focusAction, new E.main_closure3(), C.Symbol_icon, new E.main_closure4(), C.Symbol_iconSrc, new E.main_closure5(), C.Symbol_label, new E.main_closure6(), C.Symbol_raisedButton, new E.main_closure7(), C.Symbol_reset, new E.main_closure8(), C.Symbol_start, new E.main_closure9(), C.Symbol_stop, new E.main_closure10(), C.Symbol_upAction, new E.main_closure11(), C.Symbol_z, new E.main_closure12()], null, null);
    t2 = P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_counter, new E.main_closure13(), C.Symbol_icon, new E.main_closure14(), C.Symbol_iconSrc, new E.main_closure15(), C.Symbol_z, new E.main_closure16()], null, null);
    t3 = P.LinkedHashMap_LinkedHashMap$_literal([C.Type_ol5, C.Type_EOZ, C.Type_GNh, C.Type_I2I, C.Type_EOZ, C.Type_GNh], null, null);
    t2 = O.StaticConfiguration$(false, P.LinkedHashMap_LinkedHashMap$_literal([C.Type_ol5, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_counter, C.Declaration_W3w], null, null)], null, null), t1, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_blurAction, "blurAction", C.Symbol_contextMenuAction, "contextMenuAction", C.Symbol_counter, "counter", C.Symbol_downAction, "downAction", C.Symbol_focusAction, "focusAction", C.Symbol_icon, "icon", C.Symbol_iconSrc, "iconSrc", C.Symbol_label, "label", C.Symbol_raisedButton, "raisedButton", C.Symbol_reset, "reset", C.Symbol_start, "start", C.Symbol_stop, "stop", C.Symbol_upAction, "upAction", C.Symbol_z, "z"], null, null), t3, t2, null);
    $.objectAccessor = new O.GeneratedObjectAccessorService(t2);
    $.typeInspector = new O.GeneratedTypeInspectorService(t2);
    $.symbolConverter = new O.GeneratedSymbolConverterService(t2);
    new F.LogInjector(null, null).injectLogsFromUrl$1("index_without_purity.html._buildLogs");
    $.initializers = [S.upgradeCoreMeta$closure(), M.upgradeCoreIconset$closure(), L.upgradeCoreIcon$closure(), N.upgradePaperFocusable$closure(), F.upgradePaperRipple$closure(), V.upgradePaperShadow$closure(), G.upgradePaperButton$closure(), new E.main_closure17()];
    $.deployMode = true;
    A.initPolymer();
    t2 = P.Duration$(0, 0, 0, 0, 0, 0);
    t3 = new F.ObjectId(null);
    t3.ObjectId$1$clientMode(false);
    model = new F.Stopwatch(null, t2, null, t3, null, null, null, null);
    N.registerStopwatchTranTypes();
    t3 = W._ElementFactoryProvider_createElement_tag("purity-stopwatch", null);
    consumer = new B.StopwatchConsumer(t3, model, null, null);
    consumer.Consumer$1(model);
    consumer.StopwatchConsumer$1(model);
    document.body.appendChild(t3);
  }, "call$0", "main$closure", 0, 0, 13],
  main_closure: {
    "^": "Closure:54;",
    call$1: [function(o) {
      return o.get$blurAction();
    }, "call$1", null, 2, 0, null, 67, [], "call"],
    $isFunction: true
  },
  main_closure0: {
    "^": "Closure:54;",
    call$1: [function(o) {
      return o.get$contextMenuAction();
    }, "call$1", null, 2, 0, null, 67, [], "call"],
    $isFunction: true
  },
  main_closure1: {
    "^": "Closure:54;",
    call$1: [function(o) {
      return J.get$counter$x(o);
    }, "call$1", null, 2, 0, null, 67, [], "call"],
    $isFunction: true
  },
  main_closure2: {
    "^": "Closure:54;",
    call$1: [function(o) {
      return o.get$downAction();
    }, "call$1", null, 2, 0, null, 67, [], "call"],
    $isFunction: true
  },
  main_closure3: {
    "^": "Closure:54;",
    call$1: [function(o) {
      return o.get$focusAction();
    }, "call$1", null, 2, 0, null, 67, [], "call"],
    $isFunction: true
  },
  main_closure4: {
    "^": "Closure:54;",
    call$1: [function(o) {
      return J.get$icon$x(o);
    }, "call$1", null, 2, 0, null, 67, [], "call"],
    $isFunction: true
  },
  main_closure5: {
    "^": "Closure:54;",
    call$1: [function(o) {
      return J.get$iconSrc$x(o);
    }, "call$1", null, 2, 0, null, 67, [], "call"],
    $isFunction: true
  },
  main_closure6: {
    "^": "Closure:54;",
    call$1: [function(o) {
      return J.get$label$x(o);
    }, "call$1", null, 2, 0, null, 67, [], "call"],
    $isFunction: true
  },
  main_closure7: {
    "^": "Closure:54;",
    call$1: [function(o) {
      return J.get$raisedButton$x(o);
    }, "call$1", null, 2, 0, null, 67, [], "call"],
    $isFunction: true
  },
  main_closure8: {
    "^": "Closure:54;",
    call$1: [function(o) {
      return J.get$reset$x(o);
    }, "call$1", null, 2, 0, null, 67, [], "call"],
    $isFunction: true
  },
  main_closure9: {
    "^": "Closure:54;",
    call$1: [function(o) {
      return J.get$start$x(o);
    }, "call$1", null, 2, 0, null, 67, [], "call"],
    $isFunction: true
  },
  main_closure10: {
    "^": "Closure:54;",
    call$1: [function(o) {
      return J.get$stop$x(o);
    }, "call$1", null, 2, 0, null, 67, [], "call"],
    $isFunction: true
  },
  main_closure11: {
    "^": "Closure:54;",
    call$1: [function(o) {
      return o.get$upAction();
    }, "call$1", null, 2, 0, null, 67, [], "call"],
    $isFunction: true
  },
  main_closure12: {
    "^": "Closure:54;",
    call$1: [function(o) {
      return J.get$z$x(o);
    }, "call$1", null, 2, 0, null, 67, [], "call"],
    $isFunction: true
  },
  main_closure13: {
    "^": "Closure:94;",
    call$2: [function(o, v) {
      J.set$counter$x(o, v);
    }, "call$2", null, 4, 0, null, 67, [], 71, [], "call"],
    $isFunction: true
  },
  main_closure14: {
    "^": "Closure:94;",
    call$2: [function(o, v) {
      J.set$icon$x(o, v);
    }, "call$2", null, 4, 0, null, 67, [], 71, [], "call"],
    $isFunction: true
  },
  main_closure15: {
    "^": "Closure:94;",
    call$2: [function(o, v) {
      J.set$iconSrc$x(o, v);
    }, "call$2", null, 4, 0, null, 67, [], 71, [], "call"],
    $isFunction: true
  },
  main_closure16: {
    "^": "Closure:94;",
    call$2: [function(o, v) {
      J.set$z$x(o, v);
    }, "call$2", null, 4, 0, null, 67, [], 71, [], "call"],
    $isFunction: true
  },
  main_closure17: {
    "^": "Closure:14;",
    call$0: [function() {
      return A.Polymer_register("purity-stopwatch", C.Type_ol5);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  }
},
1],
["bson", "package:bson/bson.dart", , F, {
  "^": "",
  BsonObject: {
    "^": "Object;",
    get$value: function(_) {
      return;
    }
  },
  BsonBinary: {
    "^": "BsonObject;byteArray,byteList,offset>,subType,_hexString",
    makeHexString$0: function() {
      var stringBuffer, t1, $byte, t2, str;
      stringBuffer = P.StringBuffer$("");
      for (t1 = J.get$iterator$ax(this.byteList); t1.moveNext$0();) {
        $byte = t1._current;
        t2 = J.getInterceptor$n($byte);
        if (t2.$lt($byte, 16) === true)
          stringBuffer._contents += "0";
        str = t2.toRadixString$1($byte, 16);
        stringBuffer._contents += typeof str === "string" ? str : H.S(str);
      }
      this._hexString = C.JSString_methods.toLowerCase$0(stringBuffer._contents);
    },
    encodeInt$5: function(position, value, numOfBytes, endianness, signed) {
      switch (numOfBytes) {
        case 4:
          this.byteArray.setInt32(position, value, C.Endianness_true === endianness);
          break;
        case 2:
          this.byteArray.setInt16(position, value, C.Endianness_true === endianness);
          break;
        case 1:
          this.byteArray.setInt8(position, value);
          break;
        default:
          throw H.wrapException(P.Exception_Exception("Unsupported num of bytes: " + numOfBytes));
      }
    },
    get$value: function(_) {
      return this;
    },
    toString$0: function(_) {
      if (this._hexString == null)
        this.makeHexString$0();
      return "BsonBinary(" + H.S(this._hexString) + ")";
    },
    BsonBinary$1: function($length) {
      var t1 = this.byteList.buffer;
      t1.toString;
      if (!J.getInterceptor(t1).$isNativeByteBuffer)
        H.throwExpression(P.ArgumentError$("Invalid view buffer"));
      this.byteArray = new DataView(t1, 0);
    },
    static: {"^": "BsonBinary_UseFixnum,BsonBinary_BUFFER_SIZE,BsonBinary_SUBTYPE_DEFAULT,BsonBinary_SUBTYPE_FUNCTION,BsonBinary_SUBTYPE_BYTE_ARRAY,BsonBinary_SUBTYPE_UUID,BsonBinary_SUBTYPE_MD5,BsonBinary_SUBTYPE_USER_DEFINED,BsonBinary_CHAR_0,BsonBinary_CHAR_1,BsonBinary_CHAR_2,BsonBinary_CHAR_3,BsonBinary_CHAR_4,BsonBinary_CHAR_5,BsonBinary_CHAR_6,BsonBinary_CHAR_7,BsonBinary_CHAR_8,BsonBinary_CHAR_9,BsonBinary_CHAR_a,BsonBinary_CHAR_b,BsonBinary_CHAR_c,BsonBinary_CHAR_d,BsonBinary_CHAR_e,BsonBinary_CHAR_f,BsonBinary_tokens"}
  },
  ObjectId: {
    "^": "BsonObject;id>",
    createId$2: function(seconds, clientMode) {
      var t1, t2, t3;
      t1 = new F.ObjectId_createId_getOctet();
      if (clientMode) {
        t2 = H.S(t1.call$1(seconds)) + H.S(t1.call$1($.get$_Statics_RandomId()));
        t3 = $.get$_Statics__current_increment();
        if (typeof t3 !== "number")
          return t3.$add();
        $._Statics__current_increment = t3 + 1;
        return new F.BsonBinary(null, null, null, null, t2 + H.S(t1.call$1(t3)));
      } else {
        t1 = new F.BsonBinary(null, new Uint8Array(12), 0, 0, null);
        t1.BsonBinary$1(12);
        t1.encodeInt$5(t1.offset, seconds, 4, C.Endianness_false, false);
        t2 = t1.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        t2 += 4;
        t1.offset = t2;
        t1.encodeInt$5(t2, $.get$_Statics_RandomId(), 4, C.Endianness_true, false);
        t2 = t1.offset;
        if (typeof t2 !== "number")
          return t2.$add();
        t2 += 4;
        t1.offset = t2;
        t3 = $.get$_Statics__current_increment();
        if (typeof t3 !== "number")
          return t3.$add();
        $._Statics__current_increment = t3 + 1;
        t1.encodeInt$5(t2, t3, 4, C.Endianness_false, false);
        t3 = t1.offset;
        if (typeof t3 !== "number")
          return t3.$add();
        t1.offset = t3 + 4;
        return t1;
      }
    },
    get$hashCode: function(_) {
      var t1 = this.id;
      if (t1._hexString == null)
        t1.makeHexString$0();
      return J.get$hashCode$(t1._hexString);
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (!!J.getInterceptor(other).$isObjectId) {
        t1 = this.id;
        if (t1._hexString == null)
          t1.makeHexString$0();
        t1 = t1._hexString;
        t2 = other.id;
        if (t2._hexString == null)
          t2.makeHexString$0();
        t2 = t2._hexString;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    toString$0: function(_) {
      var t1 = this.id;
      if (t1._hexString == null)
        t1.makeHexString$0();
      return "ObjectId(\"" + H.S(t1._hexString) + "\")";
    },
    get$value: function(_) {
      return this;
    },
    toJson$0: function() {
      var t1 = this.id;
      if (t1._hexString == null)
        t1.makeHexString$0();
      return "ObjectId(\"" + H.S(t1._hexString) + "\")";
    },
    ObjectId$1$clientMode: function(clientMode) {
      var t1 = new F.Timestamp(null, 0);
      t1.Timestamp$2(null, 0);
      this.id = this.createId$2(t1.seconds, clientMode);
    },
    $isObjectId: true
  },
  ObjectId_createId_getOctet: {
    "^": "Closure:99;",
    call$1: function(value) {
      var res = J.toRadixString$1$n(value, 16);
      for (; res.length < 8;)
        res = "0" + res;
      return res;
    },
    $isFunction: true
  },
  Timestamp: {
    "^": "BsonObject;seconds,increment",
    get$value: function(_) {
      return this;
    },
    toString$0: function(_) {
      return "Timestamp(" + H.S(this.seconds) + ", " + H.S(this.increment) + ")";
    },
    Timestamp$2: function(seconds, increment) {
      var t1;
      if (this.seconds == null) {
        t1 = Date.now();
        new P.DateTime(t1, false).DateTime$_now$0();
        if (typeof t1 !== "number")
          return t1.$tdiv();
        this.seconds = C.JSNumber_methods.toInt$0(C.JSNumber_methods._tdivFast$1(t1, 1000));
      }
      if (this.increment == null) {
        t1 = $.get$_Statics__current_increment();
        if (typeof t1 !== "number")
          return t1.$add();
        $._Statics__current_increment = t1 + 1;
        this.increment = t1;
      }
    }
  }
}],
["code_transformers.messages", "package:code_transformers/messages/messages.dart", , Z, {
  "^": "",
  MessageId: {
    "^": "Object;$package<,id>",
    toJson$0: function() {
      return H.S(this.$package) + "#" + H.S(this.id);
    },
    toString$0: function(_) {
      return H.S(this.$package) + "#" + H.S(this.id);
    },
    compareTo$1: function(_, other) {
      var res = J.compareTo$1$ns(this.$package, other.get$$package());
      if (!J.$eq(res, 0))
        return res;
      return J.compareTo$1$ns(this.id, J.get$id$x(other));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return J.$eq(this.$package, other.get$$package()) && J.$eq(this.id, J.get$id$x(other));
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.$package);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = this.id;
      if (typeof t2 !== "number")
        return H.iae(t2);
      return 31 * t1 + t2;
    },
    static: {"^": "MessageId_NOT_SPECIFIED", MessageId_MessageId$fromJson: function(data) {
        var t1, index, t2;
        t1 = J.getInterceptor$asx(data);
        index = t1.lastIndexOf$1(data, "#");
        t2 = J.getInterceptor(index);
        if (t2.$eq(index, -1))
          throw H.wrapException("Invalid message id: " + H.S(data));
        return new Z.MessageId(t1.substring$2(data, 0, index), H.Primitives_parseInt(t1.substring$1(data, t2.$add(index, 1)), null, null));
      }}
  },
  Message: {
    "^": "Object;id>,snippet<",
    toJson$0: function() {
      var t1 = this.id;
      return P.LinkedHashMap_LinkedHashMap$_literal(["id", H.S(t1.$package) + "#" + H.S(t1.id), "snippet", this.snippet], null, null);
    },
    toString$0: function(_) {
      var t1 = this.id;
      return "id: " + (H.S(t1.$package) + "#" + H.S(t1.id)) + ", snippet: " + H.S(this.snippet);
    }
  },
  BuildLogEntry: {
    "^": "Object;message>,level<,span>",
    toJson$0: function() {
      var t1, t2, data, t3;
      t1 = this.message;
      t2 = t1.id;
      data = P.LinkedHashMap_LinkedHashMap$_literal(["level", this.level, "message", P.LinkedHashMap_LinkedHashMap$_literal(["id", H.S(t2.$package) + "#" + H.S(t2.id), "snippet", t1.snippet], null, null)], null, null);
      t1 = this.span;
      if (t1 != null) {
        t2 = t1.start;
        t2 = P.LinkedHashMap_LinkedHashMap$_literal(["url", t2.sourceUrl.toString$0(0), "offset", t2.offset, "line", t2.line, "column", t2.column], null, null);
        t3 = t1.end;
        data.$indexSet(0, "span", P.LinkedHashMap_LinkedHashMap$_literal(["start", t2, "end", P.LinkedHashMap_LinkedHashMap$_literal(["url", t3.sourceUrl.toString$0(0), "offset", t3.offset, "line", t3.line, "column", t3.column], null, null), "text", t1.text], null, null));
      }
      return data;
    },
    toString$0: function(_) {
      return this.toJson$0().toString$0(0);
    }
  },
  LogEntryTable: {
    "^": "Object;entries>",
    toJson$0: function() {
      var res = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      this.entries.forEach$1(0, new Z.LogEntryTable_toJson_closure(res));
      return res;
    },
    toString$0: function(_) {
      return this.toJson$0().toString$0(0);
    },
    add$1: function(_, entry) {
      J.add$1$ax(this.entries.putIfAbsent$2(J.get$id$x(J.get$message$x(entry)), new Z.LogEntryTable_add_closure()), entry);
    },
    addAll$1: function(_, other) {
      var t1, t2, t3, key;
      for (t1 = J.getInterceptor$x(other), t2 = J.get$iterator$ax(t1.get$entries(other).get$keys()), t3 = this.entries; t2.moveNext$0() === true;) {
        key = t2.get$current();
        J.addAll$1$ax(t3.putIfAbsent$2(key, new Z.LogEntryTable_addAll_closure()), J.$index$asx(t1.get$entries(other), key));
      }
    },
    static: {LogEntryTable_LogEntryTable$fromJson: function(json) {
        var t1, t2, t3, key;
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        for (t2 = J.get$iterator$ax(json.get$keys()), t3 = J.getInterceptor$asx(json); t2.moveNext$0() === true;) {
          key = t2.get$current();
          t1.$indexSet(0, Z.MessageId_MessageId$fromJson(key), J.toList$0$ax(J.map$1$ax(t3.$index(json, key), new Z.LogEntryTable_LogEntryTable$fromJson_closure())));
        }
        return new Z.LogEntryTable(t1);
      }}
  },
  LogEntryTable_LogEntryTable$fromJson_closure: {
    "^": "Closure:54;",
    call$1: [function(v) {
      var t1, spanData, t2, locData, t3, t4, t5, t6, start, end, span;
      t1 = J.getInterceptor$asx(v);
      spanData = t1.$index(v, "span");
      if (spanData != null) {
        t2 = J.getInterceptor$asx(spanData);
        locData = t2.$index(spanData, "start");
        t3 = J.getInterceptor$asx(locData);
        t4 = t3.$index(locData, "offset");
        t5 = P.Uri_parse(t3.$index(locData, "url"));
        t6 = t3.$index(locData, "line");
        start = O.SourceLocation$(t4, t3.$index(locData, "column"), t6, t5);
        locData = t2.$index(spanData, "end");
        t5 = J.getInterceptor$asx(locData);
        t6 = t5.$index(locData, "offset");
        t3 = P.Uri_parse(t5.$index(locData, "url"));
        t4 = t5.$index(locData, "line");
        end = O.SourceLocation$(t6, t5.$index(locData, "column"), t4, t3);
        t2 = t2.$index(spanData, "text");
        span = new T.SourceSpanBase(start, end, t2);
        span.SourceSpanBase$3(start, end, t2);
      } else
        span = null;
      t2 = t1.$index(v, "message");
      t3 = J.getInterceptor$asx(t2);
      return new Z.BuildLogEntry(new Z.Message(Z.MessageId_MessageId$fromJson(t3.$index(t2, "id")), t3.$index(t2, "snippet")), t1.$index(v, "level"), span);
    }, "call$1", null, 2, 0, null, 71, [], "call"],
    $isFunction: true
  },
  LogEntryTable_toJson_closure: {
    "^": "Closure:94;res_0",
    call$2: function(key, value) {
      this.res_0.$indexSet(0, H.S(key), J.toList$0$ax(J.map$1$ax(value, new Z.LogEntryTable_toJson__closure())));
    },
    $isFunction: true
  },
  LogEntryTable_toJson__closure: {
    "^": "Closure:54;",
    call$1: [function(e) {
      return e.toJson$0();
    }, "call$1", null, 2, 0, null, 2, [], "call"],
    $isFunction: true
  },
  LogEntryTable_add_closure: {
    "^": "Closure:14;",
    call$0: function() {
      return [];
    },
    $isFunction: true
  },
  LogEntryTable_addAll_closure: {
    "^": "Closure:14;",
    call$0: function() {
      return [];
    },
    $isFunction: true
  }
}],
["core_elements.core_icon", "package:core_elements/core_icon.dart", , L, {
  "^": "",
  upgradeCoreIcon: [function() {
    return N.registerDartType("core-icon", C.Type_jWj, null);
  }, "call$0", "upgradeCoreIcon$closure", 0, 0, 14],
  CoreIcon: {
    "^": "HtmlElement_DomProxyMixin;common$DomProxyMixin$_proxy",
    get$src: function(receiver) {
      return J.$index$asx(this.get$jsElement(receiver), "src");
    },
    set$src: function(receiver, value) {
      J.$indexSet$ax(this.get$jsElement(receiver), "src", value);
    },
    get$icon: function(receiver) {
      return J.$index$asx(this.get$jsElement(receiver), "icon");
    },
    set$icon: function(receiver, value) {
      J.$indexSet$ax(this.get$jsElement(receiver), "icon", value);
    },
    static: {CoreIcon$created: function(receiver) {
        receiver.toString;
        C.CoreIcon_methods.Element$created$0(receiver);
        return receiver;
      }}
  },
  HtmlElement_DomProxyMixin: {
    "^": "HtmlElement+DomProxyMixin;"
  }
}],
["core_elements.core_iconset", "package:core_elements/core_iconset.dart", , M, {
  "^": "",
  upgradeCoreIconset: [function() {
    return N.registerDartType("core-iconset", C.Type_ACQ, null);
  }, "call$0", "upgradeCoreIconset$closure", 0, 0, 14],
  CoreIconset: {
    "^": "CoreMeta;common$DomProxyMixin$_proxy",
    get$src: function(receiver) {
      return J.$index$asx(this.get$jsElement(receiver), "src");
    },
    set$src: function(receiver, value) {
      J.$indexSet$ax(this.get$jsElement(receiver), "src", value);
    },
    static: {CoreIconset$created: function(receiver) {
        receiver.toString;
        C.CoreIconset_methods.Element$created$0(receiver);
        return receiver;
      }}
  }
}],
["core_elements.core_meta", "package:core_elements/core_meta.dart", , S, {
  "^": "",
  upgradeCoreMeta: [function() {
    return N.registerDartType("core-meta", C.Type_aB0, null);
  }, "call$0", "upgradeCoreMeta$closure", 0, 0, 14],
  CoreMeta: {
    "^": "HtmlElement_DomProxyMixin0;common$DomProxyMixin$_proxy",
    get$label: function(receiver) {
      return J.$index$asx(this.get$jsElement(receiver), "label");
    },
    get$type: function(receiver) {
      return J.$index$asx(this.get$jsElement(receiver), "type");
    },
    static: {CoreMeta$created: function(receiver) {
        receiver.toString;
        C.CoreMeta_methods.Element$created$0(receiver);
        return receiver;
      }}
  },
  HtmlElement_DomProxyMixin0: {
    "^": "HtmlElement+DomProxyMixin;"
  }
}],
["core_elements.paper_button", "package:paper_elements/paper_button.dart", , G, {
  "^": "",
  upgradePaperButton: [function() {
    return N.registerDartType("paper-button", C.Type_MPa, null);
  }, "call$0", "upgradePaperButton$closure", 0, 0, 14],
  PaperButton: {
    "^": "PaperFocusable;common$DomProxyMixin$_proxy",
    get$label: function(receiver) {
      return J.$index$asx(this.get$jsElement(receiver), "label");
    },
    get$raisedButton: function(receiver) {
      return J.$index$asx(this.get$jsElement(receiver), "raisedButton");
    },
    get$iconSrc: function(receiver) {
      return J.$index$asx(this.get$jsElement(receiver), "iconSrc");
    },
    set$iconSrc: function(receiver, value) {
      J.$indexSet$ax(this.get$jsElement(receiver), "iconSrc", value);
    },
    get$icon: function(receiver) {
      return J.$index$asx(this.get$jsElement(receiver), "icon");
    },
    set$icon: function(receiver, value) {
      J.$indexSet$ax(this.get$jsElement(receiver), "icon", value);
    },
    static: {PaperButton$created: function(receiver) {
        receiver.toString;
        C.PaperButton_methods.Element$created$0(receiver);
        return receiver;
      }}
  }
}],
["core_elements.paper_focusable", "package:paper_elements/paper_focusable.dart", , N, {
  "^": "",
  upgradePaperFocusable: [function() {
    return N.registerDartType("paper-focusable", C.Type_K6o, null);
  }, "call$0", "upgradePaperFocusable$closure", 0, 0, 14],
  PaperFocusable: {
    "^": "HtmlElement_DomProxyMixin1;common$DomProxyMixin$_proxy",
    static: {PaperFocusable$created: function(receiver) {
        receiver.toString;
        C.PaperFocusable_methods.Element$created$0(receiver);
        return receiver;
      }}
  },
  HtmlElement_DomProxyMixin1: {
    "^": "HtmlElement+DomProxyMixin;"
  }
}],
["core_elements.paper_ripple", "package:paper_elements/paper_ripple.dart", , F, {
  "^": "",
  upgradePaperRipple: [function() {
    return N.registerDartType("paper-ripple", C.Type_AyE, null);
  }, "call$0", "upgradePaperRipple$closure", 0, 0, 14],
  PaperRipple: {
    "^": "HtmlElement_DomProxyMixin2;common$DomProxyMixin$_proxy",
    static: {PaperRipple$created: function(receiver) {
        receiver.toString;
        C.PaperRipple_methods.Element$created$0(receiver);
        return receiver;
      }}
  },
  HtmlElement_DomProxyMixin2: {
    "^": "HtmlElement+DomProxyMixin;"
  }
}],
["core_elements.paper_shadow", "package:paper_elements/paper_shadow.dart", , V, {
  "^": "",
  upgradePaperShadow: [function() {
    return N.registerDartType("paper-shadow", C.Type_aRS, null);
  }, "call$0", "upgradePaperShadow$closure", 0, 0, 14],
  PaperShadow: {
    "^": "HtmlElement_DomProxyMixin3;common$DomProxyMixin$_proxy",
    get$target: function(receiver) {
      return J.$index$asx(this.get$jsElement(receiver), "target");
    },
    get$z: function(receiver) {
      return J.$index$asx(this.get$jsElement(receiver), "z");
    },
    set$z: function(receiver, value) {
      J.$indexSet$ax(this.get$jsElement(receiver), "z", value);
    },
    static: {PaperShadow$created: function(receiver) {
        receiver.toString;
        C.PaperShadow_methods.Element$created$0(receiver);
        return receiver;
      }}
  },
  HtmlElement_DomProxyMixin3: {
    "^": "HtmlElement+DomProxyMixin;"
  }
}],
["core_elements.src.common", "package:core_elements/src/common.dart", , N, {
  "^": "",
  DomProxyMixin: {
    "^": "Object;",
    get$jsElement: function(receiver) {
      var t1 = receiver.common$DomProxyMixin$_proxy;
      if (t1 == null) {
        t1 = P.JsObject_JsObject$fromBrowserObject(receiver);
        receiver.common$DomProxyMixin$_proxy = t1;
      }
      return t1;
    }
  }
}],
["dart._internal", "dart:_internal", , H, {
  "^": "",
  IterableElementError_noElement: function() {
    return new P.StateError("No element");
  },
  IterableElementError_tooMany: function() {
    return new P.StateError("Too many elements");
  },
  IterableElementError_tooFew: function() {
    return new P.StateError("Too few elements");
  },
  Lists_copy: function(src, srcStart, dst, dstStart, count) {
    var t1, i, j, t2, t3;
    t1 = J.getInterceptor$n(srcStart);
    if (t1.$lt(srcStart, dstStart) === true)
      for (i = J.$sub$n(t1.$add(srcStart, count), 1), j = J.$sub$n(J.$add$ns(dstStart, count), 1), t1 = J.getInterceptor$asx(src); t2 = J.getInterceptor$n(i), t2.$ge(i, srcStart) === true; i = t2.$sub(i, 1), j = J.$sub$n(j, 1))
        C.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
    else
      for (t2 = J.getInterceptor$asx(src), j = dstStart, i = srcStart; t3 = J.getInterceptor$n(i), t3.$lt(i, t1.$add(srcStart, count)) === true; i = t3.$add(i, 1), j = J.$add$ns(j, 1))
        C.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
  },
  Lists_indexOf: function(a, element, startIndex, endIndex) {
    var t1, i;
    t1 = J.getInterceptor$n(startIndex);
    if (t1.$ge(startIndex, a.length) === true)
      return -1;
    if (t1.$lt(startIndex, 0) === true)
      startIndex = 0;
    for (i = startIndex; J.$lt$n(i, endIndex) === true; ++i) {
      if (i >>> 0 !== i || i >= a.length)
        return H.ioore(a, i);
      if (J.$eq(a[i], element))
        return i;
    }
    return -1;
  },
  Lists_lastIndexOf: function(a, element, startIndex) {
    var t1, i;
    if (typeof startIndex !== "number")
      return startIndex.$lt();
    if (startIndex < 0)
      return -1;
    t1 = a.length;
    if (startIndex >= t1)
      startIndex = t1 - 1;
    for (i = startIndex; i >= 0; --i) {
      if (i >= a.length)
        return H.ioore(a, i);
      if (J.$eq(a[i], element))
        return i;
    }
    return -1;
  },
  Sort__doSort: function(a, left, right, compare) {
    if (J.$le$n(J.$sub$n(right, left), 32) === true)
      H.Sort__insertionSort(a, left, right, compare);
    else
      H.Sort__dualPivotQuicksort(a, left, right, compare);
  },
  Sort__insertionSort: function(a, left, right, compare) {
    var i, t1, t2, el, j, t3;
    for (i = J.$add$ns(left, 1), t1 = J.getInterceptor$asx(a); t2 = J.getInterceptor$n(i), t2.$le(i, right) === true; i = t2.$add(i, 1)) {
      el = t1.$index(a, i);
      j = i;
      while (true) {
        t3 = J.getInterceptor$n(j);
        if (!(t3.$gt(j, left) === true && J.$gt$n(compare.call$2(t1.$index(a, t3.$sub(j, 1)), el), 0) === true))
          break;
        t1.$indexSet(a, j, t1.$index(a, t3.$sub(j, 1)));
        j = t3.$sub(j, 1);
      }
      t1.$indexSet(a, j, el);
    }
  },
  Sort__dualPivotQuicksort: function(a, left, right, compare) {
    var t1, sixth, t2, index1, index5, index3, t3, index2, index4, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t4, less0, great0, pivots_are_equal;
    t1 = J.getInterceptor$n(right);
    sixth = J.$tdiv$n(J.$add$ns(t1.$sub(right, left), 1), 6);
    t2 = J.getInterceptor$ns(left);
    index1 = t2.$add(left, sixth);
    index5 = t1.$sub(right, sixth);
    index3 = J.$tdiv$n(t2.$add(left, right), 2);
    t3 = J.getInterceptor$n(index3);
    index2 = t3.$sub(index3, sixth);
    index4 = t3.$add(index3, sixth);
    t3 = J.getInterceptor$asx(a);
    el1 = t3.$index(a, index1);
    el2 = t3.$index(a, index2);
    el3 = t3.$index(a, index3);
    el4 = t3.$index(a, index4);
    el5 = t3.$index(a, index5);
    if (J.$gt$n(compare.call$2(el1, el2), 0) === true) {
      t0 = el2;
      el2 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0) === true) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el3), 0) === true) {
      t0 = el3;
      el3 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0) === true) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el4), 0) === true) {
      t0 = el4;
      el4 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el3, el4), 0) === true) {
      t0 = el4;
      el4 = el3;
      el3 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el5), 0) === true) {
      t0 = el5;
      el5 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0) === true) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0) === true) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    t3.$indexSet(a, index1, el1);
    t3.$indexSet(a, index3, el3);
    t3.$indexSet(a, index5, el5);
    t3.$indexSet(a, index2, t3.$index(a, left));
    t3.$indexSet(a, index4, t3.$index(a, right));
    less = t2.$add(left, 1);
    great = t1.$sub(right, 1);
    if (J.$eq(compare.call$2(el2, el4), 0)) {
      for (k = less; t1 = J.getInterceptor$n(k), t1.$le(k, great) === true; k = t1.$add(k, 1)) {
        ak = t3.$index(a, k);
        comp = compare.call$2(ak, el2);
        t2 = J.getInterceptor(comp);
        if (t2.$eq(comp, 0))
          continue;
        if (t2.$lt(comp, 0) === true) {
          if (!t1.$eq(k, less)) {
            t3.$indexSet(a, k, t3.$index(a, less));
            t3.$indexSet(a, less, ak);
          }
          less = J.$add$ns(less, 1);
        } else
          for (; true;) {
            comp = compare.call$2(t3.$index(a, great), el2);
            t2 = J.getInterceptor$n(comp);
            if (t2.$gt(comp, 0) === true) {
              great = J.$sub$n(great, 1);
              continue;
            } else {
              t4 = J.getInterceptor$n(great);
              if (t2.$lt(comp, 0) === true) {
                t3.$indexSet(a, k, t3.$index(a, less));
                less0 = J.$add$ns(less, 1);
                t3.$indexSet(a, less, t3.$index(a, great));
                great0 = t4.$sub(great, 1);
                t3.$indexSet(a, great, ak);
                great = great0;
                less = less0;
                break;
              } else {
                t3.$indexSet(a, k, t3.$index(a, great));
                great0 = t4.$sub(great, 1);
                t3.$indexSet(a, great, ak);
                great = great0;
                break;
              }
            }
          }
      }
      pivots_are_equal = true;
    } else {
      for (k = less; t1 = J.getInterceptor$n(k), t1.$le(k, great) === true; k = t1.$add(k, 1)) {
        ak = t3.$index(a, k);
        if (J.$lt$n(compare.call$2(ak, el2), 0) === true) {
          if (!t1.$eq(k, less)) {
            t3.$indexSet(a, k, t3.$index(a, less));
            t3.$indexSet(a, less, ak);
          }
          less = J.$add$ns(less, 1);
        } else if (J.$gt$n(compare.call$2(ak, el4), 0) === true)
          for (; true;)
            if (J.$gt$n(compare.call$2(t3.$index(a, great), el4), 0) === true) {
              great = J.$sub$n(great, 1);
              if (J.$lt$n(great, k) === true)
                break;
              continue;
            } else {
              t2 = J.getInterceptor$n(great);
              if (J.$lt$n(compare.call$2(t3.$index(a, great), el2), 0) === true) {
                t3.$indexSet(a, k, t3.$index(a, less));
                less0 = J.$add$ns(less, 1);
                t3.$indexSet(a, less, t3.$index(a, great));
                great0 = t2.$sub(great, 1);
                t3.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t3.$indexSet(a, k, t3.$index(a, great));
                great0 = t2.$sub(great, 1);
                t3.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      pivots_are_equal = false;
    }
    t1 = J.getInterceptor$n(less);
    t3.$indexSet(a, left, t3.$index(a, t1.$sub(less, 1)));
    t3.$indexSet(a, t1.$sub(less, 1), el2);
    t2 = J.getInterceptor$ns(great);
    t3.$indexSet(a, right, t3.$index(a, t2.$add(great, 1)));
    t3.$indexSet(a, t2.$add(great, 1), el4);
    H.Sort__doSort(a, left, t1.$sub(less, 2), compare);
    H.Sort__doSort(a, t2.$add(great, 2), right, compare);
    if (pivots_are_equal)
      return;
    if (t1.$lt(less, index1) === true && t2.$gt(great, index5) === true) {
      for (; J.$eq(compare.call$2(t3.$index(a, less), el2), 0);)
        less = J.$add$ns(less, 1);
      for (; J.$eq(compare.call$2(t3.$index(a, great), el4), 0);)
        great = J.$sub$n(great, 1);
      for (k = less; t1 = J.getInterceptor$n(k), t1.$le(k, great) === true; k = t1.$add(k, 1)) {
        ak = t3.$index(a, k);
        if (J.$eq(compare.call$2(ak, el2), 0)) {
          if (!t1.$eq(k, less)) {
            t3.$indexSet(a, k, t3.$index(a, less));
            t3.$indexSet(a, less, ak);
          }
          less = J.$add$ns(less, 1);
        } else if (J.$eq(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$eq(compare.call$2(t3.$index(a, great), el4), 0)) {
              great = J.$sub$n(great, 1);
              if (J.$lt$n(great, k) === true)
                break;
              continue;
            } else {
              t2 = J.getInterceptor$n(great);
              if (J.$lt$n(compare.call$2(t3.$index(a, great), el2), 0) === true) {
                t3.$indexSet(a, k, t3.$index(a, less));
                less0 = J.$add$ns(less, 1);
                t3.$indexSet(a, less, t3.$index(a, great));
                great0 = t2.$sub(great, 1);
                t3.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t3.$indexSet(a, k, t3.$index(a, great));
                great0 = t2.$sub(great, 1);
                t3.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      H.Sort__doSort(a, less, great, compare);
    } else
      H.Sort__doSort(a, less, great, compare);
  },
  ListIterable: {
    "^": "IterableBase;",
    get$iterator: function(_) {
      var t1 = new H.ListIterator(this, this.get$length(this), 0, null);
      t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "ListIterable", 0)];
      return t1;
    },
    forEach$1: function(_, action) {
      var $length, i;
      $length = this.get$length(this);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        action.call$1(this.elementAt$1(0, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return J.$eq(this.get$length(this), 0);
    },
    get$first: function(_) {
      if (J.$eq(this.get$length(this), 0))
        throw H.wrapException(H.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    get$last: function(_) {
      if (J.$eq(this.get$length(this), 0))
        throw H.wrapException(H.IterableElementError_noElement());
      return this.elementAt$1(0, J.$sub$n(this.get$length(this), 1));
    },
    contains$1: function(_, element) {
      var $length, i;
      $length = this.get$length(this);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        if (J.$eq(this.elementAt$1(0, i), element))
          return true;
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return false;
    },
    any$1: function(_, test) {
      var $length, i;
      $length = this.get$length(this);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        if (test.call$1(this.elementAt$1(0, i)) === true)
          return true;
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return false;
    },
    firstWhere$2$orElse: function(_, test, orElse) {
      var $length, i, element;
      $length = this.get$length(this);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        element = this.elementAt$1(0, i);
        if (test.call$1(element) === true)
          return element;
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      throw H.wrapException(H.IterableElementError_noElement());
    },
    firstWhere$1: function($receiver, test) {
      return this.firstWhere$2$orElse($receiver, test, null);
    },
    join$1: function(_, separator) {
      var $length, t1, first, buffer, i, str;
      $length = this.get$length(this);
      if (separator.length !== 0) {
        t1 = J.getInterceptor($length);
        if (t1.$eq($length, 0))
          return "";
        first = H.S(this.elementAt$1(0, 0));
        if (!t1.$eq($length, this.get$length(this)))
          throw H.wrapException(P.ConcurrentModificationError$(this));
        buffer = P.StringBuffer$(first);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 1;
        for (; i < $length; ++i) {
          buffer._contents += separator;
          str = this.elementAt$1(0, i);
          buffer._contents += typeof str === "string" ? str : H.S(str);
          if ($length !== this.get$length(this))
            throw H.wrapException(P.ConcurrentModificationError$(this));
        }
        return buffer._contents;
      } else {
        buffer = P.StringBuffer$("");
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          str = this.elementAt$1(0, i);
          buffer._contents += typeof str === "string" ? str : H.S(str);
          if ($length !== this.get$length(this))
            throw H.wrapException(P.ConcurrentModificationError$(this));
        }
        return buffer._contents;
      }
    },
    where$1: function(_, test) {
      return P.IterableBase.prototype.where$1.call(this, this, test);
    },
    map$1: function(_, f) {
      var t1 = new H.MappedListIterable(this, f);
      t1.$builtinTypeInfo = [null, null];
      return t1;
    },
    fold$2: function(_, initialValue, combine) {
      var $length, value, i;
      $length = this.get$length(this);
      if (typeof $length !== "number")
        return H.iae($length);
      value = initialValue;
      i = 0;
      for (; i < $length; ++i) {
        value = combine.call$2(value, this.elementAt$1(0, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return value;
    },
    skip$1: function(_, count) {
      return H.SubListIterable$(this, count, null, H.getRuntimeTypeArgument(this, "ListIterable", 0));
    },
    toList$1$growable: function(_, growable) {
      var result, t1, i;
      if (growable) {
        result = [];
        result.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "ListIterable", 0)];
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else {
        t1 = this.get$length(this);
        if (typeof t1 !== "number")
          return H.iae(t1);
        result = Array(t1);
        result.fixed$length = init;
        result.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "ListIterable", 0)];
      }
      i = 0;
      while (true) {
        t1 = this.get$length(this);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        t1 = this.elementAt$1(0, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
        ++i;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    $isEfficientLength: true
  },
  SubListIterable: {
    "^": "ListIterable;_iterable,_start,_endOrLength",
    get$_endIndex: function() {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this._endOrLength;
      if (t1 == null || J.$gt$n(t1, $length) === true)
        return $length;
      return t1;
    },
    get$_startIndex: function() {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this._start;
      if (J.$gt$n(t1, $length) === true)
        return $length;
      return t1;
    },
    get$length: function(_) {
      var $length, t1, t2;
      $length = J.get$length$asx(this._iterable);
      t1 = this._start;
      if (J.$ge$n(t1, $length) === true)
        return 0;
      t2 = this._endOrLength;
      if (t2 == null || J.$ge$n(t2, $length) === true)
        return J.$sub$n($length, t1);
      return J.$sub$n(t2, t1);
    },
    elementAt$1: function(_, index) {
      var realIndex = J.$add$ns(this.get$_startIndex(), index);
      if (J.$lt$n(index, 0) === true || J.$ge$n(realIndex, this.get$_endIndex()) === true)
        throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this)));
      return J.elementAt$1$ax(this._iterable, realIndex);
    },
    skip$1: function(_, count) {
      var newStart, t1;
      if (J.$lt$n(count, 0) === true)
        throw H.wrapException(P.RangeError$value(count));
      newStart = J.$add$ns(this._start, count);
      t1 = this._endOrLength;
      if (t1 != null && J.$ge$n(newStart, t1) === true) {
        t1 = new H.EmptyIterable();
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      }
      return H.SubListIterable$(this._iterable, newStart, t1, H.getTypeArgumentByIndex(this, 0));
    },
    take$1: function(_, count) {
      var t1, t2, newEnd;
      if (J.$lt$n(count, 0) === true)
        throw H.wrapException(P.RangeError$value(count));
      t1 = this._endOrLength;
      t2 = this._start;
      if (t1 == null)
        return H.SubListIterable$(this._iterable, t2, J.$add$ns(t2, count), H.getTypeArgumentByIndex(this, 0));
      else {
        newEnd = J.$add$ns(t2, count);
        if (J.$lt$n(t1, newEnd) === true)
          return this;
        return H.SubListIterable$(this._iterable, t2, newEnd, H.getTypeArgumentByIndex(this, 0));
      }
    },
    SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
      var t1, t2, t3;
      t1 = this._start;
      t2 = J.getInterceptor$n(t1);
      if (t2.$lt(t1, 0) === true)
        throw H.wrapException(P.RangeError$value(t1));
      t3 = this._endOrLength;
      if (t3 != null) {
        if (J.$lt$n(t3, 0) === true)
          throw H.wrapException(P.RangeError$value(t3));
        if (t2.$gt(t1, t3) === true)
          throw H.wrapException(P.RangeError$range(t1, 0, t3));
      }
    },
    static: {SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
        var t1 = new H.SubListIterable(_iterable, _start, _endOrLength);
        t1.$builtinTypeInfo = [$E];
        t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
        return t1;
      }}
  },
  ListIterator: {
    "^": "Object;_iterable,_length,_index,_current",
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t1, t2, $length, t3;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (!J.$eq(this._length, $length))
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this._index;
      if (typeof $length !== "number")
        return H.iae($length);
      if (t3 >= $length) {
        this._current = null;
        return false;
      }
      this._current = t2.elementAt$1(t1, t3);
      ++this._index;
      return true;
    }
  },
  MappedIterable: {
    "^": "IterableBase;_iterable,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$iterator: function(_) {
      var t1 = new H.MappedIterator(null, J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      return J.get$length$asx(this._iterable);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._iterable);
    },
    get$first: function(_) {
      return this._f$1(J.get$first$ax(this._iterable));
    },
    get$last: function(_) {
      return this._f$1(J.get$last$ax(this._iterable));
    },
    elementAt$1: function(_, index) {
      return this._f$1(J.elementAt$1$ax(this._iterable, index));
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    },
    static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
        var t1;
        if (!!J.getInterceptor(iterable).$isEfficientLength) {
          t1 = new H.EfficientLengthMappedIterable(iterable, $function);
          t1.$builtinTypeInfo = [$S, $T];
          return t1;
        }
        t1 = new H.MappedIterable(iterable, $function);
        t1.$builtinTypeInfo = [$S, $T];
        return t1;
      }}
  },
  EfficientLengthMappedIterable: {
    "^": "MappedIterable;_iterable,_f",
    $isEfficientLength: true
  },
  MappedIterator: {
    "^": "Iterator;_current,_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      var t1 = this._iterator;
      if (t1.moveNext$0() === true) {
        this._current = this._f$1(t1.get$current());
        return true;
      }
      this._current = null;
      return false;
    },
    get$current: function() {
      return this._current;
    },
    $asIterator: function($S, $T) {
      return [$T];
    }
  },
  MappedListIterable: {
    "^": "ListIterable;__internal$_source,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_source);
    },
    elementAt$1: function(_, index) {
      return this._f$1(J.elementAt$1$ax(this.__internal$_source, index));
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    },
    $isEfficientLength: true
  },
  WhereIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }
  },
  WhereIterator: {
    "^": "Iterator;_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      for (var t1 = this._iterator; t1.moveNext$0() === true;)
        if (this._f$1(t1.get$current()) === true)
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  },
  SkipIterable: {
    "^": "IterableBase;_iterable,_skipCount",
    skip$1: function(_, n) {
      if (typeof n !== "number" || Math.floor(n) !== n || n < 0)
        throw H.wrapException(P.RangeError$value(n));
      return H.SkipIterable_SkipIterable(this._iterable, J.$add$ns(this._skipCount, n), H.getTypeArgumentByIndex(this, 0));
    },
    get$iterator: function(_) {
      var t1 = this._iterable;
      t1 = new H.SkipIterator(t1.get$iterator(t1), this._skipCount);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    SkipIterable$_$2: function(_iterable, _skipCount, $E) {
      var t1 = this._skipCount;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1 || J.$lt$n(t1, 0) === true)
        throw H.wrapException(P.RangeError$(t1));
    },
    static: {SkipIterable_SkipIterable: function(iterable, skipCount, $E) {
        var t1;
        if (!!iterable.$isEfficientLength) {
          t1 = new H.EfficientLengthSkipIterable(iterable, skipCount);
          t1.$builtinTypeInfo = [$E];
          t1.SkipIterable$_$2(iterable, skipCount, $E);
          return t1;
        }
        return H.SkipIterable$_(iterable, skipCount, $E);
      }, SkipIterable$_: function(_iterable, _skipCount, $E) {
        var t1 = new H.SkipIterable(_iterable, _skipCount);
        t1.$builtinTypeInfo = [$E];
        t1.SkipIterable$_$2(_iterable, _skipCount, $E);
        return t1;
      }}
  },
  EfficientLengthSkipIterable: {
    "^": "SkipIterable;_iterable,_skipCount",
    get$length: function(_) {
      var t1, $length;
      t1 = this._iterable;
      $length = J.$sub$n(t1.get$length(t1), this._skipCount);
      if (J.$ge$n($length, 0) === true)
        return $length;
      return 0;
    },
    $isEfficientLength: true
  },
  SkipIterator: {
    "^": "Iterator;_iterator,_skipCount",
    moveNext$0: function() {
      var t1, i, t2;
      t1 = this._iterator;
      i = 0;
      while (true) {
        t2 = this._skipCount;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.moveNext$0();
        ++i;
      }
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  },
  EmptyIterable: {
    "^": "IterableBase;",
    get$iterator: function(_) {
      return C.C_EmptyIterator;
    },
    forEach$1: function(_, action) {
    },
    get$isEmpty: function(_) {
      return true;
    },
    get$length: function(_) {
      return 0;
    },
    get$first: function(_) {
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last: function(_) {
      throw H.wrapException(H.IterableElementError_noElement());
    },
    elementAt$1: function(_, index) {
      throw H.wrapException(P.RangeError$value(index));
    },
    contains$1: function(_, element) {
      return false;
    },
    any$1: function(_, test) {
      return false;
    },
    firstWhere$2$orElse: function(_, test, orElse) {
      throw H.wrapException(H.IterableElementError_noElement());
    },
    firstWhere$1: function($receiver, test) {
      return this.firstWhere$2$orElse($receiver, test, null);
    },
    join$1: function(_, separator) {
      return "";
    },
    where$1: function(_, test) {
      return this;
    },
    map$1: function(_, f) {
      return C.C_EmptyIterable;
    },
    fold$2: function(_, initialValue, combine) {
      return initialValue;
    },
    skip$1: function(_, count) {
      if (J.$lt$n(count, 0) === true)
        throw H.wrapException(P.RangeError$value(count));
      return this;
    },
    toList$1$growable: function(_, growable) {
      var t1;
      if (growable) {
        t1 = [];
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
      } else {
        t1 = Array(0);
        t1.fixed$length = init;
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
      }
      return t1;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    $isEfficientLength: true
  },
  EmptyIterator: {
    "^": "Object;",
    moveNext$0: function() {
      return false;
    },
    get$current: function() {
      return;
    }
  },
  IterableMixinWorkaround: {
    "^": "Object;",
    static: {IterableMixinWorkaround_forEach: function(iterable, f) {
        var t1 = new H.ListIterator(iterable, iterable.length, 0, null);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(iterable, 0)];
        for (; t1.moveNext$0();)
          f.call$1(t1._current);
      }, IterableMixinWorkaround_any: function(iterable, f) {
        var t1 = new H.ListIterator(iterable, iterable.length, 0, null);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(iterable, 0)];
        for (; t1.moveNext$0();)
          if (f.call$1(t1._current) === true)
            return true;
        return false;
      }, IterableMixinWorkaround_fold: function(iterable, initialValue, combine) {
        var t1 = new H.ListIterator(iterable, iterable.length, 0, null);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(iterable, 0)];
        for (; t1.moveNext$0();)
          initialValue = combine.call$2(initialValue, t1._current);
        return initialValue;
      }, IterableMixinWorkaround_firstWhere: function(iterable, test, orElse) {
        var t1, element;
        t1 = new H.ListIterator(iterable, iterable.length, 0, null);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(iterable, 0)];
        for (; t1.moveNext$0();) {
          element = t1._current;
          if (test.call$1(element) === true)
            return element;
        }
        throw H.wrapException(H.IterableElementError_noElement());
      }, IterableMixinWorkaround__rangeCheck: function(list, start, end) {
        var t1 = J.getInterceptor$n(start);
        if (t1.$lt(start, 0) === true || t1.$gt(start, list.length) === true)
          throw H.wrapException(P.RangeError$range(start, 0, list.length));
        t1 = J.getInterceptor$n(end);
        if (t1.$lt(end, start) === true || t1.$gt(end, list.length) === true)
          throw H.wrapException(P.RangeError$range(end, start, list.length));
      }, IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
        var $length, t1, otherStart, otherList;
        H.IterableMixinWorkaround__rangeCheck(list, start, end);
        $length = J.$sub$n(end, start);
        if (J.$eq($length, 0))
          return;
        if (J.$lt$n(skipCount, 0) === true)
          throw H.wrapException(P.ArgumentError$(skipCount));
        t1 = J.getInterceptor(from);
        if (!!t1.$isList) {
          otherStart = skipCount;
          otherList = from;
        } else {
          otherList = J.toList$1$growable$ax(t1.skip$1(from, skipCount), false);
          otherStart = 0;
        }
        if (J.$gt$n(J.$add$ns(otherStart, $length), J.get$length$asx(otherList)) === true)
          throw H.wrapException(H.IterableElementError_tooFew());
        H.Lists_copy(otherList, otherStart, list, start, $length);
      }, IterableMixinWorkaround_insertAllList: function(list, index, iterable) {
        var insertionLength, t1, index0;
        if (index > list.length)
          throw H.wrapException(P.RangeError$range(index, 0, list.length));
        insertionLength = iterable.length;
        C.JSArray_methods.set$length(list, list.length + insertionLength);
        t1 = list.length;
        if (!!list.immutable$list)
          H.throwExpression(P.UnsupportedError$("set range"));
        H.IterableMixinWorkaround_setRangeList(list, index + insertionLength, t1, list, index);
        t1 = new H.ListIterator(iterable, iterable.length, 0, null);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(iterable, 0)];
        for (; t1.moveNext$0(); index = index0) {
          index0 = index + 1;
          C.JSArray_methods.$indexSet(list, index, t1._current);
        }
      }}
  },
  FixedLengthListMixin: {
    "^": "Object;",
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    addAll$1: function(receiver, iterable) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    remove$1: function(receiver, element) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    },
    clear$0: function(receiver) {
      throw H.wrapException(P.UnsupportedError$("Cannot clear a fixed-length list"));
    }
  },
  UnmodifiableListMixin: {
    "^": "Object;",
    $indexSet: function(_, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    addAll$1: function(_, iterable) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    remove$1: function(_, element) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    clear$0: function(_) {
      throw H.wrapException(P.UnsupportedError$("Cannot clear an unmodifiable list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  UnmodifiableListBase: {
    "^": "ListBase+UnmodifiableListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  ReversedListIterable: {
    "^": "ListIterable;__internal$_source",
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_source);
    },
    elementAt$1: function(_, index) {
      var t1, t2;
      t1 = this.__internal$_source;
      t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, J.$sub$n(J.$sub$n(t2.get$length(t1), 1), index));
    }
  },
  Symbol: {
    "^": "Object;_name>",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isSymbol && J.$eq(this._name, other._name);
    },
    get$hashCode: function(_) {
      var t1 = J.get$hashCode$(this._name);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 536870911 & 664597 * t1;
    },
    toString$0: function(_) {
      return "Symbol(\"" + H.S(this._name) + "\")";
    },
    $isSymbol: true,
    $isSymbol0: true,
    static: {"^": "Symbol_reservedWordRE,Symbol_publicIdentifierRE,Symbol_identifierRE,Symbol_operatorRE,Symbol_publicSymbolPattern,Symbol_symbolPattern", Symbol_validatePublicSymbol: function($name) {
        var t1, t2;
        t1 = J.getInterceptor$asx($name);
        if (t1.get$isEmpty($name) !== true) {
          t2 = $.get$Symbol_publicSymbolPattern()._nativeRegExp;
          if (typeof $name !== "string")
            H.throwExpression(P.ArgumentError$($name));
          t2 = t2.test($name);
        } else
          t2 = true;
        if (t2)
          return $name;
        if (t1.startsWith$1($name, "_") === true)
          throw H.wrapException(P.ArgumentError$("\"" + H.S($name) + "\" is a private identifier"));
        throw H.wrapException(P.ArgumentError$("\"" + H.S($name) + "\" is not a valid (qualified) symbol name"));
      }}
  }
}],
["dart._js_mirrors", "dart:_js_mirrors", , H, {
  "^": "",
  n: function(symbol) {
    return J.get$_name$x(symbol);
  },
  s: function($name) {
    if ($name == null)
      return;
    return new H.Symbol($name);
  },
  reflect: [function(reflectee) {
    if (!!J.getInterceptor(reflectee).$isClosure)
      return new H.JsClosureMirror(reflectee, 4);
    else
      return new H.JsInstanceMirror(reflectee, 4);
  }, "call$1", "reflect$closure", 2, 0, 15, 16, []],
  reflectClassByMangledName: function(mangledName) {
    var unmangledName, t1;
    unmangledName = $.get$mangledGlobalNames().$index(0, mangledName);
    t1 = J.getInterceptor(mangledName);
    if (t1.$eq(mangledName, "dynamic"))
      return $.get$JsMirrorSystem__dynamicType();
    if (t1.$eq(mangledName, "void"))
      return $.get$JsMirrorSystem__voidType();
    return H.reflectClassByName(H.s(unmangledName == null ? mangledName : unmangledName), mangledName);
  },
  reflectClassByName: function(symbol, mangledName) {
    var t1, mirror, typeArgIndex, t2, t3, $constructor, descriptor, fields, fieldsMetadata, mixins, classMirror, typeVariables, typeArguments, i;
    t1 = $.classMirrors;
    if (t1 == null) {
      t1 = H.JsCache_allocate();
      $.classMirrors = t1;
    }
    mirror = t1[mangledName];
    if (mirror != null)
      return mirror;
    t1 = J.getInterceptor$asx(mangledName);
    typeArgIndex = t1.indexOf$1(mangledName, "<");
    t2 = J.getInterceptor(typeArgIndex);
    if (!t2.$eq(typeArgIndex, -1)) {
      t3 = H.reflectClassByMangledName(t1.substring$2(mangledName, 0, typeArgIndex)).get$originalDeclaration();
      mirror = new H.JsTypeBoundClassMirror(t3, t1.substring$2(mangledName, t2.$add(typeArgIndex, 1), J.$sub$n(t1.get$length(mangledName), 1)), null, null, null, null, null, null, null, null, null, null, null, null, null, t3.get$simpleName());
      $.classMirrors[mangledName] = mirror;
      return mirror;
    }
    $constructor = init.allClasses[mangledName];
    if ($constructor == null)
      throw H.wrapException(P.UnsupportedError$("Cannot find class for: " + H.S(H.n(symbol))));
    descriptor = $constructor["@"];
    if (descriptor == null) {
      fields = null;
      fieldsMetadata = null;
    } else {
      fields = descriptor["^"];
      t1 = J.getInterceptor(fields);
      if (!!t1.$isList) {
        fieldsMetadata = t1.getRange$2(fields, 1, t1.get$length(fields)).toList$0(0);
        fields = t1.$index(fields, 0);
      } else
        fieldsMetadata = null;
      if (typeof fields !== "string")
        fields = "";
    }
    t1 = J.getInterceptor$s(fields);
    if (t1.startsWith$1(fields, ":")) {
      mirror = new H.JsTypedefMirror(mangledName, null, symbol);
      mirror.referent = new H.JsFunctionTypeMirror(init.metadata[H.Primitives_parseInt(t1.substring$2(fields, 1, t1.get$length(fields) - 1), null, null)], null, null, null, mirror);
    } else {
      t1 = t1.split$1(fields, ";");
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      mixins = J.split$1$s(t1[0], "+");
      if (J.$gt$n(J.get$length$asx(mixins), 1) === true && $.get$mangledGlobalNames().$index(0, mangledName) == null)
        mirror = H.reflectMixinApplication(mixins, mangledName);
      else {
        classMirror = new H.JsClassMirror(mangledName, $constructor, fields, fieldsMetadata, H.JsCache_allocate(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, symbol);
        typeVariables = $constructor.prototype["<>"];
        if (typeVariables == null || typeVariables.length === 0)
          mirror = classMirror;
        else {
          for (t1 = typeVariables.length, typeArguments = "dynamic", i = 1; i < t1; ++i)
            typeArguments += ",dynamic";
          mirror = new H.JsTypeBoundClassMirror(classMirror, typeArguments, null, null, null, null, null, null, null, null, null, null, null, null, null, classMirror.simpleName);
        }
      }
    }
    $.classMirrors[mangledName] = mirror;
    return mirror;
  },
  filterMethods: function(methods) {
    var result, t1, method;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    for (t1 = J.get$iterator$ax(methods); t1.moveNext$0() === true;) {
      method = t1.get$current();
      if (method.get$isConstructor() !== true && method.get$isGetter() !== true && method.get$isSetter() !== true)
        result.$indexSet(0, method.get$simpleName(), method);
    }
    return result;
  },
  filterConstructors: function(methods) {
    var result, t1, method;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    for (t1 = J.get$iterator$ax(methods); t1.moveNext$0() === true;) {
      method = t1.get$current();
      if (method.get$isConstructor() === true)
        result.$indexSet(0, method.get$simpleName(), method);
    }
    return result;
  },
  filterGetters: function(methods, fields) {
    var result, t1, method, t2;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    for (t1 = J.get$iterator$ax(methods); t1.moveNext$0() === true;) {
      method = t1.get$current();
      if (method.get$isGetter() === true) {
        t2 = method.get$simpleName();
        if (fields._map.$index(0, t2) != null)
          continue;
        result.$indexSet(0, method.get$simpleName(), method);
      }
    }
    return result;
  },
  filterMembers: function(methods, variables) {
    var result, t1, method, $name, t2;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    result.addAll$1(0, variables);
    for (t1 = J.get$iterator$ax(methods); t1.moveNext$0() === true;) {
      method = t1.get$current();
      if (method.get$isSetter() === true) {
        $name = J.get$_name$x(method.get$simpleName());
        t2 = J.getInterceptor$asx($name);
        if (!!J.getInterceptor(result.$index(0, H.s(t2.substring$2($name, 0, J.$sub$n(t2.get$length($name), 1))))).$isVariableMirror)
          continue;
      }
      if (method.get$isConstructor() === true)
        continue;
      result.putIfAbsent$2(method.get$simpleName(), new H.filterMembers_closure(method));
    }
    return result;
  },
  reflectMixinApplication: function(mixinNames, mangledName) {
    var mixins, t1, it, superclass;
    mixins = [];
    for (t1 = J.get$iterator$ax(mixinNames); t1.moveNext$0() === true;)
      mixins.push(H.reflectClassByMangledName(t1.get$current()));
    it = new H.ListIterator(mixins, mixins.length, 0, null);
    it.$builtinTypeInfo = [H.getTypeArgumentByIndex(mixins, 0)];
    it.moveNext$0();
    superclass = it._current;
    for (; it.moveNext$0();)
      superclass = new H.JsMixinApplication(superclass, it._current, null, null, H.s(mangledName));
    return superclass;
  },
  findTypeVariableIndex: function(typeVariables, $name) {
    var t1, i, t2;
    t1 = J.getInterceptor$asx(typeVariables);
    i = 0;
    while (true) {
      t2 = t1.get$length(typeVariables);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (!(i < t2))
        break;
      if (J.$eq(t1.$index(typeVariables, i).get$simpleName(), H.s($name)))
        return i;
      ++i;
    }
    throw H.wrapException(P.ArgumentError$("Type variable not present in list."));
  },
  typeMirrorFromRuntimeTypeRepresentation: function(owner, type) {
    var t1, context, t2, representation, typeVariable, typeVariables, typeArgument;
    t1 = {};
    t1.ownerClass_0 = null;
    for (context = owner; context != null;) {
      t2 = J.getInterceptor(context);
      if (!!t2.$isClassMirror) {
        t1.ownerClass_0 = context;
        break;
      }
      if (!!t2.$isTypedefMirror)
        break;
      context = context.get$owner();
    }
    if (type == null)
      return $.get$JsMirrorSystem__dynamicType();
    else {
      t2 = t1.ownerClass_0;
      if (t2 == null)
        representation = H.runtimeTypeToString(type, null);
      else if (t2.get$isOriginalDeclaration())
        if (typeof type === "number") {
          typeVariable = init.metadata[type];
          typeVariables = t1.ownerClass_0.get$typeVariables();
          return J.$index$asx(typeVariables, H.findTypeVariableIndex(typeVariables, J.get$name$x(typeVariable)));
        } else
          representation = H.runtimeTypeToString(type, null);
      else {
        t1 = new H.typeMirrorFromRuntimeTypeRepresentation_getTypeArgument(t1);
        if (typeof type === "number") {
          typeArgument = t1.call$1(type);
          if (!!J.getInterceptor(typeArgument).$isJsTypeVariableMirror)
            return typeArgument;
        }
        representation = H.runtimeTypeToString(type, new H.typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable(t1));
      }
    }
    if (representation != null)
      return H.reflectClassByMangledName(representation);
    return P.reflectClass(C.Type_EjN);
  },
  computeQualifiedName: function(owner, simpleName) {
    if (owner == null)
      return simpleName;
    return H.s(H.S(J.get$_name$x(owner.get$qualifiedName())) + "." + H.S(J.get$_name$x(simpleName)));
  },
  extractMetadata: function(victim) {
    var metadataFunction, t1;
    metadataFunction = Object.prototype.hasOwnProperty.call(victim, "@") ? victim["@"] : null;
    if (metadataFunction != null)
      return metadataFunction();
    if (typeof victim != "function")
      return C.List_empty;
    if ("$metadataIndex" in victim) {
      t1 = victim.$reflectionInfo.splice(victim.$metadataIndex);
      t1.fixed$length = init;
      t1 = new H.MappedListIterable(t1, new H.extractMetadata_closure());
      t1.$builtinTypeInfo = [null, null];
      return t1.toList$0(0);
    }
    return C.List_empty;
  },
  parseCompactFieldSpecification: function(owner, fieldSpecification, isStatic, result) {
    var t1, fields, fieldsMetadata, t2, fieldNumber, field, fieldNumber0, metadata, mirror;
    t1 = J.getInterceptor(fieldSpecification);
    if (!!t1.$isList) {
      fields = H.splitFields(t1.$index(fieldSpecification, 0), ",");
      fieldsMetadata = t1.sublist$1(fieldSpecification, 1);
    } else {
      fields = typeof fieldSpecification === "string" ? H.splitFields(fieldSpecification, ",") : [];
      fieldsMetadata = null;
    }
    for (t1 = J.get$iterator$ax(fields), t2 = fieldsMetadata != null, fieldNumber = 0; t1.moveNext$0() === true;) {
      field = t1.get$current();
      if (t2) {
        fieldNumber0 = fieldNumber + 1;
        if (fieldNumber >= fieldsMetadata.length)
          return H.ioore(fieldsMetadata, fieldNumber);
        metadata = fieldsMetadata[fieldNumber];
        fieldNumber = fieldNumber0;
      } else
        metadata = null;
      mirror = H.JsVariableMirror_JsVariableMirror$from(field, metadata, owner, isStatic);
      if (mirror != null)
        result.push(mirror);
    }
  },
  splitFields: function(string, pattern) {
    var t1 = J.getInterceptor$asx(string);
    if (t1.get$isEmpty(string) === true) {
      t1 = [];
      t1.$builtinTypeInfo = [P.String];
      return t1;
    }
    return t1.split$1(string, pattern);
  },
  isOperatorName: function($name) {
    switch ($name) {
      case "==":
      case "[]":
      case "*":
      case "/":
      case "%":
      case "~/":
      case "+":
      case "<<":
      case ">>":
      case ">=":
      case ">":
      case "<=":
      case "<":
      case "&":
      case "^":
      case "|":
      case "-":
      case "unary-":
      case "[]=":
      case "~":
        return true;
      default:
        return false;
    }
  },
  isReflectiveDataInPrototype: function(key) {
    var t1, firstChar;
    t1 = J.getInterceptor(key);
    if (t1.$eq(key, "^") || t1.$eq(key, "$methodsWithOptionalArguments"))
      return true;
    firstChar = t1.$index(key, 0);
    t1 = J.getInterceptor(firstChar);
    return t1.$eq(firstChar, "*") || t1.$eq(firstChar, "+");
  },
  getSymbol: function($name, library) {
    if (H._isPublicSymbol($name))
      return new H.Symbol(H.Symbol_validatePublicSymbol($name));
    throw H.wrapException(P.ArgumentError$("Library required for private symbol name: " + H.S($name)));
  },
  _isPublicSymbol: function($name) {
    var t1, index, t2;
    t1 = J.getInterceptor$asx($name);
    if (t1.get$isEmpty($name) === true)
      return true;
    index = -1;
    do {
      t2 = J.getInterceptor$ns(index);
      if (J.$eq(t1.codeUnitAt$1($name, t2.$add(index, 1)), 95))
        return false;
      index = t1.indexOf$2($name, ".", t2.$add(index, 1));
      t2 = J.getInterceptor$n(index);
    } while (t2.$ge(index, 0) === true && J.$lt$n(t2.$add(index, 1), t1.get$length($name)) === true);
    return true;
  },
  JsMirrorSystem: {
    "^": "Object;_cachedLibraries,isolate",
    static: {"^": "JsMirrorSystem__dynamicType,JsMirrorSystem__voidType,JsMirrorSystem_librariesByName", JsMirrorSystem_computeLibrariesByName: function() {
        var result, jsLibraries, t1, data, t2, $name, uri, classes, functions, metadataFunction, fields, isRoot, globalObject, metadata;
        result = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, [P.List, P.LibraryMirror]);
        jsLibraries = init.libraries;
        if (jsLibraries == null)
          return result;
        t1 = new H.ListIterator(jsLibraries, jsLibraries.length, 0, null);
        t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(jsLibraries, 0)];
        for (; t1.moveNext$0();) {
          data = t1._current;
          t2 = J.getInterceptor$asx(data);
          $name = t2.$index(data, 0);
          uri = P.Uri_parse(t2.$index(data, 1));
          classes = t2.$index(data, 2);
          functions = t2.$index(data, 3);
          metadataFunction = t2.$index(data, 4);
          fields = t2.$index(data, 5);
          isRoot = t2.$index(data, 6);
          globalObject = t2.$index(data, 7);
          metadata = metadataFunction == null ? C.List_empty : metadataFunction();
          J.add$1$ax(result.putIfAbsent$2($name, new H.JsMirrorSystem_computeLibrariesByName_closure()), new H.JsLibraryMirror(uri, classes, functions, metadata, fields, isRoot, globalObject, null, null, null, null, null, null, null, null, null, null, H.s($name)));
        }
        return result;
      }}
  },
  JsMirrorSystem_computeLibrariesByName_closure: {
    "^": "Closure:14;",
    call$0: function() {
      var t1 = [];
      t1.$builtinTypeInfo = [P.LibraryMirror];
      return t1;
    },
    $isFunction: true
  },
  JsMirror: {
    "^": "Object;",
    toString$0: function(_) {
      return this.get$_prettyName();
    },
    _getField$1: function(receiver) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    $isMirror: true
  },
  JsIsolateMirror: {
    "^": "JsMirror;_isolateContext",
    get$_prettyName: function() {
      return "Isolate";
    },
    $isMirror: true
  },
  JsDeclarationMirror: {
    "^": "JsMirror;simpleName<",
    get$qualifiedName: function() {
      return H.computeQualifiedName(this.get$owner(), this.get$simpleName());
    },
    toString$0: function(_) {
      return this.get$_prettyName() + " on '" + H.S(J.get$_name$x(this.get$simpleName())) + "'";
    },
    _invoke$2: function(positionalArguments, namedArguments) {
      throw H.wrapException(H.RuntimeError$("Should not call _invoke"));
    },
    $isDeclarationMirror: true,
    $isMirror: true
  },
  JsTypeVariableMirror: {
    "^": "JsTypeMirror;owner<,_typeVariable,_metadataIndex,_cachedUpperBound,simpleName",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isJsTypeVariableMirror && J.$eq(this.simpleName, other.simpleName) && J.$eq(this.owner, other.owner);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = J.get$hashCode$(C.Type_AGr._typeName);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = J.get$hashCode$(this.simpleName);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = J.get$hashCode$(this.owner);
      if (typeof t3 !== "number")
        return H.iae(t3);
      return (1073741823 & t1 ^ 17 * t2 ^ 19 * t3) >>> 0;
    },
    get$_prettyName: function() {
      return "TypeVariableMirror";
    },
    get$isStatic: function() {
      return false;
    },
    $isJsTypeVariableMirror: true,
    $isTypeVariableMirror: true,
    $isTypeMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true
  },
  JsTypeMirror: {
    "^": "JsDeclarationMirror;simpleName",
    get$_prettyName: function() {
      return "TypeMirror";
    },
    get$owner: function() {
      return;
    },
    get$reflectedType: function() {
      throw H.wrapException(P.UnsupportedError$("This type does not support reflectedType"));
    },
    get$typeVariables: function() {
      return C.List_empty0;
    },
    get$typeArguments: function() {
      return C.List_empty1;
    },
    get$isOriginalDeclaration: function() {
      return true;
    },
    get$originalDeclaration: function() {
      return this;
    },
    $isTypeMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true
  },
  JsLibraryMirror: {
    "^": "JsDeclarationMirror_JsObjectMirror;_uri,_classes,_functions,_metadata,_compactFieldSpecification,_isRoot,_globalObject,_cachedFunctionMirrors,_cachedFields,_cachedClasses,_cachedFunctions,_cachedGetters,_cachedSetters,_cachedVariables,_cachedMembers,_cachedDeclarations,_cachedMetadata,simpleName",
    get$_prettyName: function() {
      return "LibraryMirror";
    },
    get$qualifiedName: function() {
      return this.simpleName;
    },
    get$_methods: function() {
      return this.get$_functionMirrors();
    },
    get$__classes: function() {
      var t1, result, cls, t2;
      t1 = this._cachedClasses;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t1 = J.get$iterator$ax(this._classes); t1.moveNext$0() === true;) {
        cls = H.reflectClassByMangledName(t1.get$current());
        if (!!J.getInterceptor(cls).$isClassMirror)
          cls = cls.get$originalDeclaration();
        t2 = J.getInterceptor(cls);
        if (!!t2.$isJsClassMirror) {
          result.$indexSet(0, cls.simpleName, cls);
          cls._owner = this;
        } else if (!!t2.$isJsTypedefMirror)
          result.$indexSet(0, cls.simpleName, cls);
      }
      t1 = new P.UnmodifiableMapView(result);
      t1.$builtinTypeInfo = [P.Symbol0, P.ClassMirror];
      this._cachedClasses = t1;
      return t1;
    },
    getField$1: function(fieldName) {
      var mirror, getter;
      mirror = this.get$__members()._map.$index(0, fieldName);
      if (mirror == null)
        throw H.wrapException(H.NoSuchStaticMethodError$method(null, fieldName, [], null));
      if (!J.getInterceptor(mirror).$isMethodMirror)
        return H.reflect(mirror._getField$1(this));
      if (mirror.get$isGetter())
        return H.reflect(mirror._getField$1(this));
      getter = mirror._jsFunction.$getter;
      if (getter == null)
        throw H.wrapException(P.UnimplementedError$(null));
      return H.reflect(getter());
    },
    invoke$3: function(memberName, positionalArguments, namedArguments) {
      var mirror, t1, t2;
      if (namedArguments != null && J.get$isEmpty$asx(namedArguments) !== true)
        throw H.wrapException(P.UnsupportedError$("Named arguments are not implemented."));
      mirror = this.get$__members()._map.$index(0, memberName);
      t1 = !!J.getInterceptor(mirror).$isJsMethodMirror;
      if (t1 && !("$reflectable" in mirror._jsFunction))
        H.throwInvalidReflectionError(J.get$_name$x(memberName));
      if (mirror != null)
        t2 = t1 && mirror.isSetter;
      else
        t2 = true;
      if (t2)
        throw H.wrapException(H.NoSuchStaticMethodError$method(null, memberName, positionalArguments, namedArguments));
      if (t1 && !mirror.isGetter)
        return H.reflect(mirror._invoke$2(positionalArguments, namedArguments));
      return this.getField$1(memberName).invoke$3(C.Symbol_call, positionalArguments, namedArguments);
    },
    get$_functionMirrors: function() {
      var t1, result, t2, t3, i, t4, $name, jsFunction, unmangledName, isConstructor, mirror;
      t1 = this._cachedFunctionMirrors;
      if (t1 != null)
        return t1;
      result = [];
      result.$builtinTypeInfo = [H.JsMethodMirror];
      t1 = this._functions;
      t2 = J.getInterceptor$asx(t1);
      t3 = this._globalObject;
      i = 0;
      while (true) {
        t4 = t2.get$length(t1);
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(i < t4))
          break;
        c$0: {
          $name = t2.$index(t1, i);
          jsFunction = t3[$name];
          unmangledName = $.get$mangledGlobalNames().$index(0, $name);
          if (unmangledName == null || !!jsFunction.$getterStub)
            break c$0;
          isConstructor = J.getInterceptor$s(unmangledName).startsWith$1(unmangledName, "new ");
          if (isConstructor) {
            t4 = C.JSString_methods.substring$1(unmangledName, 4);
            unmangledName = H.stringReplaceAllUnchecked(t4, "$", ".");
          }
          mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(unmangledName, jsFunction, !isConstructor, isConstructor);
          result.push(mirror);
          mirror._owner = this;
        }
        ++i;
      }
      this._cachedFunctionMirrors = result;
      return result;
    },
    get$_fields: function() {
      var t1, result;
      t1 = this._cachedFields;
      if (t1 != null)
        return t1;
      result = [];
      result.$builtinTypeInfo = [P.VariableMirror];
      H.parseCompactFieldSpecification(this, this._compactFieldSpecification, true, result);
      this._cachedFields = result;
      return result;
    },
    get$__functions: function() {
      var t1, result, t2, mirror;
      t1 = this._cachedFunctions;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1 = this.get$_functionMirrors();
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      for (; t2.moveNext$0();) {
        mirror = t2._current;
        if (mirror.get$isConstructor() !== true)
          result.$indexSet(0, mirror.get$simpleName(), mirror);
      }
      t1 = new P.UnmodifiableMapView(result);
      t1.$builtinTypeInfo = [P.Symbol0, P.MethodMirror];
      this._cachedFunctions = t1;
      return t1;
    },
    get$__getters: function() {
      var t1 = this._cachedGetters;
      if (t1 != null)
        return t1;
      t1 = new P.UnmodifiableMapView(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      t1.$builtinTypeInfo = [P.Symbol0, P.MethodMirror];
      this._cachedGetters = t1;
      return t1;
    },
    get$__setters: function() {
      var t1 = this._cachedSetters;
      if (t1 != null)
        return t1;
      t1 = new P.UnmodifiableMapView(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      t1.$builtinTypeInfo = [P.Symbol0, P.MethodMirror];
      this._cachedSetters = t1;
      return t1;
    },
    get$__variables: function() {
      var t1, result, t2, mirror;
      t1 = this._cachedVariables;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1 = this.get$_fields();
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      for (; t2.moveNext$0();) {
        mirror = t2._current;
        result.$indexSet(0, mirror.get$simpleName(), mirror);
      }
      t1 = new P.UnmodifiableMapView(result);
      t1.$builtinTypeInfo = [P.Symbol0, P.VariableMirror];
      this._cachedVariables = t1;
      return t1;
    },
    get$__members: function() {
      var t1, result;
      t1 = this._cachedMembers;
      if (t1 != null)
        return t1;
      t1 = this.get$__classes();
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      result.addAll$1(0, t1);
      t1 = new H.JsLibraryMirror___members_addToResult(result);
      this.get$__functions()._map.forEach$1(0, t1);
      this.get$__getters()._map.forEach$1(0, t1);
      this.get$__setters()._map.forEach$1(0, t1);
      this.get$__variables()._map.forEach$1(0, t1);
      t1 = new P.UnmodifiableMapView(result);
      t1.$builtinTypeInfo = [P.Symbol0, P.Mirror];
      this._cachedMembers = t1;
      return t1;
    },
    get$declarations: function() {
      var t1, result;
      t1 = this._cachedDeclarations;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol0, P.DeclarationMirror);
      this.get$__members()._map.forEach$1(0, new H.JsLibraryMirror_declarations_addToResult(result));
      t1 = new P.UnmodifiableMapView(result);
      t1.$builtinTypeInfo = [P.Symbol0, P.DeclarationMirror];
      this._cachedDeclarations = t1;
      return t1;
    },
    get$owner: function() {
      return;
    },
    $isLibraryMirror: true,
    $isMirror: true,
    $isDeclarationMirror: true
  },
  JsDeclarationMirror_JsObjectMirror: {
    "^": "JsDeclarationMirror+JsObjectMirror;",
    $isMirror: true
  },
  JsLibraryMirror___members_addToResult: {
    "^": "Closure:100;result_0",
    call$2: function(key, value) {
      this.result_0.$indexSet(0, key, value);
    },
    $isFunction: true
  },
  JsLibraryMirror_declarations_addToResult: {
    "^": "Closure:100;result_0",
    call$2: function(key, value) {
      this.result_0.$indexSet(0, key, value);
    },
    $isFunction: true
  },
  filterMembers_closure: {
    "^": "Closure:14;method_0",
    call$0: function() {
      return this.method_0;
    },
    $isFunction: true
  },
  JsMixinApplication: {
    "^": "JsTypeMirror_JsObjectMirror;superclass,mixin,_cachedSimpleName,_cachedInstanceMembers,simpleName",
    get$_prettyName: function() {
      return "ClassMirror";
    },
    get$simpleName: function() {
      var t1, superName;
      t1 = this._cachedSimpleName;
      if (t1 != null)
        return t1;
      superName = J.get$_name$x(this.superclass.get$qualifiedName());
      t1 = this.mixin;
      t1 = J.contains$1$asx(superName, " with ") === true ? H.s(H.S(superName) + ", " + H.S(J.get$_name$x(t1.get$qualifiedName()))) : H.s(H.S(superName) + " with " + H.S(J.get$_name$x(t1.get$qualifiedName())));
      this._cachedSimpleName = t1;
      return t1;
    },
    get$qualifiedName: function() {
      return this.get$simpleName();
    },
    get$declarations: function() {
      return this.mixin.get$declarations();
    },
    invoke$3: function(memberName, positionalArguments, namedArguments) {
      throw H.wrapException(H.NoSuchStaticMethodError$method(null, memberName, positionalArguments, namedArguments));
    },
    get$isOriginalDeclaration: function() {
      return true;
    },
    get$originalDeclaration: function() {
      return this;
    },
    get$typeVariables: function() {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    get$typeArguments: function() {
      return C.List_empty1;
    },
    $isClassMirror: true,
    $isMirror: true,
    $isTypeMirror: true,
    $isDeclarationMirror: true
  },
  JsTypeMirror_JsObjectMirror: {
    "^": "JsTypeMirror+JsObjectMirror;",
    $isMirror: true
  },
  JsObjectMirror: {
    "^": "Object;",
    $isMirror: true
  },
  JsInstanceMirror: {
    "^": "JsObjectMirror;reflectee<,_getterCache",
    get$type: function(_) {
      var t1 = this.reflectee;
      if (t1 == null)
        return P.reflectClass(C.Type_eZO);
      return H.reflectClassByMangledName(H.getRuntimeTypeString(t1));
    },
    invoke$3: function(memberName, positionalArguments, namedArguments) {
      return this._invoke$4(memberName, 0, positionalArguments, namedArguments == null ? C.Map_empty : namedArguments);
    },
    _invokeMethodWithNamedArguments$3: function(reflectiveName, positionalArguments, namedArguments) {
      var t1, jsFunction, info, t2, defaultArguments, t3, i, t4;
      t1 = this.reflectee;
      jsFunction = J.getInterceptor(t1)[reflectiveName];
      if (jsFunction == null)
        throw H.wrapException(H.UnimplementedNoSuchMethodError$("Invoking noSuchMethod with named arguments not implemented"));
      info = H.ReflectionInfo_ReflectionInfo(jsFunction);
      positionalArguments = P.List_List$from(positionalArguments, true, null);
      t2 = info.requiredParameterCount;
      if (t2 !== positionalArguments.length)
        throw H.wrapException(H.UnimplementedNoSuchMethodError$("Invoking noSuchMethod with named arguments not implemented"));
      defaultArguments = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t3 = info.optionalParameterCount, i = 0; i < t3; ++i) {
        t4 = i + t2;
        defaultArguments.$indexSet(0, info.parameterName$1(t4), init.metadata[info.defaultValue$1(0, t4)]);
      }
      J.forEach$1$ax(namedArguments, new H.JsInstanceMirror__invokeMethodWithNamedArguments_closure(defaultArguments));
      C.JSArray_methods.addAll$1(positionalArguments, defaultArguments.get$values(defaultArguments));
      return H.reflect(jsFunction.apply(t1, positionalArguments));
    },
    get$_classInvocationCache: function() {
      var cacheName, cacheHolder, cache;
      cacheName = $.Primitives_mirrorInvokeCacheName;
      cacheHolder = this.reflectee;
      if (cacheHolder == null)
        cacheHolder = J.getInterceptor(null);
      cache = cacheHolder.constructor[cacheName];
      if (cache == null) {
        cache = H.JsCache_allocate();
        cacheHolder.constructor[cacheName] = cache;
      }
      return cache;
    },
    _computeReflectiveName$4: function(symbolName, type, positionalArguments, namedArguments) {
      var $name, nbArgs;
      $name = J.get$_name$x(symbolName);
      switch (type) {
        case 1:
          return $name;
        case 2:
          return H.S($name) + "=";
        case 0:
          if (J.get$isNotEmpty$asx(namedArguments) === true)
            return H.S($name) + "*";
          nbArgs = H.intTypeCast(J.get$length$asx(positionalArguments));
          return H.S($name) + ":" + H.S(nbArgs) + ":0";
      }
      throw H.wrapException(H.RuntimeError$("Could not compute reflective name for " + H.S($name)));
    },
    _getCachedInvocation$5: function($name, type, reflectiveName, positionalArguments, namedArguments) {
      var cache, cacheEntry;
      cache = this.get$_classInvocationCache();
      cacheEntry = cache[reflectiveName];
      if (cacheEntry == null) {
        cacheEntry = new H.JSInvocationMirror($name, $.get$reflectiveNames().$index(0, reflectiveName), type, positionalArguments, C.List_empty, null).__js_helper$_getCachedInvocation$1(this.reflectee);
        cache[reflectiveName] = cacheEntry;
      }
      return cacheEntry;
    },
    _invoke$4: function($name, type, positionalArguments, namedArguments) {
      var reflectiveName, cacheEntry, t1, getterCacheEntry;
      reflectiveName = this._computeReflectiveName$4($name, type, positionalArguments, namedArguments);
      if (J.get$isNotEmpty$asx(namedArguments) === true)
        return this._invokeMethodWithNamedArguments$3(reflectiveName, positionalArguments, namedArguments);
      cacheEntry = this._getCachedInvocation$5($name, type, reflectiveName, positionalArguments, namedArguments);
      if (cacheEntry.get$isNoSuchMethod() !== true)
        t1 = !("$reflectable" in cacheEntry.get$jsFunction() || !!J.getInterceptor(this.reflectee).$isTearOffClosure);
      else
        t1 = true;
      if (t1) {
        if (type === 0) {
          getterCacheEntry = this._getCachedInvocation$5($name, 1, this._computeReflectiveName$4($name, 1, C.List_empty, C.Map_empty), C.List_empty, C.Map_empty);
          t1 = getterCacheEntry.get$isNoSuchMethod() !== true && getterCacheEntry.get$isGetterStub() !== true;
        } else
          t1 = false;
        if (t1)
          return this.getField$1($name).invoke$3(C.Symbol_call, positionalArguments, namedArguments);
        if (type === 2)
          $name = H.s(H.S(J.get$_name$x($name)) + "=");
        if (cacheEntry.get$isNoSuchMethod() !== true)
          H.throwInvalidReflectionError(reflectiveName);
        return H.reflect(cacheEntry.invokeOn$2(this.reflectee, new H.JSInvocationMirror($name, $.get$reflectiveNames().$index(0, reflectiveName), type, positionalArguments, [], null)));
      } else
        return H.reflect(cacheEntry.invokeOn$2(this.reflectee, positionalArguments));
    },
    getField$1: function(fieldName) {
      var cache, getter, value, result;
      $FASTPATH$0: {
        cache = this._getterCache;
        if (typeof cache == "number" || typeof fieldName.$p == "undefined")
          break $FASTPATH$0;
        getter = fieldName.$p(cache);
        if (typeof getter == "undefined")
          break $FASTPATH$0;
        value = getter(this.reflectee);
        if (value === getter.v)
          return getter.m;
        else {
          result = H.reflect(value);
          getter.v = value;
          getter.m = result;
          return result;
        }
      }
      return this._getFieldSlow$1(fieldName);
    },
    _getFieldSlow$1: function(fieldName) {
      var result, $name, cacheEntry, cache, useEval, mangledName, getter;
      result = this._invoke$4(fieldName, 1, C.List_empty, C.Map_empty);
      $name = J.get$_name$x(fieldName);
      cacheEntry = this.get$_classInvocationCache()[$name];
      if (cacheEntry.get$isNoSuchMethod() === true)
        return result;
      cache = this._getterCache;
      if (typeof cache == "number") {
        cache = J.$sub$n(cache, 1);
        this._getterCache = cache;
        if (!J.$eq(cache, 0))
          return result;
        cache = Object.create(null);
        this._getterCache = cache;
      }
      useEval = typeof dart_precompiled != "function";
      if (typeof fieldName.$p == "undefined")
        fieldName.$p = this._newProbeFn$2($name, useEval);
      mangledName = cacheEntry.get$mangledName();
      getter = cacheEntry.get$isIntercepted() === true ? this._newInterceptedGetterFn$2(mangledName, useEval) : this._newGetterFn$2(mangledName, useEval);
      cache[$name] = getter;
      getter.v = getter.m = cache;
      return result;
    },
    _newProbeFn$2: function(id, useEval) {
      if (useEval)
        return function(b) {
          return eval(b);
        }("(function probe$" + H.S(id) + "(c){return c." + H.S(id) + "})");
      else
        return function(n) {
          return function(c) {
            return c[n];
          };
        }(id);
    },
    _newGetterFn$2: function($name, useEval) {
      if (!useEval)
        return function(n) {
          return function(o) {
            return o[n]();
          };
        }($name);
      return function(b) {
        return eval(b);
      }("(function " + this.reflectee.constructor.name + "$" + H.S($name) + "(o){return o." + H.S($name) + "()})");
    },
    _newInterceptedGetterFn$2: function($name, useEval) {
      var interceptor, functionName;
      interceptor = J.getInterceptor(this.reflectee);
      if (!useEval)
        return function(n, i) {
          return function(o) {
            return i[n](o);
          };
        }($name, interceptor);
      functionName = interceptor.constructor.name + "$" + H.S($name);
      return function(b) {
        return eval(b);
      }("(function(i) {  function " + functionName + "(o){return i." + H.S($name) + "(o)}  return " + functionName + ";})")(interceptor);
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (!!J.getInterceptor(other).$isJsInstanceMirror) {
        t1 = this.reflectee;
        t2 = other.reflectee;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      return J.$xor$n(H.objectHashCode(this.reflectee), 909522486);
    },
    toString$0: function(_) {
      return "InstanceMirror on " + H.S(P.Error_safeToString(this.reflectee));
    },
    $isJsInstanceMirror: true,
    $isMirror: true
  },
  JsInstanceMirror__invokeMethodWithNamedArguments_closure: {
    "^": "Closure:101;defaultArguments_0",
    call$2: [function(symbol, value) {
      var parameter, t1;
      parameter = J.get$_name$x(symbol);
      t1 = this.defaultArguments_0;
      if (t1.containsKey$1(parameter))
        t1.$indexSet(0, parameter, value);
      else
        throw H.wrapException(H.UnimplementedNoSuchMethodError$("Invoking noSuchMethod with named arguments not implemented"));
    }, "call$2", null, 4, 0, null, 70, [], 19, [], "call"],
    $isFunction: true
  },
  JsTypeBoundClassMirror: {
    "^": "JsDeclarationMirror;_class,_typeArguments,_cachedTypeArguments,_cachedDeclarations,_cachedMembers,_cachedConstructors,_cachedVariables,_cachedGetters,_cachedSetters,_cachedMethodsMap,_cachedMethods,_superclass,_cachedSuperinterfaces,_cachedInstanceMembers,_cachedStaticMembers,simpleName",
    get$_prettyName: function() {
      return "ClassMirror";
    },
    toString$0: function(_) {
      var result, t1, t2;
      result = "ClassMirror on " + H.S(J.get$_name$x(this._class.get$simpleName()));
      if (this.get$typeArguments() != null) {
        t1 = result + "<";
        t2 = this.get$typeArguments();
        result = t1 + t2.join$1(t2, ", ") + ">";
      }
      return result;
    },
    get$_mangledName: function() {
      for (var t1 = this.get$typeArguments(), t1 = t1.get$iterator(t1); t1.moveNext$0();)
        if (!J.$eq(t1._current, $.get$JsMirrorSystem__dynamicType()))
          return H.S(this._class.get$_mangledName()) + "<" + H.S(this._typeArguments) + ">";
      return this._class.get$_mangledName();
    },
    get$typeVariables: function() {
      return this._class.get$typeVariables();
    },
    get$typeArguments: function() {
      var t1, result, t2, t3, level, currentTypeArgument, i, t4, character;
      t1 = this._cachedTypeArguments;
      if (t1 != null)
        return t1;
      result = [];
      t1 = new H.JsTypeBoundClassMirror_typeArguments_addTypeArgument(result);
      t2 = this._typeArguments;
      t3 = J.getInterceptor$asx(t2);
      if (J.$eq(t3.indexOf$1(t2, "<"), -1))
        J.forEach$1$ax(t3.split$1(t2, ","), new H.JsTypeBoundClassMirror_typeArguments_closure(t1));
      else {
        level = 0;
        currentTypeArgument = "";
        i = 0;
        while (true) {
          t4 = t3.get$length(t2);
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (!(i < t4))
            break;
          c$0: {
            character = t3.$index(t2, i);
            t4 = J.getInterceptor(character);
            if (t4.$eq(character, " "))
              break c$0;
            else if (t4.$eq(character, "<")) {
              currentTypeArgument = C.JSString_methods.$add(currentTypeArgument, character);
              ++level;
            } else if (t4.$eq(character, ">")) {
              currentTypeArgument = C.JSString_methods.$add(currentTypeArgument, character);
              --level;
            } else if (t4.$eq(character, ","))
              if (level > 0)
                currentTypeArgument = C.JSString_methods.$add(currentTypeArgument, character);
              else {
                t1.call$1(currentTypeArgument);
                currentTypeArgument = "";
              }
            else
              currentTypeArgument = C.JSString_methods.$add(currentTypeArgument, character);
          }
          ++i;
        }
        t1.call$1(currentTypeArgument);
      }
      t1 = new P.UnmodifiableListView(result);
      t1.$builtinTypeInfo = [null];
      this._cachedTypeArguments = t1;
      return t1;
    },
    get$_methods: function() {
      var t1 = this._cachedMethods;
      if (t1 != null)
        return t1;
      t1 = this._class._getMethodsWithOwner$1(this);
      this._cachedMethods = t1;
      return t1;
    },
    get$__constructors: function() {
      var t1 = this._cachedConstructors;
      if (t1 != null)
        return t1;
      t1 = new P.UnmodifiableMapView(H.filterConstructors(this.get$_methods()));
      t1.$builtinTypeInfo = [P.Symbol0, P.MethodMirror];
      this._cachedConstructors = t1;
      return t1;
    },
    get$__variables: function() {
      var t1, result, mirror;
      t1 = this._cachedVariables;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t1 = J.get$iterator$ax(this._class._getFieldsWithOwner$1(this)); t1.moveNext$0() === true;) {
        mirror = t1.get$current();
        result.$indexSet(0, mirror.get$simpleName(), mirror);
      }
      t1 = new P.UnmodifiableMapView(result);
      t1.$builtinTypeInfo = [P.Symbol0, P.VariableMirror];
      this._cachedVariables = t1;
      return t1;
    },
    get$__members: function() {
      var t1 = this._cachedMembers;
      if (t1 != null)
        return t1;
      t1 = new P.UnmodifiableMapView(H.filterMembers(this.get$_methods(), this.get$__variables()));
      t1.$builtinTypeInfo = [P.Symbol0, P.DeclarationMirror];
      this._cachedMembers = t1;
      return t1;
    },
    get$declarations: function() {
      var t1, result;
      t1 = this._cachedDeclarations;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol0, P.DeclarationMirror);
      result.addAll$1(0, this.get$__members());
      result.addAll$1(0, this.get$__constructors());
      J.forEach$1$ax(this._class.get$typeVariables(), new H.JsTypeBoundClassMirror_declarations_closure(result));
      t1 = new P.UnmodifiableMapView(result);
      t1.$builtinTypeInfo = [P.Symbol0, P.DeclarationMirror];
      this._cachedDeclarations = t1;
      return t1;
    },
    get$owner: function() {
      return this._class.get$owner();
    },
    invoke$3: function(memberName, positionalArguments, namedArguments) {
      return this._class.invoke$3(memberName, positionalArguments, namedArguments);
    },
    get$isOriginalDeclaration: function() {
      return false;
    },
    get$originalDeclaration: function() {
      return this._class;
    },
    get$qualifiedName: function() {
      return this._class.get$qualifiedName();
    },
    get$reflectedType: function() {
      return new H.TypeImpl(this.get$_mangledName(), null);
    },
    get$simpleName: function() {
      return this._class.get$simpleName();
    },
    $isJsTypeBoundClassMirror: true,
    $isClassMirror: true,
    $isMirror: true,
    $isTypeMirror: true,
    $isDeclarationMirror: true
  },
  JsTypeBoundClassMirror_typeArguments_addTypeArgument: {
    "^": "Closure:3;result_0",
    call$1: function(typeArgument) {
      var parsedIndex, t1, typeVariable;
      parsedIndex = H.Primitives_parseInt(typeArgument, null, new H.JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure());
      t1 = this.result_0;
      if (J.$eq(parsedIndex, -1))
        t1.push(H.reflectClassByMangledName(J.trim$0$s(typeArgument)));
      else {
        typeVariable = init.metadata[parsedIndex];
        t1.push(new H.JsTypeVariableMirror(P.reflectClass(typeVariable.get$owner()), typeVariable, parsedIndex, null, H.s(J.get$name$x(typeVariable))));
      }
    },
    $isFunction: true
  },
  JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure: {
    "^": "Closure:54;",
    call$1: function(_) {
      return -1;
    },
    $isFunction: true
  },
  JsTypeBoundClassMirror_typeArguments_closure: {
    "^": "Closure:54;addTypeArgument_1",
    call$1: [function(t) {
      return this.addTypeArgument_1.call$1(t);
    }, "call$1", null, 2, 0, null, 102, [], "call"],
    $isFunction: true
  },
  JsTypeBoundClassMirror_declarations_closure: {
    "^": "Closure:54;result_0",
    call$1: [function(tv) {
      this.result_0.$indexSet(0, tv.get$simpleName(), tv);
      return tv;
    }, "call$1", null, 2, 0, null, 103, [], "call"],
    $isFunction: true
  },
  JsClassMirror: {
    "^": "JsTypeMirror_JsObjectMirror0;_mangledName<,_jsConstructor<,_fieldsDescriptor,_fieldsMetadata,_jsConstructorCache,_metadata,_superclass,_cachedMethods,_cachedFields,_cachedConstructors,_cachedMethodsMap,_cachedGetters,_cachedSetters,_cachedVariables,_cachedMembers,_cachedDeclarations,_cachedMetadata,_cachedSuperinterfaces,_cachedTypeVariables,_cachedInstanceMembers,_cachedStaticMembers,_owner,simpleName",
    get$_prettyName: function() {
      return "ClassMirror";
    },
    get$__constructors: function() {
      var t1 = this._cachedConstructors;
      if (t1 != null)
        return t1;
      t1 = new P.UnmodifiableMapView(H.filterConstructors(this.get$_methods()));
      t1.$builtinTypeInfo = [P.Symbol0, P.MethodMirror];
      this._cachedConstructors = t1;
      return t1;
    },
    _getMethodsWithOwner$1: function(methodOwner) {
      var $prototype, keys, result, t1, key, simpleName, $function, mirror, mangledName, jsFunction, reflectionName, isConstructor, t2;
      $prototype = this._jsConstructor.prototype;
      keys = H.extractKeys($prototype);
      result = [];
      result.$builtinTypeInfo = [H.JsMethodMirror];
      t1 = new H.ListIterator(keys, keys.length, 0, null);
      t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(keys, 0)];
      for (; t1.moveNext$0();) {
        key = t1._current;
        if (H.isReflectiveDataInPrototype(key))
          continue;
        simpleName = $.get$mangledNames().$index(0, key);
        if (simpleName == null)
          continue;
        $function = $prototype[key];
        if ($function.$reflectable == 2)
          continue;
        mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(simpleName, $function, false, false);
        result.push(mirror);
        mirror._owner = methodOwner;
      }
      keys = H.extractKeys(init.statics[this._mangledName]);
      t1 = new H.ListIterator(keys, keys.length, 0, null);
      t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(keys, 0)];
      for (; t1.moveNext$0();) {
        mangledName = t1._current;
        if (H.isReflectiveDataInPrototype(mangledName))
          continue;
        jsFunction = this.get$owner()._globalObject[mangledName];
        if ("$reflectable" in jsFunction) {
          reflectionName = jsFunction.$reflectionName;
          if (reflectionName == null)
            continue;
          isConstructor = C.JSString_methods.startsWith$1(reflectionName, "new ");
          if (isConstructor) {
            t2 = C.JSString_methods.substring$1(reflectionName, 4);
            reflectionName = H.stringReplaceAllUnchecked(t2, "$", ".");
          }
        } else
          continue;
        mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(reflectionName, jsFunction, !isConstructor, isConstructor);
        result.push(mirror);
        mirror._owner = methodOwner;
      }
      return result;
    },
    get$_methods: function() {
      var t1 = this._cachedMethods;
      if (t1 != null)
        return t1;
      t1 = this._getMethodsWithOwner$1(this);
      this._cachedMethods = t1;
      return t1;
    },
    _getFieldsWithOwner$1: function(fieldOwner) {
      var result, t1, instanceFieldSpecfication, staticDescriptor;
      result = [];
      result.$builtinTypeInfo = [P.VariableMirror];
      t1 = this._fieldsDescriptor.split(";");
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      instanceFieldSpecfication = t1[1];
      t1 = this._fieldsMetadata;
      if (t1 != null) {
        instanceFieldSpecfication = [instanceFieldSpecfication];
        C.JSArray_methods.addAll$1(instanceFieldSpecfication, t1);
      }
      H.parseCompactFieldSpecification(fieldOwner, instanceFieldSpecfication, false, result);
      staticDescriptor = init.statics[this._mangledName];
      if (staticDescriptor != null)
        H.parseCompactFieldSpecification(fieldOwner, staticDescriptor["^"], true, result);
      return result;
    },
    get$_fields: function() {
      var t1 = this._cachedFields;
      if (t1 != null)
        return t1;
      t1 = this._getFieldsWithOwner$1(this);
      this._cachedFields = t1;
      return t1;
    },
    get$__methods: function() {
      var t1 = this._cachedMethodsMap;
      if (t1 != null)
        return t1;
      t1 = new P.UnmodifiableMapView(H.filterMethods(this.get$_methods()));
      t1.$builtinTypeInfo = [P.Symbol0, P.MethodMirror];
      this._cachedMethodsMap = t1;
      return t1;
    },
    get$__getters: function() {
      var t1 = this._cachedGetters;
      if (t1 != null)
        return t1;
      t1 = new P.UnmodifiableMapView(H.filterGetters(this.get$_methods(), this.get$__variables()));
      t1.$builtinTypeInfo = [P.Symbol0, P.MethodMirror];
      this._cachedGetters = t1;
      return t1;
    },
    get$__variables: function() {
      var t1, result, t2, mirror;
      t1 = this._cachedVariables;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1 = this.get$_fields();
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      for (; t2.moveNext$0();) {
        mirror = t2._current;
        result.$indexSet(0, mirror.get$simpleName(), mirror);
      }
      t1 = new P.UnmodifiableMapView(result);
      t1.$builtinTypeInfo = [P.Symbol0, P.VariableMirror];
      this._cachedVariables = t1;
      return t1;
    },
    get$__members: function() {
      var t1 = this._cachedMembers;
      if (t1 != null)
        return t1;
      t1 = new P.UnmodifiableMapView(H.filterMembers(this.get$_methods(), this.get$__variables()));
      t1.$builtinTypeInfo = [P.Symbol0, P.Mirror];
      this._cachedMembers = t1;
      return t1;
    },
    get$declarations: function() {
      var t1, result;
      t1 = this._cachedDeclarations;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol0, P.DeclarationMirror);
      t1 = new H.JsClassMirror_declarations_addToResult(result);
      this.get$__members()._map.forEach$1(0, t1);
      this.get$__constructors()._map.forEach$1(0, t1);
      J.forEach$1$ax(this.get$typeVariables(), new H.JsClassMirror_declarations_closure(result));
      t1 = new P.UnmodifiableMapView(result);
      t1.$builtinTypeInfo = [P.Symbol0, P.DeclarationMirror];
      this._cachedDeclarations = t1;
      return t1;
    },
    _staticFieldExists$1: function(fieldName) {
      var mirror, getter;
      mirror = this.get$__variables()._map.$index(0, fieldName);
      if (mirror != null)
        return mirror.get$isStatic();
      getter = this.get$__getters()._map.$index(0, fieldName);
      return getter != null && getter.get$isStatic() === true;
    },
    getField$1: function(fieldName) {
      var mirror, jsName, getter, method;
      mirror = this.get$__variables()._map.$index(0, fieldName);
      if (mirror != null && mirror.get$isStatic() === true) {
        jsName = mirror.get$_jsName();
        if (!(jsName in $))
          throw H.wrapException(H.RuntimeError$("Cannot find \"" + H.S(jsName) + "\" in current isolate."));
        if (jsName in init.lazies)
          return H.reflect($[init.lazies[jsName]]());
        else
          return H.reflect($[jsName]);
      }
      getter = this.get$__getters()._map.$index(0, fieldName);
      if (getter != null && getter.get$isStatic() === true)
        return H.reflect(getter._invoke$2(C.List_empty, C.Map_empty));
      method = this.get$__methods()._map.$index(0, fieldName);
      if (method != null && method.get$isStatic() === true) {
        getter = method.get$_jsFunction().$getter;
        if (getter == null)
          throw H.wrapException(P.UnimplementedError$(null));
        return H.reflect(getter());
      }
      throw H.wrapException(H.NoSuchStaticMethodError$method(null, fieldName, null, null));
    },
    get$owner: function() {
      var t1, t2;
      t1 = this._owner;
      if (t1 == null) {
        t1 = $.get$JsMirrorSystem_librariesByName();
        t1 = t1.get$values(t1);
        t2 = new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f);
        t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)];
        for (; t2.moveNext$0();)
          for (t1 = J.get$iterator$ax(t2._current); t1.moveNext$0() === true;)
            t1.get$current().get$__classes();
        t1 = this._owner;
        if (t1 == null)
          throw H.wrapException(P.StateError$("Class \"" + H.S(H.n(this.simpleName)) + "\" has no owner"));
      }
      return t1;
    },
    invoke$3: function(memberName, positionalArguments, namedArguments) {
      var mirror, t1;
      if (namedArguments != null && J.get$isEmpty$asx(namedArguments) !== true)
        throw H.wrapException(P.UnsupportedError$("Named arguments are not implemented."));
      mirror = this.get$__methods()._map.$index(0, memberName);
      t1 = mirror == null;
      if (t1 && this._staticFieldExists$1(memberName) === true)
        return this.getField$1(memberName).invoke$3(C.Symbol_call, positionalArguments, namedArguments);
      if (t1 || mirror.get$isStatic() !== true)
        throw H.wrapException(H.NoSuchStaticMethodError$method(null, memberName, positionalArguments, namedArguments));
      if (mirror.canInvokeReflectively$0() !== true)
        H.throwInvalidReflectionError(J.get$_name$x(memberName));
      return H.reflect(mirror._invoke$2(positionalArguments, namedArguments));
    },
    get$isOriginalDeclaration: function() {
      return true;
    },
    get$originalDeclaration: function() {
      return this;
    },
    get$typeVariables: function() {
      var t1, result, typeVariables, i, typeVariable;
      t1 = this._cachedTypeVariables;
      if (t1 != null)
        return t1;
      result = [];
      typeVariables = this._jsConstructor.prototype["<>"];
      if (typeVariables == null)
        return result;
      for (i = 0; i < typeVariables.length; ++i) {
        t1 = typeVariables[i];
        typeVariable = init.metadata[t1];
        result.push(new H.JsTypeVariableMirror(this, typeVariable, t1, null, H.s(J.get$name$x(typeVariable))));
      }
      t1 = new P.UnmodifiableListView(result);
      t1.$builtinTypeInfo = [null];
      this._cachedTypeVariables = t1;
      return t1;
    },
    get$typeArguments: function() {
      return C.List_empty1;
    },
    get$reflectedType: function() {
      if (!J.$eq(J.get$length$asx(this.get$typeVariables()), 0))
        throw H.wrapException(P.UnsupportedError$("Declarations of generics have no reflected type"));
      return new H.TypeImpl(this._mangledName, null);
    },
    $isJsClassMirror: true,
    $isClassMirror: true,
    $isMirror: true,
    $isTypeMirror: true,
    $isDeclarationMirror: true
  },
  JsTypeMirror_JsObjectMirror0: {
    "^": "JsTypeMirror+JsObjectMirror;",
    $isMirror: true
  },
  JsClassMirror_declarations_addToResult: {
    "^": "Closure:100;result_0",
    call$2: function(key, value) {
      this.result_0.$indexSet(0, key, value);
    },
    $isFunction: true
  },
  JsClassMirror_declarations_closure: {
    "^": "Closure:54;result_1",
    call$1: function(tv) {
      this.result_1.$indexSet(0, tv.get$simpleName(), tv);
      return tv;
    },
    $isFunction: true
  },
  JsVariableMirror: {
    "^": "JsDeclarationMirror;_jsName<,isFinal<,isStatic<,_metadataFunction,_owner,__js_mirrors$_type<,_metadata,simpleName",
    get$_prettyName: function() {
      return "VariableMirror";
    },
    get$type: function(_) {
      return H.typeMirrorFromRuntimeTypeRepresentation(this._owner, init.metadata[this.__js_mirrors$_type]);
    },
    get$owner: function() {
      return this._owner;
    },
    _getField$1: function(receiver) {
      return $[this._jsName];
    },
    $isVariableMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true,
    static: {JsVariableMirror_JsVariableMirror$from: function(descriptor, metadataFunction, owner, isStatic) {
        var fieldInformation, t1, field, t2, $length, t3, code, t4, isFinal, jsName, divider, accessorName, unmangledName, setterName;
        fieldInformation = J.split$1$s(descriptor, "-");
        t1 = J.getInterceptor$asx(fieldInformation);
        if (J.$eq(t1.get$length(fieldInformation), 1))
          return;
        field = t1.$index(fieldInformation, 0);
        t2 = J.getInterceptor$asx(field);
        $length = t2.get$length(field);
        t3 = J.getInterceptor$n($length);
        code = H.JsVariableMirror_fieldCode(t2.codeUnitAt$1(field, t3.$sub($length, 1)));
        t4 = J.getInterceptor(code);
        if (t4.$eq(code, 0))
          return;
        t4.$and(code, 3);
        isFinal = J.$eq(t4.$shr(code, 2), 0);
        jsName = t2.substring$2(field, 0, t3.$sub($length, 1));
        divider = t2.indexOf$1(field, ":");
        t3 = J.getInterceptor$n(divider);
        if (t3.$gt(divider, 0) === true) {
          accessorName = J.substring$2$s(jsName, 0, divider);
          jsName = t2.substring$1(field, t3.$add(divider, 1));
        } else
          accessorName = jsName;
        unmangledName = isStatic ? $.get$mangledGlobalNames().$index(0, accessorName) : $.get$mangledNames().$index(0, "get$" + H.S(accessorName));
        if (unmangledName == null)
          unmangledName = accessorName;
        if (isFinal) {
          setterName = H.s(H.S(unmangledName) + "=");
          t2 = J.get$iterator$ax(owner.get$_methods());
          while (true) {
            if (!(t2.moveNext$0() === true)) {
              isFinal = true;
              break;
            }
            if (J.$eq(t2.get$current().get$simpleName(), setterName)) {
              isFinal = false;
              break;
            }
          }
        }
        return new H.JsVariableMirror(jsName, isFinal, isStatic, metadataFunction, owner, H.Primitives_parseInt(t1.$index(fieldInformation, 1), null, null), null, H.s(unmangledName));
      }, JsVariableMirror_fieldCode: function(code) {
        var t1 = J.getInterceptor$n(code);
        if (t1.$ge(code, 60) === true && t1.$le(code, 64) === true)
          return t1.$sub(code, 59);
        if (t1.$ge(code, 123) === true && t1.$le(code, 126) === true)
          return t1.$sub(code, 117);
        if (t1.$ge(code, 37) === true && t1.$le(code, 43) === true)
          return t1.$sub(code, 27);
        return 0;
      }}
  },
  JsClosureMirror: {
    "^": "JsInstanceMirror;reflectee,_getterCache",
    get$$function: function() {
      var cacheName, t1, callName, t2, parameterCount, target, $name, cachedFunction;
      cacheName = $.Primitives_mirrorFunctionCacheName;
      t1 = this.reflectee;
      callName = function(reflectee) {
        for (var property in reflectee) {
          if ("call$" == property.substring(0, 5) && property[5] >= '0' && property[5] <= '9')
            return property;
        }
        return null;
      }(t1);
      if (callName == null)
        throw H.wrapException(H.RuntimeError$("Cannot find callName on \"" + H.S(t1) + "\""));
      t2 = callName.split("$");
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      parameterCount = H.Primitives_parseInt(t2[1], null, null);
      t2 = J.getInterceptor(t1);
      if (!!t2.$isBoundClosure) {
        target = t1.get$_target();
        H.BoundClosure_selfOf(t1);
        $name = $.get$mangledNames().$index(0, t2.get$__js_helper$_name(t1));
        if ($name == null)
          H.throwInvalidReflectionError($name);
        cachedFunction = H.JsMethodMirror_JsMethodMirror$fromUnmangledName($name, target, false, false);
      } else
        cachedFunction = new H.JsMethodMirror(t1[callName], parameterCount, 0, false, false, true, false, false, null, null, null, null, H.s(callName));
      t1.constructor[cacheName] = cachedFunction;
      return cachedFunction;
    },
    apply$2: function(positionalArguments, namedArguments) {
      return H.reflect(H.Primitives_applyFunction(this.reflectee, positionalArguments, P.Function__toMangledNames(namedArguments)));
    },
    apply$1: function(positionalArguments) {
      return this.apply$2(positionalArguments, null);
    },
    toString$0: function(_) {
      return "ClosureMirror on '" + H.S(P.Error_safeToString(this.reflectee)) + "'";
    },
    $isMirror: true
  },
  JsMethodMirror: {
    "^": "JsDeclarationMirror;_jsFunction<,_requiredParameterCount,_optionalParameterCount,isGetter<,isSetter<,isStatic<,isConstructor<,isOperator,_owner,_metadata,_returnType,_parameters,simpleName",
    get$_prettyName: function() {
      return "MethodMirror";
    },
    get$parameters: function() {
      var t1 = this._parameters;
      if (t1 != null)
        return t1;
      this.get$metadata();
      return this._parameters;
    },
    canInvokeReflectively$0: function() {
      return "$reflectable" in this._jsFunction;
    },
    get$owner: function() {
      return this._owner;
    },
    get$metadata: function() {
      var t1, raw, t2, formals, info, functionType, type, isNamed, t3, t4, t5, i, parameter, $name, result, p, defaultValue, i0;
      t1 = this._metadata;
      if (t1 == null) {
        t1 = this._jsFunction;
        raw = H.extractMetadata(t1);
        t2 = J.$add$ns(this._requiredParameterCount, this._optionalParameterCount);
        if (typeof t2 !== "number")
          return H.iae(t2);
        formals = Array(t2);
        info = H.ReflectionInfo_ReflectionInfo(t1);
        if (info != null) {
          functionType = info.functionType;
          if (typeof functionType === "number" && Math.floor(functionType) === functionType)
            type = new H.JsFunctionTypeMirror(info.computeFunctionRti$1(null), null, null, null, this);
          else
            type = this.get$owner() != null && !!J.getInterceptor(this.get$owner()).$isLibraryMirror ? new H.JsFunctionTypeMirror(info.computeFunctionRti$1(null), null, null, null, this._owner) : new H.JsFunctionTypeMirror(info.computeFunctionRti$1(this._owner.get$originalDeclaration().get$_jsConstructor()), null, null, null, this._owner);
          if (this.isConstructor)
            this._returnType = this._owner;
          else
            this._returnType = type.get$returnType();
          isNamed = info.areOptionalParametersNamed;
          for (t1 = type.get$parameters(), t1 = t1.get$iterator(t1), t2 = formals.length, t3 = info.requiredParameterCount, t4 = info.data, t5 = info.optionalParameterCount, i = 0; t1.moveNext$0(); i = i0) {
            parameter = t1._current;
            $name = info.parameterName$1(i);
            result = t4[2 * i + t5 + 3 + 1];
            if (i < t3)
              p = new H.JsParameterMirror(this, parameter.get$__js_mirrors$_type(), false, false, null, result, H.s($name));
            else {
              defaultValue = info.defaultValue$1(0, i);
              p = new H.JsParameterMirror(this, parameter.get$__js_mirrors$_type(), true, isNamed, defaultValue, result, H.s($name));
            }
            i0 = i + 1;
            if (i >= t2)
              return H.ioore(formals, i);
            formals[i] = p;
          }
        }
        t1 = new P.UnmodifiableListView(formals);
        t1.$builtinTypeInfo = [P.ParameterMirror];
        this._parameters = t1;
        t1 = new P.UnmodifiableListView(J.map$1$ax(raw, H.reflect$closure()));
        t1.$builtinTypeInfo = [null];
        this._metadata = t1;
      }
      return t1;
    },
    _invoke$2: function(positionalArguments, namedArguments) {
      var t1, positionalLength, t2, t3, i;
      if (namedArguments != null && J.get$isEmpty$asx(namedArguments) !== true)
        throw H.wrapException(P.UnsupportedError$("Named arguments are not implemented."));
      if (!this.isStatic && !this.isConstructor)
        throw H.wrapException(H.RuntimeError$("Cannot invoke instance method without receiver."));
      t1 = J.getInterceptor$asx(positionalArguments);
      positionalLength = t1.get$length(positionalArguments);
      t2 = this._requiredParameterCount;
      t3 = J.getInterceptor$n(positionalLength);
      if (t3.$lt(positionalLength, t2) === true || t3.$gt(positionalLength, J.$add$ns(t2, this._optionalParameterCount)) === true || this._jsFunction == null)
        throw H.wrapException(P.NoSuchMethodError$(this.get$owner(), this.simpleName, positionalArguments, namedArguments, null));
      if (t3.$lt(positionalLength, J.$add$ns(t2, this._optionalParameterCount)) === true) {
        positionalArguments = t1.toList$0(positionalArguments);
        for (t1 = J.getInterceptor$ax(positionalArguments), i = positionalLength; t2 = J.getInterceptor$n(i), t2.$lt(i, J.get$length$asx(this.get$parameters()._source)) === true; i = t2.$add(i, 1))
          t1.add$1(positionalArguments, J.get$defaultValue$x(J.elementAt$1$ax(this.get$parameters()._source, i)).get$reflectee());
      }
      return this._jsFunction.apply($, P.List_List$from(positionalArguments, true, null));
    },
    _getField$1: function(receiver) {
      if (this.isGetter)
        return this._invoke$2([], null);
      else
        throw H.wrapException(P.UnimplementedError$("getField on " + receiver.toString$0(0)));
    },
    $isJsMethodMirror: true,
    $isMethodMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true,
    static: {JsMethodMirror_JsMethodMirror$fromUnmangledName: function($name, jsFunction, isStatic, isConstructor) {
        var info, isOperator, isSetter, t1, requiredParameterCount, isGetter, optionalParameterCount;
        info = $name.split(":");
        if (0 >= info.length)
          return H.ioore(info, 0);
        $name = info[0];
        isOperator = H.isOperatorName($name);
        isSetter = !isOperator && J.endsWith$1$s($name, "=") === true;
        t1 = info.length;
        if (t1 === 1) {
          if (isSetter) {
            requiredParameterCount = 1;
            isGetter = false;
          } else {
            requiredParameterCount = 0;
            isGetter = true;
          }
          optionalParameterCount = 0;
        } else {
          if (1 >= t1)
            return H.ioore(info, 1);
          requiredParameterCount = H.Primitives_parseInt(info[1], null, null);
          if (2 >= info.length)
            return H.ioore(info, 2);
          optionalParameterCount = H.Primitives_parseInt(info[2], null, null);
          isGetter = false;
        }
        return new H.JsMethodMirror(jsFunction, requiredParameterCount, optionalParameterCount, isGetter, isSetter, isStatic, isConstructor, isOperator, null, null, null, null, H.s($name));
      }}
  },
  JsParameterMirror: {
    "^": "JsDeclarationMirror;owner<,__js_mirrors$_type<,isOptional,isNamed,_defaultValue,metadataList,simpleName",
    get$_prettyName: function() {
      return "ParameterMirror";
    },
    get$type: function(_) {
      return H.typeMirrorFromRuntimeTypeRepresentation(this.owner, this.__js_mirrors$_type);
    },
    get$isStatic: function() {
      return false;
    },
    get$isFinal: function() {
      return false;
    },
    get$defaultValue: function(_) {
      var t1 = this._defaultValue;
      return t1 != null ? H.reflect(init.metadata[t1]) : null;
    },
    $isParameterMirror: true,
    $isVariableMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true
  },
  JsTypedefMirror: {
    "^": "JsDeclarationMirror;_mangledName<,referent,simpleName",
    get$value: function(_) {
      return this.referent;
    },
    get$_prettyName: function() {
      return "TypedefMirror";
    },
    get$reflectedType: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$typeVariables: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$originalDeclaration: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$owner: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    $isJsTypedefMirror: true,
    $isTypedefMirror: true,
    $isTypeMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true
  },
  BrokenClassMirror: {
    "^": "Object;",
    get$reflectedType: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$declarations: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    invoke$3: function(memberName, positionalArguments, namedArguments) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$typeVariables: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$typeArguments: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$originalDeclaration: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$simpleName: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$qualifiedName: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  JsFunctionTypeMirror: {
    "^": "BrokenClassMirror;_typeData,_cachedToString,_cachedReturnType,_cachedParameters,owner<",
    get$isOriginalDeclaration: function() {
      return true;
    },
    get$returnType: function() {
      var t1 = this._cachedReturnType;
      if (t1 != null)
        return t1;
      t1 = this._typeData;
      if (!!t1.void) {
        t1 = $.get$JsMirrorSystem__voidType();
        this._cachedReturnType = t1;
        return t1;
      }
      if (!("ret" in t1)) {
        t1 = $.get$JsMirrorSystem__dynamicType();
        this._cachedReturnType = t1;
        return t1;
      }
      t1 = H.typeMirrorFromRuntimeTypeRepresentation(this.owner, t1.ret);
      this._cachedReturnType = t1;
      return t1;
    },
    get$parameters: function() {
      var t1, result, t2, t3, parameterCount, parameterCount0, $name;
      t1 = this._cachedParameters;
      if (t1 != null)
        return t1;
      result = [];
      t1 = this._typeData;
      if ("args" in t1) {
        t2 = t1.args;
        t3 = new H.ListIterator(t2, t2.length, 0, null);
        t3.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
        parameterCount = 0;
        for (; t3.moveNext$0(); parameterCount = parameterCount0) {
          parameterCount0 = parameterCount + 1;
          result.push(new H.JsParameterMirror(this, t3._current, false, false, null, C.List_empty3, H.s("argument" + parameterCount)));
        }
      } else
        parameterCount = 0;
      if ("opt" in t1) {
        t2 = t1.opt;
        t3 = new H.ListIterator(t2, t2.length, 0, null);
        t3.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
        for (; t3.moveNext$0(); parameterCount = parameterCount0) {
          parameterCount0 = parameterCount + 1;
          result.push(new H.JsParameterMirror(this, t3._current, false, false, null, C.List_empty3, H.s("argument" + parameterCount)));
        }
      }
      if ("named" in t1) {
        t2 = H.extractKeys(t1.named);
        t3 = new H.ListIterator(t2, t2.length, 0, null);
        t3.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
        for (; t3.moveNext$0();) {
          $name = t3._current;
          result.push(new H.JsParameterMirror(this, t1.named[$name], false, false, null, C.List_empty3, H.s($name)));
        }
      }
      t1 = new P.UnmodifiableListView(result);
      t1.$builtinTypeInfo = [P.ParameterMirror];
      this._cachedParameters = t1;
      return t1;
    },
    _unmangleIfPreserved$1: function(mangled) {
      var result = init.mangledGlobalNames[mangled];
      if (result != null)
        return result;
      return mangled;
    },
    toString$0: function(_) {
      var t1, t2, t3, s, sep, argument, $name;
      t1 = this._cachedToString;
      if (t1 != null)
        return t1;
      t1 = this._typeData;
      if ("args" in t1) {
        t2 = t1.args;
        t3 = new H.ListIterator(t2, t2.length, 0, null);
        t3.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
        s = "FunctionTypeMirror on '(";
        sep = "";
        for (; t3.moveNext$0(); sep = ", ") {
          argument = t3._current;
          s = C.JSString_methods.$add(s + sep, this._unmangleIfPreserved$1(H.runtimeTypeToString(argument, null)));
        }
      } else {
        s = "FunctionTypeMirror on '(";
        sep = "";
      }
      if ("opt" in t1) {
        s += sep + "[";
        t2 = t1.opt;
        t3 = new H.ListIterator(t2, t2.length, 0, null);
        t3.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
        sep = "";
        for (; t3.moveNext$0(); sep = ", ") {
          argument = t3._current;
          s = C.JSString_methods.$add(s + sep, this._unmangleIfPreserved$1(H.runtimeTypeToString(argument, null)));
        }
        s += "]";
      }
      if ("named" in t1) {
        s += sep + "{";
        t2 = H.extractKeys(t1.named);
        t3 = new H.ListIterator(t2, t2.length, 0, null);
        t3.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
        sep = "";
        for (; t3.moveNext$0(); sep = ", ") {
          $name = t3._current;
          s = C.JSString_methods.$add(s + sep + (H.S($name) + ": "), this._unmangleIfPreserved$1(H.runtimeTypeToString(t1.named[$name], null)));
        }
        s += "}";
      }
      s += ") -> ";
      if (!!t1.void)
        s += "void";
      else
        s = "ret" in t1 ? C.JSString_methods.$add(s, this._unmangleIfPreserved$1(H.runtimeTypeToString(t1.ret, null))) : s + "dynamic";
      t1 = s + "'";
      this._cachedToString = t1;
      return t1;
    },
    get$callMethod: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    callMethod$2: function(arg0, arg1) {
      return this.get$callMethod().call$2(arg0, arg1);
    },
    callMethod$1: function(arg0) {
      return this.get$callMethod().call$1(arg0);
    },
    $isClassMirror: true,
    $isMirror: true,
    $isTypeMirror: true,
    $isDeclarationMirror: true
  },
  typeMirrorFromRuntimeTypeRepresentation_getTypeArgument: {
    "^": "Closure:104;box_0",
    call$1: function(index) {
      var typeVariable, t1, variableIndex;
      typeVariable = init.metadata[index];
      t1 = this.box_0;
      variableIndex = H.findTypeVariableIndex(t1.ownerClass_0.get$typeVariables(), J.get$name$x(typeVariable));
      return J.$index$asx(t1.ownerClass_0.get$typeArguments(), variableIndex);
    },
    $isFunction: true
  },
  typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable: {
    "^": "Closure:105;getTypeArgument_1",
    call$1: function(index) {
      var typeArgument, t1;
      typeArgument = this.getTypeArgument_1.call$1(index);
      t1 = J.getInterceptor(typeArgument);
      if (!!t1.$isJsTypeVariableMirror)
        return H.S(typeArgument._metadataIndex);
      if (!t1.$isJsClassMirror && !t1.$isJsTypeBoundClassMirror)
        if (t1.$eq(typeArgument, $.get$JsMirrorSystem__dynamicType()))
          return "dynamic";
        else if (t1.$eq(typeArgument, $.get$JsMirrorSystem__voidType()))
          return "void";
        else
          return "dynamic";
      return typeArgument.get$_mangledName();
    },
    $isFunction: true
  },
  extractMetadata_closure: {
    "^": "Closure:99;",
    call$1: [function(i) {
      return init.metadata[i];
    }, "call$1", null, 2, 0, null, 106, [], "call"],
    $isFunction: true
  },
  NoSuchStaticMethodError: {
    "^": "Error;_cls,__js_mirrors$_name,_positionalArguments,__js_mirrors$_namedArguments,__js_mirrors$_kind",
    toString$0: function(_) {
      var t1, t2;
      switch (this.__js_mirrors$_kind) {
        case 0:
          t1 = "NoSuchMethodError: No constructor named '" + H.S(J.get$_name$x(this.__js_mirrors$_name)) + "' in class '";
          t2 = this._cls.get$qualifiedName();
          return t1 + H.S(t2.get$_name(t2)) + "'.";
        case 1:
          return "NoSuchMethodError: No top-level method named '" + H.S(J.get$_name$x(this.__js_mirrors$_name)) + "'.";
        default:
          return "NoSuchMethodError";
      }
    },
    $isNoSuchMethodError: true,
    $isError: true,
    static: {"^": "NoSuchStaticMethodError_MISSING_CONSTRUCTOR,NoSuchStaticMethodError_MISSING_METHOD", NoSuchStaticMethodError$method: function(_cls, _name, _positionalArguments, _namedArguments) {
        return new H.NoSuchStaticMethodError(_cls, _name, _positionalArguments, _namedArguments, 1);
      }}
  }
}],
["dart._js_names", "dart:_js_names", , H, {
  "^": "",
  computeMangledNames: function(jsMangledNames, isGlobal) {
    var keys, result, t1, t2, key, value, t3;
    keys = H.extractKeys(jsMangledNames);
    result = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String);
    t1 = new H.ListIterator(keys, keys.length, 0, null);
    t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(keys, 0)];
    t2 = !isGlobal;
    for (; t1.moveNext$0();) {
      key = t1._current;
      value = jsMangledNames[key];
      result.$indexSet(0, key, value);
      if (t2) {
        t3 = J.getInterceptor$s(key);
        if (t3.startsWith$1(key, "get$") === true)
          result.$indexSet(0, "set$" + H.S(t3.substring$1(key, 4)), value + "=");
      }
    }
    return result;
  },
  computeReflectiveNames: function(map) {
    var result = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.String);
    map.forEach$1(0, new H.computeReflectiveNames_closure(result));
    return result;
  },
  extractKeys: function(victim) {
    var t1 = function(victim, hasOwnProperty) {
      var result = [];
      for (var key in victim) {
        if (hasOwnProperty.call(victim, key))
          result.push(key);
      }
      return result;
    }(victim, Object.prototype.hasOwnProperty);
    t1.$builtinTypeInfo = [null];
    t1.fixed$length = init;
    return t1;
  },
  computeReflectiveNames_closure: {
    "^": "Closure:107;result_0",
    call$2: function(mangledName, reflectiveName) {
      this.result_0.$indexSet(0, reflectiveName, mangledName);
    },
    $isFunction: true
  }
}],
["dart.async", "dart:async", , P, {
  "^": "",
  _AsyncRun__initializeScheduleImmediate: function() {
    var t1, div, span;
    t1 = {};
    if (self.scheduleImmediate != null)
      return P._AsyncRun__scheduleImmediateJsOverride$closure();
    if (self.MutationObserver != null && self.document != null) {
      div = self.document.createElement("div");
      span = self.document.createElement("span");
      t1.storedCallback_0 = null;
      new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
      return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
    }
    return P._AsyncRun__scheduleImmediateWithTimer$closure();
  },
  _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
    ++init.globalState.topEventLoop._activeJsAsyncCount;
    self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
  }, "call$1", "_AsyncRun__scheduleImmediateJsOverride$closure", 2, 0, 17],
  _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
    P.Timer__createTimer(C.Duration_0, callback);
  }, "call$1", "_AsyncRun__scheduleImmediateWithTimer$closure", 2, 0, 17],
  _registerErrorHandler: function(errorHandler, zone) {
    var t1 = H.getDynamicRuntimeType();
    t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
    if (t1)
      return zone.registerBinaryCallback$1(errorHandler);
    else
      return zone.registerUnaryCallback$1(errorHandler);
  },
  Future_Future$delayed: function(duration, computation, $T) {
    var t1, completer, result;
    t1 = P._Future$(null);
    completer = new P._SyncCompleter(t1);
    completer.$builtinTypeInfo = [null];
    result = t1.then$1(new P.Future_Future$delayed_closure(computation));
    P.Timer_Timer(duration, completer.get$complete(completer));
    return result;
  },
  _asyncRunCallbackLoop: function() {
    var t1, t2;
    for (; t1 = $._nextCallback, t1 != null;) {
      $._lastPriorityCallback = null;
      t2 = t1.get$next();
      $._nextCallback = t2;
      if (t2 == null)
        $._lastCallback = null;
      t1.callback$0();
    }
  },
  _asyncRunCallback: [function() {
    $._isInCallbackLoop = true;
    try {
      P._asyncRunCallbackLoop();
    } finally {
      $._lastPriorityCallback = null;
      $._isInCallbackLoop = false;
      if ($._nextCallback != null)
        $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
    }
  }, "call$0", "_asyncRunCallback$closure", 0, 0, 13],
  scheduleMicrotask: function(callback) {
    var t1 = $.Zone__current;
    if (C.C__RootZone === t1) {
      P._rootScheduleMicrotask(null, null, C.C__RootZone, callback);
      return;
    }
    t1.scheduleMicrotask$1(t1.bindCallback$2$runGuarded(callback, true));
  },
  StreamController_StreamController$broadcast: function(onCancel, onListen, sync, $T) {
    var t1;
    if (sync) {
      t1 = new P._SyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null);
      t1.$builtinTypeInfo = [$T];
      t1._async$_previous = t1;
      t1._next = t1;
    } else {
      t1 = new P._AsyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null);
      t1.$builtinTypeInfo = [$T];
      t1._async$_previous = t1;
      t1._next = t1;
    }
    return t1;
  },
  _runGuarded: function(notificationHandler) {
    var result, e, s, exception, t1;
    if (notificationHandler == null)
      return;
    try {
      result = notificationHandler.call$0();
      if (!!J.getInterceptor(result).$isFuture)
        return result;
      return;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      $.Zone__current.handleUncaughtError$2(e, s);
    }

  },
  _nullDataHandler: [function(value) {
  }, "call$1", "_nullDataHandler$closure", 2, 0, 18, 19, []],
  _nullErrorHandler: [function(error, stackTrace) {
    $.Zone__current.handleUncaughtError$2(error, stackTrace);
  }, function(error) {
    return P._nullErrorHandler(error, null);
  }, null, "call$2", "call$1", "_nullErrorHandler$closure", 2, 2, 20, 21, 22, [], 23, []],
  _nullDoneHandler: [function() {
  }, "call$0", "_nullDoneHandler$closure", 0, 0, 13],
  _runUserCode: function(userCode, onSuccess, onError) {
    var e, s, exception, t1;
    try {
      onSuccess.call$1(userCode.call$0());
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      onError.call$2(e, s);
    }

  },
  _cancelAndError: function(subscription, future, error, stackTrace) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
    else
      future._completeError$2(error, stackTrace);
  },
  _cancelAndErrorClosure: function(subscription, future) {
    return new P._cancelAndErrorClosure_closure(subscription, future);
  },
  _cancelAndValue: function(subscription, future, value) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
    else
      future._complete$1(value);
  },
  Timer_Timer: function(duration, callback) {
    var t1;
    if (J.$eq($.Zone__current, C.C__RootZone))
      return $.Zone__current.createTimer$2(duration, callback);
    t1 = $.Zone__current;
    return t1.createTimer$2(duration, t1.bindCallback$2$runGuarded(callback, true));
  },
  Timer_Timer$periodic: function(duration, callback) {
    var t1;
    if (J.$eq($.Zone__current, C.C__RootZone))
      return $.Zone__current.createPeriodicTimer$2(duration, callback);
    t1 = $.Zone__current;
    return t1.createPeriodicTimer$2(duration, t1.bindUnaryCallback$2$runGuarded(callback, true));
  },
  Timer__createTimer: function(duration, callback) {
    var milliseconds = duration.get$inMilliseconds();
    return H.TimerImpl$(J.$lt$n(milliseconds, 0) === true ? 0 : milliseconds, callback);
  },
  Timer__createPeriodicTimer: function(duration, callback) {
    var milliseconds = duration.get$inMilliseconds();
    return H.TimerImpl$periodic(J.$lt$n(milliseconds, 0) === true ? 0 : milliseconds, callback);
  },
  Zone__enter: function(zone) {
    var previous = $.Zone__current;
    $.Zone__current = zone;
    return previous;
  },
  _parentDelegate: function(zone) {
    var t1 = J.getInterceptor$x(zone);
    if (t1.get$parent(zone) == null)
      return;
    return t1.get$parent(zone).get$_delegate();
  },
  _rootHandleUncaughtError: [function($self, $parent, zone, error, stackTrace) {
    var entry, t1, t2;
    entry = new P._AsyncCallbackEntry(new P._rootHandleUncaughtError_closure(error, stackTrace), null);
    t1 = $._nextCallback;
    if (t1 == null) {
      $._lastPriorityCallback = entry;
      $._lastCallback = entry;
      $._nextCallback = entry;
      if (!$._isInCallbackLoop)
        $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
    } else {
      t2 = $._lastPriorityCallback;
      if (t2 == null) {
        entry.next = t1;
        $._lastPriorityCallback = entry;
        $._nextCallback = entry;
      } else {
        entry.next = t2.next;
        t2.next = entry;
        $._lastPriorityCallback = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    }
  }, "call$5", "_rootHandleUncaughtError$closure", 10, 0, 24, 25, [], 26, [], 27, [], 22, [], 23, []],
  _rootRun: [function($self, $parent, zone, f) {
    var old, t1;
    if (J.$eq($.Zone__current, zone))
      return f.call$0();
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$0();
      return t1;
    } finally {
      $.Zone__current = old;
    }
  }, "call$4", "_rootRun$closure", 8, 0, 28, 25, [], 26, [], 27, [], 29, []],
  _rootRunUnary: [function($self, $parent, zone, f, arg) {
    var old, t1;
    if (J.$eq($.Zone__current, zone))
      return f.call$1(arg);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$1(arg);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  }, "call$5", "_rootRunUnary$closure", 10, 0, 30, 25, [], 26, [], 27, [], 29, [], 31, []],
  _rootRunBinary: [function($self, $parent, zone, f, arg1, arg2) {
    var old, t1;
    if (J.$eq($.Zone__current, zone))
      return f.call$2(arg1, arg2);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$2(arg1, arg2);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  }, "call$6", "_rootRunBinary$closure", 12, 0, 32, 25, [], 26, [], 27, [], 29, [], 7, [], 8, []],
  _rootRegisterCallback: [function($self, $parent, zone, f) {
    return f;
  }, "call$4", "_rootRegisterCallback$closure", 8, 0, 33, 25, [], 26, [], 27, [], 29, []],
  _rootRegisterUnaryCallback: [function($self, $parent, zone, f) {
    return f;
  }, "call$4", "_rootRegisterUnaryCallback$closure", 8, 0, 34, 25, [], 26, [], 27, [], 29, []],
  _rootRegisterBinaryCallback: [function($self, $parent, zone, f) {
    return f;
  }, "call$4", "_rootRegisterBinaryCallback$closure", 8, 0, 35, 25, [], 26, [], 27, [], 29, []],
  _rootScheduleMicrotask: [function($self, $parent, zone, f) {
    var t1, newEntry;
    if (C.C__RootZone !== zone)
      f = zone.bindCallback$1(f);
    if ($._nextCallback == null) {
      t1 = new P._AsyncCallbackEntry(f, null);
      $._lastCallback = t1;
      $._nextCallback = t1;
      if (!$._isInCallbackLoop)
        $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
    } else {
      newEntry = new P._AsyncCallbackEntry(f, null);
      $._lastCallback.next = newEntry;
      $._lastCallback = newEntry;
    }
  }, "call$4", "_rootScheduleMicrotask$closure", 8, 0, 36, 25, [], 26, [], 27, [], 29, []],
  _rootCreateTimer: [function($self, $parent, zone, duration, callback) {
    return P.Timer__createTimer(duration, C.C__RootZone !== zone ? zone.bindCallback$1(callback) : callback);
  }, "call$5", "_rootCreateTimer$closure", 10, 0, 37, 25, [], 26, [], 27, [], 38, [], 39, []],
  _rootCreatePeriodicTimer: [function($self, $parent, zone, duration, callback) {
    return P.Timer__createPeriodicTimer(duration, C.C__RootZone !== zone ? zone.bindUnaryCallback$1(callback) : callback);
  }, "call$5", "_rootCreatePeriodicTimer$closure", 10, 0, 40, 25, [], 26, [], 27, [], 38, [], 39, []],
  _rootPrint: [function($self, $parent, zone, line) {
    H.printString(H.S(line));
  }, "call$4", "_rootPrint$closure", 8, 0, 41, 25, [], 26, [], 27, [], 42, []],
  _printToZone: [function(line) {
    J.print$1$x($.Zone__current, line);
  }, "call$1", "_printToZone$closure", 2, 0, 43],
  _rootFork: [function($self, $parent, zone, specification, zoneValues) {
    var valueMap, t1;
    $.printToZone = P._printToZone$closure();
    if (specification == null)
      specification = C._ZoneSpecification_woc;
    else if (!J.getInterceptor(specification).$is_ZoneSpecification)
      throw H.wrapException(P.ArgumentError$("ZoneSpecifications must be instantiated with the provided constructor."));
    if (zoneValues == null)
      valueMap = !!J.getInterceptor(zone).$is_Zone ? zone.get$_async$_map() : P.HashMap_HashMap(null, null, null, null, null);
    else {
      valueMap = P.HashMap_HashMap(null, null, null, null, null);
      valueMap.addAll$1(0, zoneValues);
    }
    t1 = new P._CustomZone(null, null, null, null, null, null, null, null, null, null, null, null, null, zone, valueMap);
    t1._CustomZone$3(zone, specification, valueMap);
    return t1;
  }, "call$5", "_rootFork$closure", 10, 0, 44, 25, [], 26, [], 27, [], 45, [], 46, []],
  _AsyncRun__initializeScheduleImmediate_internalCallback: {
    "^": "Closure:54;box_0",
    call$1: [function(_) {
      var t1, f;
      H.leaveJsAsync();
      t1 = this.box_0;
      f = t1.storedCallback_0;
      t1.storedCallback_0 = null;
      f.call$0();
    }, "call$1", null, 2, 0, null, 108, [], "call"],
    $isFunction: true
  },
  _AsyncRun__initializeScheduleImmediate_closure: {
    "^": "Closure:109;box_0,div_1,span_2",
    call$1: function(callback) {
      var t1, t2;
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      this.box_0.storedCallback_0 = callback;
      t1 = this.div_1;
      t2 = this.span_2;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $isFunction: true
  },
  _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
    "^": "Closure:14;callback_0",
    call$0: [function() {
      H.leaveJsAsync();
      this.callback_0.call$0();
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _AsyncError: {
    "^": "Object;error>,stackTrace<",
    $isError: true
  },
  _UncaughtAsyncError: {
    "^": "_AsyncError;error,stackTrace",
    toString$0: function(_) {
      var result, t1;
      result = "Uncaught Error: " + H.S(this.error);
      t1 = this.stackTrace;
      return t1 != null ? result + ("\nStack Trace:\n" + H.S(t1)) : result;
    },
    static: {_UncaughtAsyncError$: function(error, stackTrace) {
        return new P._UncaughtAsyncError(error, P._UncaughtAsyncError__getBestStackTrace(error, stackTrace));
      }, _UncaughtAsyncError__getBestStackTrace: function(error, stackTrace) {
        if (stackTrace != null)
          return stackTrace;
        if (!!J.getInterceptor(error).$isError)
          return error.get$stackTrace();
        return;
      }}
  },
  _BroadcastStream: {
    "^": "_ControllerStream;_async$_controller"
  },
  _BroadcastSubscription: {
    "^": "_ControllerSubscription;_eventState@,_next@,_async$_previous@,_async$_controller,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    get$_async$_controller: function() {
      return this._async$_controller;
    },
    _expectsEvent$1: function(eventId) {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 1) === eventId;
    },
    _toggleEventId$0: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$xor();
      this._eventState = t1 ^ 1;
    },
    get$_isFiring: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) !== 0;
    },
    _setRemoveAfterFiring$0: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$or();
      this._eventState = t1 | 4;
    },
    get$_removeAfterFiring: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 4) !== 0;
    },
    _onPause$0: [function() {
    }, "call$0", "get$_onPause", 0, 0, 13],
    _onResume$0: [function() {
    }, "call$0", "get$_onResume", 0, 0, 13],
    static: {"^": "_BroadcastSubscription__STATE_EVENT_ID,_BroadcastSubscription__STATE_FIRING,_BroadcastSubscription__STATE_REMOVE_AFTER_FIRING"}
  },
  _BroadcastStreamController: {
    "^": "Object;_next@,_async$_previous@",
    get$isPaused: function() {
      return false;
    },
    get$_isFiring: function() {
      return (this._state & 2) !== 0;
    },
    _ensureDoneFuture$0: function() {
      var t1 = this._doneFuture;
      if (t1 != null)
        return t1;
      t1 = P._Future$(null);
      this._doneFuture = t1;
      return t1;
    },
    _removeListener$1: function(subscription) {
      var previous, next;
      previous = subscription.get$_async$_previous();
      next = subscription.get$_next();
      previous.set$_next(next);
      next.set$_async$_previous(previous);
      subscription.set$_async$_previous(subscription);
      subscription.set$_next(subscription);
    },
    _subscribe$4: function(onData, onError, onDone, cancelOnError) {
      var t1, t2, subscription;
      if ((this._state & 4) !== 0) {
        if (onDone == null)
          onDone = P._nullDoneHandler$closure();
        t1 = new P._DoneStreamSubscription($.Zone__current, 0, onDone);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        t1._schedule$0();
        return t1;
      }
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      subscription = new P._BroadcastSubscription(null, null, null, this, null, null, null, t1, t2, null, null);
      subscription.$builtinTypeInfo = this.$builtinTypeInfo;
      subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, H.getTypeArgumentByIndex(this, 0));
      subscription._async$_previous = subscription;
      subscription._next = subscription;
      t2 = this._async$_previous;
      subscription._async$_previous = t2;
      subscription._next = this;
      t2.set$_next(subscription);
      this._async$_previous = subscription;
      subscription._eventState = this._state & 1;
      if (this._next === subscription)
        P._runGuarded(this._onListen);
      return subscription;
    },
    _recordCancel$1: function(subscription) {
      if (subscription.get$_next() === subscription)
        return;
      if (subscription.get$_isFiring())
        subscription._setRemoveAfterFiring$0();
      else {
        this._removeListener$1(subscription);
        if ((this._state & 2) === 0 && this._next === this)
          this._callOnCancel$0();
      }
      return;
    },
    _recordPause$1: function(subscription) {
    },
    _recordResume$1: function(subscription) {
    },
    _addEventError$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add new events after calling close");
      return new P.StateError("Cannot add new events while doing an addStream");
    },
    add$1: [function(_, data) {
      if (this._state >= 4)
        throw H.wrapException(this._addEventError$0());
      this._sendData$1(data);
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T", void: true, args: [T]};
      }, this.$receiver, "_BroadcastStreamController");
    }, 110, []],
    addError$2: [function(error, stackTrace) {
      if (this._state >= 4)
        throw H.wrapException(this._addEventError$0());
      this._sendError$2(error, stackTrace);
    }, function(error) {
      return this.addError$2(error, null);
    }, "addError$1", "call$2", "call$1", "get$addError", 2, 2, 111, 21, 22, [], 23, []],
    close$0: function(_) {
      var t1, doneFuture;
      t1 = this._state;
      if ((t1 & 4) !== 0)
        return this._doneFuture;
      if (t1 >= 4)
        throw H.wrapException(this._addEventError$0());
      this._state = t1 | 4;
      doneFuture = this._ensureDoneFuture$0();
      this._sendDone$0();
      return doneFuture;
    },
    _async$_add$1: function(_, data) {
      this._sendData$1(data);
    },
    _addError$2: function(error, stackTrace) {
      this._sendError$2(error, stackTrace);
    },
    _close$0: function() {
      var addState = this._addStreamState;
      this._addStreamState = null;
      this._state &= 4294967287;
      C.JSNull_methods.complete$0(addState);
    },
    _forEachListener$1: function(action) {
      var t1, link, id, link0;
      t1 = this._state;
      if ((t1 & 2) !== 0)
        throw H.wrapException(P.StateError$("Cannot fire new event. Controller is already firing an event"));
      link = this._next;
      if (link === this)
        return;
      id = t1 & 1;
      this._state = t1 ^ 3;
      for (; link !== this;)
        if (link._expectsEvent$1(id)) {
          t1 = link.get$_eventState();
          if (typeof t1 !== "number")
            return t1.$or();
          link.set$_eventState(t1 | 2);
          action.call$1(link);
          link._toggleEventId$0();
          link0 = link.get$_next();
          if (link.get$_removeAfterFiring())
            this._removeListener$1(link);
          t1 = link.get$_eventState();
          if (typeof t1 !== "number")
            return t1.$and();
          link.set$_eventState(t1 & 4294967293);
          link = link0;
        } else
          link = link.get$_next();
      this._state &= 4294967293;
      if (this._next === this)
        this._callOnCancel$0();
    },
    _callOnCancel$0: function() {
      if ((this._state & 4) !== 0 && this._doneFuture._state === 0)
        this._doneFuture._asyncComplete$1(null);
      P._runGuarded(this._onCancel);
    }
  },
  _SyncBroadcastStreamController: {
    "^": "_BroadcastStreamController;_onListen,_onCancel,_state,_next,_async$_previous,_addStreamState,_doneFuture",
    _sendData$1: function(data) {
      var t1 = this._next;
      if (t1 === this)
        return;
      if (t1.get$_next() === this) {
        this._state |= 2;
        this._next._async$_add$1(0, data);
        this._state &= 4294967293;
        if (this._next === this)
          this._callOnCancel$0();
        return;
      }
      this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(this, data));
    },
    _sendError$2: function(error, stackTrace) {
      if (this._next === this)
        return;
      this._forEachListener$1(new P._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
    },
    _sendDone$0: function() {
      if (this._next !== this)
        this._forEachListener$1(new P._SyncBroadcastStreamController__sendDone_closure(this));
      else
        this._doneFuture._asyncComplete$1(null);
    }
  },
  _SyncBroadcastStreamController__sendData_closure: {
    "^": "Closure;this_0,data_1",
    call$1: function(subscription) {
      subscription._async$_add$1(0, this.data_1);
    },
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic___BufferingStreamSubscription", args: [[P._BufferingStreamSubscription, T]]};
      }, this.this_0, "_SyncBroadcastStreamController");
    }
  },
  _SyncBroadcastStreamController__sendError_closure: {
    "^": "Closure;this_0,error_1,stackTrace_2",
    call$1: function(subscription) {
      subscription._addError$2(this.error_1, this.stackTrace_2);
    },
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic___BufferingStreamSubscription", args: [[P._BufferingStreamSubscription, T]]};
      }, this.this_0, "_SyncBroadcastStreamController");
    }
  },
  _SyncBroadcastStreamController__sendDone_closure: {
    "^": "Closure;this_0",
    call$1: function(subscription) {
      subscription._close$0();
    },
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic___BroadcastSubscription", args: [[P._BroadcastSubscription, T]]};
      }, this.this_0, "_SyncBroadcastStreamController");
    }
  },
  _AsyncBroadcastStreamController: {
    "^": "_BroadcastStreamController;_onListen,_onCancel,_state,_next,_async$_previous,_addStreamState,_doneFuture",
    _sendData$1: function(data) {
      var link, t1;
      for (link = this._next; link !== this; link = link.get$_next()) {
        t1 = new P._DelayedData(data, null);
        t1.$builtinTypeInfo = [null];
        link._addPending$1(t1);
      }
    },
    _sendError$2: function(error, stackTrace) {
      var link;
      for (link = this._next; link !== this; link = link.get$_next())
        link._addPending$1(new P._DelayedError(error, stackTrace, null));
    },
    _sendDone$0: function() {
      var link = this._next;
      if (link !== this)
        for (; link !== this; link = link.get$_next())
          link._addPending$1(C.C__DelayedDone);
      else
        this._doneFuture._asyncComplete$1(null);
    }
  },
  Future: {
    "^": "Object;",
    $isFuture: true
  },
  Future_Future$delayed_closure: {
    "^": "Closure:54;computation_0",
    call$1: [function(ignored) {
      return this.computation_0.call$0();
    }, "call$1", null, 2, 0, null, 112, [], "call"],
    $isFunction: true
  },
  _Completer: {
    "^": "Object;"
  },
  _AsyncCompleter: {
    "^": "_Completer;future",
    completeError$2: [function(error, stackTrace) {
      var t1;
      if (error == null)
        throw H.wrapException(P.ArgumentError$("Error must not be null"));
      t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._asyncCompleteError$2(error, stackTrace);
    }, function(error) {
      return this.completeError$2(error, null);
    }, "completeError$1", "call$2", "call$1", "get$completeError", 2, 2, 111, 21, 22, [], 23, []]
  },
  _SyncCompleter: {
    "^": "_Completer;future",
    complete$1: [function(_, value) {
      var t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._complete$1(value);
    }, function($receiver) {
      return this.complete$1($receiver, null);
    }, "complete$0", "call$1", "call$0", "get$complete", 0, 2, 113, 21, 19, []]
  },
  _Future: {
    "^": "Object;_state,_zone<,_resultOrListeners,_nextListener@,_onValueCallback?,_errorTestCallback?,_onErrorCallback?,_whenCompleteActionCallback?",
    get$_isComplete: function() {
      return this._state >= 4;
    },
    get$_hasValue: function() {
      return this._state === 4;
    },
    get$_hasError: function() {
      return this._state === 8;
    },
    set$_isChained: function(value) {
      if (value)
        this._state = 2;
      else
        this._state = 0;
    },
    get$_onValue: function() {
      return this._state === 2 ? null : this._onValueCallback;
    },
    get$_errorTest: function() {
      return this._state === 2 ? null : this._errorTestCallback;
    },
    get$_onError: function() {
      return this._state === 2 ? null : this._onErrorCallback;
    },
    get$_whenCompleteAction: function() {
      return this._state === 2 ? null : this._whenCompleteActionCallback;
    },
    then$2$onError: function(f, onError) {
      var t1, result;
      t1 = $.Zone__current;
      result = new P._Future(0, t1, null, null, t1.registerUnaryCallback$1(f), null, P._registerErrorHandler(onError, $.Zone__current), null);
      result.$builtinTypeInfo = [null];
      this._addListener$1(result);
      return result;
    },
    then$1: function(f) {
      return this.then$2$onError(f, null);
    },
    whenComplete$1: function(action) {
      var t1, result;
      t1 = $.Zone__current;
      result = new P._Future(0, t1, null, null, null, null, null, t1.registerCallback$1(action));
      result.$builtinTypeInfo = this.$builtinTypeInfo;
      this._addListener$1(result);
      return result;
    },
    get$_async$_value: function() {
      return this._resultOrListeners;
    },
    get$_error: function() {
      return this._resultOrListeners;
    },
    _setValue$1: function(value) {
      this._state = 4;
      this._resultOrListeners = value;
    },
    _setError$2: function(error, stackTrace) {
      this._state = 8;
      this._resultOrListeners = new P._AsyncError(error, stackTrace);
    },
    _addListener$1: function(listener) {
      if (this._state >= 4)
        this._zone.scheduleMicrotask$1(new P._Future__addListener_closure(this, listener));
      else {
        listener.set$_nextListener(this._resultOrListeners);
        this._resultOrListeners = listener;
      }
    },
    _removeListeners$0: function() {
      var current, prev, next;
      current = this._resultOrListeners;
      this._resultOrListeners = null;
      for (prev = null; current != null; prev = current, current = next) {
        next = current.get$_nextListener();
        current.set$_nextListener(prev);
      }
      return prev;
    },
    _complete$1: function(value) {
      var t1, listeners;
      t1 = J.getInterceptor(value);
      if (!!t1.$isFuture)
        if (!!t1.$is_Future)
          P._Future__chainCoreFuture(value, this);
        else
          P._Future__chainForeignFuture(value, this);
      else {
        listeners = this._removeListeners$0();
        this._setValue$1(value);
        P._Future__propagateToListeners(this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners = this._removeListeners$0();
      this._setValue$1(value);
      P._Future__propagateToListeners(this, listeners);
    },
    _completeError$2: [function(error, stackTrace) {
      var listeners = this._removeListeners$0();
      this._setError$2(error, stackTrace);
      P._Future__propagateToListeners(this, listeners);
    }, function(error) {
      return this._completeError$2(error, null);
    }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 20, 21, 22, [], 23, []],
    _asyncComplete$1: function(value) {
      var t1;
      if (value == null)
        ;
      else {
        t1 = J.getInterceptor(value);
        if (!!t1.$isFuture) {
          if (!!t1.$is_Future) {
            t1 = value._state;
            if (t1 >= 4 && t1 === 8) {
              if (this._state !== 0)
                H.throwExpression(P.StateError$("Future already completed"));
              this._state = 1;
              this._zone.scheduleMicrotask$1(new P._Future__asyncComplete_closure(this, value));
            } else
              P._Future__chainCoreFuture(value, this);
          } else
            P._Future__chainForeignFuture(value, this);
          return;
        }
      }
      if (this._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      this._state = 1;
      this._zone.scheduleMicrotask$1(new P._Future__asyncComplete_closure0(this, value));
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      if (this._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      this._state = 1;
      this._zone.scheduleMicrotask$1(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    $is_Future: true,
    $isFuture: true,
    static: {"^": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR", _Future$: function($T) {
        var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
        t1.$builtinTypeInfo = [$T];
        return t1;
      }, _Future__chainForeignFuture: function(source, target) {
        target.set$_isChained(true);
        source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
      }, _Future__chainCoreFuture: function(source, target) {
        target.set$_isChained(true);
        if (source._state >= 4)
          P._Future__propagateToListeners(source, target);
        else
          source._addListener$1(target);
      }, _Future__propagateMultipleListeners: function(source, listeners) {
        var listeners0;
        do {
          listeners0 = listeners.get$_nextListener();
          listeners.set$_nextListener(null);
          P._Future__propagateToListeners(source, listeners);
          if (listeners0 != null) {
            listeners = listeners0;
            continue;
          } else
            break;
        } while (true);
      }, _Future__propagateToListeners: function(source, listeners) {
        var t1, t2, t3, hasError, asyncError, sourceValue, t4, zone, oldZone, chainSource, listeners0;
        t1 = {};
        t1.source_4 = source;
        for (t2 = source; true;) {
          t3 = {};
          if (t2.get$_isComplete() !== true)
            return;
          hasError = t1.source_4.get$_hasError();
          t2 = hasError === true;
          if (t2 && listeners == null) {
            asyncError = t1.source_4.get$_error();
            t1.source_4.get$_zone().handleUncaughtError$2(J.get$error$x(asyncError), asyncError.get$stackTrace());
            return;
          }
          if (listeners == null)
            return;
          if (listeners.get$_nextListener() != null) {
            P._Future__propagateMultipleListeners(t1.source_4, listeners);
            return;
          }
          t3.listenerHasValue_1 = true;
          sourceValue = t1.source_4.get$_hasValue() === true ? t1.source_4.get$_async$_value() : null;
          t3.listenerValueOrError_2 = sourceValue;
          t3.isPropagationAborted_3 = false;
          t4 = !t2;
          if (!t4 || listeners.get$_onValue() != null || listeners.get$_whenCompleteAction() != null) {
            zone = listeners.get$_zone();
            if (t2 && t1.source_4.get$_zone().inSameErrorZone$1(zone) !== true) {
              asyncError = t1.source_4.get$_error();
              t1.source_4.get$_zone().handleUncaughtError$2(J.get$error$x(asyncError), asyncError.get$stackTrace());
              return;
            }
            oldZone = $.Zone__current;
            if (oldZone == null ? zone != null : oldZone !== zone)
              $.Zone__current = zone;
            else
              oldZone = null;
            if (t4) {
              if (listeners.get$_onValue() != null)
                t3.listenerHasValue_1 = new P._Future__propagateToListeners_handleValueCallback(t3, listeners, sourceValue, zone).call$0();
            } else
              new P._Future__propagateToListeners_handleError(t1, t3, listeners, zone).call$0();
            if (listeners.get$_whenCompleteAction() != null)
              new P._Future__propagateToListeners_handleWhenCompleteCallback(t1, t3, hasError, listeners, zone).call$0();
            if (oldZone != null)
              $.Zone__current = oldZone;
            listeners.set$_onValueCallback(null);
            listeners.set$_errorTestCallback(null);
            listeners.set$_onErrorCallback(null);
            listeners.set$_whenCompleteActionCallback(null);
            if (t3.isPropagationAborted_3)
              return;
            if (t3.listenerHasValue_1 === true) {
              t2 = t3.listenerValueOrError_2;
              t2 = (sourceValue == null ? t2 != null : sourceValue !== t2) && !!J.getInterceptor(t2).$isFuture;
            } else
              t2 = false;
            if (t2) {
              chainSource = t3.listenerValueOrError_2;
              if (!!J.getInterceptor(chainSource).$is_Future)
                if (chainSource._state >= 4) {
                  listeners.set$_isChained(true);
                  t1.source_4 = chainSource;
                  t2 = chainSource;
                  continue;
                } else
                  P._Future__chainCoreFuture(chainSource, listeners);
              else
                P._Future__chainForeignFuture(chainSource, listeners);
              return;
            }
          }
          if (t3.listenerHasValue_1 === true) {
            listeners0 = listeners._removeListeners$0();
            listeners._setValue$1(t3.listenerValueOrError_2);
          } else {
            listeners0 = listeners._removeListeners$0();
            asyncError = t3.listenerValueOrError_2;
            listeners._setError$2(J.get$error$x(asyncError), asyncError.get$stackTrace());
          }
          t1.source_4 = listeners;
          t2 = listeners;
          listeners = listeners0;
        }
      }}
  },
  _Future__addListener_closure: {
    "^": "Closure:14;this_0,listener_1",
    call$0: [function() {
      P._Future__propagateToListeners(this.this_0, this.listener_1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Future__chainForeignFuture_closure: {
    "^": "Closure:54;target_0",
    call$1: [function(value) {
      this.target_0._completeWithValue$1(value);
    }, "call$1", null, 2, 0, null, 19, [], "call"],
    $isFunction: true
  },
  _Future__chainForeignFuture_closure0: {
    "^": "Closure:114;target_1",
    call$2: [function(error, stackTrace) {
      this.target_1._completeError$2(error, stackTrace);
    }, function(error) {
      return this.call$2(error, null);
    }, "call$1", "call$2", null, null, 2, 2, null, 21, 22, [], 23, [], "call"],
    $isFunction: true
  },
  _Future__asyncComplete_closure: {
    "^": "Closure:14;this_0,coreFuture_1",
    call$0: [function() {
      P._Future__chainCoreFuture(this.coreFuture_1, this.this_0);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Future__asyncComplete_closure0: {
    "^": "Closure:14;this_2,value_3",
    call$0: [function() {
      this.this_2._completeWithValue$1(this.value_3);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Future__asyncCompleteError_closure: {
    "^": "Closure:14;this_0,error_1,stackTrace_2",
    call$0: [function() {
      this.this_0._completeError$2(this.error_1, this.stackTrace_2);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Future__propagateToListeners_handleValueCallback: {
    "^": "Closure:115;box_1,listener_3,sourceValue_4,zone_5",
    call$0: function() {
      var e, s, exception, t1;
      try {
        this.box_1.listenerValueOrError_2 = this.zone_5.runUnary$2(this.listener_3.get$_onValue(), this.sourceValue_4);
        return true;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.box_1.listenerValueOrError_2 = new P._AsyncError(e, s);
        return false;
      }

    },
    $isFunction: true
  },
  _Future__propagateToListeners_handleError: {
    "^": "Closure:13;box_2,box_1,listener_6,zone_7",
    call$0: function() {
      var asyncError, test, matchesTest, e, s, errorCallback, e0, s0, t1, exception, t2, listenerValueOrError, t3, t4;
      asyncError = this.box_2.source_4.get$_error();
      t1 = this.listener_6;
      test = t1.get$_errorTest();
      matchesTest = true;
      if (test != null)
        try {
          matchesTest = this.zone_7.runUnary$2(test, J.get$error$x(asyncError));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P._AsyncError(e, s);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

      errorCallback = t1.get$_onError();
      if (matchesTest === true && errorCallback != null) {
        try {
          t1 = errorCallback;
          t2 = H.getDynamicRuntimeType();
          t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
          t3 = this.zone_7;
          t4 = this.box_1;
          if (t2)
            t4.listenerValueOrError_2 = t3.runBinary$3(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
          else
            t4.listenerValueOrError_2 = t3.runUnary$2(errorCallback, J.get$error$x(asyncError));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e0 = t1;
          s0 = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e0;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P._AsyncError(e0, s0);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

        this.box_1.listenerHasValue_1 = true;
      } else {
        t1 = this.box_1;
        t1.listenerValueOrError_2 = asyncError;
        t1.listenerHasValue_1 = false;
      }
    },
    $isFunction: true
  },
  _Future__propagateToListeners_handleWhenCompleteCallback: {
    "^": "Closure:13;box_2,box_1,hasError_8,listener_9,zone_10",
    call$0: function() {
      var t1, e, s, exception, t2, t3;
      t1 = {};
      t1.completeResult_0 = null;
      try {
        t1.completeResult_0 = this.zone_10.run$1(this.listener_9.get$_whenCompleteAction());
      } catch (exception) {
        t2 = H.unwrapException(exception);
        e = t2;
        s = new H._StackTrace(exception, null);
        if (this.hasError_8 === true) {
          t2 = J.get$error$x(this.box_2.source_4.get$_error());
          t3 = e;
          t3 = t2 == null ? t3 == null : t2 === t3;
          t2 = t3;
        } else
          t2 = false;
        t3 = this.box_1;
        if (t2)
          t3.listenerValueOrError_2 = this.box_2.source_4.get$_error();
        else
          t3.listenerValueOrError_2 = new P._AsyncError(e, s);
        t3.listenerHasValue_1 = false;
      }

      if (!!J.getInterceptor(t1.completeResult_0).$isFuture) {
        t2 = this.listener_9;
        t2.set$_isChained(true);
        this.box_1.isPropagationAborted_3 = true;
        t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(this.box_2, t2), new P._Future__propagateToListeners_handleWhenCompleteCallback_closure0(t1, t2));
      }
    },
    $isFunction: true
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
    "^": "Closure:54;box_2,listener_11",
    call$1: [function(ignored) {
      P._Future__propagateToListeners(this.box_2.source_4, this.listener_11);
    }, "call$1", null, 2, 0, null, 112, [], "call"],
    $isFunction: true
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0: {
    "^": "Closure:114;box_0,listener_12",
    call$2: [function(error, stackTrace) {
      var t1, completeResult;
      t1 = this.box_0;
      if (!J.getInterceptor(t1.completeResult_0).$is_Future) {
        completeResult = P._Future$(null);
        t1.completeResult_0 = completeResult;
        completeResult._setError$2(error, stackTrace);
      }
      P._Future__propagateToListeners(t1.completeResult_0, this.listener_12);
    }, function(error) {
      return this.call$2(error, null);
    }, "call$1", "call$2", null, null, 2, 2, null, 21, 22, [], 23, [], "call"],
    $isFunction: true
  },
  _AsyncCallbackEntry: {
    "^": "Object;callback,next@",
    callback$0: function() {
      return this.callback.call$0();
    }
  },
  Stream: {
    "^": "Object;",
    where$1: function(_, test) {
      var t1 = new P._WhereStream(test, this);
      t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "Stream", 0)];
      return t1;
    },
    map$1: function(_, convert) {
      var t1 = new P._MapStream(convert, this);
      t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "Stream", 0), null];
      return t1;
    },
    fold$2: function(_, initialValue, combine) {
      var t1, result;
      t1 = {};
      result = P._Future$(null);
      t1.value_0 = initialValue;
      t1.subscription_1 = null;
      t1.subscription_1 = this.listen$4$cancelOnError$onDone$onError(0, new P.Stream_fold_closure(t1, this, combine, result), true, new P.Stream_fold_closure0(t1, result), new P.Stream_fold_closure1(result));
      return result;
    },
    join$1: function(_, separator) {
      var t1, result, buffer;
      t1 = {};
      result = P._Future$(P.String);
      buffer = P.StringBuffer$("");
      t1.subscription_0 = null;
      t1.first_1 = true;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(0, new P.Stream_join_closure(t1, this, separator, result, buffer), true, new P.Stream_join_closure0(result, buffer), new P.Stream_join_closure1(result));
      return result;
    },
    contains$1: function(_, needle) {
      var t1, future;
      t1 = {};
      future = P._Future$(P.bool);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(0, new P.Stream_contains_closure(t1, this, needle, future), true, new P.Stream_contains_closure0(future), future.get$_completeError());
      return future;
    },
    forEach$1: function(_, action) {
      var t1, future;
      t1 = {};
      future = P._Future$(null);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(0, new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
      return future;
    },
    any$1: function(_, test) {
      var t1, future;
      t1 = {};
      future = P._Future$(P.bool);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(0, new P.Stream_any_closure(t1, this, test, future), true, new P.Stream_any_closure0(future), future.get$_completeError());
      return future;
    },
    get$length: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(P.$int);
      t1.count_0 = 0;
      this.listen$4$cancelOnError$onDone$onError(0, new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    get$isEmpty: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(P.bool);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(0, new P.Stream_isEmpty_closure(t1, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
      return future;
    },
    toList$0: function(_) {
      var result, future;
      result = [];
      result.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "Stream", 0)];
      future = P._Future$([P.List, H.getRuntimeTypeArgument(this, "Stream", 0)]);
      this.listen$4$cancelOnError$onDone$onError(0, new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
      return future;
    },
    skip$1: function(_, count) {
      var t1 = new P._SkipStream(count, this);
      t1.$builtinTypeInfo = [null];
      t1._SkipStream$2(this, count, null);
      return t1;
    },
    get$first: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(0, new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
      return future;
    },
    get$last: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
      t1.result_0 = null;
      t1.foundResult_1 = false;
      this.listen$4$cancelOnError$onDone$onError(0, new P.Stream_last_closure(t1, this), true, new P.Stream_last_closure0(t1, future), future.get$_completeError());
      return future;
    },
    firstWhere$2$defaultValue: function(_, test, defaultValue) {
      var t1, future;
      t1 = {};
      future = P._Future$(null);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(0, new P.Stream_firstWhere_closure(t1, this, test, future), true, new P.Stream_firstWhere_closure0(defaultValue, future), future.get$_completeError());
      return future;
    },
    firstWhere$1: function($receiver, test) {
      return this.firstWhere$2$defaultValue($receiver, test, null);
    },
    elementAt$1: function(_, index) {
      var t1, future;
      t1 = {};
      t1.index_0 = index;
      if (typeof index !== "number" || Math.floor(index) !== index || J.$lt$n(index, 0) === true)
        throw H.wrapException(P.ArgumentError$(t1.index_0));
      future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
      t1.subscription_1 = null;
      t1.subscription_1 = this.listen$4$cancelOnError$onDone$onError(0, new P.Stream_elementAt_closure(t1, this, future), true, new P.Stream_elementAt_closure0(t1, future), future.get$_completeError());
      return future;
    },
    $isStream: true
  },
  Stream_fold_closure: {
    "^": "Closure;box_0,this_1,combine_2,result_3",
    call$1: [function(element) {
      var t1 = this.box_0;
      P._runUserCode(new P.Stream_fold__closure(t1, this.combine_2, element), new P.Stream_fold__closure0(t1), P._cancelAndErrorClosure(t1.subscription_1, this.result_3));
    }, "call$1", null, 2, 0, null, 57, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_fold__closure: {
    "^": "Closure:14;box_0,combine_4,element_5",
    call$0: function() {
      return this.combine_4.call$2(this.box_0.value_0, this.element_5);
    },
    $isFunction: true
  },
  Stream_fold__closure0: {
    "^": "Closure:54;box_0",
    call$1: function(newValue) {
      this.box_0.value_0 = newValue;
    },
    $isFunction: true
  },
  Stream_fold_closure1: {
    "^": "Closure:94;result_6",
    call$2: [function(e, st) {
      this.result_6._completeError$2(e, st);
    }, "call$2", null, 4, 0, null, 2, [], 116, [], "call"],
    $isFunction: true
  },
  Stream_fold_closure0: {
    "^": "Closure:14;box_0,result_7",
    call$0: [function() {
      this.result_7._complete$1(this.box_0.value_0);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_join_closure: {
    "^": "Closure;box_0,this_1,separator_2,result_3,buffer_4",
    call$1: [function(element) {
      var e, s, t1, exception, t2;
      t1 = this.box_0;
      if (!t1.first_1)
        this.buffer_4.write$1(this.separator_2);
      t1.first_1 = false;
      try {
        this.buffer_4.write$1(element);
      } catch (exception) {
        t2 = H.unwrapException(exception);
        e = t2;
        s = new H._StackTrace(exception, null);
        P._cancelAndError(t1.subscription_0, this.result_3, e, s);
      }

    }, "call$1", null, 2, 0, null, 57, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_join_closure1: {
    "^": "Closure:54;result_5",
    call$1: [function(e) {
      this.result_5._completeError$1(e);
    }, "call$1", null, 2, 0, null, 2, [], "call"],
    $isFunction: true
  },
  Stream_join_closure0: {
    "^": "Closure:14;result_6,buffer_7",
    call$0: [function() {
      this.result_6._complete$1(this.buffer_7._contents);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_contains_closure: {
    "^": "Closure;box_0,this_1,needle_2,future_3",
    call$1: [function(element) {
      var t1, t2;
      t1 = this.box_0;
      t2 = this.future_3;
      P._runUserCode(new P.Stream_contains__closure(this.needle_2, element), new P.Stream_contains__closure0(t1, t2), P._cancelAndErrorClosure(t1.subscription_0, t2));
    }, "call$1", null, 2, 0, null, 57, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_contains__closure: {
    "^": "Closure:14;needle_4,element_5",
    call$0: function() {
      return J.$eq(this.element_5, this.needle_4);
    },
    $isFunction: true
  },
  Stream_contains__closure0: {
    "^": "Closure:117;box_0,future_6",
    call$1: function(isMatch) {
      if (isMatch === true)
        P._cancelAndValue(this.box_0.subscription_0, this.future_6, true);
    },
    $isFunction: true
  },
  Stream_contains_closure0: {
    "^": "Closure:14;future_7",
    call$0: [function() {
      this.future_7._complete$1(false);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_forEach_closure: {
    "^": "Closure;box_0,this_1,action_2,future_3",
    call$1: [function(element) {
      P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
    }, "call$1", null, 2, 0, null, 57, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_forEach__closure: {
    "^": "Closure:14;action_4,element_5",
    call$0: function() {
      return this.action_4.call$1(this.element_5);
    },
    $isFunction: true
  },
  Stream_forEach__closure0: {
    "^": "Closure:54;",
    call$1: function(_) {
    },
    $isFunction: true
  },
  Stream_forEach_closure0: {
    "^": "Closure:14;future_6",
    call$0: [function() {
      this.future_6._complete$1(null);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_any_closure: {
    "^": "Closure;box_0,this_1,test_2,future_3",
    call$1: [function(element) {
      var t1, t2;
      t1 = this.box_0;
      t2 = this.future_3;
      P._runUserCode(new P.Stream_any__closure(this.test_2, element), new P.Stream_any__closure0(t1, t2), P._cancelAndErrorClosure(t1.subscription_0, t2));
    }, "call$1", null, 2, 0, null, 57, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_any__closure: {
    "^": "Closure:14;test_4,element_5",
    call$0: function() {
      return this.test_4.call$1(this.element_5);
    },
    $isFunction: true
  },
  Stream_any__closure0: {
    "^": "Closure:117;box_0,future_6",
    call$1: function(isMatch) {
      if (isMatch === true)
        P._cancelAndValue(this.box_0.subscription_0, this.future_6, true);
    },
    $isFunction: true
  },
  Stream_any_closure0: {
    "^": "Closure:14;future_7",
    call$0: [function() {
      this.future_7._complete$1(false);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_length_closure: {
    "^": "Closure:54;box_0",
    call$1: [function(_) {
      ++this.box_0.count_0;
    }, "call$1", null, 2, 0, null, 108, [], "call"],
    $isFunction: true
  },
  Stream_length_closure0: {
    "^": "Closure:14;box_0,future_1",
    call$0: [function() {
      this.future_1._complete$1(this.box_0.count_0);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_isEmpty_closure: {
    "^": "Closure:54;box_0,future_1",
    call$1: [function(_) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_1, false);
    }, "call$1", null, 2, 0, null, 108, [], "call"],
    $isFunction: true
  },
  Stream_isEmpty_closure0: {
    "^": "Closure:14;future_2",
    call$0: [function() {
      this.future_2._complete$1(true);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_toList_closure: {
    "^": "Closure;this_0,result_1",
    call$1: [function(data) {
      this.result_1.push(data);
    }, "call$1", null, 2, 0, null, 110, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_0, "Stream");
    }
  },
  Stream_toList_closure0: {
    "^": "Closure:14;result_2,future_3",
    call$0: [function() {
      this.future_3._complete$1(this.result_2);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_first_closure: {
    "^": "Closure;box_0,this_1,future_2",
    call$1: [function(value) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_2, value);
    }, "call$1", null, 2, 0, null, 19, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_first_closure0: {
    "^": "Closure:14;future_3",
    call$0: [function() {
      var e, s, t1, exception;
      try {
        t1 = H.IterableElementError_noElement();
        throw H.wrapException(t1);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.future_3._completeError$2(e, s);
      }

    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_last_closure: {
    "^": "Closure;box_0,this_1",
    call$1: [function(value) {
      var t1 = this.box_0;
      t1.foundResult_1 = true;
      t1.result_0 = value;
    }, "call$1", null, 2, 0, null, 19, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_last_closure0: {
    "^": "Closure:14;box_0,future_2",
    call$0: [function() {
      var e, s, t1, exception;
      t1 = this.box_0;
      if (t1.foundResult_1) {
        this.future_2._complete$1(t1.result_0);
        return;
      }
      try {
        t1 = H.IterableElementError_noElement();
        throw H.wrapException(t1);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.future_2._completeError$2(e, s);
      }

    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_firstWhere_closure: {
    "^": "Closure;box_0,this_1,test_2,future_3",
    call$1: [function(value) {
      var t1, t2;
      t1 = this.box_0;
      t2 = this.future_3;
      P._runUserCode(new P.Stream_firstWhere__closure(this.test_2, value), new P.Stream_firstWhere__closure0(t1, t2, value), P._cancelAndErrorClosure(t1.subscription_0, t2));
    }, "call$1", null, 2, 0, null, 19, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_firstWhere__closure: {
    "^": "Closure:14;test_4,value_5",
    call$0: function() {
      return this.test_4.call$1(this.value_5);
    },
    $isFunction: true
  },
  Stream_firstWhere__closure0: {
    "^": "Closure:117;box_0,future_6,value_7",
    call$1: function(isMatch) {
      if (isMatch === true)
        P._cancelAndValue(this.box_0.subscription_0, this.future_6, this.value_7);
    },
    $isFunction: true
  },
  Stream_firstWhere_closure0: {
    "^": "Closure:14;defaultValue_8,future_9",
    call$0: [function() {
      var e, s, t1, exception;
      try {
        t1 = H.IterableElementError_noElement();
        throw H.wrapException(t1);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.future_9._completeError$2(e, s);
      }

    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_elementAt_closure: {
    "^": "Closure;box_0,this_1,future_2",
    call$1: [function(value) {
      var t1 = this.box_0;
      if (J.$eq(t1.index_0, 0)) {
        P._cancelAndValue(t1.subscription_1, this.future_2, value);
        return;
      }
      t1.index_0 = J.$sub$n(t1.index_0, 1);
    }, "call$1", null, 2, 0, null, 19, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_elementAt_closure0: {
    "^": "Closure:14;box_0,future_3",
    call$0: [function() {
      this.future_3._completeError$1(new P.RangeError("value " + H.S(this.box_0.index_0)));
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  StreamSubscription: {
    "^": "Object;",
    $isStreamSubscription: true
  },
  _ControllerStream: {
    "^": "_StreamImpl;",
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      return this._async$_controller._subscribe$4(onData, onError, onDone, cancelOnError);
    },
    get$hashCode: function(_) {
      return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$is_ControllerStream)
        return false;
      return other._async$_controller === this._async$_controller;
    },
    $is_ControllerStream: true
  },
  _ControllerSubscription: {
    "^": "_BufferingStreamSubscription;_async$_controller<",
    _onCancel$0: function() {
      return this.get$_async$_controller()._recordCancel$1(this);
    },
    _onPause$0: [function() {
      this.get$_async$_controller()._recordPause$1(this);
    }, "call$0", "get$_onPause", 0, 0, 13],
    _onResume$0: [function() {
      this.get$_async$_controller()._recordResume$1(this);
    }, "call$0", "get$_onResume", 0, 0, 13]
  },
  _EventSink: {
    "^": "Object;"
  },
  _BufferingStreamSubscription: {
    "^": "Object;_onData,_onError<,_onDone,_zone<,_state,_cancelFuture,_pending",
    onError$1: function(_, handleError) {
      if (handleError == null)
        handleError = P._nullErrorHandler$closure();
      this._onError = P._registerErrorHandler(handleError, this._zone);
    },
    pause$1: function(_, resumeSignal) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      this._state = (t1 + 128 | 4) >>> 0;
      if (t1 < 128 && this._pending != null)
        this._pending.cancelSchedule$0();
      if ((t1 & 4) === 0 && (this._state & 32) === 0)
        this._guardCallback$1(this.get$_onPause());
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 -= 128;
        this._state = t1;
        if (t1 < 128) {
          if ((t1 & 64) !== 0) {
            t1 = this._pending;
            t1 = !t1.get$isEmpty(t1);
          } else
            t1 = false;
          if (t1)
            this._pending.schedule$1(this);
          else {
            t1 = (this._state & 4294967291) >>> 0;
            this._state = t1;
            if ((t1 & 32) === 0)
              this._guardCallback$1(this.get$_onResume());
          }
        }
      }
    },
    cancel$0: function() {
      var t1 = (this._state & 4294967279) >>> 0;
      this._state = t1;
      if ((t1 & 8) !== 0)
        return this._cancelFuture;
      this._cancel$0();
      return this._cancelFuture;
    },
    get$isPaused: function() {
      return this._state >= 128;
    },
    _cancel$0: function() {
      var t1 = (this._state | 8) >>> 0;
      this._state = t1;
      if ((t1 & 64) !== 0)
        this._pending.cancelSchedule$0();
      if ((this._state & 32) === 0)
        this._pending = null;
      this._cancelFuture = this._onCancel$0();
    },
    _async$_add$1: function(_, data) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendData$1(data);
      else {
        t1 = new P._DelayedData(data, null);
        t1.$builtinTypeInfo = [null];
        this._addPending$1(t1);
      }
    },
    _addError$2: function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new P._DelayedError(error, stackTrace, null));
    },
    _close$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      this._state = t1;
      if (t1 < 32)
        this._sendDone$0();
      else
        this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: [function() {
    }, "call$0", "get$_onPause", 0, 0, 13],
    _onResume$0: [function() {
    }, "call$0", "get$_onResume", 0, 0, 13],
    _onCancel$0: function() {
      return;
    },
    _addPending$1: function($event) {
      var pending, t1;
      pending = this._pending;
      if (pending == null) {
        pending = new P._StreamImplEvents(null, null, 0);
        this._pending = pending;
      }
      pending.add$1(0, $event);
      t1 = this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        this._state = t1;
        if (t1 < 128)
          this._pending.schedule$1(this);
      }
    },
    _sendData$1: function(data) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      this._zone.runUnaryGuarded$2(this._onData, data);
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _sendError$2: function(error, stackTrace) {
      var t1, t2;
      t1 = this._state;
      t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        this._state = (t1 | 16) >>> 0;
        this._cancel$0();
        t1 = this._cancelFuture;
        if (!!J.getInterceptor(t1).$isFuture)
          t1.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0: function() {
      var t1, t2;
      t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
      this._cancel$0();
      this._state = (this._state | 16) >>> 0;
      t2 = this._cancelFuture;
      if (!!J.getInterceptor(t2).$isFuture)
        t2.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1: function(callback) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      callback.call$0();
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t1, isInputPaused;
      if ((this._state & 64) !== 0) {
        t1 = this._pending;
        t1 = t1.get$isEmpty(t1);
      } else
        t1 = false;
      if (t1) {
        t1 = (this._state & 4294967231) >>> 0;
        this._state = t1;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t1 = this._pending;
            t1 = t1 == null || t1.get$isEmpty(t1);
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          this._state = (this._state & 4294967291) >>> 0;
      }
      for (; true; wasInputPaused = isInputPaused) {
        t1 = this._state;
        if ((t1 & 8) !== 0) {
          this._pending = null;
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          this._onPause$0();
        else
          this._onResume$0();
        this._state = (this._state & 4294967263) >>> 0;
      }
      t1 = this._state;
      if ((t1 & 64) !== 0 && t1 < 128)
        this._pending.schedule$1(this);
    },
    _BufferingStreamSubscription$4: function(onData, onError, onDone, cancelOnError, $T) {
      var t1 = this._zone;
      this._onData = t1.registerUnaryCallback$1(onData);
      this.onError$1(0, onError);
      this._onDone = t1.registerCallback$1(onDone == null ? P._nullDoneHandler$closure() : onDone);
    },
    $isStreamSubscription: true,
    static: {"^": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT", _BufferingStreamSubscription$: function(onData, onError, onDone, cancelOnError, $T) {
        var t1, t2;
        t1 = $.Zone__current;
        t2 = cancelOnError ? 1 : 0;
        t2 = new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null);
        t2.$builtinTypeInfo = [$T];
        t2._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
        return t2;
      }}
  },
  _BufferingStreamSubscription__sendError_sendError: {
    "^": "Closure:13;this_0,error_1,stackTrace_2",
    call$0: [function() {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      t2 = t1._onError;
      t3 = H.getDynamicRuntimeType();
      t3 = H.buildFunctionType(t3, [t3, t3])._isTest$1(t2);
      t4 = t1._zone;
      t5 = this.error_1;
      t6 = t1._onError;
      if (t3)
        t4.runBinaryGuarded$3(t6, t5, this.stackTrace_2);
      else
        t4.runUnaryGuarded$2(t6, t5);
      t1._state = (t1._state & 4294967263) >>> 0;
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _BufferingStreamSubscription__sendDone_sendDone: {
    "^": "Closure:13;this_0",
    call$0: [function() {
      var t1, t2;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _StreamImpl: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(_, onData, cancelOnError, onDone, onError) {
      return this._createSubscription$4(onData, onError, onDone, true === cancelOnError);
    },
    listen$1: function($receiver, onData) {
      return this.listen$4$cancelOnError$onDone$onError($receiver, onData, null, null, null);
    },
    listen$3$onDone$onError: function($receiver, onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError($receiver, onData, null, onDone, onError);
    },
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      return P._BufferingStreamSubscription$(onData, onError, onDone, cancelOnError, H.getTypeArgumentByIndex(this, 0));
    }
  },
  _DelayedEvent: {
    "^": "Object;next@"
  },
  _DelayedData: {
    "^": "_DelayedEvent;value>,next",
    perform$1: function(dispatch) {
      dispatch._sendData$1(this.value);
    }
  },
  _DelayedError: {
    "^": "_DelayedEvent;error>,stackTrace<,next",
    perform$1: function(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  },
  _DelayedDone: {
    "^": "Object;",
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function() {
      return;
    },
    set$next: function(_) {
      throw H.wrapException(P.StateError$("No events after a done."));
    }
  },
  _PendingEvents: {
    "^": "Object;",
    schedule$1: function(dispatch) {
      var t1 = this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
      this._state = 1;
    },
    cancelSchedule$0: function() {
      if (this._state === 1)
        this._state = 3;
    }
  },
  _PendingEvents_schedule_closure: {
    "^": "Closure:14;this_0,dispatch_1",
    call$0: [function() {
      var t1, oldState;
      t1 = this.this_0;
      oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch_1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _StreamImplEvents: {
    "^": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var t1 = this.lastPendingEvent;
      if (t1 == null) {
        this.lastPendingEvent = $event;
        this.firstPendingEvent = $event;
      } else {
        t1.set$next($event);
        this.lastPendingEvent = $event;
      }
    },
    handleNext$1: function(dispatch) {
      var $event, t1;
      $event = this.firstPendingEvent;
      t1 = $event.get$next();
      this.firstPendingEvent = t1;
      if (t1 == null)
        this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    },
    clear$0: function(_) {
      if (this._state === 1)
        this._state = 3;
      this.lastPendingEvent = null;
      this.firstPendingEvent = null;
    }
  },
  _DoneStreamSubscription: {
    "^": "Object;_zone<,_state,_onDone",
    get$isPaused: function() {
      return this._state >= 4;
    },
    _schedule$0: function() {
      if ((this._state & 2) !== 0)
        return;
      this._zone.scheduleMicrotask$1(this.get$_sendDone());
      this._state = (this._state | 2) >>> 0;
    },
    onError$1: function(_, handleError) {
    },
    pause$1: function(_, resumeSignal) {
      this._state += 4;
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function() {
      var t1 = this._state;
      if (t1 >= 4) {
        t1 -= 4;
        this._state = t1;
        if (t1 < 4 && (t1 & 1) === 0)
          this._schedule$0();
      }
    },
    cancel$0: function() {
      return;
    },
    _sendDone$0: [function() {
      var t1 = (this._state & 4294967293) >>> 0;
      this._state = t1;
      if (t1 >= 4)
        return;
      this._state = (t1 | 1) >>> 0;
      t1 = this._onDone;
      if (t1 != null)
        this._zone.runGuarded$1(t1);
    }, "call$0", "get$_sendDone", 0, 0, 13],
    $isStreamSubscription: true,
    static: {"^": "_DoneStreamSubscription__DONE_SENT,_DoneStreamSubscription__SCHEDULED,_DoneStreamSubscription__PAUSED"}
  },
  _cancelAndError_closure: {
    "^": "Closure:14;future_0,error_1,stackTrace_2",
    call$0: [function() {
      return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _cancelAndErrorClosure_closure: {
    "^": "Closure:118;subscription_0,future_1",
    call$2: function(error, stackTrace) {
      return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
    },
    $isFunction: true
  },
  _cancelAndValue_closure: {
    "^": "Closure:14;future_0,value_1",
    call$0: [function() {
      return this.future_0._complete$1(this.value_1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _ForwardingStream: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(_, onData, cancelOnError, onDone, onError) {
      var t1, t2, t3, t4;
      cancelOnError = true === cancelOnError;
      t1 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 0);
      t2 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 1);
      t3 = $.Zone__current;
      t4 = cancelOnError ? 1 : 0;
      t4 = new P._ForwardingStreamSubscription(this, null, null, null, null, t3, t4, null, null);
      t4.$builtinTypeInfo = [t1, t2];
      t4._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t2);
      t4._ForwardingStreamSubscription$5(this, onData, onError, onDone, cancelOnError, t1, t2);
      return t4;
    },
    listen$1: function($receiver, onData) {
      return this.listen$4$cancelOnError$onDone$onError($receiver, onData, null, null, null);
    },
    listen$3$onDone$onError: function($receiver, onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError($receiver, onData, null, onDone, onError);
    },
    _handleData$2: function(data, sink) {
      sink._async$_add$1(0, data);
    },
    $asStream: function($S, $T) {
      return [$T];
    }
  },
  _ForwardingStreamSubscription: {
    "^": "_BufferingStreamSubscription;_stream,_subscription,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _async$_add$1: function(_, data) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._async$_add$1.call(this, this, data);
    },
    _addError$2: function(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._addError$2.call(this, error, stackTrace);
    },
    _onPause$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.pause$0(0);
    }, "call$0", "get$_onPause", 0, 0, 13],
    _onResume$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.resume$0();
    }, "call$0", "get$_onResume", 0, 0, 13],
    _onCancel$0: function() {
      var t1 = this._subscription;
      if (t1 != null) {
        this._subscription = null;
        t1.cancel$0();
      }
      return;
    },
    _handleData$1: [function(data) {
      this._stream._handleData$2(data, this);
    }, "call$1", "get$_handleData", 2, 0, function() {
      return H.computeSignature(function(S, T) {
        return {func: "void__S", void: true, args: [S]};
      }, this.$receiver, "_ForwardingStreamSubscription");
    }, 110, []],
    _handleError$2: [function(error, stackTrace) {
      this._addError$2(error, stackTrace);
    }, "call$2", "get$_handleError", 4, 0, 119, 22, [], 23, []],
    _handleDone$0: [function() {
      this._close$0();
    }, "call$0", "get$_handleDone", 0, 0, 13],
    _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
      var t1, t2;
      t1 = this.get$_handleData();
      t2 = this.get$_handleError();
      this._subscription = this._stream._async$_source.listen$3$onDone$onError(0, t1, this.get$_handleDone(), t2);
    },
    $as_BufferingStreamSubscription: function($S, $T) {
      return [$T];
    },
    $asStreamSubscription: function($S, $T) {
      return [$T];
    }
  },
  _WhereStream: {
    "^": "_ForwardingStream;_test,_async$_source",
    _test$1: function(arg0) {
      return this._test.call$1(arg0);
    },
    _handleData$2: function(inputEvent, sink) {
      var satisfies, e, s, exception, t1;
      satisfies = null;
      try {
        satisfies = this._test$1(inputEvent);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        sink._addError$2(e, s);
        return;
      }

      if (satisfies === true)
        J._async$_add$1$x(sink, inputEvent);
    },
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    },
    $asStream: null
  },
  _MapStream: {
    "^": "_ForwardingStream;_transform,_async$_source",
    _transform$1: function(arg0) {
      return this._transform.call$1(arg0);
    },
    _handleData$2: function(inputEvent, sink) {
      var outputEvent, e, s, exception, t1;
      outputEvent = null;
      try {
        outputEvent = this._transform$1(inputEvent);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        sink._addError$2(e, s);
        return;
      }

      J._async$_add$1$x(sink, outputEvent);
    }
  },
  _SkipStream: {
    "^": "_ForwardingStream;_remaining,_async$_source",
    _handleData$2: function(inputEvent, sink) {
      if (J.$gt$n(this._remaining, 0) === true) {
        this._remaining = J.$sub$n(this._remaining, 1);
        return;
      }
      sink._async$_add$1(0, inputEvent);
    },
    _SkipStream$2: function(source, count, $T) {
      if (typeof count !== "number" || Math.floor(count) !== count || count < 0)
        throw H.wrapException(P.ArgumentError$(count));
    },
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    },
    $asStream: null
  },
  Timer: {
    "^": "Object;"
  },
  _ZoneFunction: {
    "^": "Object;zone<,$function<"
  },
  ZoneSpecification: {
    "^": "Object;"
  },
  _ZoneSpecification: {
    "^": "Object;handleUncaughtError,run,runUnary,runBinary,registerCallback,registerUnaryCallback,registerBinaryCallback,scheduleMicrotask,createTimer,createPeriodicTimer,print,fork",
    handleUncaughtError$2: function(arg0, arg1) {
      return this.handleUncaughtError.call$2(arg0, arg1);
    },
    run$1: function(arg0) {
      return this.run.call$1(arg0);
    },
    runUnary$2: function(arg0, arg1) {
      return this.runUnary.call$2(arg0, arg1);
    },
    runBinary$3: function(arg0, arg1, arg2) {
      return this.runBinary.call$3(arg0, arg1, arg2);
    },
    registerCallback$1: function(arg0) {
      return this.registerCallback.call$1(arg0);
    },
    registerUnaryCallback$1: function(arg0) {
      return this.registerUnaryCallback.call$1(arg0);
    },
    registerBinaryCallback$1: function(arg0) {
      return this.registerBinaryCallback.call$1(arg0);
    },
    scheduleMicrotask$1: function(arg0) {
      return this.scheduleMicrotask.call$1(arg0);
    },
    scheduleMicrotask$2: function(arg0, arg1) {
      return this.scheduleMicrotask.call$2(arg0, arg1);
    },
    createTimer$2: function(arg0, arg1) {
      return this.createTimer.call$2(arg0, arg1);
    },
    createPeriodicTimer$2: function(arg0, arg1) {
      return this.createPeriodicTimer.call$2(arg0, arg1);
    },
    print$1: function($receiver, arg0) {
      return this.print.call$1(arg0);
    },
    fork$1$specification: function(arg0) {
      return this.fork.call$1$specification(arg0);
    },
    $is_ZoneSpecification: true
  },
  ZoneDelegate: {
    "^": "Object;"
  },
  Zone: {
    "^": "Object;"
  },
  _ZoneDelegate: {
    "^": "Object;_delegationTarget",
    scheduleMicrotask$2: function(zone, f) {
      var implementation, implZone;
      implementation = this._delegationTarget.get$_scheduleMicrotask();
      implZone = implementation.get$zone();
      implementation.get$$function().call$4(implZone, P._parentDelegate(implZone), zone, f);
    }
  },
  _Zone: {
    "^": "Object;",
    inSameErrorZone$1: function(otherZone) {
      var t1, t2;
      t1 = this.get$errorZone();
      t2 = otherZone.get$errorZone();
      return t1 == null ? t2 == null : t1 === t2;
    },
    $is_Zone: true
  },
  _CustomZone: {
    "^": "_Zone;_runUnary<,_run<,_runBinary<,_registerCallback<,_registerUnaryCallback<,_registerBinaryCallback<,_scheduleMicrotask<,_createTimer<,_createPeriodicTimer<,_print<,_fork<,_handleUncaughtError<,_delegateCache,parent>,_async$_map<",
    get$_delegate: function() {
      var t1 = this._delegateCache;
      if (t1 != null)
        return t1;
      t1 = new P._ZoneDelegate(this);
      this._delegateCache = t1;
      return t1;
    },
    get$errorZone: function() {
      return this._handleUncaughtError.get$zone();
    },
    runGuarded$1: function(f) {
      var e, s, t1, exception;
      try {
        t1 = this.run$1(f);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    runUnaryGuarded$2: function(f, arg) {
      var e, s, t1, exception;
      try {
        t1 = this.runUnary$2(f, arg);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    runBinaryGuarded$3: function(f, arg1, arg2) {
      var e, s, t1, exception;
      try {
        t1 = this.runBinary$3(f, arg1, arg2);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    bindCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerCallback$1(f);
      if (runGuarded)
        return new P._CustomZone_bindCallback_closure(this, registered);
      else
        return new P._CustomZone_bindCallback_closure0(this, registered);
    },
    bindCallback$1: function(f) {
      return this.bindCallback$2$runGuarded(f, true);
    },
    bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerUnaryCallback$1(f);
      if (runGuarded)
        return new P._CustomZone_bindUnaryCallback_closure(this, registered);
      else
        return new P._CustomZone_bindUnaryCallback_closure0(this, registered);
    },
    bindUnaryCallback$1: function(f) {
      return this.bindUnaryCallback$2$runGuarded(f, true);
    },
    bindBinaryCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerBinaryCallback$1(f);
      if (runGuarded)
        return new P._CustomZone_bindBinaryCallback_closure(this, registered);
      else
        return new P._CustomZone_bindBinaryCallback_closure0(this, registered);
    },
    $index: function(_, key) {
      var t1, result, t2, value;
      t1 = this._async$_map;
      result = t1.$index(0, key);
      if (result != null || t1.containsKey$1(key))
        return result;
      t2 = this.parent;
      if (t2 != null) {
        value = J.$index$asx(t2, key);
        if (value != null)
          t1.$indexSet(0, key, value);
        return value;
      }
      return;
    },
    handleUncaughtError$2: function(error, stackTrace) {
      var implementation, parentDelegate;
      implementation = this._handleUncaughtError;
      parentDelegate = P._parentDelegate(implementation.get$zone());
      return implementation.get$$function().call$5(implementation.get$zone(), parentDelegate, this, error, stackTrace);
    },
    fork$2$specification$zoneValues: function(specification, zoneValues) {
      var implementation, parentDelegate;
      implementation = this._fork;
      parentDelegate = P._parentDelegate(implementation.get$zone());
      return implementation.get$$function().call$5(implementation.get$zone(), parentDelegate, this, specification, zoneValues);
    },
    fork$1$specification: function(specification) {
      return this.fork$2$specification$zoneValues(specification, null);
    },
    run$1: function(f) {
      var implementation, parentDelegate;
      implementation = this._run;
      parentDelegate = P._parentDelegate(implementation.get$zone());
      return implementation.get$$function().call$4(implementation.get$zone(), parentDelegate, this, f);
    },
    runUnary$2: function(f, arg) {
      var implementation, parentDelegate;
      implementation = this._runUnary;
      parentDelegate = P._parentDelegate(implementation.get$zone());
      return implementation.get$$function().call$5(implementation.get$zone(), parentDelegate, this, f, arg);
    },
    runBinary$3: function(f, arg1, arg2) {
      var implementation, parentDelegate;
      implementation = this._runBinary;
      parentDelegate = P._parentDelegate(implementation.get$zone());
      return implementation.get$$function().call$6(implementation.get$zone(), parentDelegate, this, f, arg1, arg2);
    },
    registerCallback$1: function(f) {
      var implementation, parentDelegate;
      implementation = this._registerCallback;
      parentDelegate = P._parentDelegate(implementation.get$zone());
      return implementation.get$$function().call$4(implementation.get$zone(), parentDelegate, this, f);
    },
    registerUnaryCallback$1: function(f) {
      var implementation, parentDelegate;
      implementation = this._registerUnaryCallback;
      parentDelegate = P._parentDelegate(implementation.get$zone());
      return implementation.get$$function().call$4(implementation.get$zone(), parentDelegate, this, f);
    },
    registerBinaryCallback$1: function(f) {
      var implementation, parentDelegate;
      implementation = this._registerBinaryCallback;
      parentDelegate = P._parentDelegate(implementation.get$zone());
      return implementation.get$$function().call$4(implementation.get$zone(), parentDelegate, this, f);
    },
    scheduleMicrotask$1: function(f) {
      var implementation, parentDelegate;
      implementation = this._scheduleMicrotask;
      parentDelegate = P._parentDelegate(implementation.get$zone());
      return implementation.get$$function().call$4(implementation.get$zone(), parentDelegate, this, f);
    },
    createTimer$2: function(duration, f) {
      var implementation, parentDelegate;
      implementation = this._createTimer;
      parentDelegate = P._parentDelegate(implementation.get$zone());
      return implementation.get$$function().call$5(implementation.get$zone(), parentDelegate, this, duration, f);
    },
    createPeriodicTimer$2: function(duration, f) {
      var implementation, parentDelegate;
      implementation = this._createPeriodicTimer;
      parentDelegate = P._parentDelegate(implementation.get$zone());
      return implementation.get$$function().call$5(implementation.get$zone(), parentDelegate, this, duration, f);
    },
    print$1: function(_, line) {
      var implementation, parentDelegate;
      implementation = this._print;
      parentDelegate = P._parentDelegate(implementation.get$zone());
      return implementation.get$$function().call$4(implementation.get$zone(), parentDelegate, this, line);
    },
    _CustomZone$3: function($parent, specification, _map) {
      var t1;
      this._run = this.parent.get$_run();
      this._runUnary = this.parent.get$_runUnary();
      this._runBinary = this.parent.get$_runBinary();
      t1 = specification.registerCallback;
      this._registerCallback = t1 != null ? new P._ZoneFunction(this, t1) : this.parent.get$_registerCallback();
      t1 = specification.registerUnaryCallback;
      this._registerUnaryCallback = t1 != null ? new P._ZoneFunction(this, t1) : this.parent.get$_registerUnaryCallback();
      this._registerBinaryCallback = this.parent.get$_registerBinaryCallback();
      this._scheduleMicrotask = this.parent.get$_scheduleMicrotask();
      this._createTimer = this.parent.get$_createTimer();
      this._createPeriodicTimer = this.parent.get$_createPeriodicTimer();
      this._print = this.parent.get$_print();
      this._fork = this.parent.get$_fork();
      this._handleUncaughtError = this.parent.get$_handleUncaughtError();
    }
  },
  _CustomZone_bindCallback_closure: {
    "^": "Closure:14;this_0,registered_1",
    call$0: [function() {
      return this.this_0.runGuarded$1(this.registered_1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _CustomZone_bindCallback_closure0: {
    "^": "Closure:14;this_2,registered_3",
    call$0: [function() {
      return this.this_2.run$1(this.registered_3);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _CustomZone_bindUnaryCallback_closure: {
    "^": "Closure:54;this_0,registered_1",
    call$1: [function(arg) {
      return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
    }, "call$1", null, 2, 0, null, 31, [], "call"],
    $isFunction: true
  },
  _CustomZone_bindUnaryCallback_closure0: {
    "^": "Closure:54;this_2,registered_3",
    call$1: [function(arg) {
      return this.this_2.runUnary$2(this.registered_3, arg);
    }, "call$1", null, 2, 0, null, 31, [], "call"],
    $isFunction: true
  },
  _CustomZone_bindBinaryCallback_closure: {
    "^": "Closure:94;this_0,registered_1",
    call$2: [function(arg1, arg2) {
      return this.this_0.runBinaryGuarded$3(this.registered_1, arg1, arg2);
    }, "call$2", null, 4, 0, null, 7, [], 8, [], "call"],
    $isFunction: true
  },
  _CustomZone_bindBinaryCallback_closure0: {
    "^": "Closure:94;this_2,registered_3",
    call$2: [function(arg1, arg2) {
      return this.this_2.runBinary$3(this.registered_3, arg1, arg2);
    }, "call$2", null, 4, 0, null, 7, [], 8, [], "call"],
    $isFunction: true
  },
  _rootHandleUncaughtError_closure: {
    "^": "Closure:14;error_0,stackTrace_1",
    call$0: function() {
      throw H.wrapException(P._UncaughtAsyncError$(this.error_0, this.stackTrace_1));
    },
    $isFunction: true
  },
  _RootZone: {
    "^": "_Zone;",
    get$_run: function() {
      return C._ZoneFunction__RootZone__rootRun;
    },
    get$_runUnary: function() {
      return C._ZoneFunction__RootZone__rootRunUnary;
    },
    get$_runBinary: function() {
      return C._ZoneFunction__RootZone__rootRunBinary;
    },
    get$_registerCallback: function() {
      return C._ZoneFunction__RootZone__rootRegisterCallback;
    },
    get$_registerUnaryCallback: function() {
      return C._ZoneFunction_Eeh;
    },
    get$_registerBinaryCallback: function() {
      return C._ZoneFunction_7G2;
    },
    get$_scheduleMicrotask: function() {
      return C._ZoneFunction__RootZone__rootScheduleMicrotask;
    },
    get$_createTimer: function() {
      return C._ZoneFunction__RootZone__rootCreateTimer;
    },
    get$_createPeriodicTimer: function() {
      return C._ZoneFunction_3bB;
    },
    get$_print: function() {
      return C._ZoneFunction__RootZone__rootPrint;
    },
    get$_fork: function() {
      return C._ZoneFunction__RootZone__rootFork;
    },
    get$_handleUncaughtError: function() {
      return C._ZoneFunction_NMc;
    },
    get$parent: function(_) {
      return;
    },
    get$_async$_map: function() {
      return $.get$_RootZone__rootMap();
    },
    get$_delegate: function() {
      var t1 = $._RootZone__rootDelegate;
      if (t1 != null)
        return t1;
      t1 = new P._ZoneDelegate(this);
      $._RootZone__rootDelegate = t1;
      return t1;
    },
    get$errorZone: function() {
      return this;
    },
    runGuarded$1: function(f) {
      var e, s, t1, exception;
      try {
        if (C.C__RootZone === $.Zone__current) {
          t1 = f.call$0();
          return t1;
        }
        t1 = P._rootRun(null, null, this, f);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return P._rootHandleUncaughtError(null, null, this, e, s);
      }

    },
    runUnaryGuarded$2: function(f, arg) {
      var e, s, t1, exception;
      try {
        if (C.C__RootZone === $.Zone__current) {
          t1 = f.call$1(arg);
          return t1;
        }
        t1 = P._rootRunUnary(null, null, this, f, arg);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return P._rootHandleUncaughtError(null, null, this, e, s);
      }

    },
    runBinaryGuarded$3: function(f, arg1, arg2) {
      var e, s, t1, exception;
      try {
        if (C.C__RootZone === $.Zone__current) {
          t1 = f.call$2(arg1, arg2);
          return t1;
        }
        t1 = P._rootRunBinary(null, null, this, f, arg1, arg2);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return P._rootHandleUncaughtError(null, null, this, e, s);
      }

    },
    bindCallback$2$runGuarded: function(f, runGuarded) {
      if (runGuarded)
        return new P._RootZone_bindCallback_closure(this, f);
      else
        return new P._RootZone_bindCallback_closure0(this, f);
    },
    bindCallback$1: function(f) {
      return this.bindCallback$2$runGuarded(f, true);
    },
    bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
      if (runGuarded)
        return new P._RootZone_bindUnaryCallback_closure(this, f);
      else
        return new P._RootZone_bindUnaryCallback_closure0(this, f);
    },
    bindUnaryCallback$1: function(f) {
      return this.bindUnaryCallback$2$runGuarded(f, true);
    },
    bindBinaryCallback$2$runGuarded: function(f, runGuarded) {
      if (runGuarded)
        return new P._RootZone_bindBinaryCallback_closure(this, f);
      else
        return new P._RootZone_bindBinaryCallback_closure0(this, f);
    },
    $index: function(_, key) {
      return;
    },
    handleUncaughtError$2: function(error, stackTrace) {
      return P._rootHandleUncaughtError(null, null, this, error, stackTrace);
    },
    fork$2$specification$zoneValues: function(specification, zoneValues) {
      return P._rootFork(null, null, this, specification, zoneValues);
    },
    fork$1$specification: function(specification) {
      return this.fork$2$specification$zoneValues(specification, null);
    },
    run$1: function(f) {
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f);
    },
    runUnary$2: function(f, arg) {
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg);
    },
    runBinary$3: function(f, arg1, arg2) {
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2);
    },
    registerCallback$1: function(f) {
      return f;
    },
    registerUnaryCallback$1: function(f) {
      return f;
    },
    registerBinaryCallback$1: function(f) {
      return f;
    },
    scheduleMicrotask$1: function(f) {
      P._rootScheduleMicrotask(null, null, this, f);
    },
    createTimer$2: function(duration, f) {
      return P.Timer__createTimer(duration, f);
    },
    createPeriodicTimer$2: function(duration, f) {
      return P.Timer__createPeriodicTimer(duration, f);
    },
    print$1: function(_, line) {
      H.printString(line);
    },
    static: {"^": "_RootZone__rootMap,_RootZone__rootDelegate"}
  },
  _RootZone_bindCallback_closure: {
    "^": "Closure:14;this_0,f_1",
    call$0: [function() {
      return this.this_0.runGuarded$1(this.f_1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _RootZone_bindCallback_closure0: {
    "^": "Closure:14;this_2,f_3",
    call$0: [function() {
      return this.this_2.run$1(this.f_3);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _RootZone_bindUnaryCallback_closure: {
    "^": "Closure:54;this_0,f_1",
    call$1: [function(arg) {
      return this.this_0.runUnaryGuarded$2(this.f_1, arg);
    }, "call$1", null, 2, 0, null, 31, [], "call"],
    $isFunction: true
  },
  _RootZone_bindUnaryCallback_closure0: {
    "^": "Closure:54;this_2,f_3",
    call$1: [function(arg) {
      return this.this_2.runUnary$2(this.f_3, arg);
    }, "call$1", null, 2, 0, null, 31, [], "call"],
    $isFunction: true
  },
  _RootZone_bindBinaryCallback_closure: {
    "^": "Closure:94;this_0,f_1",
    call$2: [function(arg1, arg2) {
      return this.this_0.runBinaryGuarded$3(this.f_1, arg1, arg2);
    }, "call$2", null, 4, 0, null, 7, [], 8, [], "call"],
    $isFunction: true
  },
  _RootZone_bindBinaryCallback_closure0: {
    "^": "Closure:94;this_2,f_3",
    call$2: [function(arg1, arg2) {
      return this.this_2.runBinary$3(this.f_3, arg1, arg2);
    }, "call$2", null, 4, 0, null, 7, [], 8, [], "call"],
    $isFunction: true
  }
}],
["dart.collection", "dart:collection", , P, {
  "^": "",
  LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
    var t1 = new P._LinkedHashMap(0, null, null, null, null, null, 0);
    t1.$builtinTypeInfo = [$K, $V];
    return H.fillLiteralMap(keyValuePairs, t1);
  },
  LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
    var t1 = new P._LinkedHashMap(0, null, null, null, null, null, 0);
    t1.$builtinTypeInfo = [$K, $V];
    return t1;
  },
  _defaultEquals: [function(a, b) {
    return J.$eq(a, b);
  }, "call$2", "_defaultEquals$closure", 4, 0, 47, 48, [], 49, []],
  _defaultHashCode: [function(a) {
    return J.get$hashCode$(a);
  }, "call$1", "_defaultHashCode$closure", 2, 0, 50, 48, []],
  HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
    var t1;
    if (equals == null) {
      t1 = new P._HashMap(0, null, null, null, null);
      t1.$builtinTypeInfo = [$K, $V];
      return t1;
    }
    hashCode = P._defaultHashCode$closure();
    return P._CustomHashMap$(equals, hashCode, isValidKey, $K, $V);
  },
  HashSet_HashSet: function(equals, hashCode, isValidKey, $E) {
    var t1 = new P._HashSet(0, null, null, null, null);
    t1.$builtinTypeInfo = [$E];
    return t1;
  },
  IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
    var parts, t1;
    if (P.IterableBase__isToStringVisiting(iterable)) {
      if (leftDelimiter === "(" && rightDelimiter === ")")
        return "(...)";
      return leftDelimiter + "..." + rightDelimiter;
    }
    parts = [];
    t1 = $.get$IterableBase__toStringVisiting();
    t1.push(iterable);
    try {
      P.IterableBase__iterablePartsToStrings(iterable, parts);
    } finally {
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    t1 = P.StringBuffer$(leftDelimiter);
    t1.writeAll$2(parts, ", ");
    t1.write$1(rightDelimiter);
    return t1._contents;
  },
  IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
    var buffer, t1;
    if (P.IterableBase__isToStringVisiting(iterable))
      return leftDelimiter + "..." + rightDelimiter;
    buffer = P.StringBuffer$(leftDelimiter);
    t1 = $.get$IterableBase__toStringVisiting();
    t1.push(iterable);
    try {
      buffer.writeAll$2(iterable, ", ");
    } finally {
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    buffer.write$1(rightDelimiter);
    return buffer.get$_contents();
  },
  IterableBase__isToStringVisiting: function(o) {
    var i, t1;
    for (i = 0; t1 = $.get$IterableBase__toStringVisiting(), i < t1.length; ++i)
      if (o === t1[i])
        return true;
    return false;
  },
  IterableBase__iterablePartsToStrings: function(iterable, parts) {
    var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
    it = iterable.get$iterator(iterable);
    $length = 0;
    count = 0;
    while (true) {
      if (!($length < 80 || count < 3))
        break;
      if (it.moveNext$0() !== true)
        return;
      next = H.S(it.get$current());
      parts.push(next);
      $length += next.length + 2;
      ++count;
    }
    if (it.moveNext$0() !== true) {
      if (count <= 5)
        return;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      ultimateString = parts.pop();
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      penultimateString = parts.pop();
    } else {
      penultimate = it.get$current();
      ++count;
      if (it.moveNext$0() !== true) {
        if (count <= 4) {
          parts.push(H.S(penultimate));
          return;
        }
        ultimateString = H.S(penultimate);
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        penultimateString = parts.pop();
        $length += ultimateString.length + 2;
      } else {
        ultimate = it.get$current();
        ++count;
        for (; it.moveNext$0() === true; penultimate = ultimate, ultimate = ultimate0) {
          ultimate0 = it.get$current();
          ++count;
          if (count > 100) {
            while (true) {
              if (!($length > 75 && count > 3))
                break;
              if (0 >= parts.length)
                return H.ioore(parts, 0);
              $length -= parts.pop().length + 2;
              --count;
            }
            parts.push("...");
            return;
          }
        }
        penultimateString = H.S(penultimate);
        ultimateString = H.S(ultimate);
        $length += ultimateString.length + penultimateString.length + 4;
      }
    }
    if (count > parts.length + 2) {
      $length += 5;
      elision = "...";
    } else
      elision = null;
    while (true) {
      if (!($length > 80 && parts.length > 3))
        break;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      $length -= parts.pop().length + 2;
      if (elision == null) {
        $length += 5;
        elision = "...";
      }
    }
    if (elision != null)
      parts.push(elision);
    parts.push(penultimateString);
    parts.push(ultimateString);
  },
  LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
    var t1 = new P._LinkedHashMap(0, null, null, null, null, null, 0);
    t1.$builtinTypeInfo = [$K, $V];
    return t1;
  },
  LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
    var t1 = new P._LinkedHashSet(0, null, null, null, null, null, 0);
    t1.$builtinTypeInfo = [$E];
    return t1;
  },
  Maps_mapToString: function(m) {
    var t1, result;
    t1 = {};
    if (P.IterableBase__isToStringVisiting(m))
      return "{...}";
    result = P.StringBuffer$("");
    try {
      $.get$IterableBase__toStringVisiting().push(m);
      result.write$1("{");
      t1.first_0 = true;
      J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
      result.write$1("}");
    } finally {
      t1 = $.get$IterableBase__toStringVisiting();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  _HashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_keys",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    get$keys: function() {
      var t1 = new P.HashMapKeyIterable(this);
      t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
      return t1;
    },
    get$values: function(_) {
      var t1 = new P.HashMapKeyIterable(this);
      t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
      return H.MappedIterable_MappedIterable(t1, new P._HashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        return nums == null ? false : nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    },
    addAll$1: function(_, other) {
      J.forEach$1$ax(other, new P._HashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, t1, entry, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          t1 = null;
        else {
          entry = strings[key];
          t1 = entry === strings ? null : entry;
        }
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          t1 = null;
        else {
          entry = nums[key];
          t1 = entry === nums ? null : entry;
        }
        return t1;
      } else
        return this._get$1(key);
    },
    _get$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._HashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._HashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else
        this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this._rest;
      if (rest == null) {
        rest = P._HashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        ++this._collection$_length;
        this._keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++this._collection$_length;
          this._keys = null;
        }
      }
    },
    remove$1: function(_, key) {
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else
        return this._remove$1(key);
    },
    _remove$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      --this._collection$_length;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._keys = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
      }
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key;
      keys = this._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(key, this.$index(0, key));
        if (keys !== this._keys)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    _computeKeys$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._keys;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._keys = result;
      return result;
    },
    _addHashTableEntry$3: function(table, key, value) {
      if (table[key] == null) {
        ++this._collection$_length;
        this._keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _removeHashTableEntry$2: function(table, key) {
      var value;
      if (table != null && table[key] != null) {
        value = P._HashMap__getTableEntry(table, key);
        delete table[key];
        --this._collection$_length;
        this._keys = null;
        return value;
      } else
        return;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq(bucket[i], key))
          return i;
      return -1;
    },
    $isMap: true,
    static: {_HashMap__getTableEntry: function(table, key) {
        var entry = table[key];
        return entry === table ? null : entry;
      }, _HashMap__setTableEntry: function(table, key, value) {
        if (value == null)
          table[key] = table;
        else
          table[key] = value;
      }, _HashMap__newHashTable: function() {
        var table = Object.create(null);
        P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _HashMap_values_closure: {
    "^": "Closure:54;this_0",
    call$1: [function(each) {
      return this.this_0.$index(0, each);
    }, "call$1", null, 2, 0, null, 120, [], "call"],
    $isFunction: true
  },
  _HashMap_addAll_closure: {
    "^": "Closure;this_0",
    call$2: [function(key, value) {
      this.this_0.$indexSet(0, key, value);
    }, "call$2", null, 4, 0, null, 92, [], 19, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(K, V) {
        return {func: "dynamic__K_V", args: [K, V]};
      }, this.this_0, "_HashMap");
    }
  },
  _IdentityHashMap: {
    "^": "_HashMap;_collection$_length,_strings,_nums,_rest,_keys",
    _computeHashCode$1: function(key) {
      return H.objectHashCode(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2) {
        t1 = bucket[i];
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  },
  _CustomHashMap: {
    "^": "_HashMap;_equals,_hashCode,_validKey,_collection$_length,_strings,_nums,_rest,_keys",
    _equals$2: function(arg0, arg1) {
      return this._equals.call$2(arg0, arg1);
    },
    _hashCode$1: function(arg0) {
      return this._hashCode.call$1(arg0);
    },
    _validKey$1: function(arg0) {
      return this._validKey.call$1(arg0);
    },
    $index: function(_, key) {
      if (this._validKey$1(key) !== true)
        return;
      return P._HashMap.prototype._get$1.call(this, key);
    },
    $indexSet: function(_, key, value) {
      P._HashMap.prototype._set$2.call(this, key, value);
    },
    containsKey$1: function(key) {
      if (this._validKey$1(key) !== true)
        return false;
      return P._HashMap.prototype._containsKey$1.call(this, key);
    },
    remove$1: function(_, key) {
      if (this._validKey$1(key) !== true)
        return;
      return P._HashMap.prototype._remove$1.call(this, key);
    },
    _computeHashCode$1: function(key) {
      return this._hashCode$1(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (this._equals$2(bucket[i], key) === true)
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    static: {_CustomHashMap$: function(_equals, _hashCode, validKey, $K, $V) {
        var t1 = new P._CustomHashMap_closure($K);
        t1 = new P._CustomHashMap(_equals, _hashCode, t1, 0, null, null, null, null);
        t1.$builtinTypeInfo = [$K, $V];
        return t1;
      }}
  },
  _CustomHashMap_closure: {
    "^": "Closure:54;K_0",
    call$1: function(v) {
      var t1 = H.checkSubtypeOfRuntimeType(v, this.K_0);
      return t1;
    },
    $isFunction: true
  },
  HashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._map;
      t1 = new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    contains$1: function(_, element) {
      return this._map.containsKey$1(element);
    },
    forEach$1: function(_, f) {
      var t1, keys, $length, i;
      t1 = this._map;
      keys = t1._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        f.call$1(keys[i]);
        if (keys !== t1._keys)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
      }
    },
    $isEfficientLength: true
  },
  HashMapKeyIterator: {
    "^": "Object;_map,_keys,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var keys, offset, t1;
      keys = this._keys;
      offset = this._offset;
      t1 = this._map;
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = keys[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    get$keys: function() {
      var t1 = new P.LinkedHashMapKeyIterable(this);
      t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
      return t1;
    },
    get$values: function(_) {
      var t1 = new P.LinkedHashMapKeyIterable(this);
      t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
      return H.MappedIterable_MappedIterable(t1, new P._LinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    },
    addAll$1: function(_, other) {
      J.forEach$1$ax(other, new P._LinkedHashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, cell, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return;
        cell = strings[key];
        return cell == null ? null : cell.get$_value();
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return;
        cell = nums[key];
        return cell == null ? null : cell.get$_value();
      } else
        return this._get$1(key);
    },
    _get$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._LinkedHashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._LinkedHashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else
        this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2: function(key, ifAbsent) {
      var value;
      if (this.containsKey$1(key))
        return this.$index(0, key);
      value = ifAbsent.call$0();
      this.$indexSet(0, key, value);
      return value;
    },
    remove$1: function(_, key) {
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else
        return this._remove$1(key);
    },
    _remove$1: function(key) {
      var rest, bucket, index, cell;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_value();
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$2(cell.get$_key(), cell.get$_value());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell.get$_collection$_next();
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_value(value);
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = table[key];
      if (cell == null)
        return;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.get$_value();
    },
    _newLinkedCell$2: function(key, value) {
      var cell, last;
      cell = new P.LinkedHashMapCell(key, value, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_collection$_next(cell);
        this._last = cell;
      }
      ++this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_collection$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_collection$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      --this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_key(), key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isMap: true,
    static: {_LinkedHashMap__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _LinkedHashMap_values_closure: {
    "^": "Closure:54;this_0",
    call$1: [function(each) {
      return this.this_0.$index(0, each);
    }, "call$1", null, 2, 0, null, 120, [], "call"],
    $isFunction: true
  },
  _LinkedHashMap_addAll_closure: {
    "^": "Closure;this_0",
    call$2: [function(key, value) {
      this.this_0.$indexSet(0, key, value);
    }, "call$2", null, 4, 0, null, 92, [], 19, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(K, V) {
        return {func: "dynamic__K_V0", args: [K, V]};
      }, this.this_0, "_LinkedHashMap");
    }
  },
  LinkedHashMapCell: {
    "^": "Object;_key<,_value@,_collection$_next@,_previous@"
  },
  LinkedHashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      t2._cell = t1._first;
      return t2;
    },
    contains$1: function(_, element) {
      return this._map.containsKey$1(element);
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      t1 = this._map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.get$_key());
        if (modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell.get$_collection$_next();
      }
    },
    $isEfficientLength: true
  },
  LinkedHashMapKeyIterator: {
    "^": "Object;_map,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._map;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_key();
          this._cell = this._cell.get$_collection$_next();
          return true;
        }
      }
    }
  },
  _HashSet: {
    "^": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_elements",
    get$iterator: function(_) {
      var t1 = new P.HashSetIterator(this, this._computeElements$0(), 0, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        return nums == null ? false : nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    lookup$1: function(object) {
      var t1;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      return this._lookup$1(object);
    },
    _lookup$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index);
    },
    add$1: function(_, element) {
      var strings, table, nums;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else
        return this._add$1(0, element);
    },
    _add$1: function(_, element) {
      var rest, hash, bucket;
      rest = this._rest;
      if (rest == null) {
        rest = P._HashSet__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(element);
      }
      ++this._collection$_length;
      this._elements = null;
      return true;
    },
    addAll$1: function(_, objects) {
      var t1;
      for (t1 = J.get$iterator$ax(objects); t1.moveNext$0() === true;)
        this.add$1(0, t1.get$current());
    },
    remove$1: function(_, object) {
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else if (typeof object === "number" && (object & 0x3ffffff) === object)
        return this._removeHashTableEntry$2(this._nums, object);
      else
        return this._remove$1(object);
    },
    _remove$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      --this._collection$_length;
      this._elements = null;
      bucket.splice(index, 1);
      return true;
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._elements = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
      }
    },
    _computeElements$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._elements;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; ++i0) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._elements = result;
      return result;
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = 0;
      ++this._collection$_length;
      this._elements = null;
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      if (table != null && table[element] != null) {
        delete table[element];
        --this._collection$_length;
        this._elements = null;
        return true;
      } else
        return false;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i], element))
          return i;
      return -1;
    },
    $isSet: true,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null,
    static: {_HashSet__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  HashSetIterator: {
    "^": "Object;_set,_elements,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var elements, offset, t1;
      elements = this._elements;
      offset = this._offset;
      t1 = this._set;
      if (elements !== t1._elements)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= elements.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = elements[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashSet: {
    "^": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$iterator: function(_) {
      var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
      t1.$builtinTypeInfo = [null];
      t1._cell = this._first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    lookup$1: function(object) {
      var t1;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      else
        return this._lookup$1(object);
    },
    _lookup$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.get$_element$x(J.$index$asx(bucket, index));
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$1(J.get$_element$x(cell));
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell.get$_collection$_next();
      }
    },
    get$first: function(_) {
      var t1 = this._first;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No elements"));
      return J.get$_element$x(t1);
    },
    get$last: function(_) {
      var t1 = this._last;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No elements"));
      return J.get$_element$x(t1);
    },
    add$1: function(_, element) {
      var strings, table, nums;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else
        return this._add$1(0, element);
    },
    _add$1: function(_, element) {
      var rest, hash, bucket;
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashSet__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(this._newLinkedCell$1(element));
      }
      return true;
    },
    remove$1: function(_, object) {
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else if (typeof object === "number" && (object & 0x3ffffff) === object)
        return this._removeHashTableEntry$2(this._nums, object);
      else
        return this._remove$1(object);
    },
    _remove$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = table[element];
      if (cell == null)
        return false;
      this._unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _newLinkedCell$1: function(element) {
      var cell, last;
      cell = new P.LinkedHashSetCell(element, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_collection$_next(cell);
        this._last = cell;
      }
      ++this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_collection$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_collection$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      --this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(J.get$_element$x(bucket[i]), element))
          return i;
      return -1;
    },
    $isSet: true,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null,
    static: {_LinkedHashSet__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  LinkedHashSetCell: {
    "^": "Object;_element>,_collection$_next@,_previous@"
  },
  LinkedHashSetIterator: {
    "^": "Object;_set,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._set;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = J.get$_element$x(t1);
          this._cell = this._cell.get$_collection$_next();
          return true;
        }
      }
    }
  },
  UnmodifiableListView: {
    "^": "UnmodifiableListBase;_source",
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    $index: function(_, index) {
      return J.elementAt$1$ax(this._source, index);
    }
  },
  _HashSetBase: {
    "^": "SetBase;"
  },
  IterableBase: {
    "^": "Object;",
    map$1: function(_, f) {
      return H.MappedIterable_MappedIterable(this, f, H.getRuntimeTypeArgument(this, "IterableBase", 0), null);
    },
    where$1: function(_, f) {
      var t1 = new H.WhereIterable(this, f);
      t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "IterableBase", 0)];
      return t1;
    },
    contains$1: function(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
        if (J.$eq(t1.get$current(), element))
          return true;
      return false;
    },
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
        f.call$1(t1.get$current());
    },
    fold$2: function(_, initialValue, combine) {
      var t1, value;
      for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0() === true;)
        value = combine.call$2(value, t1.get$current());
      return value;
    },
    join$1: function(_, separator) {
      var iterator, buffer, t1;
      iterator = this.get$iterator(this);
      if (iterator.moveNext$0() !== true)
        return "";
      buffer = P.StringBuffer$("");
      if (separator === "") {
        do {
          t1 = H.S(iterator.get$current());
          buffer._contents += t1;
        } while (iterator.moveNext$0() === true);
      } else {
        buffer.write$1(H.S(iterator.get$current()));
        for (; iterator.moveNext$0() === true;) {
          buffer._contents += separator;
          t1 = H.S(iterator.get$current());
          buffer._contents += t1;
        }
      }
      return buffer._contents;
    },
    any$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
        if (f.call$1(t1.get$current()) === true)
          return true;
      return false;
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var it, count;
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0() === true;)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return this.get$iterator(this).moveNext$0() !== true;
    },
    get$isNotEmpty: function(_) {
      return this.get$isEmpty(this) !== true;
    },
    skip$1: function(_, n) {
      return H.SkipIterable_SkipIterable(this, n, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (it.moveNext$0() !== true)
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current();
    },
    get$last: function(_) {
      var it, result;
      it = this.get$iterator(this);
      if (it.moveNext$0() !== true)
        throw H.wrapException(H.IterableElementError_noElement());
      do
        result = it.get$current();
      while (it.moveNext$0() === true);
      return result;
    },
    get$single: function(_) {
      var it, result;
      it = this.get$iterator(this);
      if (it.moveNext$0() !== true)
        throw H.wrapException(H.IterableElementError_noElement());
      result = it.get$current();
      if (it.moveNext$0() === true)
        throw H.wrapException(H.IterableElementError_tooMany());
      return result;
    },
    firstWhere$2$orElse: function(_, test, orElse) {
      var t1, element;
      for (t1 = this.get$iterator(this); t1.moveNext$0() === true;) {
        element = t1.get$current();
        if (test.call$1(element) === true)
          return element;
      }
      throw H.wrapException(H.IterableElementError_noElement());
    },
    firstWhere$1: function($receiver, test) {
      return this.firstWhere$2$orElse($receiver, test, null);
    },
    elementAt$1: function(_, index) {
      var t1, remaining, element, t2;
      if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
        element = t1.get$current();
        t2 = J.getInterceptor(remaining);
        if (t2.$eq(remaining, 0))
          return element;
        remaining = t2.$sub(remaining, 1);
      }
      throw H.wrapException(P.RangeError$value(index));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    },
    $isIterable: true,
    $asIterable: null
  },
  ListBase: {
    "^": "Object_ListMixin;"
  },
  Object_ListMixin: {
    "^": "Object+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  ListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      var t1 = new H.ListIterator(receiver, this.get$length(receiver), 0, null);
      t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)];
      return t1;
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i;
      $length = this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty: function(receiver) {
      return J.$eq(this.get$length(receiver), 0);
    },
    get$isNotEmpty: function(receiver) {
      return !this.get$isEmpty(receiver);
    },
    get$first: function(receiver) {
      if (J.$eq(this.get$length(receiver), 0))
        throw H.wrapException(P.StateError$("No elements"));
      return this.$index(receiver, 0);
    },
    get$last: function(receiver) {
      if (J.$eq(this.get$length(receiver), 0))
        throw H.wrapException(P.StateError$("No elements"));
      return this.$index(receiver, J.$sub$n(this.get$length(receiver), 1));
    },
    contains$1: function(receiver, element) {
      var $length, t1, i, t2;
      $length = this.get$length(receiver);
      t1 = J.getInterceptor($length);
      i = 0;
      while (true) {
        t2 = this.get$length(receiver);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        if (J.$eq(this.$index(receiver, i), element))
          return true;
        if (!t1.$eq($length, this.get$length(receiver)))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
        ++i;
      }
      return false;
    },
    any$1: function(receiver, test) {
      var $length, i;
      $length = this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        if (test.call$1(this.$index(receiver, i)) === true)
          return true;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    firstWhere$2$orElse: function(receiver, test, orElse) {
      var $length, i, element;
      $length = this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        element = this.$index(receiver, i);
        if (test.call$1(element) === true)
          return element;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      throw H.wrapException(P.StateError$("No matching element"));
    },
    firstWhere$1: function($receiver, test) {
      return this.firstWhere$2$orElse($receiver, test, null);
    },
    join$1: function(receiver, separator) {
      var buffer;
      if (J.$eq(this.get$length(receiver), 0))
        return "";
      buffer = P.StringBuffer$("");
      buffer.writeAll$2(receiver, separator);
      return buffer._contents;
    },
    where$1: function(receiver, test) {
      var t1 = new H.WhereIterable(receiver, test);
      t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)];
      return t1;
    },
    map$1: function(receiver, f) {
      var t1 = new H.MappedListIterable(receiver, f);
      t1.$builtinTypeInfo = [null, null];
      return t1;
    },
    fold$2: function(receiver, initialValue, combine) {
      var $length, value, i;
      $length = this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      value = initialValue;
      i = 0;
      for (; i < $length; ++i) {
        value = combine.call$2(value, this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    skip$1: function(receiver, count) {
      return H.SubListIterable$(receiver, count, null, null);
    },
    toList$1$growable: function(receiver, growable) {
      var result, t1, i;
      if (growable) {
        result = [];
        result.$builtinTypeInfo = [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)];
        C.JSArray_methods.set$length(result, this.get$length(receiver));
      } else {
        t1 = this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        result = Array(t1);
        result.fixed$length = init;
        result.$builtinTypeInfo = [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)];
      }
      i = 0;
      while (true) {
        t1 = this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        t1 = this.$index(receiver, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
        ++i;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(receiver, element) {
      var t1 = this.get$length(receiver);
      this.set$length(receiver, J.$add$ns(t1, 1));
      this.$indexSet(receiver, t1, element);
    },
    addAll$1: function(receiver, iterable) {
      var t1, element, t2;
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0() === true;) {
        element = t1.get$current();
        t2 = this.get$length(receiver);
        this.set$length(receiver, J.$add$ns(t2, 1));
        this.$indexSet(receiver, t2, element);
      }
    },
    remove$1: function(receiver, element) {
      var i, t1;
      i = 0;
      while (true) {
        t1 = this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        if (J.$eq(this.$index(receiver, i), element)) {
          this.setRange$4(receiver, i, J.$sub$n(this.get$length(receiver), 1), receiver, i + 1);
          this.set$length(receiver, J.$sub$n(this.get$length(receiver), 1));
          return true;
        }
        ++i;
      }
      return false;
    },
    clear$0: function(receiver) {
      this.set$length(receiver, 0);
    },
    _rangeCheck$2: function(receiver, start, end) {
      var t1 = J.getInterceptor$n(start);
      if (t1.$lt(start, 0) === true || t1.$gt(start, this.get$length(receiver)) === true)
        throw H.wrapException(P.RangeError$range(start, 0, this.get$length(receiver)));
      t1 = J.getInterceptor$n(end);
      if (t1.$lt(end, start) === true || t1.$gt(end, this.get$length(receiver)) === true)
        throw H.wrapException(P.RangeError$range(end, start, this.get$length(receiver)));
    },
    sublist$2: function(receiver, start, end) {
      var $length, result, i, t1;
      if (end == null)
        end = this.get$length(receiver);
      this._rangeCheck$2(receiver, start, end);
      $length = J.$sub$n(end, start);
      result = [];
      result.$builtinTypeInfo = [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)];
      C.JSArray_methods.set$length(result, $length);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        t1 = this.$index(receiver, start + i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    getRange$2: function(receiver, start, end) {
      this._rangeCheck$2(receiver, start, end);
      return H.SubListIterable$(receiver, start, end, null);
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var t1, $length, t2, i;
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = start > t1;
      if (t1)
        H.throwExpression(P.RangeError$range(start, 0, this.get$length(receiver)));
      t1 = J.getInterceptor$n(end);
      if (t1.$lt(end, start) === true || t1.$gt(end, this.get$length(receiver)) === true)
        H.throwExpression(P.RangeError$range(end, start, this.get$length(receiver)));
      $length = t1.$sub(end, start);
      if (J.$eq($length, 0))
        return;
      if (typeof $length !== "number")
        return H.iae($length);
      t1 = J.getInterceptor$asx(iterable);
      t2 = t1.get$length(iterable);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (skipCount + $length > t2)
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (skipCount < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(iterable, skipCount + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(iterable, skipCount + i));
    },
    indexOf$2: function(receiver, element, startIndex) {
      var t1, i;
      t1 = J.getInterceptor$n(startIndex);
      if (t1.$ge(startIndex, this.get$length(receiver)) === true)
        return -1;
      if (t1.$lt(startIndex, 0) === true)
        startIndex = 0;
      for (i = startIndex; t1 = J.getInterceptor$n(i), t1.$lt(i, this.get$length(receiver)) === true; i = t1.$add(i, 1))
        if (J.$eq(this.$index(receiver, i), element))
          return i;
      return -1;
    },
    indexOf$1: function($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    },
    lastIndexOf$2: function(receiver, element, startIndex) {
      var i, t1;
      startIndex = J.$sub$n(this.get$length(receiver), 1);
      for (i = startIndex; t1 = J.getInterceptor$n(i), t1.$ge(i, 0) === true; i = t1.$sub(i, 1))
        if (J.$eq(this.$index(receiver, i), element))
          return i;
      return -1;
    },
    lastIndexOf$1: function($receiver, element) {
      return this.lastIndexOf$2($receiver, element, null);
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  MapBase: {
    "^": "Object+MapMixin;",
    $isMap: true
  },
  MapMixin: {
    "^": "Object;",
    forEach$1: function(_, action) {
      var t1, key;
      for (t1 = J.get$iterator$ax(this.get$keys()); t1.moveNext$0() === true;) {
        key = t1.get$current();
        action.call$2(key, this.$index(0, key));
      }
    },
    addAll$1: function(_, other) {
      var t1, t2, key;
      for (t1 = J.get$iterator$ax(other.get$keys()), t2 = J.getInterceptor$asx(other); t1.moveNext$0() === true;) {
        key = t1.get$current();
        this.$indexSet(0, key, t2.$index(other, key));
      }
    },
    containsKey$1: function(key) {
      return J.contains$1$asx(this.get$keys(), key);
    },
    get$length: function(_) {
      return J.get$length$asx(this.get$keys());
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.get$keys());
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this.get$keys());
    },
    get$values: function(_) {
      var t1 = new P._MapBaseValueIterable(this);
      t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "MapMixin", 1)];
      return t1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isMap: true
  },
  _MapBaseValueIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return J.get$length$asx(this._map.get$keys());
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._map.get$keys());
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this._map.get$keys());
    },
    get$first: function(_) {
      var t1 = this._map;
      return t1.$index(0, J.get$first$ax(t1.get$keys()));
    },
    get$last: function(_) {
      var t1 = this._map;
      return t1.$index(0, J.get$last$ax(t1.get$keys()));
    },
    get$iterator: function(_) {
      var t1 = this._map;
      t1 = new P._MapBaseValueIterator(J.get$iterator$ax(t1.get$keys()), t1, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    $isEfficientLength: true
  },
  _MapBaseValueIterator: {
    "^": "Object;_keys,_map,_collection$_current",
    moveNext$0: function() {
      var t1 = this._keys;
      if (t1.moveNext$0() === true) {
        this._collection$_current = this._map.$index(0, t1.get$current());
        return true;
      }
      this._collection$_current = null;
      return false;
    },
    get$current: function() {
      return this._collection$_current;
    }
  },
  _UnmodifiableMapMixin: {
    "^": "Object;",
    $indexSet: function(_, key, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    addAll$1: function(_, other) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    clear$0: function(_) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    remove$1: function(_, key) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    $isMap: true
  },
  MapView: {
    "^": "Object;",
    $index: function(_, key) {
      return this._map.$index(0, key);
    },
    $indexSet: function(_, key, value) {
      this._map.$indexSet(0, key, value);
    },
    addAll$1: function(_, other) {
      this._map.addAll$1(0, other);
    },
    clear$0: function(_) {
      this._map.clear$0(0);
    },
    containsKey$1: function(key) {
      return this._map.containsKey$1(key);
    },
    forEach$1: function(_, action) {
      this._map.forEach$1(0, action);
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._map._collection$_length !== 0;
    },
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$keys: function() {
      var t1, t2;
      t1 = this._map;
      t2 = new P.LinkedHashMapKeyIterable(t1);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      return t2;
    },
    remove$1: function(_, key) {
      return this._map.remove$1(0, key);
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this._map);
    },
    get$values: function(_) {
      var t1 = this._map;
      return t1.get$values(t1);
    },
    $isMap: true
  },
  UnmodifiableMapView: {
    "^": "MapView+_UnmodifiableMapMixin;_map",
    $isMap: true
  },
  Maps_mapToString_closure: {
    "^": "Closure:94;box_0,result_1",
    call$2: [function(k, v) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1(", ");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(k);
      t1.write$1(": ");
      t1.write$1(v);
    }, "call$2", null, 4, 0, null, 121, [], 71, [], "call"],
    $isFunction: true
  },
  ListQueue: {
    "^": "IterableBase;_table,_head,_tail,_modificationCount",
    get$iterator: function(_) {
      var t1 = new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    forEach$1: function(_, action) {
      var modificationCount, i, t1;
      modificationCount = this._modificationCount;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        action.call$1(t1[i]);
        if (modificationCount !== this._modificationCount)
          H.throwExpression(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this._head === this._tail;
    },
    get$length: function(_) {
      return J.$and$n(J.$sub$n(this._tail, this._head), this._table.length - 1);
    },
    get$first: function(_) {
      var t1, t2;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(H.IterableElementError_noElement());
      t2 = this._table;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      return t2[t1];
    },
    get$last: function(_) {
      var t1, t2;
      t1 = this._head;
      t2 = this._tail;
      if (t1 === t2)
        throw H.wrapException(H.IterableElementError_noElement());
      t1 = this._table;
      t2 = J.$and$n(J.$sub$n(t2, 1), this._table.length - 1);
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    elementAt$1: function(_, index) {
      var t1, t2, t3;
      t1 = J.getInterceptor$n(index);
      if (t1.$lt(index, 0) === true || t1.$gt(index, this.get$length(this)) === true)
        throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this)));
      t1 = this._table;
      t2 = this._head;
      if (typeof index !== "number")
        return H.iae(index);
      t3 = t1.length;
      t2 = (t2 + index & t3 - 1) >>> 0;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    toList$1$growable: function(_, growable) {
      var list, t1;
      if (growable) {
        list = [];
        list.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
        C.JSArray_methods.set$length(list, this.get$length(this));
      } else {
        t1 = this.get$length(this);
        if (typeof t1 !== "number")
          return H.iae(t1);
        list = Array(t1);
        list.fixed$length = init;
        list.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
      }
      this._writeToList$1(list);
      return list;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(_, element) {
      this._add$1(0, element);
    },
    addAll$1: function(_, elements) {
      var t1, addCount, $length, newCapacity, newTable, t2, endSpace, t3, preSpace;
      t1 = J.getInterceptor(elements);
      if (!!t1.$isList) {
        addCount = t1.get$length(elements);
        $length = this.get$length(this);
        t1 = J.getInterceptor$ns($length);
        if (J.$ge$n(t1.$add($length, addCount), this._table.length) === true) {
          newCapacity = P.ListQueue__nextPowerOf2(t1.$add($length, addCount));
          if (typeof newCapacity !== "number")
            return H.iae(newCapacity);
          newTable = Array(newCapacity);
          newTable.fixed$length = init;
          newTable.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
          this._tail = this._writeToList$1(newTable);
          this._table = newTable;
          this._head = 0;
          t1 = t1.$add($length, addCount);
          H.IterableMixinWorkaround_setRangeList(newTable, $length, t1, elements, 0);
          this._tail = J.$add$ns(this._tail, addCount);
        } else {
          t1 = this._table;
          t2 = this._tail;
          if (typeof t2 !== "number")
            return H.iae(t2);
          endSpace = t1.length - t2;
          t1 = J.getInterceptor$n(addCount);
          if (t1.$lt(addCount, endSpace) === true) {
            t1 = this._table;
            t2 = this._tail;
            t3 = J.$add$ns(t2, addCount);
            H.IterableMixinWorkaround_setRangeList(t1, t2, t3, elements, 0);
            this._tail = J.$add$ns(this._tail, addCount);
          } else {
            preSpace = t1.$sub(addCount, endSpace);
            t1 = this._table;
            t2 = this._tail;
            t3 = J.$add$ns(t2, endSpace);
            H.IterableMixinWorkaround_setRangeList(t1, t2, t3, elements, 0);
            t1 = this._table;
            H.IterableMixinWorkaround_setRangeList(t1, 0, preSpace, elements, endSpace);
            this._tail = preSpace;
          }
        }
        ++this._modificationCount;
      } else
        for (t1 = t1.get$iterator(elements); t1.moveNext$0() === true;)
          this._add$1(0, t1.get$current());
    },
    remove$1: function(_, object) {
      var i, t1;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        if (J.$eq(t1[i], object)) {
          this._remove$1(i);
          ++this._modificationCount;
          return true;
        }
      }
      return false;
    },
    clear$0: function(_) {
      var i, t1, t2, t3, t4;
      i = this._head;
      t1 = this._tail;
      if (i !== t1) {
        for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
          if (i < 0 || i >= t3)
            return H.ioore(t2, i);
          t2[i] = null;
        }
        this._tail = 0;
        this._head = 0;
        ++this._modificationCount;
      }
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    removeFirst$0: function() {
      var t1, t2, t3, result;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(H.IterableElementError_noElement());
      ++this._modificationCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3)
        return H.ioore(t2, t1);
      result = t2[t1];
      t2[t1] = null;
      this._head = (t1 + 1 & t3 - 1) >>> 0;
      return result;
    },
    _add$1: function(_, element) {
      var t1, t2;
      t1 = this._table;
      t2 = this._tail;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        return H.ioore(t1, t2);
      t1[t2] = element;
      t2 = (t2 + 1 & this._table.length - 1) >>> 0;
      this._tail = t2;
      if (this._head === t2)
        this._grow$0();
      ++this._modificationCount;
    },
    _remove$1: function(offset) {
      var mask, t1, endDistance, t2, t3, i, prevOffset, t4, nextOffset;
      mask = this._table.length - 1;
      t1 = this._head;
      endDistance = J.$and$n(J.$sub$n(this._tail, offset), mask);
      if (typeof endDistance !== "number")
        return H.iae(endDistance);
      if ((offset - t1 & mask) >>> 0 < endDistance) {
        for (t1 = this._head, t2 = this._table, t3 = t2.length, i = offset; i !== t1; i = prevOffset) {
          prevOffset = (i - 1 & mask) >>> 0;
          if (prevOffset < 0 || prevOffset >= t3)
            return H.ioore(t2, prevOffset);
          t4 = t2[prevOffset];
          if (i < 0 || i >= t3)
            return H.ioore(t2, i);
          t2[i] = t4;
        }
        if (t1 >= t3)
          return H.ioore(t2, t1);
        t2[t1] = null;
        this._head = (t1 + 1 & mask) >>> 0;
        return (offset + 1 & mask) >>> 0;
      } else {
        t1 = J.$and$n(J.$sub$n(this._tail, 1), mask);
        this._tail = t1;
        for (t2 = this._table, t3 = t2.length, i = offset; i !== t1; i = nextOffset) {
          nextOffset = (i + 1 & mask) >>> 0;
          if (nextOffset < 0 || nextOffset >= t3)
            return H.ioore(t2, nextOffset);
          t4 = t2[nextOffset];
          if (i < 0 || i >= t3)
            return H.ioore(t2, i);
          t2[i] = t4;
        }
        if (t1 >>> 0 !== t1 || t1 >= t3)
          return H.ioore(t2, t1);
        t2[t1] = null;
        return offset;
      }
    },
    _grow$0: function() {
      var newTable, t1, t2, split;
      newTable = Array(this._table.length * 2);
      newTable.fixed$length = init;
      newTable.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
      t1 = this._table;
      t2 = this._head;
      split = t1.length - t2;
      H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
      t1 = this._head;
      t2 = this._table;
      H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
      this._head = 0;
      this._tail = this._table.length;
      this._table = newTable;
    },
    _writeToList$1: function(target) {
      var t1, t2, $length, firstPartSize;
      t1 = this._head;
      t2 = this._tail;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 <= t2) {
        $length = t2 - t1;
        t1 = this._table;
        t2 = this._head;
        H.IterableMixinWorkaround_setRangeList(target, 0, $length, t1, t2);
        return $length;
      } else {
        t2 = this._table;
        firstPartSize = t2.length - t1;
        H.IterableMixinWorkaround_setRangeList(target, 0, firstPartSize, t2, t1);
        t1 = this._tail;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = this._table;
        H.IterableMixinWorkaround_setRangeList(target, firstPartSize, firstPartSize + t1, t2, 0);
        return J.$add$ns(this._tail, firstPartSize);
      }
    },
    ListQueue$1: function(initialCapacity, $E) {
      var t1 = Array(8);
      t1.fixed$length = init;
      t1.$builtinTypeInfo = [$E];
      this._table = t1;
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null,
    static: {"^": "ListQueue__INITIAL_CAPACITY", ListQueue__nextPowerOf2: function(number) {
        var t1, nextNumber;
        number = J.$sub$n(J.$shl$n(number, 2), 1);
        for (; true; number = nextNumber) {
          t1 = J.getInterceptor$n(number);
          nextNumber = t1.$and(number, t1.$sub(number, 1));
          if (J.$eq(nextNumber, 0))
            return number;
        }
      }}
  },
  _ListQueueIterator: {
    "^": "Object;_queue,_collection$_end,_modificationCount,_collection$_position,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._queue;
      if (this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = this._collection$_position;
      if (t2 === this._collection$_end) {
        this._collection$_current = null;
        return false;
      }
      t1 = t1._table;
      t3 = t1.length;
      if (t2 >= t3)
        return H.ioore(t1, t2);
      this._collection$_current = t1[t2];
      this._collection$_position = (t2 + 1 & t3 - 1) >>> 0;
      return true;
    }
  },
  SetMixin: {
    "^": "Object;",
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty: function(_) {
      return this.get$length(this) !== 0;
    },
    clear$0: function(_) {
      this.removeAll$1(this.toList$0(0));
    },
    addAll$1: function(_, elements) {
      var t1;
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0() === true;)
        this.add$1(0, t1.get$current());
    },
    removeAll$1: function(elements) {
      var t1 = new H.ListIterator(elements, elements.length, 0, null);
      t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(elements, 0)];
      for (; t1.moveNext$0();)
        this.remove$1(0, t1._current);
    },
    toList$1$growable: function(_, growable) {
      var result, t1, i, element, i0;
      if (growable) {
        result = [];
        result.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else {
        result = Array(this.get$length(this));
        result.fixed$length = init;
        result.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0)];
      }
      for (t1 = this.get$iterator(this), i = 0; t1.moveNext$0(); i = i0) {
        element = t1.get$current();
        i0 = i + 1;
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = element;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    map$1: function(_, f) {
      var t1 = new H.EfficientLengthMappedIterable(this, f);
      t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(this, 0), null];
      return t1;
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    where$1: function(_, f) {
      var t1 = new H.WhereIterable(this, f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    fold$2: function(_, initialValue, combine) {
      var t1, value;
      for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0();)
        value = combine.call$2(value, t1.get$current());
      return value;
    },
    join$1: function(_, separator) {
      var iterator, buffer, t1;
      iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      buffer = P.StringBuffer$("");
      if (separator === "") {
        do {
          t1 = H.S(iterator.get$current());
          buffer._contents += t1;
        } while (iterator.moveNext$0());
      } else {
        buffer.write$1(H.S(iterator.get$current()));
        for (; iterator.moveNext$0();) {
          buffer._contents += separator;
          t1 = H.S(iterator.get$current());
          buffer._contents += t1;
        }
      }
      return buffer._contents;
    },
    any$1: function(_, test) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (test.call$1(t1.get$current()) === true)
          return true;
      return false;
    },
    skip$1: function(_, n) {
      return H.SkipIterable_SkipIterable(this, n, H.getTypeArgumentByIndex(this, 0));
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current();
    },
    get$last: function(_) {
      var it, result;
      it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    firstWhere$2$orElse: function(_, test, orElse) {
      var t1, element;
      for (t1 = this.get$iterator(this); t1.moveNext$0();) {
        element = t1.get$current();
        if (test.call$1(element) === true)
          return element;
      }
      throw H.wrapException(H.IterableElementError_noElement());
    },
    firstWhere$1: function($receiver, test) {
      return this.firstWhere$2$orElse($receiver, test, null);
    },
    elementAt$1: function(_, index) {
      var t1, remaining, element, t2;
      if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
        element = t1.get$current();
        t2 = J.getInterceptor(remaining);
        if (t2.$eq(remaining, 0))
          return element;
        remaining = t2.$sub(remaining, 1);
      }
      throw H.wrapException(P.RangeError$value(index));
    },
    $isSet: true,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  SetBase: {
    "^": "SetMixin;"
  }
}],
["dart.convert", "dart:convert", , P, {
  "^": "",
  _convertJsonToDartLazy: function(object) {
    var i;
    if (object == null)
      return;
    if (typeof object != "object")
      return object;
    if (Object.getPrototypeOf(object) !== Array.prototype)
      return new P._JsonMap(object, Object.create(null), null);
    for (i = 0; i < object.length; ++i)
      object[i] = P._convertJsonToDartLazy(object[i]);
    return object;
  },
  _parseJson: function(source, reviver) {
    var parsed, e, t1, exception;
    t1 = source;
    if (typeof t1 !== "string")
      throw H.wrapException(P.ArgumentError$(source));
    parsed = null;
    try {
      parsed = JSON.parse(source);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      throw H.wrapException(P.FormatException$(String(e), null, null));
    }

    return P._convertJsonToDartLazy(parsed);
  },
  _isLeadSurrogate: function(codeUnit) {
    codeUnit.$and(0, 64512);
    return false;
  },
  _combineSurrogatePair: function(lead, tail) {
    return (65536 + (lead.$and(0, 1023) << 10 >>> 0) | tail & 1023) >>> 0;
  },
  _JsonMap: {
    "^": "Object;_original,_processed,_data",
    $index: function(_, key) {
      var t1, result;
      t1 = this._processed;
      if (t1 == null)
        return this._data.$index(0, key);
      else if (typeof key !== "string")
        return;
      else {
        result = t1[key];
        return typeof result == "undefined" ? this._process$1(key) : result;
      }
    },
    get$length: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        t1 = t1.get$length(t1);
      } else
        t1 = this._convert$_computeKeys$0().length;
      return t1;
    },
    get$isEmpty: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        t1 = t1.get$length(t1);
      } else
        t1 = this._convert$_computeKeys$0().length;
      return t1 === 0;
    },
    get$isNotEmpty: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        t1 = t1.get$length(t1);
      } else
        t1 = this._convert$_computeKeys$0().length;
      return t1 > 0;
    },
    get$keys: function() {
      var t1, t2;
      if (this._processed == null)
        return this._data.get$keys();
      t1 = this._convert$_computeKeys$0();
      t2 = new H.IterableMixinWorkaround();
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      return H.SubListIterable$(t1, 0, null, H.getTypeArgumentByIndex(t2, 0));
    },
    get$values: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        return t1.get$values(t1);
      }
      return H.MappedIterable_MappedIterable(this._convert$_computeKeys$0(), new P._JsonMap_values_closure(this), null, null);
    },
    $indexSet: function(_, key, value) {
      var processed, original;
      if (this._processed == null)
        this._data.$indexSet(0, key, value);
      else if (this.containsKey$1(key)) {
        processed = this._processed;
        processed[key] = value;
        original = this._original;
        if (original == null ? processed != null : original !== processed)
          original[key] = null;
      } else
        this._upgrade$0().$indexSet(0, key, value);
    },
    addAll$1: function(_, other) {
      J.forEach$1$ax(other, new P._JsonMap_addAll_closure(this));
    },
    containsKey$1: function(key) {
      if (this._processed == null)
        return this._data.containsKey$1(key);
      if (typeof key !== "string")
        return false;
      return Object.prototype.hasOwnProperty.call(this._original, key);
    },
    putIfAbsent$2: function(key, ifAbsent) {
      var value;
      if (this.containsKey$1(key))
        return this.$index(0, key);
      value = ifAbsent.call$0();
      this.$indexSet(0, key, value);
      return value;
    },
    remove$1: function(_, key) {
      if (this._processed != null && !this.containsKey$1(key))
        return;
      return this._upgrade$0().remove$1(0, key);
    },
    clear$0: function(_) {
      var t1;
      if (this._processed == null)
        this._data.clear$0(0);
      else {
        t1 = this._data;
        if (t1 != null)
          J.clear$0$ax(t1);
        this._processed = null;
        this._original = null;
        this._data = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      }
    },
    forEach$1: function(_, f) {
      var keys, i, key, value;
      if (this._processed == null)
        return this._data.forEach$1(0, f);
      keys = this._convert$_computeKeys$0();
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        value = this._processed[key];
        if (typeof value == "undefined") {
          value = P._convertJsonToDartLazy(this._original[key]);
          this._processed[key] = value;
        }
        f.call$2(key, value);
        if (keys !== this._data)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    _convert$_computeKeys$0: function() {
      var keys = this._data;
      if (keys == null) {
        keys = Object.keys(this._original);
        this._data = keys;
      }
      return keys;
    },
    _upgrade$0: function() {
      var result, keys, i, t1, key;
      if (this._processed == null)
        return this._data;
      result = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      keys = this._convert$_computeKeys$0();
      for (i = 0; t1 = keys.length, i < t1; ++i) {
        key = keys[i];
        result.$indexSet(0, key, this.$index(0, key));
      }
      if (t1 === 0)
        keys.push(null);
      else
        C.JSArray_methods.set$length(keys, 0);
      this._processed = null;
      this._original = null;
      this._data = result;
      return result;
    },
    _process$1: function(key) {
      var result;
      if (!Object.prototype.hasOwnProperty.call(this._original, key))
        return;
      result = P._convertJsonToDartLazy(this._original[key]);
      return this._processed[key] = result;
    },
    $isMap: true,
    $asMap: function() {
      return [null, null];
    }
  },
  _JsonMap_values_closure: {
    "^": "Closure:54;this_0",
    call$1: [function(each) {
      return this.this_0.$index(0, each);
    }, "call$1", null, 2, 0, null, 120, [], "call"],
    $isFunction: true
  },
  _JsonMap_addAll_closure: {
    "^": "Closure:94;this_0",
    call$2: [function(key, value) {
      this.this_0.$indexSet(0, key, value);
    }, "call$2", null, 4, 0, null, 92, [], 19, [], "call"],
    $isFunction: true
  },
  Codec: {
    "^": "Object;"
  },
  Converter: {
    "^": "Object;"
  },
  Encoding: {
    "^": "Codec;",
    $asCodec: function() {
      return [P.String, [P.List, P.$int]];
    }
  },
  HtmlEscapeMode: {
    "^": "Object;_convert$_name,escapeLtGt,escapeQuot,escapeApos,escapeSlash",
    toString$0: function(_) {
      return this._convert$_name;
    },
    static: {"^": "HtmlEscapeMode_UNKNOWN,HtmlEscapeMode_ATTRIBUTE,HtmlEscapeMode_ELEMENT"}
  },
  HtmlEscape: {
    "^": "Converter;mode",
    _convert$3: function(text, start, end) {
      var t1, t2, t3, t4, t5, i, result, ch, replace, t6;
      if (typeof end !== "number")
        return H.iae(end);
      t1 = J.getInterceptor$asx(text);
      t2 = this.mode;
      t3 = t2.escapeSlash;
      t4 = t2.escapeLtGt;
      t5 = t2.escapeApos;
      t2 = t2.escapeQuot;
      i = start;
      result = null;
      for (; i < end; ++i) {
        ch = t1.$index(text, i);
        switch (ch) {
          case "&":
            replace = "&amp;";
            break;
          case "\u00a0":
            replace = "&nbsp;";
            break;
          case "\"":
            replace = t2 ? "&quot;" : null;
            break;
          case "'":
            replace = t5 ? "&#x27;" : null;
            break;
          case "<":
            replace = t4 ? "&lt;" : null;
            break;
          case ">":
            replace = t4 ? "&gt;" : null;
            break;
          case "/":
            replace = t3 ? "&#x2F;" : null;
            break;
          default:
            replace = null;
        }
        if (replace != null) {
          if (result == null) {
            t6 = t1.substring$2(text, start, i);
            result = new P.StringBuffer("");
            if (typeof t6 === "string")
              result._contents = t6;
            else
              result._contents = H.S(t6);
          }
          result.toString;
          result._contents = result._contents + replace;
        } else if (result != null)
          result._contents += typeof ch === "string" ? ch : H.S(ch);
      }
      return result != null ? result.toString$0(0) : null;
    },
    $asConverter: function() {
      return [P.String, P.String];
    }
  },
  JsonCodec: {
    "^": "Codec;_reviver,_toEncodable",
    decode$2$reviver: function(source, reviver) {
      return P._parseJson(source, this.get$decoder()._reviver);
    },
    decode$1: function(source) {
      return this.decode$2$reviver(source, null);
    },
    get$decoder: function() {
      return C.JsonDecoder_null;
    },
    $asCodec: function() {
      return [P.Object, P.String];
    }
  },
  JsonDecoder: {
    "^": "Converter;_reviver",
    $asConverter: function() {
      return [P.String, P.Object];
    }
  },
  Utf8Codec: {
    "^": "Encoding;_allowMalformed",
    get$name: function(_) {
      return "utf-8";
    },
    get$encoder: function() {
      return new P.Utf8Encoder();
    }
  },
  Utf8Encoder: {
    "^": "Converter;",
    convert$1: function(string) {
      var t1, encoder;
      t1 = Array(string.get$length(string).$mul(0, 3));
      t1.fixed$length = init;
      t1.$builtinTypeInfo = [P.$int];
      encoder = new P._Utf8Encoder(0, 0, t1);
      encoder._fillBuffer$3(string, 0, string.get$length(string));
      string.get$length(string);
      encoder._writeSurrogate$2(string.codeUnitAt$1(0, string.get$length(string).$sub(0, 1)), 0);
      return C.JSArray_methods.sublist$2(t1, 0, encoder._bufferIndex);
    },
    $asConverter: function() {
      return [P.String, [P.List, P.$int]];
    }
  },
  _Utf8Encoder: {
    "^": "Object;_carry,_bufferIndex,_buffer",
    _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
      var t1, t2, t3, t4;
      if ((nextCodeUnit & 64512) === 56320)
        P._combineSurrogatePair(leadingSurrogate, nextCodeUnit);
      else {
        t1 = this._buffer;
        t2 = this._bufferIndex++;
        t3 = C.JSInt_methods.$or(224, leadingSurrogate.$shr(0, 12));
        t4 = t1.length;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = t3;
        t3 = this._bufferIndex++;
        t2 = leadingSurrogate.$shr(0, 6).$and(0, 63);
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | t2;
        t2 = this._bufferIndex++;
        t3 = leadingSurrogate.$and(0, 63);
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | t3;
        return false;
      }
    },
    _fillBuffer$3: function(str, start, end) {
      var t1, t2, stringIndex, codeUnit, t3, t4;
      P._isLeadSurrogate(str.codeUnitAt$1(0, end.$sub(0, 1)));
      for (t1 = this._buffer, t2 = t1.length, stringIndex = start; C.JSInt_methods.$lt(stringIndex, end); ++stringIndex) {
        codeUnit = str.codeUnitAt$1(0, stringIndex);
        codeUnit.$le(0, 127);
        P._isLeadSurrogate(codeUnit);
        codeUnit.$le(0, 2047);
        t3 = this._bufferIndex;
        if (t3 + 2 >= t2)
          break;
        this._bufferIndex = t3 + 1;
        t4 = C.JSInt_methods.$or(224, codeUnit.$shr(0, 12));
        if (t3 >= t2)
          return H.ioore(t1, t3);
        t1[t3] = t4;
        t4 = this._bufferIndex++;
        t3 = codeUnit.$shr(0, 6).$and(0, 63);
        if (t4 >= t2)
          return H.ioore(t1, t4);
        t1[t4] = 128 | t3;
        t3 = this._bufferIndex++;
        t4 = codeUnit.$and(0, 63);
        if (t3 >= t2)
          return H.ioore(t1, t3);
        t1[t3] = 128 | t4;
      }
      return stringIndex;
    },
    static: {"^": "_Utf8Encoder__DEFAULT_BYTE_BUFFER_SIZE"}
  },
  Utf8Decoder: {
    "^": "Converter;_allowMalformed",
    convert$1: function(codeUnits) {
      var buffer, decoder;
      buffer = P.StringBuffer$("");
      decoder = new P._Utf8Decoder(this._allowMalformed, buffer, true, 0, 0, 0);
      decoder.convert$3(codeUnits, 0, J.get$length$asx(codeUnits));
      decoder.flush$0();
      return buffer._contents;
    },
    $asConverter: function() {
      return [[P.List, P.$int], P.String];
    }
  },
  _Utf8Decoder: {
    "^": "Object;_allowMalformed,_stringSink,_isFirstCharacter,_convert$_value,_expectedUnits,_extraUnits",
    close$0: function(_) {
      this.flush$0();
    },
    flush$0: function() {
      if (this._expectedUnits > 0) {
        if (this._allowMalformed !== true)
          throw H.wrapException(P.FormatException$("Unfinished UTF-8 octet sequence", null, null));
        this._stringSink.write$1(H.Primitives_stringFromCharCode(65533));
        this._convert$_value = 0;
        this._expectedUnits = 0;
        this._extraUnits = 0;
      }
    },
    convert$3: function(codeUnits, startIndex, endIndex) {
      var value, expectedUnits, extraUnits, t1, t2, t3, t4, t5, i, unit, t6, t7, oneBytes, i0;
      value = this._convert$_value;
      expectedUnits = this._expectedUnits;
      extraUnits = this._extraUnits;
      this._convert$_value = 0;
      this._expectedUnits = 0;
      this._extraUnits = 0;
      t1 = new P._Utf8Decoder_convert_scanOneByteCharacters(endIndex);
      t2 = new P._Utf8Decoder_convert_addSingleBytes(this, codeUnits, startIndex, endIndex);
      $loop$0:
        for (t3 = this._stringSink, t4 = this._allowMalformed !== true, t5 = J.getInterceptor$asx(codeUnits), i = startIndex; true; i = i0) {
          $multibyte$2: {
            if (expectedUnits > 0) {
              do {
                if (i === endIndex)
                  break $loop$0;
                unit = t5.$index(codeUnits, i);
                t6 = J.getInterceptor$n(unit);
                if (t6.$and(unit, 192) !== 128) {
                  if (t4)
                    throw H.wrapException(P.FormatException$("Bad UTF-8 encoding 0x" + H.S(t6.toRadixString$1(unit, 16)), null, null));
                  this._isFirstCharacter = false;
                  t6 = H.Primitives_stringFromCharCode(65533);
                  t3._contents += t6;
                  expectedUnits = 0;
                  break $multibyte$2;
                } else {
                  value = J.$or$n(J.$shl$n(value, 6), t6.$and(unit, 63));
                  --expectedUnits;
                  ++i;
                }
              } while (expectedUnits > 0);
              t6 = extraUnits - 1;
              if (t6 < 0 || t6 >= 4)
                return H.ioore(C.List_127_2047_65535_1114111, t6);
              t7 = J.getInterceptor$n(value);
              if (t7.$le(value, C.List_127_2047_65535_1114111[t6]) === true) {
                if (t4)
                  throw H.wrapException(P.FormatException$("Overlong encoding of 0x" + H.S(t7.toRadixString$1(value, 16)), null, null));
                value = 65533;
                expectedUnits = 0;
                extraUnits = 0;
              }
              t6 = J.getInterceptor$n(value);
              if (t6.$gt(value, 1114111) === true) {
                if (t4)
                  throw H.wrapException(P.FormatException$("Character outside valid Unicode range: 0x" + H.S(t6.toRadixString$1(value, 16)), null, null));
                value = 65533;
              }
              if (!this._isFirstCharacter || !J.$eq(value, 65279)) {
                t6 = H.Primitives_stringFromCharCode(value);
                t3._contents += t6;
              }
              this._isFirstCharacter = false;
            }
          }
          if (typeof endIndex !== "number")
            return H.iae(endIndex);
          for (; i < endIndex; i = i0) {
            oneBytes = t1.call$2(codeUnits, i);
            if (J.$gt$n(oneBytes, 0) === true) {
              this._isFirstCharacter = false;
              if (typeof oneBytes !== "number")
                return H.iae(oneBytes);
              i0 = i + oneBytes;
              t2.call$2(i, i0);
              if (i0 === endIndex)
                break;
              i = i0;
            }
            i0 = i + 1;
            unit = t5.$index(codeUnits, i);
            t6 = J.getInterceptor$n(unit);
            if (t6.$lt(unit, 0) === true) {
              if (t4)
                throw H.wrapException(P.FormatException$("Negative UTF-8 code unit: -0x" + H.S(J.toRadixString$1$n(t6.$negate(unit), 16)), null, null));
              t6 = H.Primitives_stringFromCharCode(65533);
              t3._contents += t6;
            } else {
              if (t6.$and(unit, 224) === 192) {
                value = t6.$and(unit, 31);
                expectedUnits = 1;
                extraUnits = 1;
                continue $loop$0;
              }
              if (t6.$and(unit, 240) === 224) {
                value = t6.$and(unit, 15);
                expectedUnits = 2;
                extraUnits = 2;
                continue $loop$0;
              }
              if (t6.$and(unit, 248) === 240 && t6.$lt(unit, 245) === true) {
                value = t6.$and(unit, 7);
                expectedUnits = 3;
                extraUnits = 3;
                continue $loop$0;
              }
              if (t4)
                throw H.wrapException(P.FormatException$("Bad UTF-8 encoding 0x" + H.S(t6.toRadixString$1(unit, 16)), null, null));
              this._isFirstCharacter = false;
              t6 = H.Primitives_stringFromCharCode(65533);
              t3._contents += t6;
              value = 65533;
              expectedUnits = 0;
              extraUnits = 0;
            }
          }
          break $loop$0;
        }
      if (expectedUnits > 0) {
        this._convert$_value = value;
        this._expectedUnits = expectedUnits;
        this._extraUnits = extraUnits;
      }
    },
    static: {"^": "_Utf8Decoder__LIMITS"}
  },
  _Utf8Decoder_convert_scanOneByteCharacters: {
    "^": "Closure:122;endIndex_0",
    call$2: function(units, from) {
      var to, t1, i, unit;
      to = this.endIndex_0;
      if (typeof to !== "number")
        return H.iae(to);
      t1 = J.getInterceptor$asx(units);
      i = from;
      for (; i < to; ++i) {
        unit = t1.$index(units, i);
        if (J.$and$n(unit, 127) !== unit)
          return i - from;
      }
      return to - from;
    },
    $isFunction: true
  },
  _Utf8Decoder_convert_addSingleBytes: {
    "^": "Closure:123;this_1,codeUnits_2,startIndex_3,endIndex_4",
    call$2: function(from, to) {
      var t1, t2, t3;
      t1 = from === 0 && to === J.get$length$asx(this.codeUnits_2);
      t2 = this.this_1;
      t3 = this.codeUnits_2;
      if (t1)
        t2._stringSink.write$1(P.String_String$fromCharCodes(t3));
      else
        t2._stringSink.write$1(P.String_String$fromCharCodes(J.sublist$2$ax(t3, from, to)));
    },
    $isFunction: true
  }
}],
["dart.core", "dart:core", , P, {
  "^": "",
  Function__toMangledNames: function(namedArguments) {
    return;
  },
  Comparable_compare: [function(a, b) {
    return J.compareTo$1$ns(a, b);
  }, "call$2", "Comparable_compare$closure", 4, 0, 51],
  Error_safeToString: function(object) {
    var buffer, t1, i, t2, codeUnit;
    if (typeof object === "number" || typeof object === "boolean" || null == object)
      return J.toString$0(object);
    if (typeof object === "string") {
      buffer = new P.StringBuffer("");
      buffer._contents = "\"";
      for (t1 = object.length, i = 0, t2 = "\""; i < t1; ++i) {
        codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
        if (codeUnit <= 31)
          if (codeUnit === 10)
            t2 = buffer._contents += "\\n";
          else if (codeUnit === 13)
            t2 = buffer._contents += "\\r";
          else if (codeUnit === 9)
            t2 = buffer._contents += "\\t";
          else {
            t2 = buffer._contents += "\\x";
            if (codeUnit < 16)
              buffer._contents = t2 + "0";
            else {
              buffer._contents = t2 + "1";
              codeUnit -= 16;
            }
            t2 = H.Primitives_stringFromCharCode(codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit);
            t2 = buffer._contents += t2;
          }
        else if (codeUnit === 92)
          t2 = buffer._contents += "\\\\";
        else if (codeUnit === 34)
          t2 = buffer._contents += "\\\"";
        else {
          t2 = H.Primitives_stringFromCharCode(codeUnit);
          t2 = buffer._contents += t2;
        }
      }
      t1 = t2 + "\"";
      buffer._contents = t1;
      return t1;
    }
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Exception_Exception: function(message) {
    return new P._ExceptionImplementation(message);
  },
  identical: [function(a, b) {
    return a == null ? b == null : a === b;
  }, "call$2", "identical$closure", 4, 0, 52],
  identityHashCode: [function(object) {
    return H.objectHashCode(object);
  }, "call$1", "identityHashCode$closure", 2, 0, 53],
  List_List$filled: function($length, fill, $E) {
    var result, t1, i;
    result = J.JSArray_JSArray$fixed($length, $E);
    if ($length !== 0 && true)
      for (t1 = result.length, i = 0; i < t1; ++i)
        result[i] = fill;
    return result;
  },
  List_List$from: function(other, growable, $E) {
    var list, t1;
    list = [];
    list.$builtinTypeInfo = [$E];
    for (t1 = J.get$iterator$ax(other); t1.moveNext$0() === true;)
      list.push(t1.get$current());
    if (growable)
      return list;
    list.fixed$length = init;
    return list;
  },
  List_List$generate: function($length, generator, growable, $E) {
    var result, i, t1;
    if (growable) {
      result = [];
      result.$builtinTypeInfo = [$E];
      C.JSArray_methods.set$length(result, $length);
    } else {
      result = Array($length);
      result.fixed$length = init;
      result.$builtinTypeInfo = [$E];
    }
    for (i = 0; i < $length; ++i) {
      t1 = generator.call$1(i);
      if (i >= result.length)
        return H.ioore(result, i);
      result[i] = t1;
    }
    return result;
  },
  num_parse: function(input, onError) {
    var source, result;
    source = J.trim$0$s(input);
    result = H.Primitives_parseInt(source, null, P.num__returnNull$closure());
    if (result != null)
      return result;
    result = H.Primitives_parseDouble(source, P.num__returnNull$closure());
    if (result != null)
      return result;
    throw H.wrapException(P.FormatException$(input, null, null));
  },
  num__returnNull: [function(_) {
    return;
  }, "call$1", "num__returnNull$closure", 2, 0, 54],
  print: function(object) {
    var line, t1;
    line = H.S(object);
    t1 = $.printToZone;
    if (t1 == null)
      H.printString(line);
    else
      t1.call$1(line);
  },
  String_String$fromCharCodes: function(charCodes) {
    return H.Primitives_stringFromCharCodes(typeof charCodes !== "object" || charCodes === null || charCodes.constructor !== Array ? P.List_List$from(charCodes, true, null) : charCodes);
  },
  Function__toMangledNames_closure: {
    "^": "Closure:94;result_0",
    call$2: function(symbol, value) {
      this.result_0.$indexSet(0, symbol.get$_name(symbol), value);
    },
    $isFunction: true
  },
  NoSuchMethodError_toString_closure: {
    "^": "Closure:101;box_0",
    call$2: [function(key, value) {
      var t1 = this.box_0;
      if (t1.i_1 > 0)
        t1.sb_0.write$1(", ");
      t1.sb_0.write$1(J.get$_name$x(key));
      t1.sb_0.write$1(": ");
      t1.sb_0.write$1(P.Error_safeToString(value));
      ++t1.i_1;
    }, "call$2", null, 4, 0, null, 92, [], 19, [], "call"],
    $isFunction: true
  },
  Deprecated: {
    "^": "Object;expires",
    toString$0: function(_) {
      return "Deprecated feature. Will be removed " + this.expires;
    }
  },
  _Override: {
    "^": "Object;"
  },
  _Proxy: {
    "^": "Object;"
  },
  bool: {
    "^": "Object;",
    toString$0: function(_) {
      return this ? "true" : "false";
    },
    $isbool: true
  },
  "+bool": 0,
  Comparable: {
    "^": "Object;"
  },
  DateTime: {
    "^": "Object;millisecondsSinceEpoch<,isUtc",
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDateTime)
        return false;
      t1 = this.millisecondsSinceEpoch;
      t2 = other.millisecondsSinceEpoch;
      return (t1 == null ? t2 == null : t1 === t2) && this.isUtc === other.isUtc;
    },
    compareTo$1: function(_, other) {
      return J.compareTo$1$ns(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
    },
    get$hashCode: function(_) {
      return this.millisecondsSinceEpoch;
    },
    toString$0: function(_) {
      var t1, y, m, d, h, min, sec, ms;
      t1 = this.isUtc;
      y = P.DateTime__fourDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(this).getFullYear() + 0);
      m = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(this).getMonth() + 1);
      d = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(this).getDate() + 0);
      h = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(this).getHours() + 0);
      min = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(this).getMinutes() + 0);
      sec = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(this).getSeconds() + 0);
      ms = P.DateTime__threeDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(this).getMilliseconds() + 0);
      if (t1)
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    add$1: function(_, duration) {
      var ms, t1;
      ms = this.millisecondsSinceEpoch;
      t1 = duration.get$inMilliseconds();
      if (typeof ms !== "number")
        return ms.$add();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return P.DateTime$fromMillisecondsSinceEpoch(ms + t1, this.isUtc);
    },
    DateTime$_now$0: function() {
      H.Primitives_lazyAsJsDate(this);
    },
    DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
      millisecondsSinceEpoch.toString;
      if (Math.abs(millisecondsSinceEpoch) > 8640000000000000)
        throw H.wrapException(P.ArgumentError$(millisecondsSinceEpoch));
    },
    $isDateTime: true,
    static: {"^": "DateTime_MONDAY,DateTime_TUESDAY,DateTime_WEDNESDAY,DateTime_THURSDAY,DateTime_FRIDAY,DateTime_SATURDAY,DateTime_SUNDAY,DateTime_DAYS_PER_WEEK,DateTime_JANUARY,DateTime_FEBRUARY,DateTime_MARCH,DateTime_APRIL,DateTime_MAY,DateTime_JUNE,DateTime_JULY,DateTime_AUGUST,DateTime_SEPTEMBER,DateTime_OCTOBER,DateTime_NOVEMBER,DateTime_DECEMBER,DateTime_MONTHS_PER_YEAR,DateTime__MAX_MILLISECONDS_SINCE_EPOCH", DateTime_parse: function(formattedString) {
        var match, t1, t2, years, month, day, hour, minute, second, millisecond, addOneMillisecond, t3, sign, hourDifference, minuteDifference, isUtc, millisecondsSinceEpoch;
        match = new H.JSSyntaxRegExp("^([+-]?\\d{4,6})-?(\\d\\d)-?(\\d\\d)(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(.\\d{1,6})?)?)?( ?[zZ]| ?([-+])(\\d\\d)(?::?(\\d\\d))?)?)?$", H.JSSyntaxRegExp_makeNative("^([+-]?\\d{4,6})-?(\\d\\d)-?(\\d\\d)(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(.\\d{1,6})?)?)?( ?[zZ]| ?([-+])(\\d\\d)(?::?(\\d\\d))?)?)?$", false, true, false), null, null).firstMatch$1(formattedString);
        if (match != null) {
          t1 = new P.DateTime_parse_parseIntOrZero();
          t2 = match._match;
          if (1 >= t2.length)
            return H.ioore(t2, 1);
          years = H.Primitives_parseInt(t2[1], null, null);
          if (2 >= t2.length)
            return H.ioore(t2, 2);
          month = H.Primitives_parseInt(t2[2], null, null);
          if (3 >= t2.length)
            return H.ioore(t2, 3);
          day = H.Primitives_parseInt(t2[3], null, null);
          if (4 >= t2.length)
            return H.ioore(t2, 4);
          hour = t1.call$1(t2[4]);
          if (5 >= t2.length)
            return H.ioore(t2, 5);
          minute = t1.call$1(t2[5]);
          if (6 >= t2.length)
            return H.ioore(t2, 6);
          second = t1.call$1(t2[6]);
          if (7 >= t2.length)
            return H.ioore(t2, 7);
          millisecond = J.round$0$n(J.$mul$ns(new P.DateTime_parse_parseDoubleOrZero().call$1(t2[7]), 1000));
          if (J.$eq(millisecond, 1000)) {
            addOneMillisecond = true;
            millisecond = 999;
          } else
            addOneMillisecond = false;
          t3 = t2.length;
          if (8 >= t3)
            return H.ioore(t2, 8);
          if (t2[8] != null) {
            if (9 >= t3)
              return H.ioore(t2, 9);
            t3 = t2[9];
            if (t3 != null) {
              sign = J.$eq(t3, "-") ? -1 : 1;
              if (10 >= t2.length)
                return H.ioore(t2, 10);
              hourDifference = H.Primitives_parseInt(t2[10], null, null);
              if (11 >= t2.length)
                return H.ioore(t2, 11);
              minuteDifference = t1.call$1(t2[11]);
              if (typeof hourDifference !== "number")
                return H.iae(hourDifference);
              minuteDifference = J.$add$ns(minuteDifference, 60 * hourDifference);
              if (typeof minuteDifference !== "number")
                return H.iae(minuteDifference);
              minute = J.$sub$n(minute, sign * minuteDifference);
            }
            isUtc = true;
          } else
            isUtc = false;
          millisecondsSinceEpoch = H.Primitives_valueFromDecomposedDate(years, month, day, hour, minute, second, millisecond, isUtc);
          if (millisecondsSinceEpoch == null)
            throw H.wrapException(P.FormatException$("Time out of range", formattedString, null));
          return P.DateTime$fromMillisecondsSinceEpoch(addOneMillisecond ? millisecondsSinceEpoch + 1 : millisecondsSinceEpoch, isUtc);
        } else
          throw H.wrapException(P.FormatException$("Invalid date format", formattedString, null));
      }, DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
        var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
        t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
        return t1;
      }, DateTime__fourDigits: function(n) {
        var absN, sign;
        absN = Math.abs(n);
        sign = n < 0 ? "-" : "";
        if (absN >= 1000)
          return "" + n;
        if (absN >= 100)
          return sign + "0" + H.S(absN);
        if (absN >= 10)
          return sign + "00" + H.S(absN);
        return sign + "000" + H.S(absN);
      }, DateTime__threeDigits: function(n) {
        if (n >= 100)
          return "" + n;
        if (n >= 10)
          return "0" + n;
        return "00" + n;
      }, DateTime__twoDigits: function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }}
  },
  DateTime_parse_parseIntOrZero: {
    "^": "Closure:124;",
    call$1: function(matched) {
      if (matched == null)
        return 0;
      return H.Primitives_parseInt(matched, null, null);
    },
    $isFunction: true
  },
  DateTime_parse_parseDoubleOrZero: {
    "^": "Closure:125;",
    call$1: function(matched) {
      if (matched == null)
        return 0;
      return H.Primitives_parseDouble(matched, null);
    },
    $isFunction: true
  },
  $double: {
    "^": "num;",
    $is$double: true
  },
  "+double": 0,
  Duration: {
    "^": "Object;_core$_duration<",
    $add: function(_, other) {
      var t1 = other.get$_core$_duration();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return P.Duration$(0, 0, this._core$_duration + t1, 0, 0, 0);
    },
    $sub: function(_, other) {
      var t1 = other.get$_core$_duration();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return P.Duration$(0, 0, this._core$_duration - t1, 0, 0, 0);
    },
    $mul: function(_, factor) {
      if (typeof factor !== "number")
        return H.iae(factor);
      return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._core$_duration * factor)), 0, 0, 0);
    },
    $tdiv: function(_, quotient) {
      if (quotient === 0)
        throw H.wrapException(P.IntegerDivisionByZeroException$());
      return P.Duration$(0, 0, C.JSNumber_methods.$tdiv(this._core$_duration, quotient), 0, 0, 0);
    },
    $lt: function(_, other) {
      var t1 = other.get$_core$_duration();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this._core$_duration < t1;
    },
    $gt: function(_, other) {
      var t1 = other.get$_core$_duration();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this._core$_duration > t1;
    },
    $le: function(_, other) {
      var t1 = other.get$_core$_duration();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this._core$_duration <= t1;
    },
    $ge: function(_, other) {
      var t1 = other.get$_core$_duration();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this._core$_duration >= t1;
    },
    get$inHours: function() {
      return C.JSNumber_methods._tdivFast$1(this._core$_duration, 3600000000);
    },
    get$inMinutes: function() {
      return C.JSNumber_methods._tdivFast$1(this._core$_duration, 60000000);
    },
    get$inSeconds: function() {
      return C.JSNumber_methods._tdivFast$1(this._core$_duration, 1000000);
    },
    get$inMilliseconds: function() {
      return C.JSNumber_methods._tdivFast$1(this._core$_duration, 1000);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDuration)
        return false;
      return this._core$_duration === other._core$_duration;
    },
    get$hashCode: function(_) {
      return this._core$_duration & 0x1FFFFFFF;
    },
    compareTo$1: function(_, other) {
      return C.JSNumber_methods.compareTo$1(this._core$_duration, other.get$_core$_duration());
    },
    toString$0: function(_) {
      var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
      t1 = new P.Duration_toString_twoDigits();
      t2 = this._core$_duration;
      if (t2 < 0)
        return "-" + P.Duration$(0, 0, -t2, 0, 0, 0).toString$0(0);
      twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 60000000), 60));
      twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 1000000), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
      return H.S(C.JSNumber_methods._tdivFast$1(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    abs$0: function(_) {
      return P.Duration$(0, 0, Math.abs(this._core$_duration), 0, 0, 0);
    },
    $negate: function(_) {
      return P.Duration$(0, 0, -this._core$_duration, 0, 0, 0);
    },
    $isDuration: true,
    static: {"^": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO", Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
        var t1, t2;
        t1 = J.$mul$ns(seconds, 1000000);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = J.$mul$ns(milliseconds, 1000);
        if (typeof t2 !== "number")
          return H.iae(t2);
        return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + t1 + t2 + microseconds);
      }}
  },
  Duration_toString_sixDigits: {
    "^": "Closure:105;",
    call$1: function(n) {
      if (n >= 100000)
        return H.S(n);
      if (n >= 10000)
        return "0" + H.S(n);
      if (n >= 1000)
        return "00" + H.S(n);
      if (n >= 100)
        return "000" + H.S(n);
      if (n >= 10)
        return "0000" + H.S(n);
      return "00000" + H.S(n);
    },
    $isFunction: true
  },
  Duration_toString_twoDigits: {
    "^": "Closure:105;",
    call$1: function(n) {
      if (n >= 10)
        return H.S(n);
      return "0" + H.S(n);
    },
    $isFunction: true
  },
  Error: {
    "^": "Object;",
    get$stackTrace: function() {
      return new H._StackTrace(this.$thrownJsError, null);
    },
    $isError: true
  },
  NullThrownError: {
    "^": "Error;",
    toString$0: function(_) {
      return "Throw of null.";
    }
  },
  ArgumentError: {
    "^": "Error;message>",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Illegal argument(s): " + H.S(t1);
      return "Illegal argument(s)";
    },
    static: {ArgumentError$: function(message) {
        return new P.ArgumentError(message);
      }}
  },
  RangeError: {
    "^": "ArgumentError;message",
    toString$0: function(_) {
      return "RangeError: " + H.S(this.message);
    },
    static: {RangeError$: function(message) {
        return new P.RangeError(message);
      }, RangeError$value: function(value) {
        return new P.RangeError("value " + H.S(value));
      }, RangeError$range: function(value, start, end) {
        return new P.RangeError("value " + H.S(value) + " not in range " + H.S(start) + ".." + H.S(end));
      }}
  },
  NoSuchMethodError: {
    "^": "Error;_core$_receiver,_memberName,_core$_arguments,_namedArguments,_existingArgumentNames",
    toString$0: function(_) {
      var t1, t2, t3, t4, t5, str;
      t1 = {};
      t1.sb_0 = P.StringBuffer$("");
      t1.i_1 = 0;
      t2 = this._core$_arguments;
      if (t2 != null) {
        t3 = J.getInterceptor$asx(t2);
        t4 = 0;
        while (true) {
          t5 = t3.get$length(t2);
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (!(t4 < t5))
            break;
          t4 = t1.i_1;
          if (t4 > 0) {
            t5 = t1.sb_0;
            t5._contents += ", ";
          }
          t5 = t1.sb_0;
          str = P.Error_safeToString(t3.$index(t2, t4));
          t5._contents += typeof str === "string" ? str : H.S(str);
          t4 = ++t1.i_1;
        }
      }
      t2 = this._namedArguments;
      if (t2 != null)
        J.forEach$1$ax(t2, new P.NoSuchMethodError_toString_closure(t1));
      return "NoSuchMethodError : method not found: '" + H.S(this._memberName) + "'\nReceiver: " + H.S(P.Error_safeToString(this._core$_receiver)) + "\nArguments: [" + t1.sb_0._contents + "]";
    },
    $isNoSuchMethodError: true,
    static: {NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
        return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
      }}
  },
  UnsupportedError: {
    "^": "Error;message>",
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    },
    static: {UnsupportedError$: function(message) {
        return new P.UnsupportedError(message);
      }}
  },
  UnimplementedError: {
    "^": "Error;message>",
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    },
    $isError: true,
    static: {UnimplementedError$: function(message) {
        return new P.UnimplementedError(message);
      }}
  },
  StateError: {
    "^": "Error;message>",
    toString$0: function(_) {
      return "Bad state: " + this.message;
    },
    static: {StateError$: function(message) {
        return new P.StateError(message);
      }}
  },
  ConcurrentModificationError: {
    "^": "Error;modifiedObject",
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
    },
    static: {ConcurrentModificationError$: function(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      }}
  },
  OutOfMemoryError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Out of Memory";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  StackOverflowError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  CyclicInitializationError: {
    "^": "Error;variableName",
    toString$0: function(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    },
    static: {CyclicInitializationError$: function(variableName) {
        return new P.CyclicInitializationError(variableName);
      }}
  },
  _ExceptionImplementation: {
    "^": "Object;message>",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 == null)
        return "Exception";
      return "Exception: " + H.S(t1);
    }
  },
  FormatException: {
    "^": "Object;message>,source,offset>",
    toString$0: function(_) {
      var t1, report, offset, source, lineNum, lineStart, lastWasCR, i, $char, t2, lineEnd, end, start, prefix, postfix, slice;
      t1 = this.message;
      report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException";
      offset = this.offset;
      source = this.source;
      if (typeof source !== "string")
        return offset != null ? report + (" (at offset " + H.S(offset) + ")") : report;
      if (offset != null) {
        t1 = J.getInterceptor$n(offset);
        t1 = t1.$lt(offset, 0) === true || t1.$gt(offset, J.get$length$asx(source)) === true;
      } else
        t1 = false;
      if (t1)
        offset = null;
      if (offset == null) {
        t1 = J.getInterceptor$asx(source);
        if (J.$gt$n(t1.get$length(source), 78) === true)
          source = J.$add$ns(t1.substring$2(source, 0, 75), "...");
        return report + "\n" + H.S(source);
      }
      if (typeof offset !== "number")
        return H.iae(offset);
      t1 = J.getInterceptor$asx(source);
      lineNum = 1;
      lineStart = 0;
      lastWasCR = null;
      i = 0;
      for (; i < offset; ++i) {
        $char = t1.codeUnitAt$1(source, i);
        t2 = J.getInterceptor($char);
        if (t2.$eq($char, 10)) {
          if (lineStart !== i || lastWasCR !== true)
            ++lineNum;
          lineStart = i + 1;
          lastWasCR = false;
        } else if (t2.$eq($char, 13)) {
          ++lineNum;
          lineStart = i + 1;
          lastWasCR = true;
        }
      }
      report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + H.S(offset - lineStart + 1) + ")\n") : report + (" (at character " + H.S(offset + 1) + ")\n");
      lineEnd = t1.get$length(source);
      i = offset;
      while (true) {
        t2 = t1.get$length(source);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        $char = t1.codeUnitAt$1(source, i);
        t2 = J.getInterceptor($char);
        if (t2.$eq($char, 10) || t2.$eq($char, 13)) {
          lineEnd = i;
          break;
        }
        ++i;
      }
      t2 = J.getInterceptor$n(lineEnd);
      if (J.$gt$n(t2.$sub(lineEnd, lineStart), 78) === true)
        if (offset - lineStart < 75) {
          end = lineStart + 75;
          start = lineStart;
          prefix = "";
          postfix = "...";
        } else {
          if (J.$lt$n(t2.$sub(lineEnd, offset), 75) === true) {
            start = t2.$sub(lineEnd, 75);
            end = lineEnd;
            postfix = "";
          } else {
            start = offset - 36;
            end = offset + 36;
            postfix = "...";
          }
          prefix = "...";
        }
      else {
        end = lineEnd;
        start = lineStart;
        prefix = "";
        postfix = "";
      }
      slice = t1.substring$2(source, start, end);
      if (typeof start !== "number")
        return H.iae(start);
      return report + prefix + H.S(slice) + postfix + "\n" + C.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
    },
    static: {FormatException$: function(message, source, offset) {
        return new P.FormatException(message, source, offset);
      }}
  },
  IntegerDivisionByZeroException: {
    "^": "Object;",
    toString$0: function(_) {
      return "IntegerDivisionByZeroException";
    },
    static: {IntegerDivisionByZeroException$: function() {
        return new P.IntegerDivisionByZeroException();
      }}
  },
  Expando: {
    "^": "Object;name>",
    toString$0: function(_) {
      return "Expando:" + H.S(this.name);
    },
    $index: function(_, object) {
      var values = H.Primitives_getProperty(object, "expando$values");
      return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
    },
    $indexSet: function(_, object, value) {
      var values = H.Primitives_getProperty(object, "expando$values");
      if (values == null) {
        values = new P.Object();
        H.Primitives_setProperty(object, "expando$values", values);
      }
      H.Primitives_setProperty(values, this._getKey$0(), value);
    },
    _getKey$0: function() {
      var key, t1;
      key = H.Primitives_getProperty(this, "expando$key");
      if (key == null) {
        t1 = $.Expando__keyCount;
        $.Expando__keyCount = t1 + 1;
        key = "expando$key$" + t1;
        H.Primitives_setProperty(this, "expando$key", key);
      }
      return key;
    },
    static: {"^": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount"}
  },
  Function: {
    "^": "Object;",
    $isFunction: true
  },
  $int: {
    "^": "num;",
    $is$int: true
  },
  "+int": 0,
  Invocation: {
    "^": "Object;"
  },
  Iterable: {
    "^": "Object;",
    $isIterable: true,
    $asIterable: null
  },
  Iterator: {
    "^": "Object;"
  },
  List: {
    "^": "Object;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  "+List": 0,
  Map: {
    "^": "Object;",
    $isMap: true
  },
  Null: {
    "^": "Object;",
    toString$0: function(_) {
      return "null";
    }
  },
  "+Null": 0,
  num: {
    "^": "Object;",
    $isnum: true
  },
  "+num": 0,
  Object: {
    "^": ";",
    $eq: [function(_, other) {
      return this === other;
    }, "call$1", "get$==", 2, 0, 126, 127, [], "=="],
    get$hashCode: [function(_) {
      return H.Primitives_objectHashCode(this);
    }, null, null, 1, 0, 128, "hashCode"],
    toString$0: [function(_) {
      return H.Primitives_objectToString(this);
    }, "call$0", "get$toString", 0, 0, 129, "toString"],
    noSuchMethod$1: [function(_, invocation) {
      throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    }, "call$1", "get$noSuchMethod", 2, 0, 130, 91, [], "noSuchMethod"],
    get$runtimeType: [function(_) {
      return new H.TypeImpl(H.getRuntimeTypeString(this), null);
    }, null, null, 1, 0, 131, "runtimeType"],
    $add: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("+", "$add", 0, [$0], []));
    },
    $and: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("&", "$and", 0, [$0], []));
    },
    $div: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("/", "$div", 0, [$0], []));
    },
    $ge: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror(">=", "$ge", 0, [$0], []));
    },
    $gt: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror(">", "$gt", 0, [$0], []));
    },
    $index: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("[]", "$index", 0, [$0], []));
    },
    $indexSet: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("[]=", "$indexSet", 0, [$0, $1], []));
    },
    $le: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("<=", "$le", 0, [$0], []));
    },
    $lt: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("<", "$lt", 0, [$0], []));
    },
    $mod: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("%", "$mod", 0, [$0], []));
    },
    $mul: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("*", "$mul", 0, [$0], []));
    },
    $negate: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("unary-", "$negate", 0, [], []));
    },
    $not: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("~", "$not", 0, [], []));
    },
    $or: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("|", "$or", 0, [$0], []));
    },
    $shl: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("<<", "$shl", 0, [$0], []));
    },
    $shr: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror(">>", "$shr", 0, [$0], []));
    },
    $sub: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("-", "$sub", 0, [$0], []));
    },
    $tdiv: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("~/", "$tdiv", 0, [$0], []));
    },
    $xor: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("^", "$xor", 0, [$0], []));
    },
    __isolate_helper$_add$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_add", "__isolate_helper$_add$1", 0, [$0], []));
    },
    _async$_add$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_add", "_async$_add$1", 0, [$0], []));
    },
    _core0$_invoke$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_invoke", "_core0$_invoke$1", 0, [$0], []));
    },
    "+_core0$_invoke:1:0": 2,
    _eval$_observe$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_observe", "_eval$_observe$2", 0, [$0, $1], []));
    },
    _handleTick$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_handleTick", "_handleTick$1", 0, [$0], []));
    },
    "+_handleTick:1:0": 2,
    _initCustomEvent$4: function($receiver, $0, $1, $2, $3) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_initCustomEvent", "_initCustomEvent$4", 0, [$0, $1, $2, $3], []));
    },
    _initSourceBinding$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_initSourceBinding", "_initSourceBinding$0", 0, [], []));
    },
    _initialiseIndexes$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_initialiseIndexes", "_initialiseIndexes$2", 0, [$0, $1], []));
    },
    "+_initialiseIndexes:2:0": 2,
    _invoke$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_invoke", "_invoke$2", 0, [$0, $1], []));
    },
    "+_invoke:2:0": 2,
    abs$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("abs", "abs$0", 0, [], []));
    },
    accept$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("accept", "accept$1", 0, [$0], []));
    },
    add$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("add", "add$1", 0, [$0], []));
    },
    addAll$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("addAll", "addAll$1", 0, [$0], []));
    },
    addEventAction$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("addEventAction", "addEventAction$2", 0, [$0, $1], []));
    },
    "+addEventAction:2:0": 2,
    addEventListener$3: function($receiver, $0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("addEventListener", "addEventListener$3", 0, [$0, $1, $2], []));
    },
    allMatches$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("allMatches", "allMatches$1", 0, [$0], []));
    },
    any$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("any", "any$1", 0, [$0], []));
    },
    append$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("append", "append$1", 0, [$0], []));
    },
    apply$2$thisArg: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("apply", "apply$2$thisArg", 0, [$0, $1], ["thisArg"]));
    },
    attached$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("attached", "attached$0", 0, [], []));
    },
    attributeChanged$3: function($receiver, $0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("attributeChanged", "attributeChanged$3", 0, [$0, $1, $2], []));
    },
    bind$3$oneTime: function($receiver, $0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("bind", "bind$3$oneTime", 0, [$0, $1, $2], ["oneTime"]));
    },
    bindBinaryCallback$2$runGuarded: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("bindBinaryCallback", "bindBinaryCallback$2$runGuarded", 0, [$0, $1], ["runGuarded"]));
    },
    bindCallback$2$runGuarded: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("bindCallback", "bindCallback$2$runGuarded", 0, [$0, $1], ["runGuarded"]));
    },
    bindFinished$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("bindFinished", "bindFinished$0", 0, [], []));
    },
    bindUnaryCallback$2$runGuarded: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("bindUnaryCallback", "bindUnaryCallback$2$runGuarded", 0, [$0, $1], ["runGuarded"]));
    },
    call$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$0", 0, [], []));
    },
    "+call:0:0": 2,
    call$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$1", 0, [$0], []));
    },
    "+call:1:0": 2,
    call$1$growable: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$1$growable", 0, [$0], ["growable"]));
    },
    "+call:1:0:growable": 2,
    call$1$skipChanges: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$1$skipChanges", 0, [$0], ["skipChanges"]));
    },
    "+call:1:0:skipChanges": 2,
    call$1$specification: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$1$specification", 0, [$0], ["specification"]));
    },
    "+call:1:0:specification": 2,
    call$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$2", 0, [$0, $1], []));
    },
    "+call:2:0": 2,
    call$2$onError: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$2$onError", 0, [$0, $1], ["onError"]));
    },
    "+call:2:0:onError": 2,
    call$2$runGuarded: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$2$runGuarded", 0, [$0, $1], ["runGuarded"]));
    },
    "+call:2:0:runGuarded": 2,
    call$2$thisArg: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$2$thisArg", 0, [$0, $1], ["thisArg"]));
    },
    "+call:2:0:thisArg": 2,
    call$3: function($0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$3", 0, [$0, $1, $2], []));
    },
    "+call:3:0": 2,
    call$3$async: function($0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$3$async", 0, [$0, $1, $2], ["async"]));
    },
    "+call:3:0:async": 2,
    call$3$attributeFilter$attributes: function($0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$3$attributeFilter$attributes", 0, [$0, $1, $2], ["attributeFilter", "attributes"]));
    },
    "+call:3:0:attributeFilter:attributes": 2,
    call$3$globals: function($0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$3$globals", 0, [$0, $1, $2], ["globals"]));
    },
    "+call:3:0:globals": 2,
    call$3$onDone$onError: function($0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$3$onDone$onError", 0, [$0, $1, $2], ["onDone", "onError"]));
    },
    "+call:3:0:onDone:onError": 2,
    call$3$oneTime: function($0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$3$oneTime", 0, [$0, $1, $2], ["oneTime"]));
    },
    "+call:3:0:oneTime": 2,
    call$3$treeSanitizer$validator: function($0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$3$treeSanitizer$validator", 0, [$0, $1, $2], ["treeSanitizer", "validator"]));
    },
    "+call:3:0:treeSanitizer:validator": 2,
    call$4: function($0, $1, $2, $3) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$4", 0, [$0, $1, $2, $3], []));
    },
    "+call:4:0": 2,
    call$4$cancelOnError$onDone$onError: function($0, $1, $2, $3) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$4$cancelOnError$onDone$onError", 0, [$0, $1, $2, $3], ["cancelOnError", "onDone", "onError"]));
    },
    "+call:4:0:cancelOnError:onDone:onError": 2,
    call$5: function($0, $1, $2, $3, $4) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$5", 0, [$0, $1, $2, $3, $4], []));
    },
    "+call:5:0": 2,
    call$6: function($0, $1, $2, $3, $4, $5) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$6", 0, [$0, $1, $2, $3, $4, $5], []));
    },
    "+call:6:0": 2,
    clear$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("clear", "clear$0", 0, [], []));
    },
    close$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("close", "close$0", 0, [], []));
    },
    codeUnitAt$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("codeUnitAt", "codeUnitAt$1", 0, [$0], []));
    },
    compareTo$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("compareTo", "compareTo$1", 0, [$0], []));
    },
    contains$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("contains", "contains$1", 0, [$0], []));
    },
    createDocumentFragment$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("createDocumentFragment", "createDocumentFragment$0", 0, [], []));
    },
    createElement$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("createElement", "createElement$1", 0, [$0], []));
    },
    createHtmlDocument$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("createHtmlDocument", "createHtmlDocument$1", 0, [$0], []));
    },
    createInstance$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("createInstance", "createInstance$2", 0, [$0, $1], []));
    },
    detached$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("detached", "detached$0", 0, [], []));
    },
    dispatchMethod$3: function($receiver, $0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("dispatchMethod", "dispatchMethod$3", 0, [$0, $1, $2], []));
    },
    elementAt$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("elementAt", "elementAt$1", 0, [$0], []));
    },
    emitEvent$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("emitEvent", "emitEvent$1", 0, [$0], []));
    },
    "+emitEvent:1:0": 2,
    endsWith$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("endsWith", "endsWith$1", 0, [$0], []));
    },
    firstWhere$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("firstWhere", "firstWhere$1", 0, [$0], []));
    },
    fold$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("fold", "fold$2", 0, [$0, $1], []));
    },
    forEach$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("forEach", "forEach$1", 0, [$0], []));
    },
    fork$1$specification: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("fork", "fork$1$specification", 0, [$0], ["specification"]));
    },
    get$__js_helper$_name: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_name", "get$__js_helper$_name", 1, [], []));
    },
    get$_actionQueues: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_actionQueues", "get$_actionQueues", 1, [], []));
    },
    "+_actionQueues": 2,
    get$_children: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_children", "get$_children", 1, [], []));
    },
    get$_core$_duration: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_duration", "get$_core$_duration", 1, [], []));
    },
    "+_core$_duration": 2,
    get$_core0$_this: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_this", "get$_core0$_this", 1, [], []));
    },
    "+_core0$_this": 2,
    get$_du: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_du", "get$_du", 1, [], []));
    },
    "+_du": 2,
    get$_element: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_element", "get$_element", 1, [], []));
    },
    get$_emitterIndexes: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_emitterIndexes", "get$_emitterIndexes", 1, [], []));
    },
    "+_emitterIndexes": 2,
    get$_emittingType: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_emittingType", "get$_emittingType", 1, [], []));
    },
    "+_emittingType": 2,
    get$_isRunning: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_isRunning", "get$_isRunning", 1, [], []));
    },
    "+_isRunning": 2,
    get$_jsElem: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_jsElem", "get$_jsElem", 1, [], []));
    },
    get$_name: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_name", "get$_name", 1, [], []));
    },
    get$_observable$_changes: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_changes", "get$_observable$_changes", 1, [], []));
    },
    get$_observable$_observed: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_observed", "get$_observable$_observed", 1, [], []));
    },
    get$_observe: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_observe", "get$_observe", 1, [], []));
    },
    get$_purityId: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_purityId", "get$_purityId", 1, [], []));
    },
    "+_purityId": 2,
    get$_records: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_records", "get$_records", 1, [], []));
    },
    get$_self: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_self", "get$_self", 1, [], []));
    },
    get$_timer: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_timer", "get$_timer", 1, [], []));
    },
    "+_timer": 2,
    get$_typeIndexes: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_typeIndexes", "get$_typeIndexes", 1, [], []));
    },
    "+_typeIndexes": 2,
    get$_unobserved: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_unobserved", "get$_unobserved", 1, [], []));
    },
    get$_values: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_values", "get$_values", 1, [], []));
    },
    get$attributes: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("attributes", "get$attributes", 1, [], []));
    },
    get$baseUri: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("baseUri", "get$baseUri", 1, [], []));
    },
    get$bindingDelegate: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("bindingDelegate", "get$bindingDelegate", 1, [], []));
    },
    get$bindings: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("bindings", "get$bindings", 1, [], []));
    },
    get$blurAction: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("blurAction", "get$blurAction", 1, [], []));
    },
    "+blurAction": 2,
    get$className: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("className", "get$className", 1, [], []));
    },
    get$classes: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("classes", "get$classes", 1, [], []));
    },
    get$codeUnits: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("codeUnits", "get$codeUnits", 1, [], []));
    },
    get$content: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("content", "get$content", 1, [], []));
    },
    get$contextMenuAction: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("contextMenuAction", "get$contextMenuAction", 1, [], []));
    },
    "+contextMenuAction": 2,
    get$counter: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("counter", "get$counter", 1, [], []));
    },
    "+counter": 2,
    get$currentTarget: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("currentTarget", "get$currentTarget", 1, [], []));
    },
    get$data: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("data", "get$data", 1, [], []));
    },
    "+data": 2,
    get$defaultValue: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("defaultValue", "get$defaultValue", 1, [], []));
    },
    get$downAction: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("downAction", "get$downAction", 1, [], []));
    },
    "+downAction": 2,
    get$duration: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("duration", "get$duration", 1, [], []));
    },
    "+duration": 2,
    get$element: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("element", "get$element", 1, [], []));
    },
    get$emittingType: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("emittingType", "get$emittingType", 1, [], []));
    },
    "+emittingType": 2,
    get$endPointName: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("endPointName", "get$endPointName", 1, [], []));
    },
    "+endPointName": 2,
    get$entries: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("entries", "get$entries", 1, [], []));
    },
    get$error: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("error", "get$error", 1, [], []));
    },
    get$first: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("first", "get$first", 1, [], []));
    },
    get$firstChild: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("firstChild", "get$firstChild", 1, [], []));
    },
    get$focusAction: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("focusAction", "get$focusAction", 1, [], []));
    },
    "+focusAction": 2,
    get$head: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("head", "get$head", 1, [], []));
    },
    get$hostname: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("hostname", "get$hostname", 1, [], []));
    },
    get$href: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("href", "get$href", 1, [], []));
    },
    get$icon: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("icon", "get$icon", 1, [], []));
    },
    "+icon": 2,
    get$iconSrc: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("iconSrc", "get$iconSrc", 1, [], []));
    },
    "+iconSrc": 2,
    get$id: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("id", "get$id", 1, [], []));
    },
    get$implementation: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("implementation", "get$implementation", 1, [], []));
    },
    get$index: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("index", "get$index", 1, [], []));
    },
    get$isEmitting: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("isEmitting", "get$isEmitting", 1, [], []));
    },
    "+isEmitting": 2,
    get$isEmpty: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("isEmpty", "get$isEmpty", 1, [], []));
    },
    "+isEmpty": 2,
    get$isNotEmpty: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("isNotEmpty", "get$isNotEmpty", 1, [], []));
    },
    "+isNotEmpty": 2,
    get$isProxyToSource: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("isProxyToSource", "get$isProxyToSource", 1, [], []));
    },
    "+isProxyToSource": 2,
    get$iterator: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("iterator", "get$iterator", 1, [], []));
    },
    get$key: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("key", "get$key", 1, [], []));
    },
    get$keys: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("keys", "get$keys", 1, [], []));
    },
    "+keys": 2,
    get$kind: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("kind", "get$kind", 1, [], []));
    },
    get$label: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("label", "get$label", 1, [], []));
    },
    "+label": 2,
    get$last: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("last", "get$last", 1, [], []));
    },
    get$lastChild: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("lastChild", "get$lastChild", 1, [], []));
    },
    get$left: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("left", "get$left", 1, [], []));
    },
    get$length: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("length", "get$length", 1, [], []));
    },
    "+length": 2,
    get$localName: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("localName", "get$localName", 1, [], []));
    },
    get$message: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("message", "get$message", 1, [], []));
    },
    "+message": 2,
    get$method: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("method", "get$method", 1, [], []));
    },
    "+method": 2,
    get$model: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("model", "get$model", 1, [], []));
    },
    get$namArgs: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("namArgs", "get$namArgs", 1, [], []));
    },
    "+namArgs": 2,
    get$name: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("name", "get$name", 1, [], []));
    },
    get$namespaceUri: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("namespaceUri", "get$namespaceUri", 1, [], []));
    },
    get$nextElementSibling: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("nextElementSibling", "get$nextElementSibling", 1, [], []));
    },
    get$nextNode: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("nextNode", "get$nextNode", 1, [], []));
    },
    get$nodes: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("nodes", "get$nodes", 1, [], []));
    },
    get$offset: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("offset", "get$offset", 1, [], []));
    },
    get$onClick: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("onClick", "get$onClick", 1, [], []));
    },
    get$operator: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("operator", "get$operator", 1, [], []));
    },
    get$ownerDocument: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("ownerDocument", "get$ownerDocument", 1, [], []));
    },
    get$parent: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("parent", "get$parent", 1, [], []));
    },
    get$parentNode: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("parentNode", "get$parentNode", 1, [], []));
    },
    get$pattern: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("pattern", "get$pattern", 1, [], []));
    },
    get$port: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("port", "get$port", 1, [], []));
    },
    get$posArgs: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("posArgs", "get$posArgs", 1, [], []));
    },
    "+posArgs": 2,
    get$protocol: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("protocol", "get$protocol", 1, [], []));
    },
    get$proxies: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("proxies", "get$proxies", 1, [], []));
    },
    "+proxies": 2,
    get$proxy: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("proxy", "get$proxy", 1, [], []));
    },
    "+proxy": 2,
    get$raisedButton: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("raisedButton", "get$raisedButton", 1, [], []));
    },
    "+raisedButton": 2,
    get$reset: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("reset", "get$reset", 1, [], []));
    },
    "+reset": 2,
    get$responseText: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("responseText", "get$responseText", 1, [], []));
    },
    get$right: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("right", "get$right", 1, [], []));
    },
    get$span: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("span", "get$span", 1, [], []));
    },
    get$src: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("src", "get$src", 1, [], []));
    },
    "+src": 2,
    get$start: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("start", "get$start", 1, [], []));
    },
    "+start": 2,
    get$stop: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("stop", "get$stop", 1, [], []));
    },
    "+stop": 2,
    get$syntax: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("syntax", "get$syntax", 1, [], []));
    },
    get$tagName: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("tagName", "get$tagName", 1, [], []));
    },
    get$target: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("target", "get$target", 1, [], []));
    },
    get$templateInstance: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("templateInstance", "get$templateInstance", 1, [], []));
    },
    get$text: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("text", "get$text", 1, [], []));
    },
    get$topLeft: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("topLeft", "get$topLeft", 1, [], []));
    },
    get$type: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("type", "get$type", 1, [], []));
    },
    get$upAction: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("upAction", "get$upAction", 1, [], []));
    },
    "+upAction": 2,
    get$value: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("value", "get$value", 1, [], []));
    },
    "+value": 2,
    get$values: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("values", "get$values", 1, [], []));
    },
    "+values": 2,
    get$window: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("window", "get$window", 1, [], []));
    },
    get$x: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("x", "get$x", 1, [], []));
    },
    get$y: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("y", "get$y", 1, [], []));
    },
    get$z: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("z", "get$z", 1, [], []));
    },
    "+z": 2,
    getBoundingClientRect$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("getBoundingClientRect", "getBoundingClientRect$0", 0, [], []));
    },
    getChild$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("getChild", "getChild$1", 0, [$0], []));
    },
    getElementById$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("getElementById", "getElementById$1", 0, [$0], []));
    },
    getEventHandler$3: function($0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("getEventHandler", "getEventHandler$3", 0, [$0, $1, $2], []));
    },
    getOneTime$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("getOneTime", "getOneTime$1", 0, [$0], []));
    },
    getPath$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("getPath", "getPath$1", 0, [$0], []));
    },
    getPrepareBinding$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("getPrepareBinding", "getPrepareBinding$1", 0, [$0], []));
    },
    getValueFrom$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("getValueFrom", "getValueFrom$1", 0, [$0], []));
    },
    group$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("group", "group$1", 0, [$0], []));
    },
    ignoreAllEvents$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("ignoreAllEvents", "ignoreAllEvents$0", 0, [], []));
    },
    "+ignoreAllEvents:0:0": 2,
    ignoreAllEventsFrom$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("ignoreAllEventsFrom", "ignoreAllEventsFrom$1", 0, [$0], []));
    },
    "+ignoreAllEventsFrom:1:0": 2,
    ignoreAllEventsOfType$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("ignoreAllEventsOfType", "ignoreAllEventsOfType$1", 0, [$0], []));
    },
    "+ignoreAllEventsOfType:1:0": 2,
    ignoreSpecificEventBinding$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("ignoreSpecificEventBinding", "ignoreSpecificEventBinding$2", 0, [$0, $1], []));
    },
    "+ignoreSpecificEventBinding:2:0": 2,
    importNode$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("importNode", "importNode$2", 0, [$0, $1], []));
    },
    indexOf$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("indexOf", "indexOf$1", 0, [$0], []));
    },
    indexOf$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("indexOf", "indexOf$2", 0, [$0, $1], []));
    },
    insertBefore$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("insertBefore", "insertBefore$2", 0, [$0, $1], []));
    },
    join$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("join", "join$1", 0, [$0], []));
    },
    lastIndexOf$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("lastIndexOf", "lastIndexOf$1", 0, [$0], []));
    },
    listen$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("listen", "listen$1", 0, [$0], []));
    },
    "+listen:1:0": 2,
    listen$3: function($receiver, $0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("listen", "listen$3", 0, [$0, $1, $2], []));
    },
    "+listen:3:0": 2,
    listen$3$onDone$onError: function($receiver, $0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("listen", "listen$3$onDone$onError", 0, [$0, $1, $2], ["onDone", "onError"]));
    },
    "+listen:3:0:onDone:onError": 2,
    map$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("map", "map$1", 0, [$0], []));
    },
    matches$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("matches", "matches$1", 0, [$0], []));
    },
    matchesWithAncestors$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("matchesWithAncestors", "matchesWithAncestors$1", 0, [$0], []));
    },
    onError$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("onError", "onError$1", 0, [$0], []));
    },
    open$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("open", "open$1", 0, [$0], []));
    },
    print$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("print", "print$1", 0, [$0], []));
    },
    querySelector$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("querySelector", "querySelector$1", 0, [$0], []));
    },
    querySelectorAll$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("querySelectorAll", "querySelectorAll$1", 0, [$0], []));
    },
    registerCallback$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("registerCallback", "registerCallback$1", 0, [$0], []));
    },
    "+registerCallback:1:0": 2,
    remove$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("remove", "remove$0", 0, [], []));
    },
    remove$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("remove", "remove$1", 0, [$0], []));
    },
    removeEventAction$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("removeEventAction", "removeEventAction$2", 0, [$0, $1], []));
    },
    "+removeEventAction:2:0": 2,
    removeEventListener$3: function($receiver, $0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("removeEventListener", "removeEventListener$3", 0, [$0, $1, $2], []));
    },
    replaceAll$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("replaceAll", "replaceAll$2", 0, [$0, $1], []));
    },
    replaceAllMapped$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("replaceAllMapped", "replaceAllMapped$2", 0, [$0, $1], []));
    },
    replaceFirst$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("replaceFirst", "replaceFirst$2", 0, [$0, $1], []));
    },
    reset$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("reset", "reset$0", 0, [], []));
    },
    "+reset:0:0": 2,
    round$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("round", "round$0", 0, [], []));
    },
    schedule$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("schedule", "schedule$1", 0, [$0], []));
    },
    scheduleMicrotask$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("scheduleMicrotask", "scheduleMicrotask$1", 0, [$0], []));
    },
    scheduleMicrotask$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("scheduleMicrotask", "scheduleMicrotask$2", 0, [$0, $1], []));
    },
    send$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("send", "send$1", 0, [$0], []));
    },
    set$_actionQueues: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_actionQueues=", "set$_actionQueues", 2, [$0], []));
    },
    "+_actionQueues=": 2,
    set$_core0$_this: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_this=", "set$_core0$_this", 2, [$0], []));
    },
    "+_core0$_this=": 2,
    set$_dartDetail: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_dartDetail=", "set$_dartDetail", 2, [$0], []));
    },
    set$_du: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_du=", "set$_du", 2, [$0], []));
    },
    "+_du=": 2,
    set$_duration: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_duration=", "set$_duration", 2, [$0], []));
    },
    "+_duration=": 2,
    set$_emitterIndexes: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_emitterIndexes=", "set$_emitterIndexes", 2, [$0], []));
    },
    "+_emitterIndexes=": 2,
    set$_emittingType: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_emittingType=", "set$_emittingType", 2, [$0], []));
    },
    "+_emittingType=": 2,
    set$_observable$_changes: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_changes=", "set$_observable$_changes", 2, [$0], []));
    },
    set$_purityId: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_purityId=", "set$_purityId", 2, [$0], []));
    },
    "+_purityId=": 2,
    set$_records: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_records=", "set$_records", 2, [$0], []));
    },
    set$_selector: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_selector=", "set$_selector", 2, [$0], []));
    },
    set$_timer: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_timer=", "set$_timer", 2, [$0], []));
    },
    "+_timer=": 2,
    set$_typeIndexes: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_typeIndexes=", "set$_typeIndexes", 2, [$0], []));
    },
    "+_typeIndexes=": 2,
    set$_values: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_values=", "set$_values", 2, [$0], []));
    },
    set$bindingDelegate: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("bindingDelegate=", "set$bindingDelegate", 2, [$0], []));
    },
    set$bindings: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("bindings=", "set$bindings", 2, [$0], []));
    },
    set$className: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("className=", "set$className", 2, [$0], []));
    },
    set$consumer: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("consumer=", "set$consumer", 2, [$0], []));
    },
    set$counter: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("counter=", "set$counter", 2, [$0], []));
    },
    "+counter=": 2,
    set$data: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("data=", "set$data", 2, [$0], []));
    },
    "+data=": 2,
    set$duration: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("duration=", "set$duration", 2, [$0], []));
    },
    "+duration=": 2,
    set$endPointName: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("endPointName=", "set$endPointName", 2, [$0], []));
    },
    "+endPointName=": 2,
    set$href: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("href=", "set$href", 2, [$0], []));
    },
    set$icon: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("icon=", "set$icon", 2, [$0], []));
    },
    "+icon=": 2,
    set$iconSrc: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("iconSrc=", "set$iconSrc", 2, [$0], []));
    },
    "+iconSrc=": 2,
    set$isProxyToSource: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("isProxyToSource=", "set$isProxyToSource", 2, [$0], []));
    },
    "+isProxyToSource=": 2,
    set$length: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("length=", "set$length", 2, [$0], []));
    },
    "+length=": 2,
    set$message: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("message=", "set$message", 2, [$0], []));
    },
    "+message=": 2,
    set$method: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("method=", "set$method", 2, [$0], []));
    },
    "+method=": 2,
    set$namArgs: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("namArgs=", "set$namArgs", 2, [$0], []));
    },
    "+namArgs=": 2,
    set$posArgs: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("posArgs=", "set$posArgs", 2, [$0], []));
    },
    "+posArgs=": 2,
    set$proxies: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("proxies=", "set$proxies", 2, [$0], []));
    },
    "+proxies=": 2,
    set$proxy: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("proxy=", "set$proxy", 2, [$0], []));
    },
    "+proxy=": 2,
    set$src: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("src=", "set$src", 2, [$0], []));
    },
    "+src=": 2,
    set$text: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("text=", "set$text", 2, [$0], []));
    },
    set$value: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("value=", "set$value", 2, [$0], []));
    },
    "+value=": 2,
    set$z: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("z=", "set$z", 2, [$0], []));
    },
    "+z=": 2,
    setValueFrom$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("setValueFrom", "setValueFrom$2", 0, [$0, $1], []));
    },
    skip$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("skip", "skip$1", 0, [$0], []));
    },
    split$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("split", "split$1", 0, [$0], []));
    },
    start$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("start", "start$0", 0, [], []));
    },
    "+start:0:0": 2,
    startsWith$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("startsWith", "startsWith$1", 0, [$0], []));
    },
    stop$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("stop", "stop$0", 0, [], []));
    },
    "+stop:0:0": 2,
    sublist$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("sublist", "sublist$2", 0, [$0, $1], []));
    },
    substring$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("substring", "substring$1", 0, [$0], []));
    },
    substring$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("substring", "substring$2", 0, [$0, $1], []));
    },
    then$2$onError: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("then", "then$2$onError", 0, [$0, $1], ["onError"]));
    },
    toList$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("toList", "toList$0", 0, [], []));
    },
    toList$1$growable: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("toList", "toList$1$growable", 0, [$0], ["growable"]));
    },
    toLowerCase$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("toLowerCase", "toLowerCase$0", 0, [], []));
    },
    toRadixString$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("toRadixString", "toRadixString$1", 0, [$0], []));
    },
    toUpperCase$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("toUpperCase", "toUpperCase$0", 0, [], []));
    },
    trim$0: function($receiver) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("trim", "trim$0", 0, [], []));
    },
    where$1: function($receiver, $0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("where", "where$1", 0, [$0], []));
    },
    $isObject: true
  },
  Match: {
    "^": "Object;",
    $isMatch: true
  },
  RegExp: {
    "^": "Object;",
    $isRegExp: true,
    $isPattern: true
  },
  StackTrace: {
    "^": "Object;"
  },
  String: {
    "^": "Object;",
    $isString: true,
    $isPattern: true
  },
  "+String": 0,
  RuneIterator: {
    "^": "Object;string,_core$_position,_nextPosition,_currentCodePoint",
    reset$1: [function(_, rawIndex) {
      var t1, t2, t3;
      t1 = J.getInterceptor$n(rawIndex);
      if (t1.$lt(rawIndex, 0) === true || t1.$gt(rawIndex, J.get$length$asx(this.string)) === true)
        throw H.wrapException(P.RangeError$range(rawIndex, 0, J.get$length$asx(this.string)));
      if (t1.$gt(rawIndex, 0) === true) {
        t2 = this.string;
        t3 = J.getInterceptor$asx(t2);
        t1 = t1.$lt(rawIndex, t3.get$length(t2)) === true && J.$and$n(t3.codeUnitAt$1(t2, t1.$sub(rawIndex, 1)), 64512) === 55296 && J.$and$n(t3.codeUnitAt$1(t2, rawIndex), 64512) === 56320;
      } else
        t1 = false;
      if (t1)
        H.throwExpression(P.ArgumentError$("Index inside surrogate pair: " + H.S(rawIndex)));
      this._nextPosition = rawIndex;
      this._core$_position = rawIndex;
      this._currentCodePoint = null;
    }, function($receiver) {
      return this.reset$1($receiver, 0);
    }, "reset$0", "call$1", "call$0", "get$reset", 0, 2, 132, 133, 134, []],
    get$current: function() {
      return this._currentCodePoint;
    },
    moveNext$0: function() {
      var t1, t2, t3, codeUnit, nextPosition, nextCodeUnit;
      t1 = this._nextPosition;
      this._core$_position = t1;
      t2 = this.string;
      t3 = J.getInterceptor$asx(t2);
      if (J.$eq(t1, t3.get$length(t2))) {
        this._currentCodePoint = null;
        return false;
      }
      codeUnit = t3.codeUnitAt$1(t2, this._core$_position);
      nextPosition = J.$add$ns(this._core$_position, 1);
      t1 = J.getInterceptor$n(codeUnit);
      if (t1.$and(codeUnit, 64512) === 55296 && J.$lt$n(nextPosition, t3.get$length(t2)) === true) {
        nextCodeUnit = t3.codeUnitAt$1(t2, nextPosition);
        t2 = J.getInterceptor$n(nextCodeUnit);
        if (t2.$and(nextCodeUnit, 64512) === 56320) {
          this._nextPosition = J.$add$ns(nextPosition, 1);
          this._currentCodePoint = 65536 + (t1.$and(codeUnit, 1023) << 10 >>> 0) + t2.$and(nextCodeUnit, 1023);
          return true;
        }
      }
      this._nextPosition = nextPosition;
      this._currentCodePoint = codeUnit;
      return true;
    }
  },
  StringBuffer: {
    "^": "Object;_contents<",
    get$length: function(_) {
      return this._contents.length;
    },
    get$isEmpty: function(_) {
      return this._contents.length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._contents.length !== 0;
    },
    write$1: function(obj) {
      this._contents += typeof obj === "string" ? obj : H.S(obj);
    },
    writeAll$2: function(objects, separator) {
      var iterator, str;
      iterator = J.get$iterator$ax(objects);
      if (iterator.moveNext$0() !== true)
        return;
      if (separator.length === 0) {
        do {
          str = iterator.get$current();
          this._contents += typeof str === "string" ? str : H.S(str);
        } while (iterator.moveNext$0() === true);
      } else {
        this.write$1(iterator.get$current());
        for (; iterator.moveNext$0() === true;) {
          this._contents += separator;
          str = iterator.get$current();
          this._contents += typeof str === "string" ? str : H.S(str);
        }
      }
    },
    clear$0: function(_) {
      this._contents = "";
    },
    toString$0: function(_) {
      return this._contents;
    },
    StringBuffer$1: function($content) {
      if (typeof $content === "string")
        this._contents = $content;
      else
        this.write$1($content);
    },
    static: {StringBuffer$: function($content) {
        var t1 = new P.StringBuffer("");
        t1.StringBuffer$1($content);
        return t1;
      }}
  },
  Symbol0: {
    "^": "Object;",
    $isSymbol0: true
  },
  Type: {
    "^": "Object;",
    $isType: true
  },
  Uri: {
    "^": "Object;_host,_port,_path,scheme,_userInfo,_query,_fragment,_pathSegments,_queryParameters",
    get$host: function(_) {
      var t1, t2;
      t1 = this._host;
      if (t1 == null)
        return "";
      t2 = J.getInterceptor$s(t1);
      if (t2.startsWith$1(t1, "[") === true)
        return t2.substring$2(t1, 1, J.$sub$n(t2.get$length(t1), 1));
      return t1;
    },
    get$port: function(_) {
      var t1 = this._port;
      if (t1 == null)
        return P.Uri__defaultPort(this.scheme);
      return t1;
    },
    get$pathSegments: function() {
      var t1, pathToSplit;
      t1 = this._pathSegments;
      if (t1 == null) {
        pathToSplit = this._path;
        t1 = J.getInterceptor$asx(pathToSplit);
        if (t1.get$isEmpty(pathToSplit) !== true && J.$eq(t1.codeUnitAt$1(pathToSplit, 0), 47))
          pathToSplit = t1.substring$1(pathToSplit, 1);
        t1 = J.getInterceptor(pathToSplit);
        t1 = t1.$eq(pathToSplit, "") ? C.List_empty2 : J.toList$1$growable$ax(J.map$1$ax(t1.split$1(pathToSplit, "/"), P.Uri_decodeComponent$closure()), false);
        t1 = new P.UnmodifiableListView(t1);
        t1.$builtinTypeInfo = [null];
        this._pathSegments = t1;
      }
      return t1;
    },
    _merge$2: function(base, reference) {
      var t1 = J.getInterceptor(base);
      if (t1.$eq(base, ""))
        return "/" + H.S(reference);
      return H.S(t1.substring$2(base, 0, J.$add$ns(t1.lastIndexOf$1(base, "/"), 1))) + H.S(reference);
    },
    _hasDotSegments$1: function(path) {
      var t1 = J.getInterceptor$asx(path);
      if (J.$gt$n(t1.get$length(path), 0) === true && J.$eq(t1.codeUnitAt$1(path, 0), 58))
        return true;
      return !J.$eq(t1.indexOf$1(path, "/."), -1);
    },
    _removeDotSegments$1: function(path) {
      var output, t1, appendSlash, segment, t2;
      if (!this._hasDotSegments$1(path))
        return path;
      output = [];
      for (t1 = J.get$iterator$ax(J.split$1$s(path, "/")), appendSlash = false; t1.moveNext$0() === true;) {
        segment = t1.get$current();
        if (J.$eq(segment, "..")) {
          t2 = output.length;
          if (t2 !== 0)
            if (t2 === 1) {
              if (0 >= t2)
                return H.ioore(output, 0);
              t2 = !J.$eq(output[0], "");
            } else
              t2 = true;
          else
            t2 = false;
          if (t2) {
            if (0 >= output.length)
              return H.ioore(output, 0);
            output.pop();
          }
          appendSlash = true;
        } else if ("." === segment)
          appendSlash = true;
        else {
          output.push(segment);
          appendSlash = false;
        }
      }
      if (appendSlash)
        output.push("");
      return C.JSArray_methods.join$1(output, "/");
    },
    resolveUri$1: function(reference) {
      var targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, t1, t2, fragment;
      targetScheme = reference.scheme;
      if (J.get$isNotEmpty$asx(targetScheme) === true) {
        if (reference._host != null) {
          targetUserInfo = reference._userInfo;
          targetHost = reference.get$host(reference);
          targetPort = reference._port != null ? reference.get$port(reference) : null;
        } else {
          targetUserInfo = "";
          targetHost = null;
          targetPort = null;
        }
        targetPath = this._removeDotSegments$1(reference._path);
        targetQuery = reference._query;
        if (targetQuery != null)
          ;
        else
          targetQuery = null;
      } else {
        targetScheme = this.scheme;
        if (reference._host != null) {
          targetUserInfo = reference._userInfo;
          targetHost = reference.get$host(reference);
          targetPort = P.Uri__makePort(reference._port != null ? reference.get$port(reference) : null, targetScheme);
          targetPath = this._removeDotSegments$1(reference._path);
          targetQuery = reference._query;
          if (targetQuery != null)
            ;
          else
            targetQuery = null;
        } else {
          t1 = reference._path;
          t2 = J.getInterceptor(t1);
          if (t2.$eq(t1, "")) {
            targetPath = this._path;
            targetQuery = reference._query;
            if (targetQuery != null)
              ;
            else
              targetQuery = this._query;
          } else {
            targetPath = t2.startsWith$1(t1, "/") === true ? this._removeDotSegments$1(t1) : this._removeDotSegments$1(this._merge$2(this._path, t1));
            targetQuery = reference._query;
            if (targetQuery != null)
              ;
            else
              targetQuery = null;
          }
          targetUserInfo = this._userInfo;
          targetHost = this._host;
          targetPort = this._port;
        }
      }
      fragment = reference._fragment;
      if (fragment != null)
        ;
      else
        fragment = null;
      return new P.Uri(targetHost, targetPort, targetPath, targetScheme, targetUserInfo, targetQuery, fragment, null, null);
    },
    toFilePath$1$windows: function(windows) {
      var t1, t2, result;
      t1 = this.scheme;
      t2 = J.getInterceptor(t1);
      if (!t2.$eq(t1, "") && !t2.$eq(t1, "file"))
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a " + H.S(t1) + " URI"));
      t1 = this._query;
      if (!J.$eq(t1 == null ? "" : t1, ""))
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a query component"));
      t1 = this._fragment;
      if (!J.$eq(t1 == null ? "" : t1, ""))
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a fragment component"));
      if (!J.$eq(this.get$host(this), ""))
        H.throwExpression(P.UnsupportedError$("Cannot extract a non-Windows file path from a file URI with an authority"));
      P.Uri__checkNonWindowsPathReservedCharacters(this.get$pathSegments(), false);
      result = P.StringBuffer$("");
      if (this.get$_isPathAbsolute() === true)
        result.write$1("/");
      result.writeAll$2(this.get$pathSegments(), "/");
      t1 = result._contents;
      return t1;
    },
    toFilePath$0: function() {
      return this.toFilePath$1$windows(null);
    },
    get$_isPathAbsolute: function() {
      var t1 = this._path;
      if (t1 == null || J.get$isEmpty$asx(t1) === true)
        return false;
      return J.startsWith$1$s(t1, "/");
    },
    toString$0: function(_) {
      var sb, t1, t2, t3;
      sb = P.StringBuffer$("");
      t1 = this.scheme;
      if ("" !== t1) {
        sb.write$1(t1);
        sb.write$1(":");
      }
      t2 = this._host;
      t3 = t2 == null;
      if (!t3 || J.startsWith$1$s(this._path, "//") === true || J.$eq(t1, "file")) {
        sb.write$1("//");
        t1 = this._userInfo;
        if (J.get$isNotEmpty$asx(t1) === true) {
          sb.write$1(t1);
          sb.write$1("@");
        }
        if (!t3)
          sb.write$1(t2);
        t1 = this._port;
        if (t1 != null) {
          sb.write$1(":");
          sb.write$1(t1);
        }
      }
      sb.write$1(this._path);
      t1 = this._query;
      if (t1 != null) {
        sb.write$1("?");
        sb.write$1(t1);
      }
      t1 = this._fragment;
      if (t1 != null) {
        sb.write$1("#");
        sb.write$1(t1);
      }
      return sb._contents;
    },
    $eq: function(_, other) {
      var t1, t2, t3, t4;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isUri)
        return false;
      if (J.$eq(this.scheme, other.scheme))
        if (this._host != null === (other._host != null))
          if (J.$eq(this._userInfo, other._userInfo))
            if (J.$eq(this.get$host(this), t1.get$host(other))) {
              t2 = this.get$port(this);
              t1 = t1.get$port(other);
              if (t2 == null ? t1 == null : t2 === t1)
                if (J.$eq(this._path, other._path)) {
                  t1 = this._query;
                  t2 = t1 == null;
                  t3 = other._query;
                  t4 = t3 == null;
                  if (!t2 === !t4) {
                    if (t2)
                      t1 = "";
                    if (J.$eq(t1, t4 ? "" : t3)) {
                      t1 = this._fragment;
                      t2 = t1 == null;
                      t3 = other._fragment;
                      t4 = t3 == null;
                      if (!t2 === !t4) {
                        if (t2)
                          t1 = "";
                        t1 = J.$eq(t1, t4 ? "" : t3);
                      } else
                        t1 = false;
                    } else
                      t1 = false;
                  } else
                    t1 = false;
                } else
                  t1 = false;
              else
                t1 = false;
            } else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1, t2, t3, t4, t5;
      t1 = new P.Uri_hashCode_combine();
      t2 = this.get$host(this);
      t3 = this.get$port(this);
      t4 = this._query;
      if (t4 == null)
        t4 = "";
      t5 = this._fragment;
      return t1.call$2(this.scheme, t1.call$2(this._userInfo, t1.call$2(t2, t1.call$2(t3, t1.call$2(this._path, t1.call$2(t4, t1.call$2(t5 == null ? "" : t5, 1)))))));
    },
    $isUri: true,
    static: {"^": "Uri__SPACE,Uri__DOUBLE_QUOTE,Uri__NUMBER_SIGN,Uri__PERCENT,Uri__ASTERISK,Uri__PLUS,Uri__SLASH,Uri__ZERO,Uri__NINE,Uri__COLON,Uri__LESS,Uri__GREATER,Uri__QUESTION,Uri__AT_SIGN,Uri__UPPER_CASE_A,Uri__UPPER_CASE_F,Uri__UPPER_CASE_Z,Uri__LEFT_BRACKET,Uri__BACKSLASH,Uri__RIGHT_BRACKET,Uri__LOWER_CASE_A,Uri__LOWER_CASE_F,Uri__LOWER_CASE_Z,Uri__BAR,Uri__unreservedTable,Uri__unreserved2396Table,Uri__encodeFullTable,Uri__schemeTable,Uri__schemeLowerTable,Uri__subDelimitersTable,Uri__genDelimitersTable,Uri__userinfoTable,Uri__regNameTable,Uri__pathCharTable,Uri__pathCharOrSlashTable,Uri__queryCharTable", Uri__defaultPort: function(scheme) {
        var t1 = J.getInterceptor(scheme);
        if (t1.$eq(scheme, "http"))
          return 80;
        if (t1.$eq(scheme, "https"))
          return 443;
        return 0;
      }, Uri_parse: function(uri) {
        var t1, pathStart, state, t2, i, t3, $char, index, isFile, path, numberSignIndex, t4, t5, query, fragment;
        t1 = {};
        t1.scheme_0 = "";
        t1.userinfo_1 = "";
        t1.host_2 = null;
        t1.port_3 = null;
        t1.index_4 = 0;
        t1.char_5 = -1;
        t2 = J.getInterceptor$asx(uri);
        i = 0;
        while (true) {
          t3 = t2.get$length(uri);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3)) {
            pathStart = 0;
            state = 0;
            break;
          }
          $char = t2.codeUnitAt$1(uri, i);
          t1.char_5 = $char;
          if (J.$eq($char, 63) || J.$eq(t1.char_5, 35)) {
            pathStart = 0;
            state = 0;
            break;
          }
          if (J.$eq(t1.char_5, 47)) {
            state = i === 0 ? 2 : 1;
            pathStart = 0;
            break;
          }
          if (J.$eq(t1.char_5, 58)) {
            if (i === 0)
              P.Uri__fail(uri, 0, "Invalid empty scheme");
            t1.scheme_0 = P.Uri__makeScheme(uri, i);
            ++i;
            if (i === t2.get$length(uri)) {
              t1.char_5 = -1;
              state = 0;
            } else {
              $char = t2.codeUnitAt$1(uri, i);
              t1.char_5 = $char;
              if (J.$eq($char, 63) || J.$eq(t1.char_5, 35))
                state = 0;
              else
                state = J.$eq(t1.char_5, 47) ? 2 : 1;
            }
            pathStart = i;
            break;
          }
          ++i;
          t1.char_5 = -1;
        }
        t1.index_4 = i;
        if (state === 2) {
          index = i + 1;
          t1.index_4 = index;
          if (index === t2.get$length(uri)) {
            t1.char_5 = -1;
            state = 0;
          } else {
            $char = t2.codeUnitAt$1(uri, t1.index_4);
            t1.char_5 = $char;
            if (J.$eq($char, 47)) {
              t1.index_4 = J.$add$ns(t1.index_4, 1);
              new P.Uri_parse_parseAuth(t1, uri, -1).call$0();
              pathStart = t1.index_4;
            }
            state = J.$eq(t1.char_5, 63) || J.$eq(t1.char_5, 35) || J.$eq(t1.char_5, -1) ? 0 : 1;
          }
        }
        if (state === 1)
          for (; index = J.$add$ns(t1.index_4, 1), t1.index_4 = index, J.$lt$n(index, t2.get$length(uri)) === true;) {
            $char = t2.codeUnitAt$1(uri, t1.index_4);
            t1.char_5 = $char;
            if (J.$eq($char, 63) || J.$eq(t1.char_5, 35))
              break;
            t1.char_5 = -1;
          }
        isFile = J.$eq(t1.scheme_0, "file");
        t3 = t1.host_2;
        path = P.Uri__makePath(uri, pathStart, t1.index_4, null, t3 != null, isFile);
        if (J.$eq(t1.char_5, 63)) {
          numberSignIndex = t2.indexOf$2(uri, "#", J.$add$ns(t1.index_4, 1));
          t3 = J.getInterceptor$n(numberSignIndex);
          t4 = t3.$lt(numberSignIndex, 0);
          t5 = t1.index_4;
          if (t4 === true) {
            query = P.Uri__makeQuery(uri, J.$add$ns(t5, 1), t2.get$length(uri), null);
            fragment = null;
          } else {
            query = P.Uri__makeQuery(uri, J.$add$ns(t5, 1), numberSignIndex, null);
            fragment = P.Uri__makeFragment(uri, t3.$add(numberSignIndex, 1), t2.get$length(uri));
          }
        } else {
          fragment = J.$eq(t1.char_5, 35) ? P.Uri__makeFragment(uri, J.$add$ns(t1.index_4, 1), t2.get$length(uri)) : null;
          query = null;
        }
        t2 = t1.scheme_0;
        t3 = t1.userinfo_1;
        return new P.Uri(t1.host_2, t1.port_3, path, t2, t3, query, fragment, null, null);
      }, Uri__fail: function(uri, index, message) {
        throw H.wrapException(P.FormatException$(message, uri, index));
      }, Uri_base: function() {
        var uri = H.Primitives_currentUri();
        if (uri != null)
          return P.Uri_parse(uri);
        throw H.wrapException(P.UnsupportedError$("'Uri.base' is not supported"));
      }, Uri__checkNonWindowsPathReservedCharacters: function(segments, argumentError) {
        segments.forEach$1(segments, new P.Uri__checkNonWindowsPathReservedCharacters_closure(argumentError));
      }, Uri__makePort: function(port, scheme) {
        if (port != null && port === P.Uri__defaultPort(scheme))
          return;
        return port;
      }, Uri__makeHost: function(host, start, end, strictIPv6) {
        var t1, t2, t3, i;
        if (host == null)
          return;
        t1 = J.getInterceptor(start);
        if (t1.$eq(start, end))
          return "";
        t2 = J.getInterceptor$s(host);
        if (J.$eq(t2.codeUnitAt$1(host, start), 91)) {
          t3 = J.getInterceptor$n(end);
          if (!J.$eq(t2.codeUnitAt$1(host, t3.$sub(end, 1)), 93))
            P.Uri__fail(host, start, "Missing end `]` to match `[` in host");
          P.Uri_parseIPv6Address(host, t1.$add(start, 1), t3.$sub(end, 1));
          return J.toLowerCase$0$s(t2.substring$2(host, start, end));
        }
        if (!strictIPv6)
          for (i = start; t1 = J.getInterceptor$n(i), t1.$lt(i, end) === true; i = t1.$add(i, 1))
            if (J.$eq(t2.codeUnitAt$1(host, i), 58)) {
              P.Uri_parseIPv6Address(host, start, end);
              return "[" + H.S(host) + "]";
            }
        return P.Uri__normalizeRegName(host, start, end);
      }, Uri__normalizeRegName: function(host, start, end) {
        var t1, index, sectionStart, buffer, isNormalized, t2, $char, t3, replacement, slice, str, sourceLength, t4, tail;
        for (t1 = J.getInterceptor$s(host), index = start, sectionStart = index, buffer = null, isNormalized = true; t2 = J.getInterceptor$n(index), t2.$lt(index, end) === true;) {
          $char = t1.codeUnitAt$1(host, index);
          t3 = J.getInterceptor($char);
          if (t3.$eq($char, 37)) {
            replacement = P.Uri__normalizeEscape(host, index, true);
            t3 = replacement == null;
            if (t3 && isNormalized) {
              index = t2.$add(index, 3);
              continue;
            }
            if (buffer == null) {
              buffer = new P.StringBuffer("");
              buffer._contents = "";
            }
            slice = t1.substring$2(host, sectionStart, index);
            if (!isNormalized)
              slice = J.toLowerCase$0$s(slice);
            buffer.toString;
            str = typeof slice === "string" ? slice : H.S(slice);
            buffer._contents = buffer._contents + str;
            if (t3) {
              replacement = t1.substring$2(host, index, t2.$add(index, 3));
              sourceLength = 3;
            } else if (J.$eq(replacement, "%")) {
              replacement = "%25";
              sourceLength = 1;
            } else
              sourceLength = 3;
            buffer._contents += typeof replacement === "string" ? replacement : H.S(replacement);
            index = t2.$add(index, sourceLength);
            sectionStart = index;
            isNormalized = true;
          } else {
            if (t3.$lt($char, 127) === true) {
              t4 = t3.$shr($char, 4);
              if (t4 >>> 0 !== t4 || t4 >= 8)
                return H.ioore(C.List_qNA, t4);
              t4 = (C.List_qNA[t4] & C.JSInt_methods._shlPositive$1(1, t3.$and($char, 15))) !== 0;
            } else
              t4 = false;
            if (t4) {
              if (isNormalized) {
                if (typeof $char !== "number")
                  return H.iae($char);
                t3 = 65 <= $char && 90 >= $char;
              } else
                t3 = false;
              if (t3) {
                if (buffer == null) {
                  buffer = new P.StringBuffer("");
                  buffer._contents = "";
                }
                if (J.$lt$n(sectionStart, index) === true) {
                  str = t1.substring$2(host, sectionStart, index);
                  buffer.toString;
                  str = typeof str === "string" ? str : H.S(str);
                  buffer._contents = buffer._contents + str;
                  sectionStart = index;
                }
                isNormalized = false;
              }
              index = t2.$add(index, 1);
            } else {
              if (t3.$le($char, 93) === true) {
                t4 = t3.$shr($char, 4);
                if (t4 >>> 0 !== t4 || t4 >= 8)
                  return H.ioore(C.List_2Vk, t4);
                t4 = (C.List_2Vk[t4] & C.JSInt_methods._shlPositive$1(1, t3.$and($char, 15))) !== 0;
              } else
                t4 = false;
              if (t4)
                P.Uri__fail(host, index, "Invalid character");
              else {
                if (t3.$and($char, 64512) === 55296 && J.$lt$n(t2.$add(index, 1), end) === true) {
                  tail = t1.codeUnitAt$1(host, t2.$add(index, 1));
                  t4 = J.getInterceptor$n(tail);
                  if (t4.$and(tail, 64512) === 56320) {
                    $char = (65536 | t3.$and($char, 1023) << 10 | t4.$and(tail, 1023)) >>> 0;
                    sourceLength = 2;
                  } else
                    sourceLength = 1;
                } else
                  sourceLength = 1;
                if (buffer == null) {
                  buffer = new P.StringBuffer("");
                  buffer._contents = "";
                }
                slice = t1.substring$2(host, sectionStart, index);
                if (!isNormalized)
                  slice = J.toLowerCase$0$s(slice);
                buffer.toString;
                str = typeof slice === "string" ? slice : H.S(slice);
                buffer._contents = buffer._contents + str;
                t3 = P.Uri__escapeChar($char);
                buffer._contents += t3;
                index = t2.$add(index, sourceLength);
                sectionStart = index;
              }
            }
          }
        }
        if (buffer == null)
          return t1.substring$2(host, start, end);
        if (J.$lt$n(sectionStart, end) === true) {
          slice = t1.substring$2(host, sectionStart, end);
          buffer.write$1(!isNormalized ? J.toLowerCase$0$s(slice) : slice);
        }
        return buffer.toString$0(0);
      }, Uri__makeScheme: function(scheme, end) {
        var t1, $char, t2, t3, allLowercase, i, codeUnit;
        if (J.$eq(end, 0))
          return "";
        t1 = J.getInterceptor$s(scheme);
        $char = t1.codeUnitAt$1(scheme, 0);
        t2 = J.getInterceptor$n($char);
        if (!(t2.$ge($char, 97) === true && t2.$le($char, 122) === true))
          t3 = t2.$ge($char, 65) === true && t2.$le($char, 90) === true;
        else
          t3 = true;
        if (!t3)
          P.Uri__fail(scheme, 0, "Scheme not starting with alphabetic character");
        allLowercase = t2.$ge($char, 97);
        if (typeof end !== "number")
          return H.iae(end);
        i = 0;
        for (; i < end; ++i) {
          codeUnit = t1.codeUnitAt$1(scheme, i);
          t2 = J.getInterceptor$n(codeUnit);
          if (t2.$lt(codeUnit, 128) === true) {
            t3 = t2.$shr(codeUnit, 4);
            if (t3 >>> 0 !== t3 || t3 >= 8)
              return H.ioore(C.List_JYB, t3);
            t2 = (C.List_JYB[t3] & C.JSInt_methods._shlPositive$1(1, t2.$and(codeUnit, 15))) !== 0;
          } else
            t2 = false;
          if (!t2)
            P.Uri__fail(scheme, i, "Illegal scheme character");
          if (typeof $char !== "number")
            return H.iae($char);
          if (97 <= $char && 122 >= $char)
            allLowercase = false;
        }
        scheme = t1.substring$2(scheme, 0, end);
        return allLowercase !== true ? J.toLowerCase$0$s(scheme) : scheme;
      }, Uri__makeUserInfo: function(userInfo, start, end) {
        if (userInfo == null)
          return "";
        return P.Uri__normalize(userInfo, start, end, C.List_gRj);
      }, Uri__makePath: function(path, start, end, pathSegments, ensureLeadingSlash, isFile) {
        var t1, result;
        t1 = path == null;
        if (t1 && true)
          return isFile ? "/" : "";
        t1 = !t1;
        if (t1)
          ;
        result = t1 ? P.Uri__normalize(path, start, end, C.List_qg4) : C.JSNull_methods.map$1(pathSegments, new P.Uri__makePath_closure()).join$1(0, "/");
        t1 = J.getInterceptor$asx(result);
        if (t1.get$isEmpty(result) === true) {
          if (isFile)
            return "/";
        } else if ((isFile || ensureLeadingSlash) && !J.$eq(t1.codeUnitAt$1(result, 0), 47))
          return "/" + H.S(result);
        return result;
      }, Uri__makeQuery: function(query, start, end, queryParameters) {
        var t1, t2, result;
        t1 = {};
        t2 = query == null;
        if (t2 && true)
          return;
        t2 = !t2;
        if (t2)
          ;
        if (t2)
          return P.Uri__normalize(query, start, end, C.List_CVk);
        result = P.StringBuffer$("");
        t1.first_0 = true;
        C.JSNull_methods.forEach$1(queryParameters, new P.Uri__makeQuery_closure(t1, result));
        return result._contents;
      }, Uri__makeFragment: function(fragment, start, end) {
        if (fragment == null)
          return;
        return P.Uri__normalize(fragment, start, end, C.List_CVk);
      }, Uri__isHexDigit: function($char) {
        if (typeof $char !== "number")
          return H.iae($char);
        if (57 >= $char)
          return 48 <= $char;
        $char = ($char | 32) >>> 0;
        return 97 <= $char && 102 >= $char;
      }, Uri__hexValue: function($char) {
        if (typeof $char !== "number")
          return H.iae($char);
        if (57 >= $char)
          return $char - 48;
        return (($char | 32) >>> 0) - 87;
      }, Uri__normalizeEscape: function(source, index, lowerCase) {
        var t1, t2, firstDigit, secondDigit, value, t3, t4;
        t1 = J.getInterceptor$ns(index);
        t2 = J.getInterceptor$asx(source);
        if (J.$ge$n(t1.$add(index, 2), t2.get$length(source)) === true)
          return "%";
        firstDigit = t2.codeUnitAt$1(source, t1.$add(index, 1));
        secondDigit = t2.codeUnitAt$1(source, t1.$add(index, 2));
        if (!P.Uri__isHexDigit(firstDigit) || !P.Uri__isHexDigit(secondDigit))
          return "%";
        value = J.$add$ns(J.$mul$ns(P.Uri__hexValue(firstDigit), 16), P.Uri__hexValue(secondDigit));
        t3 = J.getInterceptor$n(value);
        if (t3.$lt(value, 127) === true) {
          t4 = t3.$shr(value, 4);
          if (t4 >>> 0 !== t4 || t4 >= 8)
            return H.ioore(C.List_nxB, t4);
          t4 = (C.List_nxB[t4] & C.JSInt_methods._shlPositive$1(1, t3.$and(value, 15))) !== 0;
        } else
          t4 = false;
        if (t4) {
          if (lowerCase) {
            if (typeof value !== "number")
              return H.iae(value);
            t1 = 65 <= value && 90 >= value;
          } else
            t1 = false;
          return H.Primitives_stringFromCharCode(t1 ? t3.$or(value, 32) : value);
        }
        if (J.$ge$n(firstDigit, 97) === true || J.$ge$n(secondDigit, 97) === true)
          return J.toUpperCase$0$s(t2.substring$2(source, index, t1.$add(index, 3)));
        return;
      }, Uri__escapeChar: function($char) {
        var t1, codeUnits, t2, t3, flag, encodedBytes, index, $byte, t4;
        t1 = J.getInterceptor$n($char);
        if (t1.$lt($char, 128) === true) {
          codeUnits = Array(3);
          codeUnits.fixed$length = init;
          codeUnits[0] = 37;
          t2 = t1.$shr($char, 4);
          if (typeof t2 !== "number" || Math.floor(t2) !== t2)
            H.throwExpression(P.ArgumentError$(t2));
          t3 = J.getInterceptor$n(t2);
          if (t3.$lt(t2, 0))
            H.throwExpression(P.RangeError$value(t2));
          if (t3.$ge(t2, 16))
            H.throwExpression(P.RangeError$value(t2));
          codeUnits[1] = "0123456789ABCDEF".charCodeAt(t2);
          t1 = t1.$and($char, 15);
          if (t1 >= 16)
            H.throwExpression(P.RangeError$value(t1));
          codeUnits[2] = "0123456789ABCDEF".charCodeAt(t1);
        } else {
          if (t1.$gt($char, 2047) === true)
            if (t1.$gt($char, 65535) === true) {
              flag = 240;
              encodedBytes = 4;
            } else {
              flag = 224;
              encodedBytes = 3;
            }
          else {
            flag = 192;
            encodedBytes = 2;
          }
          t2 = 3 * encodedBytes;
          codeUnits = Array(t2);
          codeUnits.fixed$length = init;
          for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
            $byte = J.$and$n(t1.$shr($char, 6 * encodedBytes), 63) | flag;
            if (index >= t2)
              return H.ioore(codeUnits, index);
            codeUnits[index] = 37;
            t3 = index + 1;
            t4 = $byte >>> 4;
            if (t4 >= 16)
              H.throwExpression(P.RangeError$value(t4));
            t4 = "0123456789ABCDEF".charCodeAt(t4);
            if (t3 >= t2)
              return H.ioore(codeUnits, t3);
            codeUnits[t3] = t4;
            t4 = index + 2;
            t3 = "0123456789ABCDEF".charCodeAt($byte & 15);
            if (t4 >= t2)
              return H.ioore(codeUnits, t4);
            codeUnits[t4] = t3;
            index += 3;
          }
        }
        return H.Primitives_stringFromCharCodes(codeUnits);
      }, Uri__normalize: function(component, start, end, charTable) {
        var t1, index, sectionStart, buffer, t2, $char, t3, t4, replacement, sourceLength, tail, str;
        for (t1 = J.getInterceptor$s(component), index = start, sectionStart = index, buffer = null; t2 = J.getInterceptor$n(index), t2.$lt(index, end) === true;) {
          $char = t1.codeUnitAt$1(component, index);
          t3 = J.getInterceptor$n($char);
          if (t3.$lt($char, 127) === true) {
            t4 = t3.$shr($char, 4);
            if (t4 >>> 0 !== t4 || t4 >= 8)
              return H.ioore(charTable, t4);
            t4 = (charTable[t4] & C.JSInt_methods._shlPositive$1(1, t3.$and($char, 15))) !== 0;
          } else
            t4 = false;
          if (t4)
            index = t2.$add(index, 1);
          else {
            if (t3.$eq($char, 37)) {
              replacement = P.Uri__normalizeEscape(component, index, false);
              if (replacement == null) {
                index = t2.$add(index, 3);
                continue;
              }
              if ("%" === replacement) {
                replacement = "%25";
                sourceLength = 1;
              } else
                sourceLength = 3;
            } else {
              if (t3.$le($char, 93) === true) {
                t4 = t3.$shr($char, 4);
                if (t4 >>> 0 !== t4 || t4 >= 8)
                  return H.ioore(C.List_2Vk, t4);
                t4 = (C.List_2Vk[t4] & C.JSInt_methods._shlPositive$1(1, t3.$and($char, 15))) !== 0;
              } else
                t4 = false;
              if (t4) {
                P.Uri__fail(component, index, "Invalid character");
                replacement = null;
                sourceLength = null;
              } else {
                if (t3.$and($char, 64512) === 55296)
                  if (J.$lt$n(t2.$add(index, 1), end) === true) {
                    tail = t1.codeUnitAt$1(component, t2.$add(index, 1));
                    t4 = J.getInterceptor$n(tail);
                    if (t4.$and(tail, 64512) === 56320) {
                      $char = (65536 | t3.$and($char, 1023) << 10 | t4.$and(tail, 1023)) >>> 0;
                      sourceLength = 2;
                    } else
                      sourceLength = 1;
                  } else
                    sourceLength = 1;
                else
                  sourceLength = 1;
                replacement = P.Uri__escapeChar($char);
              }
            }
            if (buffer == null) {
              buffer = new P.StringBuffer("");
              buffer._contents = "";
            }
            str = t1.substring$2(component, sectionStart, index);
            buffer.toString;
            str = typeof str === "string" ? str : H.S(str);
            buffer._contents = buffer._contents + str;
            buffer._contents += typeof replacement === "string" ? replacement : H.S(replacement);
            index = t2.$add(index, sourceLength);
            sectionStart = index;
          }
        }
        if (buffer == null)
          return t1.substring$2(component, start, end);
        if (J.$lt$n(sectionStart, end) === true)
          buffer.write$1(t1.substring$2(component, sectionStart, end));
        return buffer.toString$0(0);
      }, Uri_decodeComponent: [function(encodedComponent) {
        return P.Uri__uriDecode(encodedComponent, C.Utf8Codec_false, false);
      }, "call$1", "Uri_decodeComponent$closure", 2, 0, 12, 55, []], Uri_parseIPv4Address: function(host) {
        var t1, bytes, t2;
        t1 = new P.Uri_parseIPv4Address_error();
        bytes = J.split$1$s(host, ".");
        t2 = J.getInterceptor$asx(bytes);
        if (!J.$eq(t2.get$length(bytes), 4))
          t1.call$1("IPv4 address should contain exactly 4 parts");
        return J.toList$0$ax(t2.map$1(bytes, new P.Uri_parseIPv4Address_closure(t1)));
      }, Uri_parseIPv6Address: function(host, start, end) {
        var error, parseHex, parts, partStart, last, i, wildcardSeen, t1, atEnd, isLastWildcard, exception, bytes, index, value, wildCardLength, j, t2;
        if (end == null)
          end = J.get$length$asx(host);
        error = new P.Uri_parseIPv6Address_error(host);
        parseHex = new P.Uri_parseIPv6Address_parseHex(host, error);
        if (J.$lt$n(J.get$length$asx(host), 2) === true)
          error.call$1("address is too short");
        parts = [];
        partStart = start;
        for (i = start, wildcardSeen = false; t1 = J.getInterceptor$n(i), t1.$lt(i, end) === true; i = J.$add$ns(i, 1))
          if (J.$eq(J.codeUnitAt$1$s(host, i), 58)) {
            if (t1.$eq(i, start)) {
              i = t1.$add(i, 1);
              if (!J.$eq(J.codeUnitAt$1$s(host, i), 58))
                error.call$2("invalid start colon.", i);
              partStart = i;
            }
            t1 = J.getInterceptor(i);
            if (t1.$eq(i, partStart)) {
              if (wildcardSeen)
                error.call$2("only one wildcard `::` is allowed", i);
              J.add$1$ax(parts, -1);
              wildcardSeen = true;
            } else
              J.add$1$ax(parts, parseHex.call$2(partStart, i));
            partStart = t1.$add(i, 1);
          }
        if (J.get$length$asx(parts) === 0)
          error.call$1("too few parts");
        atEnd = J.$eq(partStart, end);
        isLastWildcard = J.$eq(J.get$last$ax(parts), -1);
        if (atEnd && !isLastWildcard)
          error.call$2("expected a part after last `:`", end);
        if (!atEnd)
          try {
            J.add$1$ax(parts, parseHex.call$2(partStart, end));
          } catch (exception) {
            H.unwrapException(exception);
            try {
              last = P.Uri_parseIPv4Address(J.substring$2$s(host, partStart, end));
              J.add$1$ax(parts, J.$or$n(J.$shl$n(J.$index$asx(last, 0), 8), J.$index$asx(last, 1)));
              J.add$1$ax(parts, J.$or$n(J.$shl$n(J.$index$asx(last, 2), 8), J.$index$asx(last, 3)));
            } catch (exception) {
              H.unwrapException(exception);
              error.call$2("invalid end of IPv6 address.", partStart);
            }

          }

        if (wildcardSeen) {
          if (J.get$length$asx(parts) > 7)
            error.call$1("an address with a wildcard must have less than 7 parts");
        } else if (J.get$length$asx(parts) !== 8)
          error.call$1("an address without a wildcard must contain exactly 8 parts");
        bytes = Array(16);
        bytes.$builtinTypeInfo = [P.$int];
        i = 0;
        index = 0;
        while (true) {
          t1 = J.get$length$asx(parts);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          value = J.$index$asx(parts, i);
          t1 = J.getInterceptor(value);
          if (t1.$eq(value, -1)) {
            wildCardLength = 9 - J.get$length$asx(parts);
            for (j = 0; j < wildCardLength; ++j) {
              if (index < 0 || index >= 16)
                return H.ioore(bytes, index);
              bytes[index] = 0;
              t1 = index + 1;
              if (t1 >= 16)
                return H.ioore(bytes, t1);
              bytes[t1] = 0;
              index += 2;
            }
          } else {
            t2 = t1.$shr(value, 8);
            if (index < 0 || index >= 16)
              return H.ioore(bytes, index);
            bytes[index] = t2;
            t2 = index + 1;
            t1 = t1.$and(value, 255);
            if (t2 >= 16)
              return H.ioore(bytes, t2);
            bytes[t2] = t1;
            index += 2;
          }
          ++i;
        }
        return bytes;
      }, Uri__uriEncode: function(canonicalTable, text, encoding, spaceToPlus) {
        var t1, result, bytes, i, $byte, t2, t3;
        t1 = new P.Uri__uriEncode_byteToHex();
        result = P.StringBuffer$("");
        bytes = encoding.get$encoder().convert$1(text);
        for (i = 0; i < bytes.length; ++i) {
          $byte = bytes[i];
          t2 = J.getInterceptor$n($byte);
          if (t2.$lt($byte, 128) === true) {
            t3 = t2.$shr($byte, 4);
            if (t3 >>> 0 !== t3 || t3 >= 8)
              return H.ioore(canonicalTable, t3);
            t3 = (canonicalTable[t3] & C.JSInt_methods._shlPositive$1(1, t2.$and($byte, 15))) !== 0;
          } else
            t3 = false;
          if (t3) {
            t2 = H.Primitives_stringFromCharCode($byte);
            result._contents += t2;
          } else if (spaceToPlus && t2.$eq($byte, 32)) {
            t2 = H.Primitives_stringFromCharCode(43);
            result._contents += t2;
          } else {
            t2 = H.Primitives_stringFromCharCode(37);
            result._contents += t2;
            t1.call$2($byte, result);
          }
        }
        return result._contents;
      }, Uri__hexCharPairToByte: function(s, pos) {
        var t1, $byte, i, charCode;
        for (t1 = J.getInterceptor$s(s), $byte = 0, i = 0; i < 2; ++i) {
          charCode = t1.codeUnitAt$1(s, pos + i);
          if (typeof charCode !== "number")
            return H.iae(charCode);
          if (48 <= charCode && charCode <= 57)
            $byte = $byte * 16 + charCode - 48;
          else {
            charCode = (charCode | 32) >>> 0;
            if (97 <= charCode && charCode <= 102)
              $byte = $byte * 16 + charCode - 87;
            else
              throw H.wrapException(P.ArgumentError$("Invalid URL encoding"));
          }
        }
        return $byte;
      }, Uri__uriDecode: function(text, encoding, plusToSpace) {
        var t1, simple, i, t2, codeUnit, bytes, allowMalformed;
        t1 = J.getInterceptor$asx(text);
        simple = true;
        i = 0;
        while (true) {
          t2 = t1.get$length(text);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2 && simple))
            break;
          codeUnit = t1.codeUnitAt$1(text, i);
          t2 = J.getInterceptor(codeUnit);
          simple = !t2.$eq(codeUnit, 37) && !t2.$eq(codeUnit, 43);
          ++i;
        }
        if (simple)
          if (encoding === C.Utf8Codec_false || false)
            return text;
          else
            bytes = t1.get$codeUnits(text);
        else {
          bytes = [];
          i = 0;
          while (true) {
            t2 = t1.get$length(text);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(i < t2))
              break;
            codeUnit = t1.codeUnitAt$1(text, i);
            t2 = J.getInterceptor$n(codeUnit);
            if (t2.$gt(codeUnit, 127) === true)
              throw H.wrapException(P.ArgumentError$("Illegal percent encoding in URI"));
            if (t2.$eq(codeUnit, 37)) {
              t2 = t1.get$length(text);
              if (typeof t2 !== "number")
                return H.iae(t2);
              if (i + 3 > t2)
                throw H.wrapException(P.ArgumentError$("Truncated URI"));
              bytes.push(P.Uri__hexCharPairToByte(text, i + 1));
              i += 2;
            } else if (plusToSpace && t2.$eq(codeUnit, 43))
              bytes.push(32);
            else
              bytes.push(codeUnit);
            ++i;
          }
        }
        allowMalformed = encoding._allowMalformed;
        return new P.Utf8Decoder(allowMalformed).convert$1(bytes);
      }}
  },
  Uri_parse_isRegName: {
    "^": "Closure:135;",
    call$1: function(ch) {
      ch.$lt(0, 128);
      return false;
    },
    $isFunction: true
  },
  Uri_parse_parseAuth: {
    "^": "Closure:13;box_0,uri_1,EOI_2",
    call$0: function() {
      var t1, t2, t3, authStart, $char, lastColon, lastAt, char0, endBracket, hostEnd, t4, hostStart, i, portNumber, digit;
      t1 = this.box_0;
      t2 = this.uri_1;
      t3 = J.getInterceptor$asx(t2);
      if (J.$eq(t1.index_4, t3.get$length(t2))) {
        t1.char_5 = this.EOI_2;
        return;
      }
      authStart = t1.index_4;
      t1.char_5 = t3.codeUnitAt$1(t2, authStart);
      for ($char = this.EOI_2, lastColon = -1, lastAt = -1; J.$lt$n(t1.index_4, t3.get$length(t2)) === true;) {
        char0 = t3.codeUnitAt$1(t2, t1.index_4);
        t1.char_5 = char0;
        if (J.$eq(char0, 47) || J.$eq(t1.char_5, 63) || J.$eq(t1.char_5, 35))
          break;
        if (J.$eq(t1.char_5, 64)) {
          lastAt = t1.index_4;
          lastColon = -1;
        } else if (J.$eq(t1.char_5, 58))
          lastColon = t1.index_4;
        else if (J.$eq(t1.char_5, 91)) {
          endBracket = t3.indexOf$2(t2, "]", J.$add$ns(t1.index_4, 1));
          if (J.$eq(endBracket, -1)) {
            t1.index_4 = t3.get$length(t2);
            t1.char_5 = $char;
            lastColon = -1;
            break;
          } else
            t1.index_4 = endBracket;
          lastColon = -1;
        }
        t1.index_4 = J.$add$ns(t1.index_4, 1);
        t1.char_5 = $char;
      }
      hostEnd = t1.index_4;
      t4 = J.getInterceptor$n(lastAt);
      if (t4.$ge(lastAt, 0) === true) {
        t1.userinfo_1 = P.Uri__makeUserInfo(t2, authStart, lastAt);
        hostStart = t4.$add(lastAt, 1);
      } else
        hostStart = authStart;
      t4 = J.getInterceptor$n(lastColon);
      if (t4.$ge(lastColon, 0) === true) {
        if (J.$lt$n(t4.$add(lastColon, 1), t1.index_4) === true)
          for (i = t4.$add(lastColon, 1), portNumber = 0; t4 = J.getInterceptor$n(i), t4.$lt(i, t1.index_4) === true; i = t4.$add(i, 1)) {
            digit = t3.codeUnitAt$1(t2, i);
            if (typeof digit !== "number")
              return H.iae(digit);
            if (48 > digit || 57 < digit)
              P.Uri__fail(t2, i, "Invalid port number");
            portNumber = portNumber * 10 + (digit - 48);
          }
        else
          portNumber = null;
        t1.port_3 = P.Uri__makePort(portNumber, t1.scheme_0);
        hostEnd = lastColon;
      }
      t1.host_2 = P.Uri__makeHost(t2, hostStart, hostEnd, true);
      if (J.$lt$n(t1.index_4, t3.get$length(t2)) === true)
        t1.char_5 = t3.codeUnitAt$1(t2, t1.index_4);
    },
    $isFunction: true
  },
  Uri__checkNonWindowsPathReservedCharacters_closure: {
    "^": "Closure:54;argumentError_0",
    call$1: function(segment) {
      if (J.contains$1$asx(segment, "/") === true)
        if (this.argumentError_0)
          throw H.wrapException(P.ArgumentError$("Illegal path character " + H.S(segment)));
        else
          throw H.wrapException(P.UnsupportedError$("Illegal path character " + H.S(segment)));
    },
    $isFunction: true
  },
  Uri__makePath_closure: {
    "^": "Closure:54;",
    call$1: function(s) {
      return P.Uri__uriEncode(C.List_qg40, s, C.Utf8Codec_false, false);
    },
    $isFunction: true
  },
  Uri__makeQuery_closure: {
    "^": "Closure:94;box_0,result_1",
    call$2: function(key, value) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1("&");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(P.Uri__uriEncode(C.List_nxB, key, C.Utf8Codec_false, true));
      value.get$isEmpty(value);
      t1.write$1("=");
      t1.write$1(P.Uri__uriEncode(C.List_nxB, value, C.Utf8Codec_false, true));
    },
    $isFunction: true
  },
  Uri_hashCode_combine: {
    "^": "Closure:136;",
    call$2: function(part, current) {
      var t1 = J.get$hashCode$(part);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return current * 31 + t1 & 1073741823;
    },
    $isFunction: true
  },
  Uri_parseIPv4Address_error: {
    "^": "Closure:43;",
    call$1: function(msg) {
      throw H.wrapException(P.FormatException$("Illegal IPv4 address, " + msg, null, null));
    },
    $isFunction: true
  },
  Uri_parseIPv4Address_closure: {
    "^": "Closure:54;error_0",
    call$1: [function(byteString) {
      var $byte, t1;
      $byte = H.Primitives_parseInt(byteString, null, null);
      t1 = J.getInterceptor$n($byte);
      if (t1.$lt($byte, 0) === true || t1.$gt($byte, 255) === true)
        this.error_0.call$1("each part must be in the range of `0..255`");
      return $byte;
    }, "call$1", null, 2, 0, null, 137, [], "call"],
    $isFunction: true
  },
  Uri_parseIPv6Address_error: {
    "^": "Closure:138;host_0",
    call$2: function(msg, position) {
      throw H.wrapException(P.FormatException$("Illegal IPv6 address, " + msg, this.host_0, position));
    },
    call$1: function(msg) {
      return this.call$2(msg, null);
    },
    $isFunction: true
  },
  Uri_parseIPv6Address_parseHex: {
    "^": "Closure:139;host_1,error_2",
    call$2: function(start, end) {
      var value, t1;
      if (J.$gt$n(J.$sub$n(end, start), 4) === true)
        this.error_2.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
      value = H.Primitives_parseInt(J.substring$2$s(this.host_1, start, end), 16, null);
      t1 = J.getInterceptor$n(value);
      if (t1.$lt(value, 0) === true || t1.$gt(value, 65535) === true)
        this.error_2.call$2("each part must be in the range of `0x0..0xFFFF`", start);
      return value;
    },
    $isFunction: true
  },
  Uri__uriEncode_byteToHex: {
    "^": "Closure:94;",
    call$2: function($byte, buffer) {
      var t1 = J.getInterceptor$n($byte);
      buffer.write$1(H.Primitives_stringFromCharCode(C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", t1.$shr($byte, 4))));
      buffer.write$1(H.Primitives_stringFromCharCode(C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", t1.$and($byte, 15))));
    },
    $isFunction: true
  },
  "^": "proxy<"
}],
["dart.dom.html", "dart:html", , W, {
  "^": "",
  AnchorElement_AnchorElement: function(href) {
    var e = document.createElement("a", null);
    return e;
  },
  CssStyleDeclaration__camelCase: function(hyphenated) {
    return hyphenated.replace(/^-ms-/, "ms-").replace(/-([\da-z])/ig, C.JS_CONST_s8I);
  },
  CustomEvent_CustomEvent: function(type, canBubble, cancelable, detail) {
    var e, t1, exception;
    e = document.createEvent("CustomEvent");
    J.set$_dartDetail$x(e, detail);
    if (!J.getInterceptor(detail).$isList)
      if (!J.getInterceptor(detail).$isMap) {
        t1 = detail;
        if (typeof t1 !== "string") {
          t1 = detail;
          t1 = typeof t1 === "number";
        } else
          t1 = true;
      } else
        t1 = true;
    else
      t1 = true;
    if (t1)
      try {
        detail = P._convertDartToNative_PrepareForStructuredClone(detail);
        J._initCustomEvent$4$x(e, type, canBubble, cancelable, detail);
      } catch (exception) {
        H.unwrapException(exception);
        J._initCustomEvent$4$x(e, type, canBubble, cancelable, null);
      }

    else
      J._initCustomEvent$4$x(e, type, canBubble, cancelable, null);
    return e;
  },
  Element_Element$html: function(html, treeSanitizer, validator) {
    var fragment, t1;
    fragment = J.createFragment$3$treeSanitizer$validator$x(document.body, html, treeSanitizer, validator);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    t1 = t1.where$1(t1, new W.Element_Element$html_closure());
    return t1.get$single(t1);
  },
  _ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
    return document.createElement(tag);
  },
  HttpRequest_getString: function(url, onProgress, withCredentials) {
    return W.HttpRequest_request(url, null, null, onProgress, null, null, null, withCredentials).then$1(new W.HttpRequest_getString_closure());
  },
  HttpRequest_request: function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
    var t1, t2, completer, xhr, t3;
    t1 = W.HttpRequest;
    t2 = P._Future$(t1);
    completer = new P._AsyncCompleter(t2);
    completer.$builtinTypeInfo = [t1];
    xhr = new XMLHttpRequest();
    C.HttpRequest_methods.open$3$async(xhr, "GET", url, true);
    t1 = C.EventStreamProvider_load._eventType;
    t3 = new W._EventStream(xhr, t1, false);
    t3.$builtinTypeInfo = [null];
    t1 = new W._EventStreamSubscription(0, xhr, t1, W._wrapZone(new W.HttpRequest_request_closure(completer, xhr)), false);
    t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(t3, 0)];
    t1._tryResume$0();
    t1 = C.EventStreamProvider_error._eventType;
    t3 = new W._EventStream(xhr, t1, false);
    t3.$builtinTypeInfo = [null];
    t1 = new W._EventStreamSubscription(0, xhr, t1, W._wrapZone(completer.get$completeError()), false);
    t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(t3, 0)];
    t1._tryResume$0();
    xhr.send();
    return t2;
  },
  _JenkinsSmiHash_combine: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _convertNativeToDart_Window: function(win) {
    if (win == null)
      return;
    return W._DOMWindowCrossFrame__createSafe(win);
  },
  _convertNativeToDart_EventTarget: function(e) {
    var $window;
    if (e == null)
      return;
    if ("postMessage" in e) {
      $window = W._DOMWindowCrossFrame__createSafe(e);
      if (!!J.getInterceptor($window).$isEventTarget)
        return $window;
      return;
    } else
      return e;
  },
  _callConstructor: function($constructor, interceptor) {
    return new W._callConstructor_closure($constructor, interceptor);
  },
  _callAttached: [function(receiver) {
    return J.attached$0$x(receiver);
  }, "call$1", "_callAttached$closure", 2, 0, 54, 60, []],
  _callDetached: [function(receiver) {
    return J.detached$0$x(receiver);
  }, "call$1", "_callDetached$closure", 2, 0, 54, 60, []],
  _callAttributeChanged: [function(receiver, $name, oldValue, newValue) {
    return J.attributeChanged$3$x(receiver, $name, oldValue, newValue);
  }, "call$4", "_callAttributeChanged$closure", 8, 0, 61, 60, [], 62, [], 63, [], 64, []],
  _registerCustomElement: function(context, $document, tag, type, extendsTagName) {
    var interceptorClass, interceptor, $constructor, baseClassName, t1, baseConstructor, properties, proto, t2, options;
    interceptorClass = J.findInterceptorConstructorForType(type);
    if (interceptorClass == null)
      throw H.wrapException(P.ArgumentError$(type));
    interceptor = interceptorClass.prototype;
    $constructor = J.findConstructorForNativeSubclassType(type, "created");
    if ($constructor == null)
      throw H.wrapException(P.ArgumentError$(H.S(type) + " has no constructor called 'created'"));
    J.getNativeInterceptor(W._ElementFactoryProvider_createElement_tag("article", null));
    baseClassName = interceptorClass.$nativeSuperclassTag;
    if (baseClassName == null)
      throw H.wrapException(P.ArgumentError$(type));
    t1 = extendsTagName == null;
    if (t1) {
      if (!J.$eq(baseClassName, "HTMLElement"))
        throw H.wrapException(P.UnsupportedError$("Class must provide extendsTag if base native class is not HtmlElement"));
    } else if (!($document.createElement(extendsTagName) instanceof window[baseClassName]))
      throw H.wrapException(P.UnsupportedError$("extendsTag does not match base native class"));
    baseConstructor = context[baseClassName];
    properties = {};
    properties.createdCallback = {value: function(invokeCallback) {
        return function() {
          return invokeCallback(this);
        };
      }(H.convertDartClosureToJS(W._callConstructor($constructor, interceptor), 1))};
    properties.attachedCallback = {value: function(invokeCallback) {
        return function() {
          return invokeCallback(this);
        };
      }(H.convertDartClosureToJS(W._callAttached$closure(), 1))};
    properties.detachedCallback = {value: function(invokeCallback) {
        return function() {
          return invokeCallback(this);
        };
      }(H.convertDartClosureToJS(W._callDetached$closure(), 1))};
    properties.attributeChangedCallback = {value: function(invokeCallback) {
        return function(arg1, arg2, arg3) {
          return invokeCallback(this, arg1, arg2, arg3);
        };
      }(H.convertDartClosureToJS(W._callAttributeChanged$closure(), 4))};
    proto = Object.create(baseConstructor.prototype, properties);
    t2 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: t2, enumerable: false, writable: true, configurable: true});
    options = {prototype: proto};
    if (!t1)
      options.extends = extendsTagName;
    $document.registerElement(tag, options);
  },
  _wrapZone: function(callback) {
    if (J.$eq($.Zone__current, C.C__RootZone))
      return callback;
    if (callback == null)
      return;
    return $.Zone__current.bindUnaryCallback$2$runGuarded(callback, true);
  },
  _wrapBinaryZone: function(callback) {
    if (J.$eq($.Zone__current, C.C__RootZone))
      return callback;
    return $.Zone__current.bindBinaryCallback$2$runGuarded(callback, true);
  },
  HtmlElement: {
    "^": "Element;",
    "%": "HTMLAppletElement|HTMLBRElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLMenuElement|HTMLModElement|HTMLParagraphElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement;HtmlElement_DomProxyMixin|CoreIcon|HtmlElement_DomProxyMixin0|CoreMeta|CoreIconset|HtmlElement_DomProxyMixin1|PaperFocusable|PaperButton|HtmlElement_DomProxyMixin2|PaperRipple|HtmlElement_DomProxyMixin3|PaperShadow|HtmlElement_Polymer|HtmlElement_Polymer_ChangeNotifier|PolymerElement|PolymerElement_EventDetector|PolymerElement_EventDetector_ChangeNotifier|PurityStopwatch"
  },
  _EntryArray: {
    "^": "Interceptor;",
    $isList: true,
    $asList: function() {
      return [W.Entry];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Entry];
    },
    "%": "EntryArray"
  },
  AnchorElement: {
    "^": "HtmlElement;target=,type=,hostname=,href%,port=,protocol=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAnchorElement"
  },
  AreaElement: {
    "^": "HtmlElement;target=,hostname=,href%,port=,protocol=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAreaElement"
  },
  BaseElement: {
    "^": "HtmlElement;href%,target=",
    "%": "HTMLBaseElement"
  },
  Blob: {
    "^": "Interceptor;type=",
    $isBlob: true,
    "%": ";Blob"
  },
  BodyElement: {
    "^": "HtmlElement;",
    get$onError: function(receiver) {
      var t1 = new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_error0._eventType, false);
      t1.$builtinTypeInfo = [null];
      return t1;
    },
    onError$1: function($receiver, arg0) {
      return this.get$onError($receiver).call$1(arg0);
    },
    $isBodyElement: true,
    $isEventTarget: true,
    "%": "HTMLBodyElement"
  },
  ButtonElement: {
    "^": "HtmlElement;name=,type=,value%",
    "%": "HTMLButtonElement"
  },
  CharacterData: {
    "^": "Node;data%,length=,nextElementSibling=",
    "%": "Comment;CharacterData"
  },
  CompositionEvent: {
    "^": "UIEvent;data=",
    "%": "CompositionEvent"
  },
  CssStyleDeclaration: {
    "^": "Interceptor_CssStyleDeclarationBase;length=",
    getPropertyValue$1: function(receiver, propertyName) {
      var propValue = this._getPropertyValueHelper$1(receiver, propertyName);
      return propValue != null ? propValue : "";
    },
    _getPropertyValueHelper$1: function(receiver, propertyName) {
      var t1;
      if (W.CssStyleDeclaration__camelCase(propertyName) in receiver)
        return receiver.getPropertyValue(propertyName);
      else {
        t1 = P.Device_cssPrefix();
        if (typeof t1 !== "string")
          return t1.$add();
        return receiver.getPropertyValue(t1 + propertyName);
      }
    },
    setProperty$3: function(receiver, propertyName, value, priority) {
      var t1;
      if (W.CssStyleDeclaration__camelCase(propertyName) in receiver)
        return this._setPropertyHelper$3(receiver, propertyName, value, priority);
      else {
        t1 = P.Device_cssPrefix();
        if (typeof t1 !== "string")
          return t1.$add();
        return this._setPropertyHelper$3(receiver, t1 + propertyName, value, priority);
      }
    },
    _setPropertyHelper$3: function(receiver, propertyName, value, priority) {
      var exception;
      try {
        if (value == null)
          value = "";
        if (priority == null)
          priority = "";
        receiver.setProperty(propertyName, value, priority);
        if (!!receiver.setAttribute)
          receiver.setAttribute(propertyName, value);
      } catch (exception) {
        H.unwrapException(exception);
      }

    },
    "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
  },
  CustomEvent: {
    "^": "Event0;_dartDetail}",
    get$detail: function(receiver) {
      var t1 = receiver._dartDetail;
      if (t1 != null)
        return t1;
      return P.convertNativeToDart_AcceptStructuredClone(receiver.detail, true);
    },
    _initCustomEvent$4: function(receiver, typeArg, canBubbleArg, cancelableArg, detailArg) {
      return receiver.initCustomEvent(typeArg, canBubbleArg, cancelableArg, detailArg);
    },
    $isCustomEvent: true,
    "%": "CustomEvent"
  },
  DetailsElement: {
    "^": "HtmlElement;",
    open$1: function($receiver, arg0) {
      return $receiver.open.call$1(arg0);
    },
    "%": "HTMLDetailsElement"
  },
  DialogElement: {
    "^": "HtmlElement;",
    open$1: function($receiver, arg0) {
      return $receiver.open.call$1(arg0);
    },
    "%": "HTMLDialogElement"
  },
  Document: {
    "^": "Node;implementation=",
    get$window: function(receiver) {
      return W._convertNativeToDart_Window(receiver.defaultView);
    },
    createDocumentFragment$0: function(receiver) {
      return receiver.createDocumentFragment();
    },
    getElementById$1: function(receiver, elementId) {
      return receiver.getElementById(elementId);
    },
    importNode$2: function(receiver, node, deep) {
      return receiver.importNode(node, deep);
    },
    querySelector$1: function(receiver, selectors) {
      return receiver.querySelector(selectors);
    },
    get$onClick: function(receiver) {
      var t1 = new W._EventStream(receiver, C.EventStreamProvider_click._eventType, false);
      t1.$builtinTypeInfo = [null];
      return t1;
    },
    get$onError: function(receiver) {
      var t1 = new W._EventStream(receiver, C.EventStreamProvider_error0._eventType, false);
      t1.$builtinTypeInfo = [null];
      return t1;
    },
    onError$1: function($receiver, arg0) {
      return this.get$onError($receiver).call$1(arg0);
    },
    querySelectorAll$1: function(receiver, selectors) {
      return W._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
    },
    createElement$2: function(receiver, tagName, typeExtension) {
      return receiver.createElement(tagName, typeExtension);
    },
    createElement$1: function($receiver, tagName) {
      return this.createElement$2($receiver, tagName, null);
    },
    $isDocument: true,
    "%": "XMLDocument;Document"
  },
  DocumentFragment: {
    "^": "Node;",
    querySelectorAll$1: function(receiver, selectors) {
      return W._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
    },
    querySelector$1: function(receiver, selectors) {
      return receiver.querySelector(selectors);
    },
    "%": ";DocumentFragment"
  },
  DomError: {
    "^": "Interceptor;message=,name=",
    "%": "DOMError|FileError"
  },
  DomException: {
    "^": "Interceptor;message=",
    get$name: function(receiver) {
      var errorName = receiver.name;
      if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
        return "SecurityError";
      if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
        return "SyntaxError";
      return errorName;
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    $isDomException: true,
    "%": "DOMException"
  },
  DomImplementation: {
    "^": "Interceptor;",
    createHtmlDocument$1: function(receiver, title) {
      return receiver.createHTMLDocument(title);
    },
    "%": "DOMImplementation"
  },
  Element: {
    "^": "Node;className%,id=,tagName=,nextElementSibling=",
    get$attributes: function(receiver) {
      return new W._ElementAttributeMap(receiver);
    },
    querySelectorAll$1: function(receiver, selectors) {
      return W._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
    },
    get$classes: function(receiver) {
      return new W._ElementCssClassSet(receiver);
    },
    get$offset: function(receiver) {
      return P.Rectangle$(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.offsetLeft)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.offsetTop)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.offsetWidth)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.offsetHeight)), null);
    },
    attached$0: function(receiver) {
    },
    detached$0: function(receiver) {
    },
    attributeChanged$3: function(receiver, $name, oldValue, newValue) {
    },
    get$localName: function(receiver) {
      return receiver.localName;
    },
    get$namespaceUri: function(receiver) {
      return receiver.namespaceURI;
    },
    toString$0: function(receiver) {
      return receiver.localName;
    },
    matches$1: function(receiver, selectors) {
      if (!!receiver.matches)
        return receiver.matches(selectors);
      else if (!!receiver.webkitMatchesSelector)
        return receiver.webkitMatchesSelector(selectors);
      else if (!!receiver.mozMatchesSelector)
        return receiver.mozMatchesSelector(selectors);
      else if (!!receiver.msMatchesSelector)
        return receiver.msMatchesSelector(selectors);
      else if (!!receiver.oMatchesSelector)
        return receiver.oMatchesSelector(selectors);
      else
        throw H.wrapException(P.UnsupportedError$("Not supported on this platform"));
    },
    matchesWithAncestors$1: function(receiver, selectors) {
      var elem = receiver;
      do {
        if (J.matches$1$x(elem, selectors))
          return true;
        elem = elem.parentElement;
      } while (elem != null);
      return false;
    },
    createShadowRoot$0: function(receiver) {
      return (receiver.createShadowRoot || receiver.webkitCreateShadowRoot).call(receiver);
    },
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, t2, base, contextElement, fragment;
      if (treeSanitizer == null) {
        if (validator == null) {
          t1 = $.Element__defaultValidator;
          if (t1 == null) {
            t1 = [];
            t1.$builtinTypeInfo = [W.NodeValidator];
            t2 = new W.NodeValidatorBuilder(t1);
            t1.push(W._Html5NodeValidator$(null));
            t1.push(W._TemplatingNodeValidator$());
            $.Element__defaultValidator = t2;
            validator = t2;
          } else
            validator = t1;
        }
        t1 = $.Element__defaultSanitizer;
        if (t1 == null) {
          t1 = new W._ValidatingTreeSanitizer(validator);
          $.Element__defaultSanitizer = t1;
          treeSanitizer = t1;
        } else {
          t1.validator = validator;
          treeSanitizer = t1;
        }
      } else if (validator != null)
        throw H.wrapException(P.ArgumentError$("validator can only be passed if treeSanitizer is null"));
      if ($.Element__parseDocument == null) {
        t1 = document.implementation.createHTMLDocument("");
        $.Element__parseDocument = t1;
        $.Element__parseRange = t1.createRange();
        base = $.Element__parseDocument.createElement("base", null);
        J.set$href$x(base, document.baseURI);
        $.Element__parseDocument.head.appendChild(base);
      }
      t1 = $.Element__parseDocument;
      if (!!this.$isBodyElement)
        contextElement = t1.body;
      else {
        contextElement = t1.createElement(receiver.tagName, null);
        $.Element__parseDocument.body.appendChild(contextElement);
      }
      if ("createContextualFragment" in window.Range.prototype) {
        $.Element__parseRange.selectNodeContents(contextElement);
        fragment = $.Element__parseRange.createContextualFragment(html);
      } else {
        contextElement.innerHTML = html;
        fragment = $.Element__parseDocument.createDocumentFragment();
        for (; t1 = contextElement.firstChild, t1 != null;)
          fragment.appendChild(t1);
      }
      t1 = $.Element__parseDocument.body;
      if (contextElement == null ? t1 != null : contextElement !== t1)
        J.remove$0$ax(contextElement);
      treeSanitizer.sanitizeTree$1(fragment);
      document.adoptNode(fragment);
      return fragment;
    },
    getBoundingClientRect$0: function(receiver) {
      return receiver.getBoundingClientRect();
    },
    querySelector$1: function(receiver, selectors) {
      return receiver.querySelector(selectors);
    },
    get$onClick: function(receiver) {
      var t1 = new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_click._eventType, false);
      t1.$builtinTypeInfo = [null];
      return t1;
    },
    get$onError: function(receiver) {
      var t1 = new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_error0._eventType, false);
      t1.$builtinTypeInfo = [null];
      return t1;
    },
    onError$1: function($receiver, arg0) {
      return this.get$onError($receiver).call$1(arg0);
    },
    Element$created$0: function(receiver) {
    },
    $isElement: true,
    $isEventTarget: true,
    "%": ";Element"
  },
  EmbedElement: {
    "^": "HtmlElement;name=,src%,type=",
    "%": "HTMLEmbedElement"
  },
  ErrorEvent: {
    "^": "Event0;error=,message=",
    "%": "ErrorEvent"
  },
  Event0: {
    "^": "Interceptor;_selector},type=",
    get$currentTarget: function(receiver) {
      return W._convertNativeToDart_EventTarget(receiver.currentTarget);
    },
    get$target: function(receiver) {
      return W._convertNativeToDart_EventTarget(receiver.target);
    },
    $isEvent0: true,
    "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|DeviceMotionEvent|DeviceOrientationEvent|HashChangeEvent|IDBVersionChangeEvent|InstallEvent|InstallPhaseEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent;ClipboardEvent|Event|InputEvent"
  },
  EventTarget: {
    "^": "Interceptor;",
    addEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    dispatchEvent$1: function(receiver, $event) {
      return receiver.dispatchEvent($event);
    },
    removeEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    $isEventTarget: true,
    "%": ";EventTarget"
  },
  FieldSetElement: {
    "^": "HtmlElement;name=,type=",
    "%": "HTMLFieldSetElement"
  },
  File: {
    "^": "Blob;name=",
    $isFile: true,
    "%": "File"
  },
  FormElement: {
    "^": "HtmlElement;length=,method%,name=,target=",
    reset$0: [function(receiver) {
      return receiver.reset();
    }, "call$0", "get$reset", 0, 0, 13],
    "%": "HTMLFormElement"
  },
  HtmlCollection: {
    "^": "Interceptor_ListMixin_ImmutableListMixin;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: true,
    "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
  },
  HtmlDocument: {
    "^": "Document;",
    get$head: function(receiver) {
      return receiver.head;
    },
    "%": "HTMLDocument"
  },
  HttpRequest: {
    "^": "HttpRequestEventTarget;responseText=",
    open$5$async$password$user: function(receiver, method, url, async, password, user) {
      return receiver.open(method, url, async, user, password);
    },
    open$3$async: function($receiver, method, url, async) {
      return $receiver.open(method, url, async);
    },
    send$1: function(receiver, data) {
      return receiver.send(data);
    },
    $isHttpRequest: true,
    "%": "XMLHttpRequest"
  },
  HttpRequestEventTarget: {
    "^": "EventTarget;",
    get$onError: function(receiver) {
      var t1 = new W._EventStream(receiver, C.EventStreamProvider_error._eventType, false);
      t1.$builtinTypeInfo = [null];
      return t1;
    },
    onError$1: function($receiver, arg0) {
      return this.get$onError($receiver).call$1(arg0);
    },
    "%": ";XMLHttpRequestEventTarget"
  },
  IFrameElement: {
    "^": "HtmlElement;name=,src%",
    "%": "HTMLIFrameElement"
  },
  ImageData: {
    "^": "Interceptor;data=",
    $isImageData: true,
    "%": "ImageData"
  },
  ImageElement: {
    "^": "HtmlElement;src%",
    "%": "HTMLImageElement"
  },
  InputElement: {
    "^": "HtmlElement;defaultValue=,name=,pattern=,src%,type=,value%,entries:webkitEntries=",
    accept$1: function($receiver, arg0) {
      return $receiver.accept.call$1(arg0);
    },
    $isElement: true,
    $isEventTarget: true,
    $isNode: true,
    "%": "HTMLInputElement"
  },
  KeygenElement: {
    "^": "HtmlElement;name=,type=",
    "%": "HTMLKeygenElement"
  },
  LIElement: {
    "^": "HtmlElement;value%",
    "%": "HTMLLIElement"
  },
  LinkElement: {
    "^": "HtmlElement;href%,type=",
    "%": "HTMLLinkElement"
  },
  Location: {
    "^": "Interceptor;hostname=,href%,port=,protocol=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "Location"
  },
  MapElement: {
    "^": "HtmlElement;name=",
    "%": "HTMLMapElement"
  },
  MediaElement: {
    "^": "HtmlElement;duration=,error=,src%",
    "%": "HTMLAudioElement|HTMLMediaElement|HTMLVideoElement"
  },
  MediaKeyEvent: {
    "^": "Event0;message=",
    "%": "MediaKeyEvent"
  },
  MediaKeyMessageEvent: {
    "^": "Event0;message=",
    "%": "MediaKeyMessageEvent"
  },
  MediaStream: {
    "^": "EventTarget;id=,label=",
    stop$0: [function(receiver) {
      return receiver.stop();
    }, "call$0", "get$stop", 0, 0, 13],
    "%": "MediaStream"
  },
  MessageEvent: {
    "^": "Event0;",
    get$data: function(receiver) {
      return P.convertNativeToDart_AcceptStructuredClone(receiver.data, true);
    },
    "%": "MessageEvent"
  },
  MetaElement: {
    "^": "HtmlElement;content=,name=",
    "%": "HTMLMetaElement"
  },
  MeterElement: {
    "^": "HtmlElement;value%",
    "%": "HTMLMeterElement"
  },
  MidiConnectionEvent: {
    "^": "Event0;port=",
    "%": "MIDIConnectionEvent"
  },
  MidiMessageEvent: {
    "^": "Event0;data=",
    "%": "MIDIMessageEvent"
  },
  MidiOutput: {
    "^": "MidiPort;",
    send$2: function(receiver, data, timestamp) {
      return receiver.send(data, timestamp);
    },
    send$1: function($receiver, data) {
      return $receiver.send(data);
    },
    "%": "MIDIOutput"
  },
  MidiPort: {
    "^": "EventTarget;id=,name=,type=",
    "%": "MIDIInput;MIDIPort"
  },
  MouseEvent: {
    "^": "UIEvent;",
    get$offset: function(receiver) {
      var t1, target, point;
      if (!!receiver.offsetX) {
        t1 = new P.Point(receiver.offsetX, receiver.offsetY);
        t1.$builtinTypeInfo = [null];
        return t1;
      } else {
        if (!J.getInterceptor(W._convertNativeToDart_EventTarget(receiver.target)).$isElement)
          throw H.wrapException(P.UnsupportedError$("offsetX is only supported on elements"));
        target = W._convertNativeToDart_EventTarget(receiver.target);
        t1 = new P.Point(receiver.clientX, receiver.clientY);
        t1.$builtinTypeInfo = [null];
        point = t1.$sub(0, J.get$topLeft$x(J.getBoundingClientRect$0$x(target)));
        t1 = new P.Point(J.toInt$0$n(point.x), J.toInt$0$n(point.y));
        t1.$builtinTypeInfo = [null];
        return t1;
      }
    },
    $isMouseEvent: true,
    "%": "DragEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|WheelEvent"
  },
  MutationObserver: {
    "^": "Interceptor;",
    observe$8$attributeFilter$attributeOldValue$attributes$characterData$characterDataOldValue$childList$subtree: function(receiver, target, attributeFilter, attributeOldValue, attributes, characterData, characterDataOldValue, childList, subtree) {
      var parsedOptions, t1;
      parsedOptions = {};
      t1 = new W.MutationObserver_observe_override(parsedOptions);
      t1.call$2("childList", childList);
      t1.call$2("attributes", attributes);
      t1.call$2("characterData", characterData);
      t1.call$2("subtree", subtree);
      t1.call$2("attributeOldValue", attributeOldValue);
      t1.call$2("characterDataOldValue", characterDataOldValue);
      t1.call$2("attributeFilter", attributeFilter);
      receiver.observe(target, parsedOptions);
    },
    observe$3$attributeFilter$attributes: function($receiver, target, attributeFilter, attributes) {
      return this.observe$8$attributeFilter$attributeOldValue$attributes$characterData$characterDataOldValue$childList$subtree($receiver, target, attributeFilter, null, attributes, null, null, null, null);
    },
    "%": "MutationObserver|WebKitMutationObserver"
  },
  MutationRecord: {
    "^": "Interceptor;target=,type=",
    "%": "MutationRecord"
  },
  NavigatorUserMediaError: {
    "^": "Interceptor;message=,name=",
    "%": "NavigatorUserMediaError"
  },
  Node: {
    "^": "EventTarget;baseUri:baseURI=,firstChild=,lastChild=,nextNode:nextSibling=,ownerDocument=,parent:parentElement=,parentNode=,text:textContent%",
    get$nodes: function(receiver) {
      return new W._ChildNodeListLazy(receiver);
    },
    remove$0: function(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver);
    },
    _clearChildren$0: function(receiver) {
      var t1;
      for (; t1 = receiver.firstChild, t1 != null;)
        receiver.removeChild(t1);
    },
    toString$0: function(receiver) {
      var t1 = receiver.nodeValue;
      return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
    },
    append$1: function(receiver, newChild) {
      return receiver.appendChild(newChild);
    },
    contains$1: function(receiver, other) {
      return receiver.contains(other);
    },
    insertBefore$2: function(receiver, newChild, refChild) {
      return receiver.insertBefore(newChild, refChild);
    },
    $isNode: true,
    "%": "DocumentType|Notation;Node"
  },
  NodeList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin0;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: true,
    "%": "NodeList|RadioNodeList"
  },
  OListElement: {
    "^": "HtmlElement;start=,type=",
    start$0: function($receiver) {
      return $receiver.start.call$0();
    },
    "%": "HTMLOListElement"
  },
  ObjectElement: {
    "^": "HtmlElement;data%,name=,type=",
    "%": "HTMLObjectElement"
  },
  OptGroupElement: {
    "^": "HtmlElement;label=",
    "%": "HTMLOptGroupElement"
  },
  OptionElement: {
    "^": "HtmlElement;index=,label=,value%",
    "%": "HTMLOptionElement"
  },
  OutputElement: {
    "^": "HtmlElement;defaultValue=,name=,type=,value%",
    "%": "HTMLOutputElement"
  },
  ParamElement: {
    "^": "HtmlElement;name=,value%",
    "%": "HTMLParamElement"
  },
  PositionError: {
    "^": "Interceptor;message=",
    "%": "PositionError"
  },
  ProcessingInstruction: {
    "^": "CharacterData;target=",
    "%": "ProcessingInstruction"
  },
  ProgressElement: {
    "^": "HtmlElement;value%",
    "%": "HTMLProgressElement"
  },
  ProgressEvent: {
    "^": "Event0;",
    $isProgressEvent: true,
    "%": "ProgressEvent|ResourceProgressEvent|XMLHttpRequestProgressEvent"
  },
  Range: {
    "^": "Interceptor;",
    getBoundingClientRect$0: function(receiver) {
      return receiver.getBoundingClientRect();
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "Range"
  },
  ScriptElement: {
    "^": "HtmlElement;src%,type=",
    "%": "HTMLScriptElement"
  },
  SelectElement: {
    "^": "HtmlElement;length%,name=,type=,value%",
    "%": "HTMLSelectElement"
  },
  ShadowRoot: {
    "^": "DocumentFragment;",
    getElementById$1: function(receiver, elementId) {
      return receiver.getElementById(elementId);
    },
    $isShadowRoot: true,
    "%": "ShadowRoot"
  },
  SourceElement: {
    "^": "HtmlElement;src%,type=",
    "%": "HTMLSourceElement"
  },
  SpeechRecognitionError: {
    "^": "Event0;error=,message=",
    "%": "SpeechRecognitionError"
  },
  SpeechSynthesisEvent: {
    "^": "Event0;name=",
    "%": "SpeechSynthesisEvent"
  },
  StorageEvent: {
    "^": "Event0;key=",
    "%": "StorageEvent"
  },
  StyleElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLStyleElement"
  },
  TableColElement: {
    "^": "HtmlElement;span=",
    "%": "HTMLTableColElement"
  },
  TemplateElement: {
    "^": "HtmlElement;content=",
    $isTemplateElement: true,
    "%": ";HTMLTemplateElement;TemplateElement_Polymer|TemplateElement_Polymer_Observable|AutoBindingElement"
  },
  Text: {
    "^": "CharacterData;",
    $isText: true,
    "%": "CDATASection|Text"
  },
  TextAreaElement: {
    "^": "HtmlElement;defaultValue=,name=,type=,value%",
    "%": "HTMLTextAreaElement"
  },
  TextEvent: {
    "^": "UIEvent;data=",
    "%": "TextEvent"
  },
  TrackElement: {
    "^": "HtmlElement;defaultValue:default=,kind=,label=,src%",
    "%": "HTMLTrackElement"
  },
  UIEvent: {
    "^": "Event0;",
    "%": "FocusEvent|KeyboardEvent|SVGZoomEvent|TouchEvent;UIEvent"
  },
  Window: {
    "^": "EventTarget;name=",
    _requestAnimationFrame$1: function(receiver, callback) {
      return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
    },
    _ensureRequestAnimationFrame$0: function(receiver) {
      if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
        return;
      (function($this) {
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
          $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
          $this.cancelAnimationFrame = $this[vendors[i] + 'CancelAnimationFrame'] || $this[vendors[i] + 'CancelRequestAnimationFrame'];
        }
        if ($this.requestAnimationFrame && $this.cancelAnimationFrame)
          return;
        $this.requestAnimationFrame = function(callback) {
          return window.setTimeout(function() {
            callback(Date.now());
          }, 16);
        };
        $this.cancelAnimationFrame = function(id) {
          clearTimeout(id);
        };
      })(receiver);
    },
    get$parent: function(receiver) {
      return W._convertNativeToDart_Window(receiver.parent);
    },
    get$window: function(receiver) {
      return W._convertNativeToDart_Window(receiver.window);
    },
    close$0: function(receiver) {
      return receiver.close();
    },
    stop$0: [function(receiver) {
      return receiver.stop();
    }, "call$0", "get$stop", 0, 0, 13],
    toString$0: function(receiver) {
      return receiver.toString();
    },
    get$onClick: function(receiver) {
      var t1 = new W._EventStream(receiver, C.EventStreamProvider_click._eventType, false);
      t1.$builtinTypeInfo = [null];
      return t1;
    },
    get$onError: function(receiver) {
      var t1 = new W._EventStream(receiver, C.EventStreamProvider_error0._eventType, false);
      t1.$builtinTypeInfo = [null];
      return t1;
    },
    onError$1: function($receiver, arg0) {
      return this.get$onError($receiver).call$1(arg0);
    },
    $isWindow: true,
    $isEventTarget: true,
    "%": "DOMWindow|Window"
  },
  _Attr: {
    "^": "Node;name=,value%",
    "%": "Attr"
  },
  _ClientRect: {
    "^": "Interceptor;bottom=,height=,left=,right=,top=,width=",
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      t2 = receiver.left;
      t3 = t1.get$left(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.top;
        t3 = t1.get$top(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.width;
          t3 = t1.get$width(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = receiver.height;
            t1 = t1.get$height(other);
            t1 = t2 == null ? t1 == null : t2 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      var t1, t2, t3, t4, hash;
      t1 = J.get$hashCode$(receiver.left);
      t2 = J.get$hashCode$(receiver.top);
      t3 = J.get$hashCode$(receiver.width);
      t4 = J.get$hashCode$(receiver.height);
      t4 = W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4);
      hash = 536870911 & t4 + ((67108863 & t4) << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$topLeft: function(receiver) {
      var t1 = new P.Point(receiver.left, receiver.top);
      t1.$builtinTypeInfo = [null];
      return t1;
    },
    $isRectangle: true,
    $asRectangle: function() {
      return [null];
    },
    "%": "ClientRect|DOMRect"
  },
  _HTMLFrameSetElement: {
    "^": "HtmlElement;",
    $isEventTarget: true,
    "%": "HTMLFrameSetElement"
  },
  _NamedNodeMap: {
    "^": "Interceptor_ListMixin_ImmutableListMixin1;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: true,
    "%": "MozNamedAttrMap|NamedNodeMap"
  },
  Interceptor_CssStyleDeclarationBase: {
    "^": "Interceptor+CssStyleDeclarationBase;"
  },
  CssStyleDeclarationBase: {
    "^": "Object;",
    get$clear: function(receiver) {
      return this.getPropertyValue$1(receiver, "clear");
    },
    clear$0: function($receiver) {
      return this.get$clear($receiver).call$0();
    },
    get$content: function(receiver) {
      return this.getPropertyValue$1(receiver, "content");
    },
    get$left: function(receiver) {
      return this.getPropertyValue$1(receiver, "left");
    },
    get$right: function(receiver) {
      return this.getPropertyValue$1(receiver, "right");
    },
    get$src: function(receiver) {
      return this.getPropertyValue$1(receiver, "src");
    },
    set$src: function(receiver, value) {
      this.setProperty$3(receiver, "src", value, "");
    }
  },
  _FrozenElementList: {
    "^": "ListBase;_nodeList,_elementList",
    get$length: function(_) {
      return this._nodeList.length;
    },
    $index: function(_, index) {
      var t1 = this._nodeList;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
    },
    get$first: function(_) {
      return C.NodeList_methods.get$first(this._nodeList);
    },
    get$last: function(_) {
      return C.NodeList_methods.get$last(this._nodeList);
    },
    get$classes: function(_) {
      return W._MultiElementCssClassSet$(this._elementList);
    },
    get$onClick: function(_) {
      var t1 = new W._ElementListEventStreamImpl(this, false, C.EventStreamProvider_click._eventType);
      t1.$builtinTypeInfo = [null];
      return t1;
    },
    get$onError: function(_) {
      var t1 = new W._ElementListEventStreamImpl(this, false, C.EventStreamProvider_error0._eventType);
      t1.$builtinTypeInfo = [null];
      return t1;
    },
    onError$1: function($receiver, arg0) {
      return this.get$onError(this).call$1(arg0);
    },
    _html$_FrozenElementList$_wrap$1: function(_nodeList, $T) {
      var t1 = C.NodeList_methods.where$1(this._nodeList, new W._FrozenElementList$_wrap_closure());
      this._elementList = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null,
    static: {_FrozenElementList$_wrap: function(_nodeList, $T) {
        var t1 = new W._FrozenElementList(_nodeList, null);
        t1.$builtinTypeInfo = [$T];
        t1._html$_FrozenElementList$_wrap$1(_nodeList, $T);
        return t1;
      }}
  },
  _FrozenElementList$_wrap_closure: {
    "^": "Closure:54;",
    call$1: function(e) {
      return !!J.getInterceptor(e).$isElement;
    },
    $isFunction: true
  },
  Element_Element$html_closure: {
    "^": "Closure:54;",
    call$1: function(e) {
      return !!J.getInterceptor(e).$isElement;
    },
    $isFunction: true
  },
  Entry: {
    "^": "Interceptor;"
  },
  Interceptor_ListMixin: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin: {
    "^": "Interceptor_ListMixin+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  HttpRequest_getString_closure: {
    "^": "Closure:54;",
    call$1: [function(xhr) {
      return J.get$responseText$x(xhr);
    }, "call$1", null, 2, 0, null, 140, [], "call"],
    $isFunction: true
  },
  HttpRequest_request_closure0: {
    "^": "Closure:94;xhr_0",
    call$2: function(header, value) {
      this.xhr_0.setRequestHeader(header, value);
    },
    $isFunction: true
  },
  HttpRequest_request_closure: {
    "^": "Closure:54;completer_1,xhr_2",
    call$1: [function(e) {
      var t1, t2, t3;
      t1 = this.xhr_2;
      t2 = t1.status;
      if (typeof t2 !== "number")
        return t2.$ge();
      t2 = t2 >= 200 && t2 < 300 || t2 === 0 || t2 === 304;
      t3 = this.completer_1;
      if (t2) {
        t2 = t3.future;
        if (t2._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t2._asyncComplete$1(t1);
      } else
        t3.completeError$1(e);
    }, "call$1", null, 2, 0, null, 2, [], "call"],
    $isFunction: true
  },
  MutationObserver_observe_override: {
    "^": "Closure:94;parsedOptions_0",
    call$2: function(key, value) {
      if (value != null)
        this.parsedOptions_0[key] = value;
    },
    $isFunction: true
  },
  _ChildNodeListLazy: {
    "^": "ListBase;_this",
    get$first: function(_) {
      var result = this._this.firstChild;
      if (result == null)
        throw H.wrapException(P.StateError$("No elements"));
      return result;
    },
    get$last: function(_) {
      var result = this._this.lastChild;
      if (result == null)
        throw H.wrapException(P.StateError$("No elements"));
      return result;
    },
    add$1: function(_, value) {
      this._this.appendChild(value);
    },
    addAll$1: function(_, iterable) {
      var t1, t2, len, i;
      t1 = J.getInterceptor(iterable);
      if (!!t1.$is_ChildNodeListLazy) {
        t1 = iterable._this;
        t2 = this._this;
        if (t1 !== t2)
          for (len = t1.childNodes.length, i = 0; i < len; ++i)
            t2.appendChild(t1.firstChild);
        return;
      }
      for (t1 = t1.get$iterator(iterable), t2 = this._this; t1.moveNext$0() === true;)
        t2.appendChild(t1.get$current());
    },
    remove$1: function(_, object) {
      var t1;
      if (!J.getInterceptor(object).$isNode)
        return false;
      t1 = this._this;
      if (t1 !== object.parentNode)
        return false;
      t1.removeChild(object);
      return true;
    },
    clear$0: function(_) {
      J._clearChildren$0$x(this._this);
    },
    $indexSet: function(_, index, value) {
      var t1, t2;
      t1 = this._this;
      t2 = t1.childNodes;
      if (index >>> 0 !== index || index >= t2.length)
        return H.ioore(t2, index);
      t1.replaceChild(value, t2[index]);
    },
    get$iterator: function(_) {
      return C.NodeList_methods.get$iterator(this._this.childNodes);
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on Node list"));
    },
    get$length: function(_) {
      return this._this.childNodes.length;
    },
    set$length: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
    },
    $index: function(_, index) {
      var t1 = this._this.childNodes;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $is_ChildNodeListLazy: true,
    $asListBase: function() {
      return [W.Node];
    },
    $asObject_ListMixin: function() {
      return [W.Node];
    },
    $asList: function() {
      return [W.Node];
    },
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin0: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin0: {
    "^": "Interceptor_ListMixin0+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin1: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin1: {
    "^": "Interceptor_ListMixin1+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  _AttributeMap: {
    "^": "Object;",
    addAll$1: function(_, other) {
      J.forEach$1$ax(other, new W._AttributeMap_addAll_closure(this));
    },
    clear$0: function(_) {
      var t1, t2;
      t1 = this.get$keys();
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      for (; t2.moveNext$0();)
        this.remove$1(0, t2._current);
    },
    forEach$1: function(_, f) {
      var t1, t2, key;
      t1 = this.get$keys();
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      for (; t2.moveNext$0();) {
        key = t2._current;
        f.call$2(key, this.$index(0, key));
      }
    },
    get$keys: function() {
      var attributes, keys, len, i;
      attributes = this._html$_element.attributes;
      keys = [];
      keys.$builtinTypeInfo = [P.String];
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        if (this._matches$1(attributes[i])) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          keys.push(J.get$name$x(attributes[i]));
        }
      }
      return keys;
    },
    get$values: function(_) {
      var attributes, values, len, i;
      attributes = this._html$_element.attributes;
      values = [];
      values.$builtinTypeInfo = [P.String];
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        if (this._matches$1(attributes[i])) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          values.push(J.get$value$x(attributes[i]));
        }
      }
      return values;
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty: function(_) {
      return this.get$length(this) !== 0;
    },
    $isMap: true,
    $asMap: function() {
      return [P.String, P.String];
    }
  },
  _AttributeMap_addAll_closure: {
    "^": "Closure:94;this_0",
    call$2: [function(k, v) {
      this.this_0.$indexSet(0, k, v);
    }, "call$2", null, 4, 0, null, 121, [], 71, [], "call"],
    $isFunction: true
  },
  _ElementAttributeMap: {
    "^": "_AttributeMap;_html$_element",
    containsKey$1: function(key) {
      return this._html$_element.hasAttribute(key);
    },
    $index: function(_, key) {
      return this._html$_element.getAttribute(key);
    },
    $indexSet: function(_, key, value) {
      this._html$_element.setAttribute(key, value);
    },
    remove$1: function(_, key) {
      var t1, value;
      t1 = this._html$_element;
      value = t1.getAttribute(key);
      t1.removeAttribute(key);
      return value;
    },
    get$length: function(_) {
      return this.get$keys().length;
    },
    _matches$1: function(node) {
      return node.namespaceURI == null;
    }
  },
  _MultiElementCssClassSet: {
    "^": "CssClassSetImpl;_elementIterable,_elementCssClassSetIterable",
    readClasses$0: function() {
      var s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
      this._elementCssClassSetIterable.forEach$1(0, new W._MultiElementCssClassSet_readClasses_closure(s));
      return s;
    },
    writeClasses$1: function(s) {
      var classes, t1, t2;
      classes = C.JSArray_methods.join$1(P.List_List$from(s, true, null), " ");
      t1 = this._elementIterable;
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      for (; t2.moveNext$0();)
        J.set$className$x(t2._current, classes);
    },
    modify$1: function(f) {
      this._elementCssClassSetIterable.forEach$1(0, new W._MultiElementCssClassSet_modify_closure(f));
    },
    toggle$2: function(value, shouldAdd) {
      return this._modifyWithReturnValue$1(new W._MultiElementCssClassSet_toggle_closure(value, shouldAdd));
    },
    toggle$1: function(value) {
      return this.toggle$2(value, null);
    },
    remove$1: function(_, value) {
      return this._modifyWithReturnValue$1(new W._MultiElementCssClassSet_remove_closure(value));
    },
    _modifyWithReturnValue$1: function(f) {
      return this._elementCssClassSetIterable.fold$2(0, false, new W._MultiElementCssClassSet__modifyWithReturnValue_closure(f));
    },
    _MultiElementCssClassSet$1: function(_elementIterable) {
      var t1 = new H.MappedListIterable(P.List_List$from(this._elementIterable, true, null), new W._MultiElementCssClassSet_closure());
      t1.$builtinTypeInfo = [null, null];
      this._elementCssClassSetIterable = t1;
    },
    static: {_MultiElementCssClassSet$: function(_elementIterable) {
        var t1 = new W._MultiElementCssClassSet(_elementIterable, null);
        t1._MultiElementCssClassSet$1(_elementIterable);
        return t1;
      }}
  },
  _MultiElementCssClassSet_closure: {
    "^": "Closure:54;",
    call$1: [function(e) {
      return new W._ElementCssClassSet(e);
    }, "call$1", null, 2, 0, null, 2, [], "call"],
    $isFunction: true
  },
  _MultiElementCssClassSet_readClasses_closure: {
    "^": "Closure:54;s_0",
    call$1: function(e) {
      return this.s_0.addAll$1(0, e.readClasses$0());
    },
    $isFunction: true
  },
  _MultiElementCssClassSet_modify_closure: {
    "^": "Closure:54;f_0",
    call$1: function(e) {
      return e.modify$1(this.f_0);
    },
    $isFunction: true
  },
  _MultiElementCssClassSet_toggle_closure: {
    "^": "Closure:54;value_0,shouldAdd_1",
    call$1: function(e) {
      return e.toggle$2(this.value_0, this.shouldAdd_1);
    },
    $isFunction: true
  },
  _MultiElementCssClassSet_remove_closure: {
    "^": "Closure:54;value_0",
    call$1: function(e) {
      return J.remove$1$ax(e, this.value_0);
    },
    $isFunction: true
  },
  _MultiElementCssClassSet__modifyWithReturnValue_closure: {
    "^": "Closure:94;f_0",
    call$2: function(prevValue, element) {
      return this.f_0.call$1(element) === true || prevValue === true;
    },
    $isFunction: true
  },
  _ElementCssClassSet: {
    "^": "CssClassSetImpl;_html$_element",
    readClasses$0: function() {
      var s, t1, trimmed;
      s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
      for (t1 = J.get$iterator$ax(J.split$1$s(J.get$className$x(this._html$_element), " ")); t1.moveNext$0() === true;) {
        trimmed = J.trim$0$s(t1.get$current());
        if (J.get$isEmpty$asx(trimmed) !== true)
          s.add$1(0, trimmed);
      }
      return s;
    },
    writeClasses$1: function(s) {
      P.List_List$from(s, true, null);
      J.set$className$x(this._html$_element, s.join$1(0, " "));
    }
  },
  EventStreamProvider: {
    "^": "Object;_eventType"
  },
  _EventStream: {
    "^": "Stream;_html$_target,_eventType,_useCapture",
    listen$4$cancelOnError$onDone$onError: function(_, onData, cancelOnError, onDone, onError) {
      var t1 = new W._EventStreamSubscription(0, this._html$_target, this._eventType, W._wrapZone(onData), this._useCapture);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      t1._tryResume$0();
      return t1;
    },
    listen$1: function($receiver, onData) {
      return this.listen$4$cancelOnError$onDone$onError($receiver, onData, null, null, null);
    },
    listen$3$onDone$onError: function($receiver, onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError($receiver, onData, null, onDone, onError);
    }
  },
  _ElementEventStreamImpl: {
    "^": "_EventStream;_html$_target,_eventType,_useCapture",
    matches$1: function(_, selector) {
      var t1, t2;
      t1 = new P._WhereStream(new W._ElementEventStreamImpl_matches_closure(selector), this);
      t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "Stream", 0)];
      t2 = new P._MapStream(new W._ElementEventStreamImpl_matches_closure0(selector), t1);
      t2.$builtinTypeInfo = [H.getRuntimeTypeArgument(t1, "Stream", 0), null];
      return t2;
    },
    $isStream: true
  },
  _ElementEventStreamImpl_matches_closure: {
    "^": "Closure:54;selector_0",
    call$1: function($event) {
      return J.matchesWithAncestors$1$x(J.get$target$x($event), this.selector_0);
    },
    $isFunction: true
  },
  _ElementEventStreamImpl_matches_closure0: {
    "^": "Closure:54;selector_1",
    call$1: [function(e) {
      J.set$_selector$x(e, this.selector_1);
      return e;
    }, "call$1", null, 2, 0, null, 2, [], "call"],
    $isFunction: true
  },
  _ElementListEventStreamImpl: {
    "^": "Stream;_targetList,_useCapture,_eventType",
    matches$1: function(_, selector) {
      var t1, t2;
      t1 = new P._WhereStream(new W._ElementListEventStreamImpl_matches_closure(selector), this);
      t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(this, "Stream", 0)];
      t2 = new P._MapStream(new W._ElementListEventStreamImpl_matches_closure0(selector), t1);
      t2.$builtinTypeInfo = [H.getRuntimeTypeArgument(t1, "Stream", 0), null];
      return t2;
    },
    listen$4$cancelOnError$onDone$onError: function(_, onData, cancelOnError, onDone, onError) {
      var pool, t1, t2, t3, t4;
      pool = new W._StreamPool(null, P.LinkedHashMap_LinkedHashMap(null, null, null, [P.Stream, null], [P.StreamSubscription, null]));
      pool.$builtinTypeInfo = [null];
      pool._html$_StreamPool$broadcast$0(null);
      for (t1 = this._targetList, t1 = t1.get$iterator(t1), t2 = this._eventType, t3 = this._useCapture; t1.moveNext$0();) {
        t4 = new W._EventStream(t1._current, t2, t3);
        t4.$builtinTypeInfo = [null];
        pool.add$1(0, t4);
      }
      t1 = pool._html$_controller;
      t1.toString;
      t2 = new P._BroadcastStream(t1);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      return t2.listen$4$cancelOnError$onDone$onError(0, onData, cancelOnError, onDone, onError);
    },
    listen$1: function($receiver, onData) {
      return this.listen$4$cancelOnError$onDone$onError($receiver, onData, null, null, null);
    },
    listen$3$onDone$onError: function($receiver, onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError($receiver, onData, null, onDone, onError);
    },
    $isStream: true
  },
  _ElementListEventStreamImpl_matches_closure: {
    "^": "Closure:54;selector_0",
    call$1: function($event) {
      return J.matchesWithAncestors$1$x(J.get$target$x($event), this.selector_0);
    },
    $isFunction: true
  },
  _ElementListEventStreamImpl_matches_closure0: {
    "^": "Closure:54;selector_1",
    call$1: [function(e) {
      J.set$_selector$x(e, this.selector_1);
      return e;
    }, "call$1", null, 2, 0, null, 2, [], "call"],
    $isFunction: true
  },
  _EventStreamSubscription: {
    "^": "StreamSubscription;_pauseCount,_html$_target,_eventType,_html$_onData,_useCapture",
    cancel$0: function() {
      if (this._html$_target == null)
        return;
      this._unlisten$0();
      this._html$_target = null;
      this._html$_onData = null;
      return;
    },
    onError$1: function(_, handleError) {
    },
    pause$1: function(_, resumeSignal) {
      if (this._html$_target == null)
        return;
      ++this._pauseCount;
      this._unlisten$0();
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    get$isPaused: function() {
      return this._pauseCount > 0;
    },
    resume$0: function() {
      if (this._html$_target == null || this._pauseCount <= 0)
        return;
      --this._pauseCount;
      this._tryResume$0();
    },
    _tryResume$0: function() {
      var t1 = this._html$_onData;
      if (t1 != null && this._pauseCount <= 0)
        J.addEventListener$3$x(this._html$_target, this._eventType, t1, this._useCapture);
    },
    _unlisten$0: function() {
      var t1 = this._html$_onData;
      if (t1 != null)
        J.removeEventListener$3$x(this._html$_target, this._eventType, t1, this._useCapture);
    }
  },
  _StreamPool: {
    "^": "Object;_html$_controller,_subscriptions",
    add$1: function(_, stream) {
      var t1, t2;
      t1 = this._subscriptions;
      if (t1.containsKey$1(stream))
        return;
      t2 = this._html$_controller;
      t1.$indexSet(0, stream, J.listen$3$onDone$onError$x(stream, t2.get$add(t2), new W._StreamPool_add_closure(this, stream), this._html$_controller.get$addError()));
    },
    remove$1: function(_, stream) {
      var subscription = this._subscriptions.remove$1(0, stream);
      if (subscription != null)
        subscription.cancel$0();
    },
    close$0: [function(_) {
      var t1, t2, t3;
      t1 = this._subscriptions;
      t2 = t1.get$values(t1);
      t3 = new H.MappedIterator(null, J.get$iterator$ax(t2._iterable), t2._f);
      t3.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)];
      for (; t3.moveNext$0();)
        t3._current.cancel$0();
      t1.clear$0(0);
      this._html$_controller.close$0(0);
    }, "call$0", "get$close", 0, 0, 13],
    _html$_StreamPool$broadcast$0: function($T) {
      this._html$_controller = P.StreamController_StreamController$broadcast(this.get$close(this), null, true, $T);
    }
  },
  _StreamPool_add_closure: {
    "^": "Closure:14;this_0,stream_1",
    call$0: [function() {
      return this.this_0.remove$1(0, this.stream_1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Html5NodeValidator: {
    "^": "Object;uriPolicy<",
    allowsElement$1: function(element) {
      return $.get$_Html5NodeValidator__allowedElements().contains$1(0, J.get$tagName$x(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var tagName, t1, validator;
      tagName = J.get$tagName$x(element);
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      validator = t1.$index(0, H.S(tagName) + "::" + H.S(attributeName));
      if (validator == null)
        validator = t1.$index(0, "*::" + H.S(attributeName));
      if (validator == null)
        return false;
      return validator.call$4(element, attributeName, value, this);
    },
    _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
      var t1, t2;
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      if (t1.get$isEmpty(t1)) {
        t2 = new H.ListIterator(C.List_1GN, 261, 0, null);
        t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(C.List_1GN, 0)];
        for (; t2.moveNext$0();)
          t1.$indexSet(0, t2._current, W._Html5NodeValidator__standardAttributeValidator$closure());
        t2 = new H.ListIterator(C.List_yrN, 12, 0, null);
        t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(C.List_yrN, 0)];
        for (; t2.moveNext$0();)
          t1.$indexSet(0, t2._current, W._Html5NodeValidator__uriAttributeValidator$closure());
      }
    },
    $isNodeValidator: true,
    static: {"^": "_Html5NodeValidator__allowedElements,_Html5NodeValidator__standardAttributes,_Html5NodeValidator__uriAttributes,_Html5NodeValidator__attributeValidators", _Html5NodeValidator$: function(uriPolicy) {
        var t1 = new W._SameOriginUriPolicy(W.AnchorElement_AnchorElement(null), window.location);
        t1 = new W._Html5NodeValidator(t1);
        t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
        return t1;
      }, _Html5NodeValidator__standardAttributeValidator: [function(element, attributeName, value, context) {
        return true;
      }, "call$4", "_Html5NodeValidator__standardAttributeValidator$closure", 8, 0, 56, 57, [], 58, [], 19, [], 59, []], _Html5NodeValidator__uriAttributeValidator: [function(element, attributeName, value, context) {
        return context.get$uriPolicy().allowsUri$1(value);
      }, "call$4", "_Html5NodeValidator__uriAttributeValidator$closure", 8, 0, 56, 57, [], 58, [], 19, [], 59, []]}
  },
  ImmutableListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      var t1 = new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
      t1.$builtinTypeInfo = [H.getRuntimeTypeArgument(receiver, "ImmutableListMixin", 0)];
      return t1;
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    addAll$1: function(receiver, iterable) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    remove$1: function(receiver, object) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on immutable List."));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  NodeValidatorBuilder: {
    "^": "Object;_validators",
    add$1: function(_, validator) {
      this._validators.push(validator);
    },
    allowsElement$1: function(element) {
      return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
    },
    $isNodeValidator: true
  },
  NodeValidatorBuilder_allowsElement_closure: {
    "^": "Closure:54;element_0",
    call$1: function(v) {
      return v.allowsElement$1(this.element_0);
    },
    $isFunction: true
  },
  NodeValidatorBuilder_allowsAttribute_closure: {
    "^": "Closure:54;element_0,attributeName_1,value_2",
    call$1: function(v) {
      return v.allowsAttribute$3(this.element_0, this.attributeName_1, this.value_2);
    },
    $isFunction: true
  },
  _SimpleNodeValidator: {
    "^": "Object;allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy<",
    allowsElement$1: function(element) {
      return this.allowedElements.contains$1(0, J.get$tagName$x(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var tagName, t1;
      tagName = J.get$tagName$x(element);
      t1 = this.allowedUriAttributes;
      if (t1.contains$1(0, H.S(tagName) + "::" + H.S(attributeName)))
        return this.uriPolicy.allowsUri$1(value);
      else if (t1.contains$1(0, "*::" + H.S(attributeName)))
        return this.uriPolicy.allowsUri$1(value);
      else {
        t1 = this.allowedAttributes;
        if (t1.contains$1(0, H.S(tagName) + "::" + H.S(attributeName)))
          return true;
        else if (t1.contains$1(0, "*::" + H.S(attributeName)))
          return true;
        else if (t1.contains$1(0, H.S(tagName) + "::*"))
          return true;
        else if (t1.contains$1(0, "*::*"))
          return true;
      }
      return false;
    },
    $isNodeValidator: true,
    static: {_SimpleNodeValidator$: function(uriPolicy, allowedAttributes, allowedElements, allowedUriAttributes) {
        var t1, t2, t3;
        t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t1.addAll$1(0, allowedElements);
        t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t2.addAll$1(0, allowedAttributes);
        if (allowedUriAttributes != null) {
          t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
          t3.addAll$1(0, allowedUriAttributes);
        } else
          t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        return new W._SimpleNodeValidator(t1, t2, t3, uriPolicy);
      }}
  },
  _TemplatingNodeValidator: {
    "^": "_SimpleNodeValidator;_templateAttrs,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
    allowsAttribute$3: function(element, attributeName, value) {
      if (W._SimpleNodeValidator.prototype.allowsAttribute$3.call(this, element, attributeName, value))
        return true;
      if (J.$eq(attributeName, "template") && value === "")
        return true;
      if (J.get$attributes$x(element)._html$_element.getAttribute("template") === "")
        return this._templateAttrs.contains$1(0, attributeName);
      return false;
    },
    static: {"^": "_TemplatingNodeValidator__TEMPLATE_ATTRS", _TemplatingNodeValidator$: function() {
        var t1, t2, t3, t4;
        t1 = new H.MappedListIterable(C.List_wSV, new W._TemplatingNodeValidator_closure());
        t1.$builtinTypeInfo = [null, null];
        t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t2.addAll$1(0, ["TEMPLATE"]);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t3.addAll$1(0, t1);
        t1 = t3;
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
        t4.addAll$1(0, C.List_wSV);
        return new W._TemplatingNodeValidator(t4, t2, t1, t3, null);
      }}
  },
  _TemplatingNodeValidator_closure: {
    "^": "Closure:54;",
    call$1: [function(attr) {
      return "TEMPLATE::" + H.S(attr);
    }, "call$1", null, 2, 0, null, 141, [], "call"],
    $isFunction: true
  },
  FixedSizeListIterator: {
    "^": "Object;_array,_html$_length,_position,_html$_current",
    moveNext$0: function() {
      var nextPosition, t1;
      nextPosition = this._position + 1;
      t1 = this._html$_length;
      if (nextPosition < t1) {
        this._html$_current = J.$index$asx(this._array, nextPosition);
        this._position = nextPosition;
        return true;
      }
      this._html$_current = null;
      this._position = t1;
      return false;
    },
    get$current: function() {
      return this._html$_current;
    }
  },
  _callConstructor_closure: {
    "^": "Closure:54;constructor_0,interceptor_1",
    call$1: [function(receiver) {
      var t1 = H.makeLeafDispatchRecord(this.interceptor_1);
      Object.defineProperty(receiver, init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      receiver.constructor = receiver.__proto__.constructor;
      return this.constructor_0(receiver);
    }, "call$1", null, 2, 0, null, 60, [], "call"],
    $isFunction: true
  },
  _JSElementUpgrader: {
    "^": "Object;_interceptor,_constructor,_nativeType",
    _JSElementUpgrader$3: function($document, type, extendsTag) {
      var interceptorClass, t1, baseClassName;
      interceptorClass = J.findInterceptorConstructorForType(type);
      if (interceptorClass == null)
        throw H.wrapException(P.ArgumentError$(type));
      t1 = J.findConstructorForNativeSubclassType(type, "created");
      this._constructor = t1;
      if (t1 == null)
        throw H.wrapException(P.ArgumentError$(H.S(type) + " has no constructor called 'created'"));
      J.getNativeInterceptor(W._ElementFactoryProvider_createElement_tag("article", null));
      baseClassName = interceptorClass.$nativeSuperclassTag;
      if (baseClassName == null)
        throw H.wrapException(P.ArgumentError$(type));
      if (!J.$eq(baseClassName, "HTMLElement"))
        throw H.wrapException(P.UnsupportedError$("Class must provide extendsTag if base native class is not HtmlElement"));
      this._nativeType = C.Type_fPs;
      this._interceptor = interceptorClass.prototype;
    }
  },
  _DOMWindowCrossFrame: {
    "^": "Object;_window",
    get$parent: function(_) {
      return W._DOMWindowCrossFrame__createSafe(this._window.parent);
    },
    close$0: function(_) {
      return this._window.close();
    },
    addEventListener$3: function(_, type, listener, useCapture) {
      return H.throwExpression(P.UnsupportedError$("You can only attach EventListeners to your own window."));
    },
    removeEventListener$3: function(_, type, listener, useCapture) {
      return H.throwExpression(P.UnsupportedError$("You can only attach EventListeners to your own window."));
    },
    $isEventTarget: true,
    static: {_DOMWindowCrossFrame__createSafe: function(w) {
        if (w === window)
          return w;
        else
          return new W._DOMWindowCrossFrame(w);
      }}
  },
  NodeValidator: {
    "^": "Object;",
    $isNodeValidator: true
  },
  _SameOriginUriPolicy: {
    "^": "Object;_hiddenAnchor,_loc",
    allowsUri$1: function(uri) {
      var t1, t2, t3, t4, t5;
      t1 = this._hiddenAnchor;
      t2 = J.getInterceptor$x(t1);
      t2.set$href(t1, uri);
      t3 = t2.get$hostname(t1);
      t4 = this._loc;
      t5 = t4.hostname;
      if (t3 == null ? t5 == null : t3 === t5) {
        t3 = t2.get$port(t1);
        t5 = t4.port;
        if (t3 == null ? t5 == null : t3 === t5) {
          t3 = t2.get$protocol(t1);
          t4 = t4.protocol;
          t4 = t3 == null ? t4 == null : t3 === t4;
          t3 = t4;
        } else
          t3 = false;
      } else
        t3 = false;
      if (!t3)
        t1 = t2.get$hostname(t1) === "" && t2.get$port(t1) === "" && t2.get$protocol(t1) === ":";
      else
        t1 = true;
      return t1;
    }
  },
  _ValidatingTreeSanitizer: {
    "^": "Object;validator",
    sanitizeTree$1: function(node) {
      new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$1(node);
    },
    sanitizeNode$1: function(node) {
      var t1, attrs, t2, isAttr, keys, i, $name, t3;
      switch (node.nodeType) {
        case 1:
          t1 = J.getInterceptor$x(node);
          attrs = t1.get$attributes(node);
          if (!this.validator.allowsElement$1(node)) {
            window;
            t2 = "Removing disallowed element <" + H.S(t1.get$tagName(node)) + ">";
            if (typeof console != "undefined")
              console.warn(t2);
            t1.remove$0(node);
            break;
          }
          t2 = attrs._html$_element;
          isAttr = t2.getAttribute("is");
          if (isAttr != null)
            if (!this.validator.allowsAttribute$3(node, "is", isAttr)) {
              window;
              t2 = "Removing disallowed type extension <" + H.S(t1.get$tagName(node)) + " is=\"" + isAttr + "\">";
              if (typeof console != "undefined")
                console.warn(t2);
              t1.remove$0(node);
              break;
            }
          keys = C.JSArray_methods.toList$0(attrs.get$keys());
          for (i = attrs.get$keys().length - 1; i >= 0; --i) {
            if (i >= keys.length)
              return H.ioore(keys, i);
            $name = keys[i];
            if (!this.validator.allowsAttribute$3(node, J.toLowerCase$0$s($name), t2.getAttribute($name))) {
              window;
              t3 = "Removing disallowed attribute <" + H.S(t1.get$tagName(node)) + " " + H.S($name) + "=\"" + H.S(t2.getAttribute($name)) + "\">";
              if (typeof console != "undefined")
                console.warn(t3);
              t2.getAttribute($name);
              t2.removeAttribute($name);
            }
          }
          if (!!t1.$isTemplateElement)
            this.sanitizeTree$1(node.content);
          break;
        case 8:
        case 11:
        case 3:
        case 4:
          break;
        default:
          J.remove$0$ax(node);
      }
    }
  },
  _ValidatingTreeSanitizer_sanitizeTree_walk: {
    "^": "Closure:142;this_0",
    call$1: function(node) {
      var child, nextChild;
      this.this_0.sanitizeNode$1(node);
      child = node.lastChild;
      for (; child != null; child = nextChild) {
        nextChild = child.previousSibling;
        this.call$1(child);
      }
    },
    $isFunction: true
  }
}],
["dart.dom.indexed_db", "dart:indexed_db", , P, {
  "^": "",
  KeyRange: {
    "^": "Interceptor;",
    $isKeyRange: true,
    "%": "IDBKeyRange"
  }
}],
["dart.dom.svg", "dart:svg", , P, {
  "^": "",
  AElement: {
    "^": "GraphicsElement;target=,href=",
    "%": "SVGAElement"
  },
  AltGlyphElement: {
    "^": "TextPositioningElement;href=",
    "%": "SVGAltGlyphElement"
  },
  FEBlendElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEBlendElement"
  },
  FEColorMatrixElement: {
    "^": "SvgElement;type=,values=,x=,y=",
    "%": "SVGFEColorMatrixElement"
  },
  FEComponentTransferElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEComponentTransferElement"
  },
  FECompositeElement: {
    "^": "SvgElement;operator=,x=,y=",
    "%": "SVGFECompositeElement"
  },
  FEConvolveMatrixElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEConvolveMatrixElement"
  },
  FEDiffuseLightingElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEDiffuseLightingElement"
  },
  FEDisplacementMapElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEDisplacementMapElement"
  },
  FEFloodElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEFloodElement"
  },
  FEGaussianBlurElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEGaussianBlurElement"
  },
  FEImageElement: {
    "^": "SvgElement;x=,y=,href=",
    "%": "SVGFEImageElement"
  },
  FEMergeElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEMergeElement"
  },
  FEMorphologyElement: {
    "^": "SvgElement;operator=,x=,y=",
    "%": "SVGFEMorphologyElement"
  },
  FEOffsetElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEOffsetElement"
  },
  FEPointLightElement: {
    "^": "SvgElement;x=,y=,z=",
    "%": "SVGFEPointLightElement"
  },
  FESpecularLightingElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFESpecularLightingElement"
  },
  FESpotLightElement: {
    "^": "SvgElement;x=,y=,z=",
    "%": "SVGFESpotLightElement"
  },
  FETileElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFETileElement"
  },
  FETurbulenceElement: {
    "^": "SvgElement;type=,x=,y=",
    "%": "SVGFETurbulenceElement"
  },
  FilterElement: {
    "^": "SvgElement;x=,y=,href=",
    "%": "SVGFilterElement"
  },
  ForeignObjectElement: {
    "^": "GraphicsElement;x=,y=",
    "%": "SVGForeignObjectElement"
  },
  GeometryElement: {
    "^": "GraphicsElement;",
    "%": "SVGCircleElement|SVGEllipseElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement;SVGGeometryElement"
  },
  GraphicsElement: {
    "^": "SvgElement;",
    "%": "SVGClipPathElement|SVGDefsElement|SVGGElement|SVGSwitchElement;SVGGraphicsElement"
  },
  ImageElement0: {
    "^": "GraphicsElement;x=,y=,href=",
    "%": "SVGImageElement"
  },
  MaskElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGMaskElement"
  },
  PatternElement: {
    "^": "SvgElement;x=,y=,href=",
    "%": "SVGPatternElement"
  },
  RectElement: {
    "^": "GeometryElement;x=,y=",
    "%": "SVGRectElement"
  },
  ScriptElement0: {
    "^": "SvgElement;type=,href=",
    "%": "SVGScriptElement"
  },
  StyleElement0: {
    "^": "SvgElement;type=",
    "%": "SVGStyleElement"
  },
  SvgElement: {
    "^": "Element;",
    get$classes: function(receiver) {
      if (receiver._cssClassSet == null)
        receiver._cssClassSet = new P._AttributeClassSet(receiver);
      return receiver._cssClassSet;
    },
    get$onClick: function(receiver) {
      var t1 = new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_click._eventType, false);
      t1.$builtinTypeInfo = [null];
      return t1;
    },
    get$onError: function(receiver) {
      var t1 = new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_error0._eventType, false);
      t1.$builtinTypeInfo = [null];
      return t1;
    },
    onError$1: function($receiver, arg0) {
      return this.get$onError($receiver).call$1(arg0);
    },
    $isEventTarget: true,
    "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGHKernElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGMissingGlyphElement|SVGSetElement|SVGStopElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement"
  },
  SvgSvgElement: {
    "^": "GraphicsElement;x=,y=",
    getElementById$1: function(receiver, elementId) {
      return receiver.getElementById(elementId);
    },
    $isSvgSvgElement: true,
    "%": "SVGSVGElement"
  },
  TextContentElement: {
    "^": "GraphicsElement;",
    "%": ";SVGTextContentElement"
  },
  TextPathElement: {
    "^": "TextContentElement;method=,href=",
    "%": "SVGTextPathElement"
  },
  TextPositioningElement: {
    "^": "TextContentElement;x=,y=",
    "%": "SVGTSpanElement|SVGTextElement;SVGTextPositioningElement"
  },
  UseElement: {
    "^": "GraphicsElement;x=,y=,href=",
    "%": "SVGUseElement"
  },
  _GradientElement: {
    "^": "SvgElement;href=",
    "%": "SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement"
  },
  _AttributeClassSet: {
    "^": "CssClassSetImpl;_svg$_element",
    readClasses$0: function() {
      var classname, s, t1, t2, trimmed;
      classname = this._svg$_element.getAttribute("class");
      s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
      if (classname == null)
        return s;
      t1 = classname.split(" ");
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      for (; t2.moveNext$0();) {
        trimmed = J.trim$0$s(t2._current);
        if (J.get$isEmpty$asx(trimmed) !== true)
          s.add$1(0, trimmed);
      }
      return s;
    },
    writeClasses$1: function(s) {
      this._svg$_element.setAttribute("class", s.join$1(0, " "));
    }
  }
}],
["dart.dom.web_sql", "dart:web_sql", , P, {
  "^": "",
  SqlError: {
    "^": "Interceptor;message=",
    "%": "SQLError"
  }
}],
["dart.isolate", "dart:isolate", , P, {
  "^": "",
  Capability: {
    "^": "Object;",
    $isCapability: true
  }
}],
["dart.js", "dart:js", , P, {
  "^": "",
  _convertDartFunction: function(f, captureThis) {
    return function(_call, f, captureThis) {
      return function() {
        return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));
      };
    }(P._callDartFunction, f, captureThis);
  },
  _callDartFunction: [function(callback, captureThis, $self, $arguments) {
    var arguments0;
    if (captureThis === true) {
      arguments0 = [$self];
      C.JSArray_methods.addAll$1(arguments0, $arguments);
      $arguments = arguments0;
    }
    return P._convertToJS(H.Primitives_applyFunction(callback, P.List_List$from(J.map$1$ax($arguments, P._convertToDart$closure()), true, null), P.Function__toMangledNames(null)));
  }, "call$4", "_callDartFunction$closure", 8, 0, null, 39, [], 65, [], 25, [], 66, []],
  _defineProperty: function(o, $name, value) {
    var exception;
    if (Object.isExtensible(o))
      try {
        Object.defineProperty(o, $name, {value: value});
        return true;
      } catch (exception) {
        H.unwrapException(exception);
      }

    return false;
  },
  _getOwnProperty: function(o, $name) {
    if (Object.prototype.hasOwnProperty.call(o, $name))
      return o[$name];
    return;
  },
  _convertToJS: [function(o) {
    var t1;
    if (o == null || typeof o === "string" || typeof o === "number" || typeof o === "boolean")
      return o;
    else {
      t1 = J.getInterceptor(o);
      if (!!t1.$isBlob || !!t1.$isEvent0 || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow)
        return o;
      else if (!!t1.$isDateTime)
        return H.Primitives_lazyAsJsDate(o);
      else if (!!t1.$isJsObject)
        return o._jsObject;
      else if (!!t1.$isFunction)
        return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
      else
        return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0($.get$_dartProxyCtor()));
    }
  }, "call$1", "_convertToJS$closure", 2, 0, 54, 67, []],
  _getJsProxy: function(o, propertyName, createProxy) {
    var jsProxy = P._getOwnProperty(o, propertyName);
    if (jsProxy == null) {
      jsProxy = createProxy.call$1(o);
      P._defineProperty(o, propertyName, jsProxy);
    }
    return jsProxy;
  },
  _convertToDart: [function(o) {
    var t1;
    if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
      return o;
    else {
      if (o instanceof Object) {
        t1 = J.getInterceptor(o);
        t1 = !!t1.$isBlob || !!t1.$isEvent0 || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow;
      } else
        t1 = false;
      if (t1)
        return o;
      else if (o instanceof Date)
        return P.DateTime$fromMillisecondsSinceEpoch(o.getTime(), false);
      else if (o.constructor === $.get$_dartProxyCtor())
        return o.o;
      else
        return P._wrapToDart(o);
    }
  }, "call$1", "_convertToDart$closure", 2, 0, 68, 67, []],
  _wrapToDart: function(o) {
    if (typeof o == "function")
      return P._getDartProxy(o, $.get$_DART_CLOSURE_PROPERTY_NAME(), new P._wrapToDart_closure());
    else if (o instanceof Array)
      return P._getDartProxy(o, $.get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure0());
    else
      return P._getDartProxy(o, $.get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure1());
  },
  _getDartProxy: function(o, propertyName, createProxy) {
    var dartProxy = P._getOwnProperty(o, propertyName);
    if (dartProxy == null || !(o instanceof Object)) {
      dartProxy = createProxy.call$1(o);
      P._defineProperty(o, propertyName, dartProxy);
    }
    return dartProxy;
  },
  JsObject: {
    "^": "Object;_jsObject",
    $index: function(_, property) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      return P._convertToDart(this._jsObject[property]);
    },
    $indexSet: function(_, property, value) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      this._jsObject[property] = P._convertToJS(value);
    },
    get$hashCode: function(_) {
      return 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isJsObject && this._jsObject === other._jsObject;
    },
    hasProperty$1: function(property) {
      return property in this._jsObject;
    },
    deleteProperty$1: function(property) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      delete this._jsObject[property];
    },
    toString$0: function(_) {
      var t1, exception;
      try {
        t1 = String(this._jsObject);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        return P.Object.prototype.toString$0.call(this, this);
      }

    },
    callMethod$2: function(method, args) {
      var t1, t2;
      t1 = this._jsObject;
      t2 = args == null ? null : P.List_List$from(J.map$1$ax(args, P._convertToJS$closure()), true, null);
      return P._convertToDart(t1[method].apply(t1, t2));
    },
    callMethod$1: function(method) {
      return this.callMethod$2(method, null);
    },
    $isJsObject: true,
    static: {JsObject_JsObject$fromBrowserObject: function(object) {
        if (typeof object === "number" || typeof object === "string" || typeof object === "boolean" || object == null)
          throw H.wrapException(P.ArgumentError$("object cannot be a num, string, bool, or null"));
        return P._wrapToDart(P._convertToJS(object));
      }, JsObject_JsObject$jsify: function(object) {
        return P._wrapToDart(P.JsObject__convertDataTree(object));
      }, JsObject__convertDataTree: function(data) {
        var _convertedObjects = new P._IdentityHashMap(0, null, null, null, null);
        _convertedObjects.$builtinTypeInfo = [null, null];
        return new P.JsObject__convertDataTree__convert(_convertedObjects).call$1(data);
      }}
  },
  JsObject__convertDataTree__convert: {
    "^": "Closure:54;_convertedObjects_0",
    call$1: [function(o) {
      var t1, t2, convertedMap, key, convertedList;
      t1 = this._convertedObjects_0;
      if (t1.containsKey$1(o))
        return t1.$index(0, o);
      t2 = J.getInterceptor(o);
      if (!!t2.$isMap) {
        convertedMap = {};
        t1.$indexSet(0, o, convertedMap);
        for (t1 = J.get$iterator$ax(o.get$keys()); t1.moveNext$0() === true;) {
          key = t1.get$current();
          convertedMap[key] = this.call$1(t2.$index(o, key));
        }
        return convertedMap;
      } else if (!!t2.$isIterable) {
        convertedList = [];
        t1.$indexSet(0, o, convertedList);
        C.JSArray_methods.addAll$1(convertedList, t2.map$1(o, this));
        return convertedList;
      } else
        return P._convertToJS(o);
    }, "call$1", null, 2, 0, null, 67, [], "call"],
    $isFunction: true
  },
  JsFunction: {
    "^": "JsObject;_jsObject",
    apply$2$thisArg: function(args, thisArg) {
      var t1, t2;
      t1 = P._convertToJS(thisArg);
      t2 = new H.MappedListIterable(args, P._convertToJS$closure());
      t2.$builtinTypeInfo = [null, null];
      t2 = P.List_List$from(t2, true, null);
      return P._convertToDart(this._jsObject.apply(t1, t2));
    },
    apply$1: function(args) {
      return this.apply$2$thisArg(args, null);
    },
    $isJsFunction: true,
    static: {JsFunction_JsFunction$withThis: function(f) {
        return new P.JsFunction(P._convertDartFunction(f, true));
      }}
  },
  JsArray: {
    "^": "JsObject_ListMixin;_jsObject",
    $index: function(_, index) {
      var t1;
      if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
        if (typeof index === "number" && Math.floor(index) === index)
          t1 = index < 0 || index >= this.get$length(this);
        else
          t1 = false;
        if (t1)
          H.throwExpression(P.RangeError$range(index, 0, this.get$length(this)));
      }
      return P.JsObject.prototype.$index.call(this, this, index);
    },
    $indexSet: function(_, index, value) {
      var t1;
      if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
        if (typeof index === "number" && Math.floor(index) === index)
          t1 = index < 0 || index >= this.get$length(this);
        else
          t1 = false;
        if (t1)
          H.throwExpression(P.RangeError$range(index, 0, this.get$length(this)));
      }
      P.JsObject.prototype.$indexSet.call(this, this, index, value);
    },
    get$length: function(_) {
      var len = this._jsObject.length;
      if (typeof len === "number" && len >>> 0 === len)
        return len;
      throw H.wrapException(P.StateError$("Bad JsArray length"));
    },
    set$length: function(_, $length) {
      P.JsObject.prototype.$indexSet.call(this, this, "length", $length);
    },
    add$1: function(_, value) {
      this.callMethod$2("push", [value]);
    },
    addAll$1: function(_, iterable) {
      this.callMethod$2("push", iterable instanceof Array ? iterable : P.List_List$from(iterable, true, null));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      var t1, t2, $length, args;
      t1 = this.get$length(this);
      if (start > t1)
        H.throwExpression(P.RangeError$range(start, 0, t1));
      t2 = J.getInterceptor$n(end);
      if (t2.$lt(end, start) === true || t2.$gt(end, t1) === true)
        H.throwExpression(P.RangeError$range(end, start, t1));
      $length = t2.$sub(end, start);
      if (J.$eq($length, 0))
        return;
      args = [start, $length];
      t1 = new H.SubListIterable(iterable, skipCount, null);
      t1.$builtinTypeInfo = [null];
      C.JSArray_methods.addAll$1(args, t1.take$1(0, $length));
      this.callMethod$2("splice", args);
    }
  },
  JsObject_ListMixin: {
    "^": "JsObject+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  _convertToJS_closure: {
    "^": "Closure:54;",
    call$1: function(o) {
      var jsFunction = P._convertDartFunction(o, false);
      P._defineProperty(jsFunction, $.get$_DART_CLOSURE_PROPERTY_NAME(), o);
      return jsFunction;
    },
    $isFunction: true
  },
  _convertToJS_closure0: {
    "^": "Closure:54;ctor_0",
    call$1: function(o) {
      return new this.ctor_0(o);
    },
    $isFunction: true
  },
  _wrapToDart_closure: {
    "^": "Closure:54;",
    call$1: function(o) {
      return new P.JsFunction(o);
    },
    $isFunction: true
  },
  _wrapToDart_closure0: {
    "^": "Closure:54;",
    call$1: function(o) {
      var t1 = new P.JsArray(o);
      t1.$builtinTypeInfo = [null];
      return t1;
    },
    $isFunction: true
  },
  _wrapToDart_closure1: {
    "^": "Closure:54;",
    call$1: function(o) {
      return new P.JsObject(o);
    },
    $isFunction: true
  }
}],
["dart.math", "dart:math", , P, {
  "^": "",
  _JenkinsSmiHash_combine0: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _JenkinsSmiHash_finish: function(hash) {
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >>> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  min: function(a, b) {
    if (typeof a !== "number")
      throw H.wrapException(P.ArgumentError$(a));
    if (typeof b !== "number")
      throw H.wrapException(P.ArgumentError$(b));
    if (a > b)
      return b;
    if (a < b)
      return a;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return (a + b) * a * b;
      if (a === 0 && C.JSDouble_methods.get$isNegative(b) || C.JSDouble_methods.get$isNaN(b))
        return b;
      return a;
    }
    return a;
  },
  max: function(a, b) {
    if (typeof b !== "number")
      throw H.wrapException(P.ArgumentError$(b));
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return a + b;
      if (C.JSDouble_methods.get$isNaN(b))
        return b;
      return a;
    }
    if (b === 0 && C.JSInt_methods.get$isNegative(a))
      return b;
    return a;
  },
  _JSRandom: {
    "^": "Object;",
    nextInt$1: function(max) {
      if (max <= 0 || max > 4294967296)
        throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      return Math.random() * max >>> 0;
    }
  },
  Point: {
    "^": "Object;x>,y>",
    toString$0: function(_) {
      return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isPoint)
        return false;
      t1 = this.x;
      t2 = other.x;
      if (t1 == null ? t2 == null : t1 === t2) {
        t1 = this.y;
        t2 = other.y;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.x);
      t2 = J.get$hashCode$(this.y);
      return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2));
    },
    $add: function(_, other) {
      var t1, t2, t3, t4;
      t1 = this.x;
      t2 = J.getInterceptor$x(other);
      t3 = t2.get$x(other);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = this.y;
      t2 = t2.get$y(other);
      if (typeof t4 !== "number")
        return t4.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = new P.Point(t1 + t3, t4 + t2);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4;
      t1 = this.x;
      t2 = J.getInterceptor$x(other);
      t3 = t2.get$x(other);
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = this.y;
      t2 = t2.get$y(other);
      if (typeof t4 !== "number")
        return t4.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = new P.Point(t1 - t3, t4 - t2);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    },
    $mul: function(_, factor) {
      var t1, t2;
      t1 = this.x;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof factor !== "number")
        return H.iae(factor);
      t2 = this.y;
      if (typeof t2 !== "number")
        return t2.$mul();
      t2 = new P.Point(t1 * factor, t2 * factor);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    },
    $isPoint: true
  },
  _RectangleBase: {
    "^": "Object;",
    get$right: function(_) {
      return this.get$left(this) + this.width;
    },
    get$bottom: function(_) {
      return this.get$top(this) + this.height;
    },
    toString$0: function(_) {
      return "Rectangle (" + this.get$left(this) + ", " + this.top + ") " + this.width + " x " + this.height;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      if (this.get$left(this) === t1.get$left(other)) {
        t2 = this.top;
        t1 = t2 === t1.get$top(other) && this.left + this.width === t1.get$right(other) && t2 + this.height === t1.get$bottom(other);
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1 = this.top;
      return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, this.get$left(this) & 0x1FFFFFFF), t1 & 0x1FFFFFFF), this.left + this.width & 0x1FFFFFFF), t1 + this.height & 0x1FFFFFFF));
    },
    get$topLeft: function(_) {
      var t1 = new P.Point(this.get$left(this), this.top);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }
  },
  Rectangle: {
    "^": "_RectangleBase;left>,top>,width>,height>",
    $isRectangle: true,
    $asRectangle: null,
    static: {Rectangle$: function(left, $top, width, height, $T) {
        var t1, t2;
        t1 = width < 0 ? -width * 0 : width;
        t2 = height < 0 ? -height * 0 : height;
        t2 = new P.Rectangle(left, $top, t1, t2);
        t2.$builtinTypeInfo = [$T];
        return t2;
      }}
  }
}],
["dart.mirrors", "dart:mirrors", , P, {
  "^": "",
  MirrorSystem_getName: function(symbol) {
    return J.get$_name$x(symbol);
  },
  reflectClass: function(key) {
    var t1, tm;
    t1 = J.getInterceptor(key);
    if (!t1.$isType || t1.$eq(key, C.Type_dynamic))
      throw H.wrapException(P.ArgumentError$(H.S(key) + " does not denote a class"));
    tm = P.reflectType(key);
    if (!J.getInterceptor(tm).$isClassMirror)
      throw H.wrapException(P.ArgumentError$(H.S(key) + " does not denote a class"));
    return tm.get$originalDeclaration();
  },
  reflectType: function(key) {
    if (J.$eq(key, C.Type_dynamic)) {
      $.get$currentJsMirrorSystem().toString;
      return $.get$JsMirrorSystem__dynamicType();
    }
    return H.reflectClassByMangledName(key.get$_typeName());
  },
  Mirror: {
    "^": "Object;",
    $isMirror: true
  },
  DeclarationMirror: {
    "^": "Object;",
    $isDeclarationMirror: true,
    $isMirror: true
  },
  InstanceMirror: {
    "^": "Object;",
    $isMirror: true
  },
  LibraryMirror: {
    "^": "Object;",
    $isLibraryMirror: true,
    $isMirror: true,
    $isDeclarationMirror: true
  },
  TypeMirror: {
    "^": "Object;",
    $isTypeMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true
  },
  ClassMirror: {
    "^": "Object;",
    $isClassMirror: true,
    $isMirror: true,
    $isTypeMirror: true,
    $isDeclarationMirror: true
  },
  TypeVariableMirror: {
    "^": "TypeMirror;",
    $isTypeVariableMirror: true
  },
  MethodMirror: {
    "^": "Object;",
    $isMethodMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true
  },
  VariableMirror: {
    "^": "Object;",
    $isVariableMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true
  },
  ParameterMirror: {
    "^": "Object;",
    $isParameterMirror: true,
    $isVariableMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true
  },
  MirrorsUsed: {
    "^": "Object;symbols,targets,metaTargets,override"
  }
}],
["dart.typed_data", "dart:typed_data", , P, {
  "^": "",
  Endianness: {
    "^": "Object;_littleEndian",
    static: {"^": "Endianness_BIG_ENDIAN,Endianness_LITTLE_ENDIAN,Endianness_HOST_ENDIAN"}
  }
}],
["dart.typed_data.implementation", "dart:_native_typed_data", , H, {
  "^": "",
  NativeTypedArray$: function(receiver) {
    receiver.toString;
    return receiver;
  },
  NativeTypedArrayOfDouble$: function(receiver) {
    receiver.toString;
    return receiver;
  },
  NativeTypedArrayOfInt$: function(receiver) {
    receiver.toString;
    return receiver;
  },
  NativeByteBuffer: {
    "^": "Interceptor;",
    get$runtimeType: function(receiver) {
      return C.Type_wAg;
    },
    $isNativeByteBuffer: true,
    "%": "ArrayBuffer"
  },
  NativeTypedData: {
    "^": "Interceptor;",
    _invalidIndex$2: function(receiver, index, $length) {
      var t1 = J.getInterceptor$n(index);
      if (t1.$lt(index, 0) === true || t1.$ge(index, $length) === true)
        throw H.wrapException(P.RangeError$range(index, 0, $length));
      else
        throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
    },
    _checkIndex$2: function(receiver, index, $length) {
      if (index >>> 0 !== index || index >= $length)
        this._invalidIndex$2(receiver, index, $length);
    },
    _checkSublistArguments$3: function(receiver, start, end, $length) {
      var t1 = $length + 1;
      this._checkIndex$2(receiver, start, t1);
      if (end == null)
        return $length;
      this._checkIndex$2(receiver, end, t1);
      if (start > end)
        throw H.wrapException(P.RangeError$range(start, 0, end));
      return end;
    },
    $isNativeTypedData: true,
    $isTypedData: true,
    "%": ";ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
  },
  NativeByteData: {
    "^": "NativeTypedData;",
    get$runtimeType: function(receiver) {
      return C.Type_oGP;
    },
    $isTypedData: true,
    "%": "DataView"
  },
  NativeFloat32List: {
    "^": "NativeTypedArrayOfDouble;",
    get$runtimeType: function(receiver) {
      return C.Type_Art;
    },
    sublist$2: function(receiver, start, end) {
      return new Float32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$double];
    },
    "%": "Float32Array"
  },
  NativeFloat64List: {
    "^": "NativeTypedArrayOfDouble;",
    get$runtimeType: function(receiver) {
      return C.Type_ckn;
    },
    sublist$2: function(receiver, start, end) {
      return new Float64Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$double];
    },
    "%": "Float64Array"
  },
  NativeInt16List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_UoK;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Int16Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    },
    "%": "Int16Array"
  },
  NativeInt32List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_dTZ;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Int32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    },
    "%": "Int32Array"
  },
  NativeInt8List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_mp3;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Int8Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    },
    "%": "Int8Array"
  },
  NativeUint16List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_CAk;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint16Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    },
    "%": "Uint16Array"
  },
  NativeUint32List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_irB;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    },
    "%": "Uint32Array"
  },
  NativeUint8ClampedList: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_QuW;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint8ClampedArray(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    },
    "%": "CanvasPixelArray|Uint8ClampedArray"
  },
  NativeUint8List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_6L0;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    },
    "%": ";Uint8Array"
  },
  NativeTypedArray: {
    "^": "NativeTypedData;",
    get$length: function(receiver) {
      return receiver.length;
    },
    _setRangeFast$4: function(receiver, start, end, source, skipCount) {
      var t1, count, sourceLength;
      t1 = receiver.length + 1;
      this._checkIndex$2(receiver, start, t1);
      this._checkIndex$2(receiver, end, t1);
      if (typeof end !== "number")
        return H.iae(end);
      if (start > end)
        throw H.wrapException(P.RangeError$range(start, 0, end));
      count = end - start;
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJavaScriptIndexingBehavior: true
  },
  NativeTypedArrayOfDouble: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfDouble) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      P.ListMixin.prototype.setRange$4.call(this, receiver, start, end, iterable, skipCount);
    },
    $isNativeTypedArrayOfDouble: true
  },
  NativeTypedArray_ListMixin: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$double];
    }
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin: {
    "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
  },
  NativeTypedArrayOfInt: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfInt) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      P.ListMixin.prototype.setRange$4.call(this, receiver, start, end, iterable, skipCount);
    },
    $isNativeTypedArrayOfInt: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    }
  },
  NativeTypedArray_ListMixin0: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    }
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin0: {
    "^": "NativeTypedArray_ListMixin0+FixedLengthListMixin;"
  }
}],
["dart2js._js_primitives", "dart:_js_primitives", , H, {
  "^": "",
  printString: function(string) {
    if (typeof dartPrint == "function") {
      dartPrint(string);
      return;
    }
    if (typeof console == "object" && typeof console.log != "undefined") {
      console.log(string);
      return;
    }
    if (typeof window == "object")
      return;
    if (typeof print == "function") {
      print(string);
      return;
    }
    throw "Unable to print message: " + String(string);
  }
}],
["eventable", "package:eventable/eventable.dart", , X, {
  "^": "",
  DuplicateEventSettingError: {
    "^": "Object;type>,emitter,detector,existingAction,newAction",
    get$message: function(_) {
      return "The detector is already listening for the \"" + H.S(this.type) + "\" event data type from the given emitter";
    },
    static: {DuplicateEventSettingError$: function(detector, emitter, type, existingAction, newAction) {
        return new X.DuplicateEventSettingError(type, emitter, detector, existingAction, newAction);
      }}
  },
  EmitTimeQueueChangeError: {
    "^": "Object;type>,emitter,action",
    get$message: function(_) {
      return "The emitter is currently emitting an event with data of type \"" + H.S(this.type) + "\", a call to add/removeEventAction at emit time, of that event data type, is an error.";
    },
    static: {EmitTimeQueueChangeError$: function(emitter, type, action) {
        return new X.EmitTimeQueueChangeError(type, emitter, action);
      }}
  },
  Event: {
    "^": "Object;emitter,data>,_finished",
    $isEvent: true
  },
  EventDetector: {
    "^": "Object;_typeIndexes:eventable$EventDetector$_typeIndexes%-143,_emitterIndexes:eventable$EventDetector$_emitterIndexes%-144",
    listen$3: [function(receiver, emitter, type, action) {
      var t1, t2;
      t1 = receiver.eventable$EventDetector$_typeIndexes;
      if (t1 == null) {
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, X.EventEmitter, [P.Map, P.Type, {func: "void__Event", void: true, args: [X.Event]}]);
        receiver.eventable$EventDetector$_typeIndexes = t1;
      }
      if (J.$index$asx(t1, emitter) == null)
        J.$indexSet$ax(receiver.eventable$EventDetector$_typeIndexes, emitter, P.LinkedHashMap_LinkedHashMap(null, null, null, P.Type, {func: "void__Event", void: true, args: [X.Event]}));
      t1 = receiver.eventable$EventDetector$_emitterIndexes;
      if (t1 == null) {
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Type, [P.Map, X.EventEmitter, {func: "void__Event", void: true, args: [X.Event]}]);
        receiver.eventable$EventDetector$_emitterIndexes = t1;
      }
      if (J.$index$asx(t1, type) == null)
        J.$indexSet$ax(receiver.eventable$EventDetector$_emitterIndexes, type, P.LinkedHashMap_LinkedHashMap(null, null, null, X.EventEmitter, {func: "void__Event", void: true, args: [X.Event]}));
      t1 = J.$index$asx(J.$index$asx(receiver.eventable$EventDetector$_typeIndexes, emitter), type);
      t2 = receiver.eventable$EventDetector$_typeIndexes;
      if (t1 != null)
        throw H.wrapException(X.DuplicateEventSettingError$(receiver, emitter, type, J.$index$asx(J.$index$asx(t2, emitter), type), action));
      else {
        t1 = J.$index$asx(t2, emitter);
        J.$indexSet$ax(J.$index$asx(receiver.eventable$EventDetector$_emitterIndexes, type), emitter, action);
        J.$indexSet$ax(t1, type, action);
        emitter.addEventAction$2(type, action);
      }
    }, "call$3", "get$listen", 6, 0, 145, 146, [], 147, [], 148, [], "listen"],
    _initialiseIndexes$2: [function(receiver, emitter, type) {
      var t1 = receiver.eventable$EventDetector$_typeIndexes;
      if (t1 == null) {
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, X.EventEmitter, [P.Map, P.Type, {func: "void__Event", void: true, args: [X.Event]}]);
        receiver.eventable$EventDetector$_typeIndexes = t1;
      }
      if (J.$index$asx(t1, emitter) == null)
        J.$indexSet$ax(receiver.eventable$EventDetector$_typeIndexes, emitter, P.LinkedHashMap_LinkedHashMap(null, null, null, P.Type, {func: "void__Event", void: true, args: [X.Event]}));
      t1 = receiver.eventable$EventDetector$_emitterIndexes;
      if (t1 == null) {
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Type, [P.Map, X.EventEmitter, {func: "void__Event", void: true, args: [X.Event]}]);
        receiver.eventable$EventDetector$_emitterIndexes = t1;
      }
      if (J.$index$asx(t1, type) == null)
        J.$indexSet$ax(receiver.eventable$EventDetector$_emitterIndexes, type, P.LinkedHashMap_LinkedHashMap(null, null, null, X.EventEmitter, {func: "void__Event", void: true, args: [X.Event]}));
    }, "call$2", "get$_initialiseIndexes", 4, 0, 149, 146, [], 147, [], "_initialiseIndexes"],
    ignoreSpecificEventBinding$2: [function(receiver, emitter, type) {
      var t1, action;
      t1 = receiver.eventable$EventDetector$_typeIndexes;
      if (t1 != null && J.$index$asx(t1, emitter) != null && J.$index$asx(J.$index$asx(receiver.eventable$EventDetector$_typeIndexes, emitter), type) != null) {
        action = J.remove$1$ax(J.$index$asx(receiver.eventable$EventDetector$_typeIndexes, emitter), type);
        J.remove$1$ax(J.$index$asx(receiver.eventable$EventDetector$_emitterIndexes, type), emitter);
        emitter.removeEventAction$2(type, action);
        if (J.get$isEmpty$asx(J.$index$asx(receiver.eventable$EventDetector$_typeIndexes, emitter)) === true)
          J.remove$1$ax(receiver.eventable$EventDetector$_typeIndexes, emitter);
        if (J.get$isEmpty$asx(J.$index$asx(receiver.eventable$EventDetector$_emitterIndexes, type)) === true)
          J.remove$1$ax(receiver.eventable$EventDetector$_emitterIndexes, type);
      }
    }, "call$2", "get$ignoreSpecificEventBinding", 4, 0, 149, 146, [], 147, [], "ignoreSpecificEventBinding"],
    ignoreAllEventsOfType$1: [function(receiver, type) {
      var t1, emitterIndex;
      t1 = receiver.eventable$EventDetector$_emitterIndexes;
      if (t1 != null && J.$index$asx(t1, type) != null) {
        emitterIndex = J.$index$asx(receiver.eventable$EventDetector$_emitterIndexes, type);
        for (t1 = J.getInterceptor$asx(emitterIndex); t1.get$isNotEmpty(emitterIndex) === true;)
          this.ignoreSpecificEventBinding$2(receiver, J.get$first$ax(emitterIndex.get$keys()), type);
      }
    }, "call$1", "get$ignoreAllEventsOfType", 2, 0, 150, 147, [], "ignoreAllEventsOfType"],
    ignoreAllEventsFrom$1: [function(receiver, emitter) {
      var t1, typeIndex;
      t1 = receiver.eventable$EventDetector$_typeIndexes;
      if (t1 != null && J.$index$asx(t1, emitter) != null) {
        typeIndex = J.$index$asx(receiver.eventable$EventDetector$_typeIndexes, emitter);
        for (t1 = J.getInterceptor$asx(typeIndex); t1.get$isNotEmpty(typeIndex) === true;)
          this.ignoreSpecificEventBinding$2(receiver, emitter, J.get$first$ax(typeIndex.get$keys()));
      }
    }, "call$1", "get$ignoreAllEventsFrom", 2, 0, 151, 146, [], "ignoreAllEventsFrom"],
    ignoreAllEvents$0: [function(receiver) {
      if (receiver.eventable$EventDetector$_typeIndexes != null)
        for (; J.get$isNotEmpty$asx(receiver.eventable$EventDetector$_typeIndexes) === true;)
          this.ignoreAllEventsFrom$1(receiver, J.get$first$ax(receiver.eventable$EventDetector$_typeIndexes.get$keys()));
    }, "call$0", "get$ignoreAllEvents", 0, 0, 13, "ignoreAllEvents"]
  },
  EventEmitter: {
    "^": "Object;_actionQueues:eventable$EventEmitter$_actionQueues@-152,_emittingType:eventable$EventEmitter$_emittingType@-153",
    get$isEmitting: [function() {
      return this.eventable$EventEmitter$_emittingType != null;
    }, null, null, 1, 0, 115, "isEmitting"],
    get$emittingType: [function() {
      return this.eventable$EventEmitter$_emittingType;
    }, null, null, 1, 0, 131, "emittingType"],
    addEventAction$2: [function(type, action) {
      var t1, t2;
      if (J.$eq(this.eventable$EventEmitter$_emittingType, type)) {
        this.eventable$EventEmitter$_emittingType = null;
        throw H.wrapException(X.EmitTimeQueueChangeError$(this, type, action));
      }
      t1 = this.eventable$EventEmitter$_actionQueues;
      if (t1 == null) {
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Type, [P.List, {func: "void__Event", void: true, args: [X.Event]}]);
        this.eventable$EventEmitter$_actionQueues = t1;
      }
      if (J.$index$asx(t1, type) == null) {
        t1 = this.eventable$EventEmitter$_actionQueues;
        t2 = [];
        t2.$builtinTypeInfo = [{func: "void__Event", void: true, args: [X.Event]}];
        J.$indexSet$ax(t1, type, t2);
      }
      J.add$1$ax(J.$index$asx(this.eventable$EventEmitter$_actionQueues, type), action);
    }, "call$2", "get$addEventAction", 4, 0, 154, 147, [], 148, [], "addEventAction"],
    removeEventAction$2: [function(type, action) {
      var t1;
      if (J.$eq(this.eventable$EventEmitter$_emittingType, type)) {
        this.eventable$EventEmitter$_emittingType = null;
        throw H.wrapException(X.EmitTimeQueueChangeError$(this, type, action));
      }
      t1 = this.eventable$EventEmitter$_actionQueues;
      if (t1 != null && J.$index$asx(t1, type) != null) {
        J.remove$1$ax(J.$index$asx(this.eventable$EventEmitter$_actionQueues, type), action);
        if (J.get$isEmpty$asx(J.$index$asx(this.eventable$EventEmitter$_actionQueues, type)) === true) {
          J.remove$1$ax(this.eventable$EventEmitter$_actionQueues, type);
          if (J.get$isEmpty$asx(this.eventable$EventEmitter$_actionQueues) === true)
            this.eventable$EventEmitter$_actionQueues = null;
        }
      }
    }, "call$2", "get$removeEventAction", 4, 0, 154, 147, [], 148, [], "removeEventAction"],
    emitEvent$1: function(data) {
      var t1, $event, finished;
      t1 = {};
      $event = new X.Event(this, data, null);
      $event.$builtinTypeInfo = [null];
      t1.finished_0 = null;
      finished = P.Future_Future$delayed(P.Duration$(0, 0, 0, 0, 0, 0), new X.EventEmitter_emitEvent_closure(t1, this, data, $event), X.Event);
      t1.finished_0 = finished;
      return finished;
    },
    $isEventEmitter: true
  },
  EventEmitter_emitEvent_closure: {
    "^": "Closure:14;box_0,this_1,data_2,event_3",
    call$0: function() {
      var t1, t2, t3, t4;
      t1 = this.event_3;
      t1._finished = this.box_0.finished_0;
      t2 = this.this_1;
      t3 = H.reflect(this.data_2);
      t3 = t3.get$type(t3).get$reflectedType();
      t2.eventable$EventEmitter$_emittingType = t3;
      t4 = t2.eventable$EventEmitter$_actionQueues;
      if (t4 != null && J.$index$asx(t4, t3) != null)
        J.forEach$1$ax(J.$index$asx(t2.eventable$EventEmitter$_actionQueues, t2.eventable$EventEmitter$_emittingType), new X.EventEmitter_emitEvent__closure(t1));
      t3 = t2.eventable$EventEmitter$_actionQueues;
      if (t3 != null && J.$index$asx(t3, C.Type_yzX) != null)
        J.forEach$1$ax(J.$index$asx(t2.eventable$EventEmitter$_actionQueues, C.Type_yzX), new X.EventEmitter_emitEvent__closure0(t1));
      t2.eventable$EventEmitter$_emittingType = null;
      return t1;
    },
    $isFunction: true
  },
  EventEmitter_emitEvent__closure: {
    "^": "Closure:155;event_4",
    call$1: [function(action) {
      action.call$1(this.event_4);
    }, "call$1", null, 2, 0, null, 148, [], "call"],
    $isFunction: true
  },
  EventEmitter_emitEvent__closure0: {
    "^": "Closure:155;event_5",
    call$1: [function(action) {
      action.call$1(this.event_5);
    }, "call$1", null, 2, 0, null, 148, [], "call"],
    $isFunction: true
  }
}],
["html_common", "dart:html_common", , P, {
  "^": "",
  _convertDartToNative_PrepareForStructuredClone: function(value) {
    var copies, copy;
    copies = [];
    copy = new P._convertDartToNative_PrepareForStructuredClone_walk(new P._convertDartToNative_PrepareForStructuredClone_findSlot([], copies), new P._convertDartToNative_PrepareForStructuredClone_readSlot(copies), new P._convertDartToNative_PrepareForStructuredClone_writeSlot(copies)).call$1(value);
    new P._convertDartToNative_PrepareForStructuredClone_cleanupSlots().call$0();
    return copy;
  },
  convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
    var copies = [];
    return new P.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new P.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new P.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new P.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
  },
  Device_isOpera: function() {
    var t1 = $.Device__isOpera;
    if (t1 == null) {
      t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
      $.Device__isOpera = t1;
    }
    return t1;
  },
  Device_isWebKit: function() {
    var t1 = $.Device__isWebKit;
    if (t1 == null) {
      t1 = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0) === true;
      $.Device__isWebKit = t1;
    }
    return t1;
  },
  Device_cssPrefix: function() {
    var t1 = $.Device__cachedCssPrefix;
    if (t1 == null) {
      t1 = $.Device__isFirefox;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Firefox", 0);
        $.Device__isFirefox = t1;
      }
      if (t1 === true) {
        $.Device__cachedCssPrefix = "-moz-";
        t1 = "-moz-";
      } else {
        t1 = $.Device__isIE;
        if (t1 == null) {
          t1 = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "Trident/", 0) === true;
          $.Device__isIE = t1;
        }
        if (t1 === true) {
          $.Device__cachedCssPrefix = "-ms-";
          t1 = "-ms-";
        } else if (P.Device_isOpera() === true) {
          $.Device__cachedCssPrefix = "-o-";
          t1 = "-o-";
        } else {
          $.Device__cachedCssPrefix = "-webkit-";
          t1 = "-webkit-";
        }
      }
    }
    return t1;
  },
  _convertDartToNative_PrepareForStructuredClone_findSlot: {
    "^": "Closure:50;values_1,copies_2",
    call$1: function(value) {
      var t1, $length, i;
      t1 = this.values_1;
      $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      t1.push(value);
      this.copies_2.push(null);
      return $length;
    },
    $isFunction: true
  },
  _convertDartToNative_PrepareForStructuredClone_readSlot: {
    "^": "Closure:99;copies_3",
    call$1: function(i) {
      var t1 = this.copies_3;
      if (i >= t1.length)
        return H.ioore(t1, i);
      return t1[i];
    },
    $isFunction: true
  },
  _convertDartToNative_PrepareForStructuredClone_writeSlot: {
    "^": "Closure:156;copies_4",
    call$2: function(i, x) {
      var t1 = this.copies_4;
      if (i >= t1.length)
        return H.ioore(t1, i);
      t1[i] = x;
    },
    $isFunction: true
  },
  _convertDartToNative_PrepareForStructuredClone_cleanupSlots: {
    "^": "Closure:14;",
    call$0: function() {
    },
    $isFunction: true
  },
  _convertDartToNative_PrepareForStructuredClone_walk: {
    "^": "Closure:54;findSlot_5,readSlot_6,writeSlot_7",
    call$1: function(e) {
      var t1, t2, slot, copy, $length, i;
      t1 = {};
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      t2 = J.getInterceptor(e);
      if (!!t2.$isDateTime)
        return new Date(e.millisecondsSinceEpoch);
      if (!!t2.$isRegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (!!t2.$isFile)
        return e;
      if (!!t2.$isBlob)
        return e;
      if (!!t2.$isImageData)
        return e;
      if (!!t2.$isNativeByteBuffer)
        return e;
      if (!!t2.$isNativeTypedData)
        return e;
      if (!!t2.$isMap) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        t1.copy_0 = copy;
        if (copy != null)
          return copy;
        copy = {};
        t1.copy_0 = copy;
        this.writeSlot_7.call$2(slot, copy);
        t2.forEach$1(e, new P._convertDartToNative_PrepareForStructuredClone_walk_closure(t1, this));
        return t1.copy_0;
      }
      if (!!t2.$isList) {
        $length = t2.get$length(e);
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null) {
          if (true === copy) {
            copy = new Array($length);
            this.writeSlot_7.call$2(slot, copy);
          }
          return copy;
        }
        copy = new Array($length);
        this.writeSlot_7.call$2(slot, copy);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          t1 = this.call$1(t2.$index(e, i));
          if (i >= copy.length)
            return H.ioore(copy, i);
          copy[i] = t1;
        }
        return copy;
      }
      throw H.wrapException(P.UnimplementedError$("structured clone of other type"));
    },
    $isFunction: true
  },
  _convertDartToNative_PrepareForStructuredClone_walk_closure: {
    "^": "Closure:94;box_0,walk_8",
    call$2: [function(key, value) {
      this.box_0.copy_0[key] = this.walk_8.call$1(value);
    }, "call$2", null, 4, 0, null, 92, [], 19, [], "call"],
    $isFunction: true
  },
  convertNativeToDart_AcceptStructuredClone_findSlot: {
    "^": "Closure:50;values_0,copies_1",
    call$1: function(value) {
      var t1, $length, i, t2;
      t1 = this.values_0;
      $length = t1.length;
      for (i = 0; i < $length; ++i) {
        t2 = t1[i];
        if (t2 == null ? value == null : t2 === value)
          return i;
      }
      t1.push(value);
      this.copies_1.push(null);
      return $length;
    },
    $isFunction: true
  },
  convertNativeToDart_AcceptStructuredClone_readSlot: {
    "^": "Closure:99;copies_2",
    call$1: function(i) {
      var t1 = this.copies_2;
      if (i >= t1.length)
        return H.ioore(t1, i);
      return t1[i];
    },
    $isFunction: true
  },
  convertNativeToDart_AcceptStructuredClone_writeSlot: {
    "^": "Closure:156;copies_3",
    call$2: function(i, x) {
      var t1 = this.copies_3;
      if (i >= t1.length)
        return H.ioore(t1, i);
      t1[i] = x;
    },
    $isFunction: true
  },
  convertNativeToDart_AcceptStructuredClone_walk: {
    "^": "Closure:54;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
    call$1: function(e) {
      var slot, copy, t1, t2, key, $length, i;
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      if (e instanceof Date)
        return P.DateTime$fromMillisecondsSinceEpoch(e.getTime(), true);
      if (e instanceof RegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (Object.getPrototypeOf(e) === Object.prototype) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null)
          return copy;
        copy = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        this.writeSlot_7.call$2(slot, copy);
        t1 = Object.keys(e);
        t2 = new H.ListIterator(t1, t1.length, 0, null);
        t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
        for (; t2.moveNext$0();) {
          key = t2._current;
          copy.$indexSet(0, key, this.call$1(e[key]));
        }
        return copy;
      }
      if (e instanceof Array) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null)
          return copy;
        t1 = J.getInterceptor$asx(e);
        $length = t1.get$length(e);
        copy = this.mustCopy_4 ? new Array($length) : e;
        this.writeSlot_7.call$2(slot, copy);
        if (typeof $length !== "number")
          return H.iae($length);
        t2 = J.getInterceptor$ax(copy);
        i = 0;
        for (; i < $length; ++i)
          t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
        return copy;
      }
      return e;
    },
    $isFunction: true
  },
  CssClassSetImpl: {
    "^": "Object;",
    toString$0: function(_) {
      return this.readClasses$0().join$1(0, " ");
    },
    toggle$2: function(value, shouldAdd) {
      var s, result;
      s = this.readClasses$0();
      if (!s.contains$1(0, value)) {
        s.add$1(0, value);
        result = true;
      } else {
        s.remove$1(0, value);
        result = false;
      }
      this.writeClasses$1(s);
      return result;
    },
    toggle$1: function(value) {
      return this.toggle$2(value, null);
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this.readClasses$0();
      t2 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null);
      t2.$builtinTypeInfo = [null];
      t2._cell = t1._first;
      return t2;
    },
    forEach$1: function(_, f) {
      this.readClasses$0().forEach$1(0, f);
    },
    join$1: function(_, separator) {
      return this.readClasses$0().join$1(0, separator);
    },
    map$1: function(_, f) {
      var t1, t2;
      t1 = this.readClasses$0();
      t2 = new H.EfficientLengthMappedIterable(t1, f);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0), null];
      return t2;
    },
    where$1: function(_, f) {
      var t1, t2;
      t1 = this.readClasses$0();
      t2 = new H.WhereIterable(t1, f);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      return t2;
    },
    any$1: function(_, f) {
      return this.readClasses$0().any$1(0, f);
    },
    get$isEmpty: function(_) {
      return this.readClasses$0()._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this.readClasses$0()._collection$_length !== 0;
    },
    get$length: function(_) {
      return this.readClasses$0()._collection$_length;
    },
    fold$2: function(_, initialValue, combine) {
      return this.readClasses$0().fold$2(0, initialValue, combine);
    },
    contains$1: function(_, value) {
      return this.readClasses$0().contains$1(0, value);
    },
    lookup$1: function(value) {
      return this.readClasses$0().contains$1(0, value) ? value : null;
    },
    add$1: function(_, value) {
      return this.modify$1(new P.CssClassSetImpl_add_closure(value));
    },
    remove$1: function(_, value) {
      var s, result;
      if (typeof value !== "string")
        return false;
      s = this.readClasses$0();
      result = s.remove$1(0, value);
      this.writeClasses$1(s);
      return result;
    },
    addAll$1: function(_, iterable) {
      this.modify$1(new P.CssClassSetImpl_addAll_closure(iterable));
    },
    get$first: function(_) {
      var t1 = this.readClasses$0()._first;
      if (t1 == null)
        H.throwExpression(P.StateError$("No elements"));
      return J.get$_element$x(t1);
    },
    get$last: function(_) {
      var t1 = this.readClasses$0()._last;
      if (t1 == null)
        H.throwExpression(P.StateError$("No elements"));
      return J.get$_element$x(t1);
    },
    toList$1$growable: function(_, growable) {
      return this.readClasses$0().toList$1$growable(0, growable);
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    skip$1: function(_, n) {
      var t1 = this.readClasses$0();
      return H.SkipIterable_SkipIterable(t1, n, H.getTypeArgumentByIndex(t1, 0));
    },
    firstWhere$2$orElse: function(_, test, orElse) {
      return this.readClasses$0().firstWhere$2$orElse(0, test, orElse);
    },
    firstWhere$1: function($receiver, test) {
      return this.firstWhere$2$orElse($receiver, test, null);
    },
    elementAt$1: function(_, index) {
      return this.readClasses$0().elementAt$1(0, index);
    },
    clear$0: function(_) {
      this.modify$1(new P.CssClassSetImpl_clear_closure());
    },
    modify$1: function(f) {
      var s, ret;
      s = this.readClasses$0();
      ret = f.call$1(s);
      this.writeClasses$1(s);
      return ret;
    },
    $isSet: true,
    $asSet: function() {
      return [P.String];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.String];
    }
  },
  CssClassSetImpl_add_closure: {
    "^": "Closure:54;value_0",
    call$1: [function(s) {
      return J.add$1$ax(s, this.value_0);
    }, "call$1", null, 2, 0, null, 84, [], "call"],
    $isFunction: true
  },
  CssClassSetImpl_addAll_closure: {
    "^": "Closure:54;iterable_0",
    call$1: [function(s) {
      return J.addAll$1$ax(s, this.iterable_0);
    }, "call$1", null, 2, 0, null, 84, [], "call"],
    $isFunction: true
  },
  CssClassSetImpl_clear_closure: {
    "^": "Closure:54;",
    call$1: [function(s) {
      return J.clear$0$ax(s);
    }, "call$1", null, 2, 0, null, 84, [], "call"],
    $isFunction: true
  }
}],
["logging", "package:logging/logging.dart", , N, {
  "^": "",
  Logger: {
    "^": "Object;name>,parent>,_level,_children>,children,_controller",
    get$fullName: function() {
      var t1, t2, t3;
      t1 = this.parent;
      t2 = t1 == null || J.$eq(J.get$name$x(t1), "");
      t3 = this.name;
      return t2 ? t3 : H.S(t1.get$fullName()) + "." + t3;
    },
    get$level: function() {
      if ($.hierarchicalLoggingEnabled) {
        var t1 = this._level;
        if (t1 != null)
          return t1;
        t1 = this.parent;
        if (t1 != null)
          return t1.get$level();
      }
      return $._rootLevel;
    },
    set$level: function(value) {
      if ($.hierarchicalLoggingEnabled && this.parent != null)
        this._level = value;
      else {
        if (this.parent != null)
          throw H.wrapException(P.UnsupportedError$("Please set \"hierarchicalLoggingEnabled\" to true if you want to change the level on a non-root logger."));
        $._rootLevel = value;
      }
    },
    get$onRecord: function() {
      return this._getStream$0();
    },
    isLoggable$1: function(value) {
      var t1 = J.get$value$x(this.get$level());
      if (typeof t1 !== "number")
        return H.iae(t1);
      return value.value >= t1;
    },
    log$4: function(logLevel, message, error, stackTrace) {
      var t1, t2, t3, record, target;
      t1 = J.get$value$x(this.get$level());
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (logLevel.value >= t1) {
        if (!!J.getInterceptor(message).$isFunction)
          message = message.call$0();
        if (typeof message !== "string")
          message = J.toString$0(message);
        t1 = this.get$fullName();
        t2 = new P.DateTime(Date.now(), false);
        t2.DateTime$_now$0();
        t3 = $.LogRecord__nextNumber;
        $.LogRecord__nextNumber = t3 + 1;
        record = new N.LogRecord(logLevel, message, t1, t2, t3, error, stackTrace);
        if ($.hierarchicalLoggingEnabled)
          for (target = this; target != null;) {
            target._publish$1(record);
            target = J.get$parent$x(target);
          }
        else
          N.Logger_Logger("")._publish$1(record);
      }
    },
    finer$3: function(message, error, stackTrace) {
      return this.log$4(C.Level_FINER_400, message, error, stackTrace);
    },
    finer$1: function(message) {
      return this.finer$3(message, null, null);
    },
    fine$3: function(message, error, stackTrace) {
      return this.log$4(C.Level_FINE_500, message, error, stackTrace);
    },
    fine$1: function(message) {
      return this.fine$3(message, null, null);
    },
    info$3: function(message, error, stackTrace) {
      return this.log$4(C.Level_INFO_800, message, error, stackTrace);
    },
    info$1: function(message) {
      return this.info$3(message, null, null);
    },
    warning$3: function(message, error, stackTrace) {
      return this.log$4(C.Level_WARNING_900, message, error, stackTrace);
    },
    warning$1: function(message) {
      return this.warning$3(message, null, null);
    },
    _getStream$0: function() {
      var t1, t2;
      if ($.hierarchicalLoggingEnabled || this.parent == null) {
        t1 = this._controller;
        if (t1 == null) {
          t1 = P.StreamController_StreamController$broadcast(null, null, true, N.LogRecord);
          this._controller = t1;
        }
        t1.toString;
        t2 = new P._BroadcastStream(t1);
        t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
        return t2;
      } else
        return N.Logger_Logger("")._getStream$0();
    },
    _publish$1: function(record) {
      var t1 = this._controller;
      if (t1 != null) {
        if (t1._state >= 4)
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(record);
      }
    },
    Logger$_internal$3: function($name, $parent, children) {
      var t1 = this.parent;
      if (t1 != null)
        J.$indexSet$ax(J.get$_children$x(t1), this.name, this);
    },
    $isLogger: true,
    static: {"^": "Logger__loggers", Logger_Logger: function($name) {
        return $.get$Logger__loggers().putIfAbsent$2($name, new N.Logger_Logger_closure($name));
      }}
  },
  Logger_Logger_closure: {
    "^": "Closure:14;name_0",
    call$0: function() {
      var thisName, dot, $parent, t1, t2;
      thisName = this.name_0;
      if (C.JSString_methods.startsWith$1(thisName, "."))
        H.throwExpression(P.ArgumentError$("name shouldn't start with a '.'"));
      dot = C.JSString_methods.lastIndexOf$1(thisName, ".");
      if (dot === -1)
        $parent = thisName !== "" ? N.Logger_Logger("") : null;
      else {
        $parent = N.Logger_Logger(C.JSString_methods.substring$2(thisName, 0, dot));
        thisName = C.JSString_methods.substring$1(thisName, dot + 1);
      }
      t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, N.Logger);
      t2 = new P.UnmodifiableMapView(t1);
      t2.$builtinTypeInfo = [null, null];
      t2 = new N.Logger(thisName, $parent, null, t1, t2, null);
      t2.Logger$_internal$3(thisName, $parent, t1);
      return t2;
    },
    $isFunction: true
  },
  Level: {
    "^": "Object;name>,value>",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isLevel && this.value === other.value;
    },
    $lt: function(_, other) {
      var t1 = J.get$value$x(other);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this.value < t1;
    },
    $le: function(_, other) {
      var t1 = J.get$value$x(other);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this.value <= t1;
    },
    $gt: function(_, other) {
      var t1 = J.get$value$x(other);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this.value > t1;
    },
    $ge: function(_, other) {
      var t1 = J.get$value$x(other);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this.value >= t1;
    },
    compareTo$1: function(_, other) {
      var t1 = J.get$value$x(other);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this.value - t1;
    },
    get$hashCode: function(_) {
      return this.value;
    },
    toString$0: function(_) {
      return this.name;
    },
    $isLevel: true,
    static: {"^": "Level_ALL,Level_OFF,Level_FINEST,Level_FINER,Level_FINE,Level_CONFIG,Level_INFO,Level_WARNING,Level_SEVERE,Level_SHOUT,Level_LEVELS"}
  },
  LogRecord: {
    "^": "Object;level<,message>,loggerName,time,sequenceNumber,error>,stackTrace<",
    toString$0: function(_) {
      return "[" + this.level.name + "] " + this.loggerName + ": " + H.S(this.message);
    },
    $isLogRecord: true,
    static: {"^": "LogRecord__nextNumber"}
  }
}],
["metadata", "../packages/$sdk/lib/html/html_common/metadata.dart", , B, {
  "^": "",
  SupportedBrowser: {
    "^": "Object;browserName,minimumVersion",
    static: {"^": "SupportedBrowser_CHROME,SupportedBrowser_FIREFOX,SupportedBrowser_IE,SupportedBrowser_OPERA,SupportedBrowser_SAFARI"}
  },
  Experimental: {
    "^": "Object;"
  },
  DomName: {
    "^": "Object;name>"
  },
  DocsEditable: {
    "^": "Object;"
  },
  Unstable: {
    "^": "Object;"
  }
}],
["observe.src.bindable", "package:observe/src/bindable.dart", , A, {
  "^": "",
  Bindable: {
    "^": "Object;",
    set$value: function(_, newValue) {
    },
    deliver$0: function() {
    },
    $isBindable: true
  }
}],
["observe.src.change_notifier", "package:observe/src/change_notifier.dart", , O, {
  "^": "",
  ChangeNotifier: {
    "^": "Object;",
    get$changes: function(receiver) {
      var t1, t2;
      t1 = receiver.change_notifier$ChangeNotifier$_changes;
      if (t1 == null) {
        t1 = this.get$observed(receiver);
        t1 = P.StreamController_StreamController$broadcast(this.get$unobserved(receiver), t1, true, null);
        receiver.change_notifier$ChangeNotifier$_changes = t1;
      }
      t1.toString;
      t2 = new P._BroadcastStream(t1);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      return t2;
    },
    observed$0: [function(receiver) {
    }, "call$0", "get$observed", 0, 0, 13],
    unobserved$0: [function(receiver) {
      receiver.change_notifier$ChangeNotifier$_changes = null;
    }, "call$0", "get$unobserved", 0, 0, 13],
    deliverChanges$0: [function(receiver) {
      var records, t1, t2;
      records = receiver.change_notifier$ChangeNotifier$_change_notifier$_records;
      receiver.change_notifier$ChangeNotifier$_change_notifier$_records = null;
      t1 = receiver.change_notifier$ChangeNotifier$_changes;
      if (t1 != null) {
        t2 = t1._next;
        t2 = t2 == null ? t1 != null : t2 !== t1;
      } else
        t2 = false;
      if (t2 && records != null) {
        t2 = new P.UnmodifiableListView(records);
        t2.$builtinTypeInfo = [T.ChangeRecord];
        if (t1._state >= 4)
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(t2);
        return true;
      }
      return false;
    }, "call$0", "get$deliverChanges", 0, 0, 115],
    get$hasObservers: function(receiver) {
      var t1, t2;
      t1 = receiver.change_notifier$ChangeNotifier$_changes;
      if (t1 != null) {
        t2 = t1._next;
        t1 = t2 == null ? t1 != null : t2 !== t1;
      } else
        t1 = false;
      return t1;
    },
    notifyPropertyChange$3: function(receiver, field, oldValue, newValue) {
      return F.notifyPropertyChangeHelper(receiver, field, oldValue, newValue);
    },
    notifyChange$1: function(receiver, record) {
      var t1, t2;
      t1 = receiver.change_notifier$ChangeNotifier$_changes;
      if (t1 != null) {
        t2 = t1._next;
        t1 = t2 == null ? t1 != null : t2 !== t1;
      } else
        t1 = false;
      if (!t1)
        return;
      if (receiver.change_notifier$ChangeNotifier$_change_notifier$_records == null) {
        receiver.change_notifier$ChangeNotifier$_change_notifier$_records = [];
        P.scheduleMicrotask(this.get$deliverChanges(receiver));
      }
      receiver.change_notifier$ChangeNotifier$_change_notifier$_records.push(record);
    },
    $isObservable: true
  }
}],
["observe.src.change_record", "package:observe/src/change_record.dart", , T, {
  "^": "",
  ChangeRecord: {
    "^": "Object;",
    $isChangeRecord: true
  },
  PropertyChangeRecord: {
    "^": "ChangeRecord;object,name>,oldValue,newValue",
    toString$0: function(_) {
      return "#<PropertyChangeRecord " + H.S(this.name) + " from: " + H.S(this.oldValue) + " to: " + H.S(this.newValue) + ">";
    },
    $isPropertyChangeRecord: true
  }
}],
["observe.src.dirty_check", "package:observe/src/dirty_check.dart", , O, {
  "^": "",
  dirtyCheckObservables: function() {
    var cycles, debugLoop, toCheck, t1, anyChanged, i, observer, t2, info, t3;
    if ($._delivering)
      return;
    if ($._allObservables == null)
      return;
    $._delivering = true;
    cycles = 0;
    debugLoop = null;
    do {
      ++cycles;
      if (cycles === 1000)
        debugLoop = [];
      toCheck = $._allObservables;
      t1 = [];
      t1.$builtinTypeInfo = [F.Observable];
      $._allObservables = t1;
      for (t1 = debugLoop != null, anyChanged = false, i = 0; i < toCheck.length; ++i) {
        observer = toCheck[i];
        t2 = J.getInterceptor$x(observer);
        if (t2.get$hasObservers(observer)) {
          if (t2.deliverChanges$0(observer)) {
            if (t1)
              debugLoop.push([i, observer]);
            anyChanged = true;
          }
          $._allObservables.push(observer);
        }
      }
    } while (cycles < 1000 && anyChanged);
    if (t1 && anyChanged) {
      t1 = $.get$_logger();
      t1.warning$1("Possible loop in Observable.dirtyCheck, stopped checking.");
      t2 = new H.ListIterator(debugLoop, debugLoop.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(debugLoop, 0)];
      for (; t2.moveNext$0();) {
        info = t2._current;
        t3 = J.getInterceptor$asx(info);
        t1.warning$1("In last iteration Observable changed at index " + H.S(t3.$index(info, 0)) + ", object: " + H.S(t3.$index(info, 1)) + ".");
      }
    }
    $._allObservablesCount = $._allObservables.length;
    $._delivering = false;
  },
  dirtyCheckZoneSpec: function() {
    var t1 = {};
    t1.pending_0 = false;
    t1 = new O.dirtyCheckZoneSpec_enqueueDirtyCheck(t1);
    return new P._ZoneSpecification(null, null, null, null, new O.dirtyCheckZoneSpec_wrapCallback(t1), new O.dirtyCheckZoneSpec_wrapUnaryCallback(t1), null, null, null, null, null, null);
  },
  dirtyCheckZoneSpec_enqueueDirtyCheck: {
    "^": "Closure:157;box_0",
    call$2: function($parent, zone) {
      var t1 = this.box_0;
      if (t1.pending_0)
        return;
      t1.pending_0 = true;
      $parent.scheduleMicrotask$2(zone, new O.dirtyCheckZoneSpec_enqueueDirtyCheck_closure(t1));
    },
    $isFunction: true
  },
  dirtyCheckZoneSpec_enqueueDirtyCheck_closure: {
    "^": "Closure:14;box_0",
    call$0: [function() {
      this.box_0.pending_0 = false;
      O.dirtyCheckObservables();
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  dirtyCheckZoneSpec_wrapCallback: {
    "^": "Closure:28;enqueueDirtyCheck_1",
    call$4: [function($self, $parent, zone, f) {
      if (f == null)
        return f;
      return new O.dirtyCheckZoneSpec_wrapCallback_closure(this.enqueueDirtyCheck_1, $parent, zone, f);
    }, "call$4", null, 8, 0, null, 25, [], 26, [], 27, [], 29, [], "call"],
    $isFunction: true
  },
  dirtyCheckZoneSpec_wrapCallback_closure: {
    "^": "Closure:14;enqueueDirtyCheck_2,parent_3,zone_4,f_5",
    call$0: [function() {
      this.enqueueDirtyCheck_2.call$2(this.parent_3, this.zone_4);
      return this.f_5.call$0();
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  dirtyCheckZoneSpec_wrapUnaryCallback: {
    "^": "Closure:158;enqueueDirtyCheck_6",
    call$4: [function($self, $parent, zone, f) {
      if (f == null)
        return f;
      return new O.dirtyCheckZoneSpec_wrapUnaryCallback_closure(this.enqueueDirtyCheck_6, $parent, zone, f);
    }, "call$4", null, 8, 0, null, 25, [], 26, [], 27, [], 29, [], "call"],
    $isFunction: true
  },
  dirtyCheckZoneSpec_wrapUnaryCallback_closure: {
    "^": "Closure:54;enqueueDirtyCheck_7,parent_8,zone_9,f_10",
    call$1: [function(x) {
      this.enqueueDirtyCheck_7.call$2(this.parent_8, this.zone_9);
      return this.f_10.call$1(x);
    }, "call$1", null, 2, 0, null, 159, [], "call"],
    $isFunction: true
  }
}],
["observe.src.list_diff", "package:observe/src/list_diff.dart", , G, {
  "^": "",
  _calcEditDistances: function(current, currentStart, currentEnd, old, oldStart, oldEnd) {
    var rowCount, columnCount, distances, t1, i, t2, j, t3, t4, t5, t6, t7, t8;
    rowCount = oldEnd - oldStart + 1;
    columnCount = J.$add$ns(J.$sub$n(currentEnd, currentStart), 1);
    distances = Array(rowCount);
    for (t1 = distances.length, i = 0; i < rowCount; ++i) {
      if (typeof columnCount !== "number")
        return H.iae(columnCount);
      t2 = Array(columnCount);
      if (i >= t1)
        return H.ioore(distances, i);
      distances[i] = t2;
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t2[0] = i;
    }
    if (typeof columnCount !== "number")
      return H.iae(columnCount);
    j = 0;
    for (; j < columnCount; ++j) {
      if (0 >= t1)
        return H.ioore(distances, 0);
      t2 = distances[0];
      if (j >= t2.length)
        return H.ioore(t2, j);
      t2[j] = j;
    }
    for (t2 = J.getInterceptor$asx(current), i = 1; i < rowCount; ++i)
      for (t3 = i - 1, t4 = oldStart + i - 1, j = 1; j < columnCount; ++j) {
        if (t4 >>> 0 !== t4 || t4 >= old.length)
          return H.ioore(old, t4);
        t5 = J.$eq(old[t4], t2.$index(current, currentStart + j - 1));
        t6 = distances[t3];
        t7 = distances[i];
        t8 = j - 1;
        if (t5) {
          if (i >= t1)
            return H.ioore(distances, i);
          if (t3 >= t1)
            return H.ioore(distances, t3);
          if (t8 >= t6.length)
            return H.ioore(t6, t8);
          t5 = t6[t8];
          if (j >= t7.length)
            return H.ioore(t7, j);
          t7[j] = t5;
        } else {
          if (t3 >= t1)
            return H.ioore(distances, t3);
          if (j >= t6.length)
            return H.ioore(t6, j);
          t5 = t6[j];
          if (typeof t5 !== "number")
            return t5.$add();
          if (i >= t1)
            return H.ioore(distances, i);
          t6 = t7.length;
          if (t8 >= t6)
            return H.ioore(t7, t8);
          t8 = t7[t8];
          if (typeof t8 !== "number")
            return t8.$add();
          t8 = P.min(t5 + 1, t8 + 1);
          if (j >= t6)
            return H.ioore(t7, j);
          t7[j] = t8;
        }
      }
    return distances;
  },
  _spliceOperationsFromEditDistances: function(distances) {
    var t1, i, j, t2, current, edits, t3, t4, t5, northWest, west, north, min;
    t1 = distances.length;
    i = t1 - 1;
    if (0 >= t1)
      return H.ioore(distances, 0);
    j = distances[0].length - 1;
    if (i < 0)
      return H.ioore(distances, i);
    t2 = distances[i];
    if (j < 0 || j >= t2.length)
      return H.ioore(t2, j);
    current = t2[j];
    edits = [];
    while (true) {
      if (!(i > 0 || j > 0))
        break;
      c$0: {
        if (i === 0) {
          edits.push(2);
          --j;
          break c$0;
        }
        if (j === 0) {
          edits.push(3);
          --i;
          break c$0;
        }
        t2 = i - 1;
        if (t2 < 0)
          return H.ioore(distances, t2);
        t3 = distances[t2];
        t4 = j - 1;
        t5 = t3.length;
        if (t4 < 0 || t4 >= t5)
          return H.ioore(t3, t4);
        northWest = t3[t4];
        if (j < 0 || j >= t5)
          return H.ioore(t3, j);
        west = t3[j];
        if (i < 0)
          return H.ioore(distances, i);
        t3 = distances[i];
        if (t4 >= t3.length)
          return H.ioore(t3, t4);
        north = t3[t4];
        min = P.min(P.min(west, north), northWest);
        if (min === northWest) {
          if (northWest == null ? current == null : northWest === current)
            edits.push(0);
          else {
            edits.push(1);
            current = northWest;
          }
          j = t4;
          i = t2;
        } else if (min === west) {
          edits.push(3);
          current = west;
          i = t2;
        } else {
          edits.push(2);
          current = north;
          j = t4;
        }
      }
    }
    t1 = new H.IterableMixinWorkaround();
    t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(edits, 0)];
    t2 = new H.ReversedListIterable(edits);
    t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
    return t2.toList$0(0);
  },
  _sharedPrefix: function(arr1, arr2, searchLength) {
    var t1, i, t2;
    for (t1 = J.getInterceptor$asx(arr1), i = 0; i < searchLength; ++i) {
      t2 = t1.$index(arr1, i);
      if (i >= arr2.length)
        return H.ioore(arr2, i);
      if (!J.$eq(t2, arr2[i]))
        return i;
    }
    return searchLength;
  },
  _sharedSuffix: function(arr1, arr2, searchLength) {
    var t1, index1, index2, count, t2;
    t1 = J.getInterceptor$asx(arr1);
    index1 = t1.get$length(arr1);
    index2 = arr2.length;
    count = 0;
    while (true) {
      if (count < searchLength) {
        index1 = J.$sub$n(index1, 1);
        t2 = t1.$index(arr1, index1);
        --index2;
        if (index2 < 0 || index2 >= arr2.length)
          return H.ioore(arr2, index2);
        t2 = J.$eq(t2, arr2[index2]);
      } else
        t2 = false;
      if (!t2)
        break;
      ++count;
    }
    return count;
  },
  calcSplices: function(current, currentStart, currentEnd, old, oldStart, oldEnd) {
    var t1, minLength, prefixCount, suffixCount, splice, oldStart0, ops, splices, oldIndex, index, i, removed;
    t1 = J.getInterceptor$n(currentEnd);
    minLength = P.min(t1.$sub(currentEnd, currentStart), oldEnd - oldStart);
    prefixCount = currentStart === 0 && oldStart === 0 ? G._sharedPrefix(current, old, minLength) : 0;
    suffixCount = t1.$eq(currentEnd, J.get$length$asx(current)) && oldEnd === old.length ? G._sharedSuffix(current, old, minLength - prefixCount) : 0;
    currentStart += prefixCount;
    oldStart += prefixCount;
    currentEnd = t1.$sub(currentEnd, suffixCount);
    oldEnd -= suffixCount;
    t1 = J.getInterceptor$n(currentEnd);
    if (J.$eq(t1.$sub(currentEnd, currentStart), 0) && oldEnd - oldStart === 0)
      return C.List_empty;
    if (currentStart === currentEnd) {
      splice = G.ListChangeRecord_ListChangeRecord(current, currentStart, null, null);
      for (t1 = splice._removed; oldStart < oldEnd; oldStart = oldStart0) {
        oldStart0 = oldStart + 1;
        if (oldStart >>> 0 !== oldStart || oldStart >= old.length)
          return H.ioore(old, oldStart);
        t1.push(old[oldStart]);
      }
      return [splice];
    } else if (oldStart === oldEnd)
      return [G.ListChangeRecord_ListChangeRecord(current, currentStart, t1.$sub(currentEnd, currentStart), null)];
    ops = G._spliceOperationsFromEditDistances(G._calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd));
    splices = [];
    splices.$builtinTypeInfo = [G.ListChangeRecord];
    for (oldIndex = oldStart, index = currentStart, splice = null, i = 0; i < ops.length; ++i)
      switch (ops[i]) {
        case 0:
          if (splice != null) {
            splices.push(splice);
            splice = null;
          }
          ++index;
          ++oldIndex;
          break;
        case 1:
          if (splice == null) {
            removed = [];
            t1 = new P.UnmodifiableListView(removed);
            t1.$builtinTypeInfo = [null];
            splice = new G.ListChangeRecord(current, t1, removed, index, 0);
          }
          splice._addedCount = J.$add$ns(splice._addedCount, 1);
          ++index;
          t1 = splice._removed;
          if (oldIndex >>> 0 !== oldIndex || oldIndex >= old.length)
            return H.ioore(old, oldIndex);
          t1.push(old[oldIndex]);
          ++oldIndex;
          break;
        case 2:
          if (splice == null) {
            removed = [];
            t1 = new P.UnmodifiableListView(removed);
            t1.$builtinTypeInfo = [null];
            splice = new G.ListChangeRecord(current, t1, removed, index, 0);
          }
          splice._addedCount = J.$add$ns(splice._addedCount, 1);
          ++index;
          break;
        case 3:
          if (splice == null) {
            removed = [];
            t1 = new P.UnmodifiableListView(removed);
            t1.$builtinTypeInfo = [null];
            splice = new G.ListChangeRecord(current, t1, removed, index, 0);
          }
          t1 = splice._removed;
          if (oldIndex >>> 0 !== oldIndex || oldIndex >= old.length)
            return H.ioore(old, oldIndex);
          t1.push(old[oldIndex]);
          ++oldIndex;
          break;
      }
    if (splice != null)
      splices.push(splice);
    return splices;
  },
  ListChangeRecord: {
    "^": "ChangeRecord;object,_unmodifiableRemoved,_removed,_list_diff$_index,_addedCount",
    get$index: function(_) {
      return this._list_diff$_index;
    },
    get$removed: function() {
      return this._unmodifiableRemoved;
    },
    get$addedCount: function() {
      return this._addedCount;
    },
    indexChanged$1: function(key) {
      var t1;
      if (typeof key !== "number" || Math.floor(key) !== key || key < this._list_diff$_index)
        return false;
      if (!J.$eq(this._addedCount, J.get$length$asx(this._unmodifiableRemoved._source)))
        return true;
      t1 = this._addedCount;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return J.$lt$n(key, this._list_diff$_index + t1);
    },
    toString$0: function(_) {
      var t1 = this._unmodifiableRemoved;
      return "#<ListChangeRecord index: " + H.S(this._list_diff$_index) + ", removed: " + t1.toString$0(t1) + ", addedCount: " + H.S(this._addedCount) + ">";
    },
    $isListChangeRecord: true,
    static: {ListChangeRecord_ListChangeRecord: function(object, index, addedCount, removed) {
        var t1;
        removed = [];
        if (addedCount == null)
          addedCount = 0;
        t1 = new P.UnmodifiableListView(removed);
        t1.$builtinTypeInfo = [null];
        return new G.ListChangeRecord(object, t1, removed, index, addedCount);
      }}
  }
}],
["observe.src.metadata", "package:observe/src/metadata.dart", , K, {
  "^": "",
  ObservableProperty: {
    "^": "Object;"
  },
  Reflectable: {
    "^": "Object;"
  }
}],
["observe.src.observable", "package:observe/src/observable.dart", , F, {
  "^": "",
  Observable_dirtyCheck: [function() {
    return O.dirtyCheckObservables();
  }, "call$0", "Observable_dirtyCheck$closure", 0, 0, 13],
  notifyPropertyChangeHelper: function(obj, field, oldValue, newValue) {
    var t1, t2;
    t1 = J.getInterceptor$x(obj);
    if (t1.get$hasObservers(obj) && !J.$eq(oldValue, newValue)) {
      t2 = new T.PropertyChangeRecord(obj, field, oldValue, newValue);
      t2.$builtinTypeInfo = [null];
      t1.notifyChange$1(obj, t2);
    }
    return newValue;
  },
  Observable: {
    "^": "Object;_observable$_changes:observable$Observable$_observable$_changes%,_values:observable$Observable$_values%,_records:observable$Observable$_records%",
    get$changes: function(receiver) {
      var t1, t2;
      if (this.get$_observable$_changes(receiver) == null) {
        t1 = this.get$_observable$_observed(receiver);
        this.set$_observable$_changes(receiver, P.StreamController_StreamController$broadcast(this.get$_unobserved(receiver), t1, true, null));
      }
      t1 = this.get$_observable$_changes(receiver);
      t1.toString;
      t2 = new P._BroadcastStream(t1);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      return t2;
    },
    get$hasObservers: function(receiver) {
      var t1, t2;
      if (this.get$_observable$_changes(receiver) != null) {
        t1 = this.get$_observable$_changes(receiver);
        t2 = t1._next;
        t1 = t2 == null ? t1 != null : t2 !== t1;
      } else
        t1 = false;
      return t1;
    },
    _observable$_observed$0: [function(receiver) {
      var t1, values, t2, $name, getter;
      t1 = $._allObservables;
      if (t1 == null) {
        t1 = [];
        t1.$builtinTypeInfo = [F.Observable];
        $._allObservables = t1;
      }
      t1.push(receiver);
      $._allObservablesCount = $._allObservablesCount + 1;
      values = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol0, P.Object);
      t1 = this.get$runtimeType(receiver);
      t1 = $.get$typeInspector().query$2(0, t1, new A.QueryOptions(true, false, true, C.Type_HqF, false, false, C.List_GGa, null));
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      for (; t2.moveNext$0();) {
        $name = J.get$name$x(t2._current);
        getter = $.get$objectAccessor()._configuration.getters.$index(0, $name);
        if (getter == null)
          H.throwExpression(O.MissingCodeException$("getter \"" + H.S($name) + "\" in " + this.toString$0(receiver)));
        values.$indexSet(0, $name, getter.call$1(receiver));
      }
      this.set$_values(receiver, values);
    }, "call$0", "get$_observable$_observed", 0, 0, 13],
    _unobserved$0: [function(receiver) {
      if (this.get$_values(receiver) != null)
        this.set$_values(receiver, null);
    }, "call$0", "get$_unobserved", 0, 0, 13],
    deliverChanges$0: function(receiver) {
      var t1, t2;
      t1 = {};
      if (this.get$_values(receiver) == null || !this.get$hasObservers(receiver))
        return false;
      t1.records_0 = this.get$_records(receiver);
      this.set$_records(receiver, null);
      this.get$_values(receiver).forEach$1(0, new F.Observable_deliverChanges_closure(t1, receiver));
      if (t1.records_0 == null)
        return false;
      t2 = this.get$_observable$_changes(receiver);
      t1 = new P.UnmodifiableListView(t1.records_0);
      t1.$builtinTypeInfo = [T.ChangeRecord];
      if (t2._state >= 4)
        H.throwExpression(t2._addEventError$0());
      t2._sendData$1(t1);
      return true;
    },
    notifyPropertyChange$3: function(receiver, field, oldValue, newValue) {
      return F.notifyPropertyChangeHelper(receiver, field, oldValue, newValue);
    },
    notifyChange$1: function(receiver, record) {
      if (!this.get$hasObservers(receiver))
        return;
      if (this.get$_records(receiver) == null)
        this.set$_records(receiver, []);
      this.get$_records(receiver).push(record);
    },
    $isObservable: true
  },
  Observable_deliverChanges_closure: {
    "^": "Closure:94;box_0,this_1",
    call$2: function($name, oldValue) {
      var t1, newValue, t2, t3, records;
      t1 = this.this_1;
      newValue = $.get$objectAccessor().read$2(t1, $name);
      if (!J.$eq(oldValue, newValue)) {
        t2 = this.box_0;
        t3 = t2.records_0;
        if (t3 == null) {
          records = [];
          t2.records_0 = records;
          t2 = records;
        } else
          t2 = t3;
        t3 = new T.PropertyChangeRecord(t1, $name, oldValue, newValue);
        t3.$builtinTypeInfo = [null];
        t2.push(t3);
        J.get$_values$x(t1).$indexSet(0, $name, newValue);
      }
    },
    $isFunction: true
  }
}],
["observe.src.observable_box", "package:observe/src/observable_box.dart", , A, {
  "^": "",
  ObservableBox: {
    "^": "ChangeNotifier;",
    get$value: function(_) {
      return this._observable_box$_value;
    },
    set$value: function(_, newValue) {
      this._observable_box$_value = F.notifyPropertyChangeHelper(this, C.Symbol_value, this._observable_box$_value, newValue);
    },
    toString$0: function(_) {
      return "#<" + H.S(new H.TypeImpl(H.getRuntimeTypeString(this), null)) + " value: " + H.S(this._observable_box$_value) + ">";
    }
  }
}],
["observe.src.observable_list", "package:observe/src/observable_list.dart", , Q, {
  "^": "",
  ObservableList_applyChangeRecords: function(previous, current, changeRecords) {
    var t1, t2, change, t3, addEnd, removeEnd, addedItems, t4, t5, removeLength, insertLength, delta, insertEnd, newEnd, newLength;
    if (previous === current)
      throw H.wrapException(P.ArgumentError$("can't use same list for previous and current"));
    t1 = new H.ListIterator(changeRecords, changeRecords.length, 0, null);
    t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(changeRecords, 0)];
    t2 = J.getInterceptor$ax(current);
    for (; t1.moveNext$0();) {
      change = t1._current;
      t3 = J.getInterceptor$x(change);
      addEnd = J.$add$ns(t3.get$index(change), change.get$addedCount());
      removeEnd = J.$add$ns(t3.get$index(change), J.get$length$asx(change.get$removed()));
      addedItems = t2.getRange$2(current, t3.get$index(change), addEnd);
      t3 = t3.get$index(change);
      t4 = J.getInterceptor$n(t3);
      if (t4.$lt(t3, 0) === true || t4.$gt(t3, previous.length) === true)
        H.throwExpression(P.RangeError$range(t3, 0, previous.length));
      t5 = J.getInterceptor$n(removeEnd);
      if (t5.$lt(removeEnd, t3) === true || t5.$gt(removeEnd, previous.length) === true)
        H.throwExpression(P.RangeError$range(removeEnd, t3, previous.length));
      removeLength = t5.$sub(removeEnd, t3);
      insertLength = addedItems.get$length(addedItems);
      t5 = J.getInterceptor$n(removeLength);
      if (t5.$ge(removeLength, insertLength) === true) {
        delta = t5.$sub(removeLength, insertLength);
        insertEnd = t4.$add(t3, insertLength);
        t4 = previous.length;
        if (typeof delta !== "number")
          return H.iae(delta);
        newEnd = t4 - delta;
        H.IterableMixinWorkaround_setRangeList(previous, t3, insertEnd, addedItems, 0);
        if (delta !== 0) {
          H.IterableMixinWorkaround_setRangeList(previous, insertEnd, newEnd, previous, removeEnd);
          C.JSArray_methods.set$length(previous, newEnd);
        }
      } else {
        delta = J.$sub$n(insertLength, removeLength);
        t5 = previous.length;
        if (typeof delta !== "number")
          return H.iae(delta);
        newLength = t5 + delta;
        insertEnd = t4.$add(t3, insertLength);
        C.JSArray_methods.set$length(previous, newLength);
        H.IterableMixinWorkaround_setRangeList(previous, insertEnd, newLength, previous, removeEnd);
        H.IterableMixinWorkaround_setRangeList(previous, t3, insertEnd, addedItems, 0);
      }
    }
  }
}],
["observe.src.observable_map", "package:observe/src/observable_map.dart", , V, {
  "^": "",
  MapChangeRecord: {
    "^": "ChangeRecord;key>,oldValue,newValue,isInsert,isRemove",
    toString$0: function(_) {
      var kind;
      if (this.isInsert)
        kind = "insert";
      else
        kind = this.isRemove ? "remove" : "set";
      return "#<MapChangeRecord " + kind + " " + H.S(this.key) + " from: " + H.S(this.oldValue) + " to: " + H.S(this.newValue) + ">";
    },
    $isMapChangeRecord: true
  },
  ObservableMap: {
    "^": "ChangeNotifier;_observable_map$_map,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_change_notifier$_records",
    get$keys: function() {
      var t1, t2;
      t1 = this._observable_map$_map;
      t2 = new P.HashMapKeyIterable(t1);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      return t2;
    },
    get$values: function(_) {
      var t1 = this._observable_map$_map;
      return t1.get$values(t1);
    },
    get$length: function(_) {
      return this._observable_map$_map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._observable_map$_map._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._observable_map$_map._collection$_length !== 0;
    },
    containsKey$1: function(key) {
      return this._observable_map$_map.containsKey$1(key);
    },
    $index: function(_, key) {
      return this._observable_map$_map.$index(0, key);
    },
    $indexSet: function(_, key, value) {
      var t1, t2, len, oldValue;
      t1 = this.change_notifier$ChangeNotifier$_changes;
      if (t1 != null) {
        t2 = t1._next;
        t1 = t2 == null ? t1 != null : t2 !== t1;
      } else
        t1 = false;
      if (!t1) {
        this._observable_map$_map.$indexSet(0, key, value);
        return;
      }
      t1 = this._observable_map$_map;
      len = t1._collection$_length;
      oldValue = t1.$index(0, key);
      t1.$indexSet(0, key, value);
      t1 = t1._collection$_length;
      if (len !== t1) {
        F.notifyPropertyChangeHelper(this, C.Symbol_length, len, t1);
        t1 = new V.MapChangeRecord(key, null, value, true, false);
        t1.$builtinTypeInfo = [null, null];
        this.notifyChange$1(this, t1);
        this._notifyKeysValuesChanged$0();
      } else if (!J.$eq(oldValue, value)) {
        t1 = new V.MapChangeRecord(key, oldValue, value, false, false);
        t1.$builtinTypeInfo = [null, null];
        this.notifyChange$1(this, t1);
        t1 = new T.PropertyChangeRecord(this, C.Symbol_values, null, null);
        t1.$builtinTypeInfo = [null];
        this.notifyChange$1(this, t1);
      }
    },
    addAll$1: function(_, other) {
      J.forEach$1$ax(other, new V.ObservableMap_addAll_closure(this));
    },
    remove$1: function(_, key) {
      var t1, len, result, t2, t3;
      t1 = this._observable_map$_map;
      len = t1._collection$_length;
      result = t1.remove$1(0, key);
      t2 = this.change_notifier$ChangeNotifier$_changes;
      if (t2 != null) {
        t3 = t2._next;
        t2 = t3 == null ? t2 != null : t3 !== t2;
      } else
        t2 = false;
      if (t2 && len !== t1._collection$_length) {
        t2 = new V.MapChangeRecord(key, result, null, false, true);
        t2.$builtinTypeInfo = [null, null];
        this.notifyChange$1(this, t2);
        F.notifyPropertyChangeHelper(this, C.Symbol_length, len, t1._collection$_length);
        this._notifyKeysValuesChanged$0();
      }
      return result;
    },
    clear$0: function(_) {
      var t1, len, t2, t3;
      t1 = this._observable_map$_map;
      len = t1._collection$_length;
      t2 = this.change_notifier$ChangeNotifier$_changes;
      if (t2 != null) {
        t3 = t2._next;
        t2 = t3 == null ? t2 != null : t3 !== t2;
      } else
        t2 = false;
      if (t2 && len > 0) {
        t1.forEach$1(0, new V.ObservableMap_clear_closure(this));
        F.notifyPropertyChangeHelper(this, C.Symbol_length, len, 0);
        this._notifyKeysValuesChanged$0();
      }
      t1.clear$0(0);
    },
    forEach$1: function(_, f) {
      return this._observable_map$_map.forEach$1(0, f);
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    _notifyKeysValuesChanged$0: function() {
      var t1 = new T.PropertyChangeRecord(this, C.Symbol_keys, null, null);
      t1.$builtinTypeInfo = [null];
      this.notifyChange$1(this, t1);
      t1 = new T.PropertyChangeRecord(this, C.Symbol_values, null, null);
      t1.$builtinTypeInfo = [null];
      this.notifyChange$1(this, t1);
    },
    $isMap: true
  },
  ObservableMap_addAll_closure: {
    "^": "Closure;this_0",
    call$2: [function(key, value) {
      this.this_0.$indexSet(0, key, value);
    }, "call$2", null, 4, 0, null, 92, [], 19, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(K, V) {
        return {func: "dynamic__K_V1", args: [K, V]};
      }, this.this_0, "ObservableMap");
    }
  },
  ObservableMap_clear_closure: {
    "^": "Closure:94;this_0",
    call$2: function(key, value) {
      var t1, t2;
      t1 = this.this_0;
      t2 = new V.MapChangeRecord(key, value, null, false, true);
      t2.$builtinTypeInfo = [null, null];
      t1.notifyChange$1(t1, t2);
    },
    $isFunction: true
  }
}],
["observe.src.observer_transform", "package:observe/src/observer_transform.dart", , Y, {
  "^": "",
  ObserverTransform: {
    "^": "Bindable;_bindable,_getTransformer,_setTransformer,_observer_transform$_notifyCallback,_observer_transform$_value",
    _getTransformer$1: function(arg0) {
      return this._getTransformer.call$1(arg0);
    },
    _observer_transform$_notifyCallback$1: function(arg0) {
      return this._observer_transform$_notifyCallback.call$1(arg0);
    },
    open$1: function(_, callback) {
      var t1;
      this._observer_transform$_notifyCallback = callback;
      t1 = this._getTransformer$1(J.open$1$x(this._bindable, this.get$_observedCallback()));
      this._observer_transform$_value = t1;
      return t1;
    },
    _observedCallback$1: [function(newValue) {
      var value = this._getTransformer$1(newValue);
      if (J.$eq(value, this._observer_transform$_value))
        return;
      this._observer_transform$_value = value;
      return this._observer_transform$_notifyCallback$1(value);
    }, "call$1", "get$_observedCallback", 2, 0, 54, 64, []],
    close$0: function(_) {
      var t1 = this._bindable;
      if (t1 != null)
        J.close$0$x(t1);
      this._bindable = null;
      this._getTransformer = null;
      this._setTransformer = null;
      this._observer_transform$_notifyCallback = null;
      this._observer_transform$_value = null;
    },
    get$value: function(_) {
      var t1 = this._getTransformer$1(J.get$value$x(this._bindable));
      this._observer_transform$_value = t1;
      return t1;
    },
    set$value: function(_, newValue) {
      J.set$value$x(this._bindable, newValue);
    },
    deliver$0: function() {
      return this._bindable.deliver$0();
    }
  }
}],
["observe.src.path_observer", "package:observe/src/path_observer.dart", , L, {
  "^": "",
  _getObjectProperty: function(object, property) {
    var t1, t2, getter, exception, decl;
    if (object == null)
      return;
    t1 = property;
    if (typeof t1 === "number" && Math.floor(t1) === t1) {
      if (!!J.getInterceptor(object).$isList)
        t1 = (J.$ge$n(property, 0) && J.$lt$n(property, J.get$length$asx(object))) === true;
      else
        t1 = false;
      if (t1)
        return J.$index$asx(object, property);
    } else {
      t1 = property;
      if (typeof t1 === "string")
        return J.$index$asx(object, property);
      else if (!!J.getInterceptor(property).$isSymbol0) {
        t1 = object;
        t2 = H.checkSubtype(t1, "$isIndexable", [P.String, null], "$asIndexable");
        if (!t2) {
          t1 = object;
          t2 = H.checkSubtype(t1, "$isMap", [P.String, null], "$asMap");
          t1 = t2 && !C.JSArray_methods.contains$1(C.List_8QI, property);
        } else
          t1 = true;
        if (t1)
          return J.$index$asx(object, $.get$symbolConverter()._configuration.names.$index(0, property));
        try {
          t1 = object;
          t2 = property;
          getter = $.get$objectAccessor()._configuration.getters.$index(0, t2);
          if (getter == null)
            H.throwExpression(O.MissingCodeException$("getter \"" + H.S(t2) + "\" in " + H.S(t1)));
          t1 = getter.call$1(t1);
          return t1;
        } catch (exception) {
          if (!!J.getInterceptor(H.unwrapException(exception)).$isNoSuchMethodError) {
            t1 = J.get$runtimeType$(object);
            decl = $.get$typeInspector()._findDeclaration$2(t1, C.Symbol_noSuchMethod);
            if (!(decl != null && decl.get$isMethod() === true && decl.get$isStatic() !== true))
              throw exception;
          } else
            throw exception;
        }

      }
    }
    t1 = $.get$_logger0();
    if (t1.isLoggable$1(C.Level_FINER_400) === true)
      t1.finer$1("can't get " + H.S(property) + " in " + H.S(object));
    return;
  },
  _setObjectProperty: function(object, property, value) {
    var t1, t2, exception;
    if (object == null)
      return false;
    t1 = property;
    if (typeof t1 === "number" && Math.floor(t1) === t1) {
      if (!!J.getInterceptor(object).$isList)
        t1 = (J.$ge$n(property, 0) && J.$lt$n(property, J.get$length$asx(object))) === true;
      else
        t1 = false;
      if (t1) {
        J.$indexSet$ax(object, property, value);
        return true;
      }
    } else if (!!J.getInterceptor(property).$isSymbol0) {
      t1 = object;
      t2 = H.checkSubtype(t1, "$isIndexable", [P.String, null], "$asIndexable");
      if (!t2) {
        t1 = object;
        t2 = H.checkSubtype(t1, "$isMap", [P.String, null], "$asMap");
        t1 = t2 && !C.JSArray_methods.contains$1(C.List_8QI, property);
      } else
        t1 = true;
      if (t1) {
        J.$indexSet$ax(object, $.get$symbolConverter()._configuration.names.$index(0, property), value);
        return true;
      }
      try {
        $.get$objectAccessor().write$3(object, property, value);
        return true;
      } catch (exception) {
        if (!!J.getInterceptor(H.unwrapException(exception)).$isNoSuchMethodError) {
          t1 = J.get$runtimeType$(object);
          if (!$.get$typeInspector().hasInstanceMethod$2(t1, C.Symbol_noSuchMethod))
            throw exception;
        } else
          throw exception;
      }

    }
    t1 = $.get$_logger0();
    if (t1.isLoggable$1(C.Level_FINER_400) === true)
      t1.finer$1("can't set " + H.S(property) + " in " + H.S(object));
    return false;
  },
  PathObserver: {
    "^": "_Observer;_path_observer$_path,_object,_directObserver,_notifyCallback,_notifyArgumentCount,_path_observer$_value,_path_observer$_state",
    set$value: function(_, newValue) {
      var t1 = this._path_observer$_path;
      if (t1 != null)
        t1.setValueFrom$2(this._object, newValue);
    },
    get$_reportArgumentCount: function() {
      return 2;
    },
    open$1: function(_, callback) {
      return L._Observer.prototype.open$1.call(this, this, callback);
    },
    _connect$0: function() {
      this._directObserver = L._ObservedSet__ObservedSet(this, this._object);
      this._check$1$skipChanges(true);
    },
    _disconnect$0: function() {
      this._path_observer$_value = null;
      this._path_observer$_path = null;
      this._object = null;
    },
    _iterateObjects$1: function(observe) {
      this._path_observer$_path._iterateObjects$2(this._object, observe);
    },
    _check$1$skipChanges: function(skipChanges) {
      var oldValue, t1;
      oldValue = this._path_observer$_value;
      t1 = this._path_observer$_path.getValueFrom$1(this._object);
      this._path_observer$_value = t1;
      if (skipChanges || J.$eq(t1, oldValue))
        return false;
      this._report$3(this._path_observer$_value, oldValue, this);
      return true;
    },
    _check$0: function() {
      return this._check$1$skipChanges(false);
    },
    $isBindable: true
  },
  PropertyPath: {
    "^": "Object;_segments",
    get$length: function(_) {
      return this._segments.length;
    },
    get$isEmpty: function(_) {
      return this._segments.length === 0;
    },
    get$isValid: function() {
      return true;
    },
    toString$0: function(_) {
      var sb, t1, t2, first, key, str;
      if (!this.get$isValid())
        return "<invalid path>";
      sb = P.StringBuffer$("");
      t1 = this._segments;
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      first = true;
      for (; t2.moveNext$0(); first = false) {
        key = t2._current;
        t1 = J.getInterceptor(key);
        if (!!t1.$isSymbol0) {
          if (!first)
            sb._contents += ".";
          str = $.get$symbolConverter()._configuration.names.$index(0, key);
          sb._contents += typeof str === "string" ? str : H.S(str);
        } else if (typeof key === "number" && Math.floor(key) === key) {
          t1 = "[" + H.S(key) + "]";
          sb._contents += t1;
        } else {
          t1 = "[\"" + H.S(J.replaceAll$2$s(t1.toString$0(key), "\"", "\\\"")) + "\"]";
          sb._contents += t1;
        }
      }
      return sb._contents;
    },
    $eq: function(_, other) {
      var t1, len, t2, i, t3;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$isPropertyPath)
        return false;
      if (this.get$isValid() !== other.get$isValid())
        return false;
      t1 = this._segments;
      len = t1.length;
      t2 = other._segments;
      if (len !== t2.length)
        return false;
      for (i = 0; i < len; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t3 = t1[i];
        if (i >= t2.length)
          return H.ioore(t2, i);
        if (!J.$eq(t3, t2[i]))
          return false;
      }
      return true;
    },
    get$hashCode: function(_) {
      var t1, len, hash, i, t2;
      for (t1 = this._segments, len = t1.length, hash = 0, i = 0; i < len; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t2 = J.get$hashCode$(t1[i]);
        if (typeof t2 !== "number")
          return H.iae(t2);
        hash = 536870911 & hash + t2;
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >>> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    getValueFrom$1: function(obj) {
      var t1, t2, segment;
      if (!this.get$isValid())
        return;
      t1 = this._segments;
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      for (; t2.moveNext$0();) {
        segment = t2._current;
        if (obj == null)
          return;
        obj = L._getObjectProperty(obj, segment);
      }
      return obj;
    },
    setValueFrom$2: function(obj, value) {
      var t1, end, i;
      t1 = this._segments;
      end = t1.length - 1;
      if (end < 0)
        return false;
      for (i = 0; i < end; ++i) {
        if (obj == null)
          return false;
        if (i >= t1.length)
          return H.ioore(t1, i);
        obj = L._getObjectProperty(obj, t1[i]);
      }
      if (end >= t1.length)
        return H.ioore(t1, end);
      return L._setObjectProperty(obj, t1[end], value);
    },
    _iterateObjects$2: function(obj, observe) {
      var t1, last, i, i0;
      if (!this.get$isValid() || this._segments.length === 0)
        return;
      t1 = this._segments;
      last = t1.length - 1;
      for (i = 0; obj != null; i = i0) {
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        observe.call$2(obj, t1[0]);
        if (i >= last)
          break;
        i0 = i + 1;
        if (i >= t1.length)
          return H.ioore(t1, i);
        obj = L._getObjectProperty(obj, t1[i]);
      }
    },
    $isPropertyPath: true,
    static: {PropertyPath_PropertyPath: function(path) {
        var t1, copy, segment, pathObj, segments, t2, it;
        t1 = J.getInterceptor(path);
        if (!!t1.$isPropertyPath)
          return path;
        if (path != null)
          t1 = !!t1.$isList && t1.get$isEmpty(path);
        else
          t1 = true;
        if (t1)
          path = "";
        if (!!J.getInterceptor(path).$isList) {
          copy = P.List_List$from(path, false, null);
          t1 = new H.ListIterator(copy, copy.length, 0, null);
          t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(copy, 0)];
          for (; t1.moveNext$0();) {
            segment = t1._current;
            if ((typeof segment !== "number" || Math.floor(segment) !== segment) && typeof segment !== "string" && !J.getInterceptor(segment).$isSymbol0)
              throw H.wrapException(P.ArgumentError$("List must contain only ints, Strings, and Symbols"));
          }
          return new L.PropertyPath(copy);
        }
        t1 = $.get$_pathCache();
        pathObj = t1.$index(0, path);
        if (pathObj != null)
          return pathObj;
        segments = new L._PathParser([], -1, null, P.LinkedHashMap_LinkedHashMap$_literal(["beforePath", P.LinkedHashMap_LinkedHashMap$_literal(["ws", ["beforePath"], "ident", ["inIdent", "append"], "[", ["beforeElement"], "eof", ["afterPath"]], null, null), "inPath", P.LinkedHashMap_LinkedHashMap$_literal(["ws", ["inPath"], ".", ["beforeIdent"], "[", ["beforeElement"], "eof", ["afterPath"]], null, null), "beforeIdent", P.LinkedHashMap_LinkedHashMap$_literal(["ws", ["beforeIdent"], "ident", ["inIdent", "append"]], null, null), "inIdent", P.LinkedHashMap_LinkedHashMap$_literal(["ident", ["inIdent", "append"], "0", ["inIdent", "append"], "number", ["inIdent", "append"], "ws", ["inPath", "push"], ".", ["beforeIdent", "push"], "[", ["beforeElement", "push"], "eof", ["afterPath", "push"]], null, null), "beforeElement", P.LinkedHashMap_LinkedHashMap$_literal(["ws", ["beforeElement"], "0", ["afterZero", "append"], "number", ["inIndex", "append"], "'", ["inSingleQuote", "append", ""], "\"", ["inDoubleQuote", "append", ""]], null, null), "afterZero", P.LinkedHashMap_LinkedHashMap$_literal(["ws", ["afterElement", "push"], "]", ["inPath", "push"]], null, null), "inIndex", P.LinkedHashMap_LinkedHashMap$_literal(["0", ["inIndex", "append"], "number", ["inIndex", "append"], "ws", ["afterElement"], "]", ["inPath", "push"]], null, null), "inSingleQuote", P.LinkedHashMap_LinkedHashMap$_literal(["'", ["afterElement"], "eof", ["error"], "else", ["inSingleQuote", "append"]], null, null), "inDoubleQuote", P.LinkedHashMap_LinkedHashMap$_literal(["\"", ["afterElement"], "eof", ["error"], "else", ["inDoubleQuote", "append"]], null, null), "afterElement", P.LinkedHashMap_LinkedHashMap$_literal(["ws", ["afterElement"], "]", ["inPath", "push"]], null, null)], null, null)).parse$1(path);
        if (segments == null)
          return $.get$_InvalidPropertyPath__instance();
        pathObj = new L.PropertyPath(C.JSArray_methods.toList$1$growable(segments, false));
        if (t1._collection$_length >= 100) {
          t2 = new P.LinkedHashMapKeyIterable(t1);
          t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
          it = t2.get$iterator(t2);
          if (!it.moveNext$0())
            H.throwExpression(H.IterableElementError_noElement());
          t1.remove$1(0, it.get$current());
        }
        t1.$indexSet(0, path, pathObj);
        return pathObj;
      }}
  },
  _InvalidPropertyPath: {
    "^": "PropertyPath;_segments",
    get$isValid: function() {
      return false;
    },
    static: {"^": "_InvalidPropertyPath__instance"}
  },
  closure7: {
    "^": "Closure:14;",
    call$0: function() {
      return new H.JSSyntaxRegExp("^[$_a-zA-Z]+[$_a-zA-Z0-9]*$", H.JSSyntaxRegExp_makeNative("^[$_a-zA-Z]+[$_a-zA-Z0-9]*$", false, true, false), null, null);
    },
    $isFunction: true
  },
  _PathParser: {
    "^": "Object;keys<,index>,key>,_pathStateMachine",
    _getPathCharType$1: function(code) {
      var t1;
      if (code == null)
        return "eof";
      switch (code) {
        case 91:
        case 93:
        case 46:
        case 34:
        case 39:
        case 48:
          return H.Primitives_stringFromCharCodes([code]);
        case 95:
        case 36:
          return "ident";
        case 32:
        case 9:
        case 10:
        case 13:
        case 160:
        case 65279:
        case 8232:
        case 8233:
          return "ws";
      }
      if (typeof code !== "number")
        return H.iae(code);
      if (!(97 <= code && code <= 122))
        t1 = 65 <= code && code <= 90;
      else
        t1 = true;
      if (t1)
        return "ident";
      if (49 <= code && code <= 57)
        return "number";
      return "else";
    },
    push$0: function() {
      var t1, t2, t3, index;
      t1 = this.key;
      if (t1 == null)
        return;
      t1 = $.get$_identRegExp().hasMatch$1(t1);
      t2 = this.keys;
      t3 = this.key;
      if (t1 === true)
        t2.push($.get$symbolConverter()._configuration._symbols.$index(0, t3));
      else {
        index = H.Primitives_parseInt(t3, 10, new L._PathParser_push_closure());
        t2.push(index != null ? index : this.key);
      }
      this.key = null;
    },
    append$1: function(_, newChar) {
      var t1 = this.key;
      this.key = t1 == null ? newChar : H.S(t1) + H.S(newChar);
    },
    _maybeUnescapeQuote$2: function(mode, codePoints) {
      var t1, t2, nextChar;
      t1 = this.index;
      t2 = codePoints.length;
      if (t1 >= t2)
        return false;
      ++t1;
      if (t1 < 0 || t1 >= t2)
        return H.ioore(codePoints, t1);
      t1 = codePoints[t1];
      nextChar = H.Primitives_stringFromCharCodes([t1]);
      if (!(mode === "inSingleQuote" && nextChar === "'"))
        t1 = mode === "inDoubleQuote" && nextChar === "\"";
      else
        t1 = true;
      if (t1) {
        ++this.index;
        t1 = this.key;
        this.key = t1 == null ? nextChar : H.S(t1) + nextChar;
        return true;
      }
      return false;
    },
    parse$1: function(path) {
      var codePoints, t1, mode, t2, c, type, typeMap, transition, actionName, t3, newChar;
      codePoints = U.utf16CodeUnitsToCodepoints(J.get$codeUnits$s(path), 0, null, 65533);
      for (t1 = codePoints.length, mode = "beforePath"; mode != null;) {
        t2 = ++this.index;
        if (t2 >= t1)
          c = null;
        else {
          if (t2 < 0)
            return H.ioore(codePoints, t2);
          c = codePoints[t2];
        }
        if (c != null)
          t2 = H.Primitives_stringFromCharCodes([c]) === "\\" && this._maybeUnescapeQuote$2(mode, codePoints);
        else
          t2 = false;
        if (t2)
          continue;
        type = this._getPathCharType$1(c);
        if (J.$eq(mode, "error"))
          return;
        typeMap = this._pathStateMachine.$index(0, mode);
        transition = typeMap.$index(0, type);
        if (transition == null)
          transition = typeMap.$index(0, "else");
        if (transition == null)
          return;
        t2 = J.getInterceptor$asx(transition);
        mode = t2.$index(transition, 0);
        actionName = t2.get$length(transition) > 1 ? t2.$index(transition, 1) : null;
        t3 = J.getInterceptor(actionName);
        if (t3.$eq(actionName, "push") && this.key != null)
          this.push$0();
        if (t3.$eq(actionName, "append")) {
          if (t2.get$length(transition) > 2) {
            t2.$index(transition, 2);
            t3 = true;
          } else
            t3 = false;
          if (t3)
            newChar = t2.$index(transition, 2);
          else
            newChar = H.Primitives_stringFromCharCodes([c]);
          t2 = this.key;
          this.key = t2 == null ? newChar : H.S(t2) + H.S(newChar);
        }
        if (mode === "afterPath")
          return this.keys;
      }
      return;
    }
  },
  _PathParser_push_closure: {
    "^": "Closure:54;",
    call$1: function(_) {
      return;
    },
    $isFunction: true
  },
  CompoundObserver: {
    "^": "_Observer;_directObserver,_reportChangesOnOpen,_observed,_notifyCallback,_notifyArgumentCount,_path_observer$_value,_path_observer$_state",
    get$_reportArgumentCount: function() {
      return 3;
    },
    open$1: function(_, callback) {
      return L._Observer.prototype.open$1.call(this, this, callback);
    },
    _connect$0: function() {
      var t1, t2, i, object;
      for (t1 = this._observed, t2 = t1.length, i = 0; i < t2; i += 2) {
        object = t1[i];
        if (object !== C.C__ObserverSentinel) {
          t1 = $._ObservedSet__lastSet;
          if (t1 != null) {
            t2 = t1._rootObject;
            t2 = t2 == null ? object != null : t2 !== object;
          } else
            t2 = true;
          if (t2) {
            t1 = object == null ? null : P.LinkedHashSet_LinkedHashSet(null, null, null, null);
            t1 = new L._ObservedSet(object, t1, [], null);
            $._ObservedSet__lastSet = t1;
          }
          if (t1._rootObject == null) {
            t1._rootObject = object;
            t1._rootObjectProperties = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
          }
          t1._path_observer$_observers.push(this);
          this._iterateObjects$1(t1.get$observe(t1));
          this._directObserver = null;
          break;
        }
      }
      this._check$1$skipChanges(!this._reportChangesOnOpen);
    },
    _disconnect$0: function() {
      var i, t1, t2, t3;
      for (i = 0; t1 = this._observed, t2 = t1.length, i < t2; i += 2)
        if (t1[i] === C.C__ObserverSentinel) {
          t3 = i + 1;
          if (t3 >= t2)
            return H.ioore(t1, t3);
          J.close$0$x(t1[t3]);
        }
      this._observed = null;
      this._path_observer$_value = null;
    },
    addPath$2: function(object, path) {
      var t1 = this._path_observer$_state;
      if (t1 === $._Observer__OPENED || t1 === $._Observer__CLOSED)
        throw H.wrapException(P.StateError$("Cannot add paths once started."));
      path = L.PropertyPath_PropertyPath(path);
      t1 = this._observed;
      t1.push(object);
      t1.push(path);
      if (!this._reportChangesOnOpen)
        return;
      J.add$1$ax(this._path_observer$_value, path.getValueFrom$1(object));
    },
    addPath$1: function(object) {
      return this.addPath$2(object, null);
    },
    addObserver$1: function(observer) {
      var t1 = this._path_observer$_state;
      if (t1 === $._Observer__OPENED || t1 === $._Observer__CLOSED)
        throw H.wrapException(P.StateError$("Cannot add observers once started."));
      t1 = this._observed;
      t1.push(C.C__ObserverSentinel);
      t1.push(observer);
      if (!this._reportChangesOnOpen)
        return;
      J.add$1$ax(this._path_observer$_value, J.open$1$x(observer, new L.CompoundObserver_addObserver_closure(this)));
    },
    _iterateObjects$1: function(observe) {
      var i, t1, t2, object, t3;
      for (i = 0; t1 = this._observed, t2 = t1.length, i < t2; i += 2) {
        object = t1[i];
        if (object !== C.C__ObserverSentinel) {
          t3 = i + 1;
          if (t3 >= t2)
            return H.ioore(t1, t3);
          H.interceptedTypeCast(t1[t3], "$isPropertyPath")._iterateObjects$2(object, observe);
        }
      }
    },
    _check$1$skipChanges: function(skipChanges) {
      var changed, oldValues, i, t1, t2, object, t3, path, value;
      J.set$length$asx(this._path_observer$_value, C.JSInt_methods._tdivFast$1(this._observed.length, 2));
      for (changed = false, oldValues = null, i = 0; t1 = this._observed, t2 = t1.length, i < t2; i += 2) {
        object = t1[i];
        t3 = i + 1;
        if (t3 >= t2)
          return H.ioore(t1, t3);
        path = t1[t3];
        if (object === C.C__ObserverSentinel) {
          H.interceptedTypeCast(path, "$isBindable");
          value = this._path_observer$_state === $._Observer__UNOPENED ? path.open$1(0, new L.CompoundObserver__check_closure(this)) : path.get$value(path);
        } else
          value = H.interceptedTypeCast(path, "$isPropertyPath").getValueFrom$1(object);
        if (skipChanges) {
          J.$indexSet$ax(this._path_observer$_value, C.JSInt_methods._tdivFast$1(i, 2), value);
          continue;
        }
        t1 = this._path_observer$_value;
        t2 = C.JSInt_methods._tdivFast$1(i, 2);
        if (J.$eq(value, J.$index$asx(t1, t2)))
          continue;
        t1 = this._notifyArgumentCount;
        if (typeof t1 !== "number")
          return t1.$ge();
        if (t1 >= 2) {
          if (oldValues == null)
            oldValues = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
          oldValues.$indexSet(0, t2, J.$index$asx(this._path_observer$_value, t2));
        }
        J.$indexSet$ax(this._path_observer$_value, t2, value);
        changed = true;
      }
      if (!changed)
        return false;
      this._report$3(this._path_observer$_value, oldValues, t1);
      return true;
    },
    _check$0: function() {
      return this._check$1$skipChanges(false);
    },
    $isBindable: true
  },
  CompoundObserver_addObserver_closure: {
    "^": "Closure:54;this_0",
    call$1: [function(_) {
      var t1 = this.this_0;
      if (t1._path_observer$_state === $._Observer__OPENED)
        t1._dirtyCheck$0();
      return;
    }, "call$1", null, 2, 0, null, 108, [], "call"],
    $isFunction: true
  },
  CompoundObserver__check_closure: {
    "^": "Closure:54;this_0",
    call$1: [function(_) {
      var t1 = this.this_0;
      if (t1._path_observer$_state === $._Observer__OPENED)
        t1._dirtyCheck$0();
      return;
    }, "call$1", null, 2, 0, null, 108, [], "call"],
    $isFunction: true
  },
  _ObserverSentinel: {
    "^": "Object;"
  },
  _Observer: {
    "^": "Bindable;",
    _notifyCallback$0: function() {
      return this._notifyCallback.call$0();
    },
    _notifyCallback$1: function(arg0) {
      return this._notifyCallback.call$1(arg0);
    },
    _notifyCallback$2: function(arg0, arg1) {
      return this._notifyCallback.call$2(arg0, arg1);
    },
    _notifyCallback$3: function(arg0, arg1, arg2) {
      return this._notifyCallback.call$3(arg0, arg1, arg2);
    },
    get$_isOpen: function() {
      return this._path_observer$_state === $._Observer__OPENED;
    },
    open$1: function(_, callback) {
      var t1 = this._path_observer$_state;
      if (t1 === $._Observer__OPENED || t1 === $._Observer__CLOSED)
        throw H.wrapException(P.StateError$("Observer has already been opened."));
      if (X.minArgs(callback) > this.get$_reportArgumentCount())
        throw H.wrapException(P.ArgumentError$("callback should take " + this.get$_reportArgumentCount() + " or fewer arguments"));
      this._notifyCallback = callback;
      this._notifyArgumentCount = P.min(this.get$_reportArgumentCount(), X.maxArgs(callback));
      this._connect$0();
      this._path_observer$_state = $._Observer__OPENED;
      return this._path_observer$_value;
    },
    get$value: function(_) {
      this._check$1$skipChanges(true);
      return this._path_observer$_value;
    },
    close$0: function(_) {
      if (this._path_observer$_state !== $._Observer__OPENED)
        return;
      this._disconnect$0();
      this._path_observer$_value = null;
      this._notifyCallback = null;
      this._path_observer$_state = $._Observer__CLOSED;
    },
    deliver$0: function() {
      if (this._path_observer$_state === $._Observer__OPENED)
        this._dirtyCheck$0();
    },
    _dirtyCheck$0: function() {
      var cycles = 0;
      while (true) {
        if (!(cycles < 1000 && this._check$0()))
          break;
        ++cycles;
      }
      return cycles > 0;
    },
    _report$3: function(newValue, oldValue, extraArg) {
      var e, s, exception, t1;
      try {
        switch (this._notifyArgumentCount) {
          case 0:
            this._notifyCallback$0();
            break;
          case 1:
            this._notifyCallback$1(newValue);
            break;
          case 2:
            this._notifyCallback$2(newValue, oldValue);
            break;
          case 3:
            this._notifyCallback$3(newValue, oldValue, extraArg);
            break;
        }
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        t1 = new P._AsyncCompleter(P._Future$(null));
        t1.$builtinTypeInfo = [null];
        t1.completeError$2(e, s);
      }

    }
  },
  _ObservedSet: {
    "^": "Object;_rootObject,_rootObjectProperties,_path_observer$_observers,_objects",
    observe$2: [function(_, obj, prop) {
      var t1 = this._rootObject;
      if (obj == null ? t1 == null : obj === t1)
        this._rootObjectProperties.add$1(0, prop);
      t1 = J.getInterceptor(obj);
      if (!!t1.$isObservable)
        this._observeStream$1(t1.get$changes(obj));
    }, "call$2", "get$observe", 4, 0, 160, 161, [], 162, []],
    _observeStream$1: function(stream) {
      var t1 = this._objects;
      if (t1 == null) {
        t1 = P.HashMap_HashMap(null, null, null, null, null);
        this._objects = t1;
      }
      if (!t1.containsKey$1(stream))
        this._objects.$indexSet(0, stream, stream.listen$1(0, this.get$_path_observer$_callback()));
    },
    _canIgnoreRecords$1: function(records) {
      var t1, rec, t2, t3;
      for (t1 = J.get$iterator$ax(records); t1.moveNext$0() === true;) {
        rec = t1.get$current();
        t2 = J.getInterceptor(rec);
        if (!!t2.$isPropertyChangeRecord) {
          if (rec.object !== this._rootObject || this._rootObjectProperties.contains$1(0, rec.name))
            return false;
        } else if (!!t2.$isListChangeRecord) {
          t2 = rec.object;
          t3 = this._rootObject;
          if ((t2 == null ? t3 != null : t2 !== t3) || this._rootObjectProperties.contains$1(0, rec._list_diff$_index))
            return false;
        } else
          return false;
      }
      return true;
    },
    _path_observer$_callback$1: [function(records) {
      var t1, t2, t3, observer;
      if (this._canIgnoreRecords$1(records))
        return;
      t1 = this._path_observer$_observers;
      t2 = C.JSArray_methods.toList$1$growable(t1, false);
      t3 = new H.ListIterator(t2, t2.length, 0, null);
      t3.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
      for (; t3.moveNext$0();) {
        observer = t3._current;
        if (observer.get$_isOpen() === true)
          observer._iterateObjects$1(this.get$observe(this));
      }
      t1 = C.JSArray_methods.toList$1$growable(t1, false);
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      for (; t2.moveNext$0();) {
        observer = t2._current;
        if (observer.get$_isOpen() === true)
          observer._check$0();
      }
    }, "call$1", "get$_path_observer$_callback", 2, 0, 18, 163, []],
    static: {"^": "_ObservedSet__lastSet", _ObservedSet__ObservedSet: function(observer, rootObject) {
        var t1, t2;
        t1 = $._ObservedSet__lastSet;
        if (t1 != null) {
          t2 = t1._rootObject;
          t2 = t2 == null ? rootObject != null : t2 !== rootObject;
        } else
          t2 = true;
        if (t2) {
          t1 = rootObject == null ? null : P.LinkedHashSet_LinkedHashSet(null, null, null, null);
          t1 = new L._ObservedSet(rootObject, t1, [], null);
          $._ObservedSet__lastSet = t1;
        }
        if (t1._rootObject == null) {
          t1._rootObject = rootObject;
          t1._rootObjectProperties = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        }
        t1._path_observer$_observers.push(observer);
        observer._iterateObjects$1(t1.get$observe(t1));
      }}
  }
}],
["path", "package:path/path.dart", , B, {
  "^": "",
  current: function() {
    var uri, t1, t2, path;
    uri = P.Uri_base();
    t1 = $.get$Style_platform();
    t2 = $.get$Style_url();
    if (t1 == null ? t2 == null : t1 === t2)
      return uri.resolveUri$1(P.Uri_parse(".")).toString$0(0);
    else {
      path = uri.toFilePath$0();
      return C.JSString_methods.substring$2(path, 0, path.length - 1);
    }
  }
}],
["path.context", "package:path/src/context.dart", , F, {
  "^": "",
  _validateArgList: function(method, args) {
    var i, numArgs, numArgs0, message, t1, t2, t3;
    for (i = 1; i < 8; ++i) {
      if (args[i] == null || args[i - 1] != null)
        continue;
      for (numArgs = 8; numArgs >= 1; numArgs = numArgs0) {
        numArgs0 = numArgs - 1;
        if (args[numArgs0] != null)
          break;
      }
      message = new P.StringBuffer("");
      message._contents = "";
      t1 = method + "(";
      message._contents = t1;
      t2 = new H.IterableMixinWorkaround();
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(args, 0)];
      t3 = new H.SubListIterable(args, 0, numArgs);
      t3.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
      if (numArgs < 0)
        H.throwExpression(P.RangeError$value(numArgs));
      if (0 > numArgs)
        H.throwExpression(P.RangeError$range(0, 0, numArgs));
      t2 = new H.MappedListIterable(t3, new F._validateArgList_closure());
      t2.$builtinTypeInfo = [null, null];
      t2 = t2.join$1(0, ", ");
      t1 += t2;
      message._contents = t1;
      t2 = "): part " + (i - 1) + " was null, but part " + i + " was not.";
      message._contents = t1 + t2;
      throw H.wrapException(P.ArgumentError$(message.toString$0(0)));
    }
  },
  Context: {
    "^": "Object;style,_context1$_current",
    get$current: function() {
      return B.current();
    },
    join$8: function(_, part1, part2, part3, part4, part5, part6, part7, part8) {
      var parts, t1, t2;
      parts = [part1, part2, part3, part4, part5, part6, part7, part8];
      F._validateArgList("join", parts);
      t1 = new H.IterableMixinWorkaround();
      t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(parts, 0)];
      t2 = new H.WhereIterable(parts, new F.Context_join_closure());
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      return this.joinAll$1(t2);
    },
    join$1: function($receiver, part1) {
      return this.join$8($receiver, part1, null, null, null, null, null, null, null);
    },
    joinAll$1: function(parts) {
      var buffer, t1, t2, t3, needsSeparator, isAbsoluteAndNotRootRelative, part, parsed, root, t4, t5;
      buffer = P.StringBuffer$("");
      t1 = new F.Context_joinAll_closure();
      t2 = new H.WhereIterable(parts, t1);
      t2.$builtinTypeInfo = [H.getRuntimeTypeArgument(parts, "IterableBase", 0)];
      t3 = parts.get$iterator(parts);
      t1 = new H.WhereIterator(t3, t1);
      t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
      t2 = this.style;
      needsSeparator = false;
      isAbsoluteAndNotRootRelative = false;
      for (; t1.moveNext$0();) {
        part = t3.get$current();
        if (Q.ParsedPath_ParsedPath$parse(part, t2).isRootRelative && isAbsoluteAndNotRootRelative) {
          parsed = Q.ParsedPath_ParsedPath$parse(part, t2);
          root = Q.ParsedPath_ParsedPath$parse(buffer._contents, t2).root;
          t4 = root == null ? "" : root;
          parsed.root = t4;
          if (t2.needsSeparator$1(t4)) {
            t4 = parsed.separators;
            t5 = t2.get$separator();
            if (0 >= t4.length)
              return H.ioore(t4, 0);
            t4[0] = t5;
          }
          buffer._contents = "";
          t4 = parsed.toString$0(0);
          buffer._contents += t4;
        } else if (Q.ParsedPath_ParsedPath$parse(part, t2).root != null) {
          isAbsoluteAndNotRootRelative = !Q.ParsedPath_ParsedPath$parse(part, t2).isRootRelative;
          buffer._contents = "";
          buffer._contents += typeof part === "string" ? part : H.S(part);
        } else {
          t4 = J.getInterceptor$asx(part);
          if (J.$gt$n(t4.get$length(part), 0) === true && t2.containsSeparator$1(t4.$index(part, 0)) === true)
            ;
          else if (needsSeparator) {
            t4 = t2.get$separator();
            buffer._contents += t4;
          }
          buffer._contents += typeof part === "string" ? part : H.S(part);
        }
        needsSeparator = t2.needsSeparator$1(part);
      }
      return buffer._contents;
    },
    split$1: function(_, path) {
      var parsed, t1, t2;
      parsed = Q.ParsedPath_ParsedPath$parse(path, this.style);
      t1 = parsed.parts;
      t2 = new H.IterableMixinWorkaround();
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      t1 = new H.WhereIterable(t1, new F.Context_split_closure());
      t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
      t1 = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
      parsed.parts = t1;
      t2 = parsed.root;
      if (t2 != null)
        C.JSArray_methods.insert$2(t1, 0, t2);
      return parsed.parts;
    },
    normalize$1: function(path) {
      var parsed = Q.ParsedPath_ParsedPath$parse(path, this.style);
      parsed.normalize$0();
      return parsed.toString$0(0);
    },
    relative$2$from: function(path, from) {
      var t1, fromParsed, pathParsed, t2, t3;
      from = B.current();
      t1 = this.style;
      if (Q.ParsedPath_ParsedPath$parse(from, t1).root == null && Q.ParsedPath_ParsedPath$parse(path, t1).root != null)
        return this.normalize$1(path);
      if (Q.ParsedPath_ParsedPath$parse(path, t1).root == null || Q.ParsedPath_ParsedPath$parse(path, t1).isRootRelative)
        path = this.join$8(0, B.current(), path, null, null, null, null, null, null);
      if (Q.ParsedPath_ParsedPath$parse(path, t1).root == null && Q.ParsedPath_ParsedPath$parse(from, t1).root != null)
        throw H.wrapException(E.PathException$("Unable to find a path to \"" + path + "\" from \"" + from + "\"."));
      fromParsed = Q.ParsedPath_ParsedPath$parse(from, t1);
      fromParsed.normalize$0();
      pathParsed = Q.ParsedPath_ParsedPath$parse(path, t1);
      pathParsed.normalize$0();
      t2 = fromParsed.parts;
      if (t2.length > 0 && J.$eq(t2[0], "."))
        return pathParsed.toString$0(0);
      if (!J.$eq(fromParsed.root, pathParsed.root)) {
        t2 = fromParsed.root;
        t2 = t2 == null || pathParsed.root == null || !J.$eq(J.replaceAll$2$s(J.toLowerCase$0$s(t2), "/", "\\"), J.replaceAll$2$s(J.toLowerCase$0$s(pathParsed.root), "/", "\\"));
      } else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      while (true) {
        t2 = fromParsed.parts;
        if (t2.length > 0) {
          t3 = pathParsed.parts;
          t2 = t3.length > 0 && J.$eq(t2[0], t3[0]);
        } else
          t2 = false;
        if (!t2)
          break;
        C.JSArray_methods.removeAt$1(fromParsed.parts, 0);
        C.JSArray_methods.removeAt$1(fromParsed.separators, 1);
        C.JSArray_methods.removeAt$1(pathParsed.parts, 0);
        C.JSArray_methods.removeAt$1(pathParsed.separators, 1);
      }
      t2 = fromParsed.parts;
      if (t2.length > 0 && J.$eq(t2[0], ".."))
        throw H.wrapException(E.PathException$("Unable to find a path to \"" + path + "\" from \"" + from + "\"."));
      t2 = pathParsed.parts;
      t3 = P.List_List$filled(fromParsed.parts.length, "..", null);
      H.IterableMixinWorkaround_insertAllList(t2, 0, t3);
      t2 = pathParsed.separators;
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t2[0] = "";
      t1 = P.List_List$filled(fromParsed.parts.length, t1.get$separator(), null);
      if (!!t2.fixed$length)
        H.throwExpression(P.UnsupportedError$("insertAll"));
      H.IterableMixinWorkaround_insertAllList(t2, 1, t1);
      t1 = pathParsed.parts;
      t2 = t1.length;
      if (t2 === 0)
        return ".";
      if (t2 > 1 && J.$eq(C.JSArray_methods.get$last(t1), ".")) {
        t1 = pathParsed.parts;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1.pop();
        t1 = pathParsed.separators;
        C.JSArray_methods.removeLast$0(t1);
        C.JSArray_methods.removeLast$0(t1);
        C.JSArray_methods.add$1(t1, "");
      }
      pathParsed.root = "";
      pathParsed.removeTrailingSeparators$0();
      return pathParsed.toString$0(0);
    },
    relative$1: function(path) {
      return this.relative$2$from(path, null);
    },
    prettyUri$1: function(uri) {
      var t1, t2, t3, t4, path, rel;
      t1 = uri.scheme;
      t2 = J.getInterceptor(t1);
      if (t2.$eq(t1, "file")) {
        t3 = this.style;
        t4 = $.get$Style_url();
        t4 = t3 == null ? t4 == null : t3 === t4;
        t3 = t4;
      } else
        t3 = false;
      if (t3)
        return uri.toString$0(0);
      if (!t2.$eq(t1, "file"))
        if (!t2.$eq(t1, "")) {
          t1 = this.style;
          t2 = $.get$Style_url();
          t2 = t1 == null ? t2 != null : t1 !== t2;
          t1 = t2;
        } else
          t1 = false;
      else
        t1 = false;
      if (t1)
        return uri.toString$0(0);
      path = this.normalize$1(this.style.pathFromUri$1(uri));
      rel = this.relative$1(path);
      this.split$1(0, rel);
      return this.split$1(0, rel).length > this.split$1(0, path).length ? path : rel;
    }
  },
  Context_join_closure: {
    "^": "Closure:54;",
    call$1: function(part) {
      return part != null;
    },
    $isFunction: true
  },
  Context_joinAll_closure: {
    "^": "Closure:54;",
    call$1: function(part) {
      return !J.$eq(part, "");
    },
    $isFunction: true
  },
  Context_split_closure: {
    "^": "Closure:54;",
    call$1: function(part) {
      return J.get$isEmpty$asx(part) !== true;
    },
    $isFunction: true
  },
  _validateArgList_closure: {
    "^": "Closure:54;",
    call$1: [function(arg) {
      return arg == null ? "null" : "\"" + H.S(arg) + "\"";
    }, "call$1", null, 2, 0, null, 31, [], "call"],
    $isFunction: true
  }
}],
["path.internal_style", "package:path/src/internal_style.dart", , E, {
  "^": "",
  InternalStyle: {
    "^": "Style;"
  }
}],
["path.parsed_path", "package:path/src/parsed_path.dart", , Q, {
  "^": "",
  ParsedPath: {
    "^": "Object;style,root,isRootRelative,parts,separators",
    removeTrailingSeparators$0: function() {
      var t1, t2;
      while (true) {
        t1 = this.parts;
        if (!(t1.length !== 0 && J.$eq(C.JSArray_methods.get$last(t1), "")))
          break;
        t1 = this.parts;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1.pop();
        C.JSArray_methods.removeLast$0(this.separators);
      }
      t1 = this.separators;
      t2 = t1.length;
      if (t2 > 0)
        t1[t2 - 1] = "";
    },
    normalize$0: function() {
      var newParts, t1, t2, leadingDoubles, part, newSeparators, t3;
      newParts = [];
      t1 = this.parts;
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      leadingDoubles = 0;
      for (; t2.moveNext$0();) {
        part = t2._current;
        t1 = J.getInterceptor(part);
        if (t1.$eq(part, ".") || t1.$eq(part, ""))
          ;
        else if (t1.$eq(part, ".."))
          if (newParts.length > 0)
            newParts.pop();
          else
            ++leadingDoubles;
        else
          newParts.push(part);
      }
      if (this.root == null) {
        t1 = P.List_List$filled(leadingDoubles, "..", null);
        H.IterableMixinWorkaround_insertAllList(newParts, 0, t1);
      }
      if (newParts.length === 0 && this.root == null)
        newParts.push(".");
      newSeparators = P.List_List$generate(newParts.length, new Q.ParsedPath_normalize_closure(this), true, null);
      t1 = this.root;
      C.JSArray_methods.insert$2(newSeparators, 0, t1 != null && newParts.length > 0 && this.style.needsSeparator$1(t1) ? this.style.get$separator() : "");
      this.parts = newParts;
      this.separators = newSeparators;
      t1 = this.root;
      if (t1 != null) {
        t2 = this.style;
        t3 = $.get$Style_windows();
        t3 = t2 == null ? t3 == null : t2 === t3;
        t2 = t3;
      } else
        t2 = false;
      if (t2)
        this.root = J.replaceAll$2$s(t1, "/", "\\");
      this.removeTrailingSeparators$0();
    },
    toString$0: function(_) {
      var builder, t1, i, str;
      builder = P.StringBuffer$("");
      t1 = this.root;
      if (t1 != null)
        builder.write$1(t1);
      for (i = 0; i < this.parts.length; ++i) {
        t1 = this.separators;
        if (i >= t1.length)
          return H.ioore(t1, i);
        str = t1[i];
        builder._contents += typeof str === "string" ? str : H.S(str);
        t1 = this.parts;
        if (i >= t1.length)
          return H.ioore(t1, i);
        str = t1[i];
        builder._contents += typeof str === "string" ? str : H.S(str);
      }
      builder.write$1(C.JSArray_methods.get$last(this.separators));
      return builder._contents;
    },
    static: {ParsedPath_ParsedPath$parse: function(path, style) {
        var root, t1, parts, separators, t2, start, i, t3;
        root = style.getRoot$1(path);
        t1 = style.getRelativeRoot$1(path);
        if (root != null)
          path = J.substring$1$s(path, J.get$length$asx(root));
        parts = [];
        separators = [];
        t2 = J.getInterceptor$asx(path);
        if (t2.get$isNotEmpty(path) === true && style.isSeparator$1(t2.codeUnitAt$1(path, 0))) {
          separators.push(t2.$index(path, 0));
          start = 1;
        } else {
          separators.push("");
          start = 0;
        }
        i = start;
        while (true) {
          t3 = t2.get$length(path);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          if (style.isSeparator$1(t2.codeUnitAt$1(path, i))) {
            parts.push(t2.substring$2(path, start, i));
            separators.push(t2.$index(path, i));
            start = i + 1;
          }
          ++i;
        }
        t3 = t2.get$length(path);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (start < t3) {
          parts.push(t2.substring$1(path, start));
          separators.push("");
        }
        return new Q.ParsedPath(style, root, t1 != null, parts, separators);
      }}
  },
  ParsedPath_normalize_closure: {
    "^": "Closure:54;this_0",
    call$1: function(_) {
      return this.this_0.style.get$separator();
    },
    $isFunction: true
  }
}],
["path.path_exception", "package:path/src/path_exception.dart", , E, {
  "^": "",
  PathException: {
    "^": "Object;message*",
    toString$0: function(_) {
      return "PathException: " + this.message;
    },
    static: {PathException$: function(message) {
        return new E.PathException(message);
      }}
  }
}],
["path.style", "package:path/src/style.dart", , S, {
  "^": "",
  Style__getPlatformStyle: function() {
    var scheme, userInfo, host, query, fragment, port, isFile, t1;
    if (!J.$eq(P.Uri_base().scheme, "file"))
      return $.get$Style_url();
    if (J.endsWith$1$s(P.Uri_base()._path, "/") !== true)
      return $.get$Style_url();
    scheme = P.Uri__makeScheme("", 0);
    userInfo = P.Uri__makeUserInfo("", 0, 0);
    host = P.Uri__makeHost(null, 0, 0, false);
    query = P.Uri__makeQuery(null, 0, 0, null);
    fragment = P.Uri__makeFragment(null, 0, 0);
    port = P.Uri__makePort(null, scheme);
    isFile = J.$eq(scheme, "file");
    if (host == null)
      t1 = J.get$isNotEmpty$asx(userInfo) === true || port != null || isFile;
    else
      t1 = false;
    if (t1)
      host = "";
    if (new P.Uri(host, port, P.Uri__makePath("a/b", 0, 3, null, host != null, isFile), scheme, userInfo, query, fragment, null, null).toFilePath$0() === "a\\b")
      return $.get$Style_windows();
    return $.get$Style_posix();
  },
  Style: {
    "^": "Object;",
    toString$0: function(_) {
      return this.get$name(this);
    }
  }
}],
["path.style.posix", "package:path/src/style/posix.dart", , Z, {
  "^": "",
  PosixStyle: {
    "^": "InternalStyle;name>,separator<,separators,separatorPattern,needsSeparatorPattern,rootPattern,relativeRootPattern",
    containsSeparator$1: function(path) {
      return J.contains$1$asx(path, "/");
    },
    isSeparator$1: function(codeUnit) {
      return J.$eq(codeUnit, 47);
    },
    needsSeparator$1: function(path) {
      var t1 = J.getInterceptor$asx(path);
      return t1.get$isNotEmpty(path) === true && !J.$eq(t1.codeUnitAt$1(path, J.$sub$n(t1.get$length(path), 1)), 47);
    },
    getRoot$1: function(path) {
      var t1 = J.getInterceptor$asx(path);
      if (t1.get$isNotEmpty(path) === true && J.$eq(t1.codeUnitAt$1(path, 0), 47))
        return "/";
      return;
    },
    getRelativeRoot$1: function(path) {
      return;
    },
    pathFromUri$1: function(uri) {
      var t1, t2;
      t1 = uri.scheme;
      t2 = J.getInterceptor(t1);
      if (t2.$eq(t1, "") || t2.$eq(t1, "file"))
        return P.Uri__uriDecode(uri._path, C.Utf8Codec_false, false);
      throw H.wrapException(P.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'."));
    }
  }
}],
["path.style.url", "package:path/src/style/url.dart", , E, {
  "^": "",
  UrlStyle: {
    "^": "InternalStyle;name>,separator<,separators,separatorPattern,needsSeparatorPattern,rootPattern,relativeRootPattern",
    containsSeparator$1: function(path) {
      return J.contains$1$asx(path, "/");
    },
    isSeparator$1: function(codeUnit) {
      return J.$eq(codeUnit, 47);
    },
    needsSeparator$1: function(path) {
      var t1, root;
      t1 = J.getInterceptor$asx(path);
      if (t1.get$isEmpty(path) === true)
        return false;
      if (!J.$eq(t1.codeUnitAt$1(path, J.$sub$n(t1.get$length(path), 1)), 47))
        return true;
      root = this._url$_getRoot$1(path);
      return root != null && J.endsWith$1$s(root, "://") === true;
    },
    getRoot$1: function(path) {
      var root = this._url$_getRoot$1(path);
      return root == null ? this.getRelativeRoot$1(path) : root;
    },
    getRelativeRoot$1: function(path) {
      var t1 = J.getInterceptor$asx(path);
      if (t1.get$isEmpty(path) === true)
        return;
      return J.$eq(t1.codeUnitAt$1(path, 0), 47) ? "/" : null;
    },
    pathFromUri$1: function(uri) {
      return uri.toString$0(0);
    },
    _url$_getRoot$1: function(path) {
      var t1, start, t2, $char, start0;
      t1 = J.getInterceptor$asx(path);
      if (t1.get$isEmpty(path) === true)
        return;
      if (!N.isAlphabetic(t1.codeUnitAt$1(path, 0)))
        return;
      start = 1;
      while (true) {
        t2 = t1.get$length(path);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(start < t2))
          break;
        c$0: {
          $char = t1.codeUnitAt$1(path, start);
          if (N.isAlphabetic($char))
            break c$0;
          t2 = J.getInterceptor$n($char);
          if (t2.$ge($char, 48) === true && t2.$le($char, 57) === true)
            break c$0;
          if (t2.$eq($char, 45) || t2.$eq($char, 43) || t2.$eq($char, 46))
            break c$0;
          break;
        }
        ++start;
      }
      start0 = start + 3;
      t2 = t1.get$length(path);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (start0 > t2)
        return;
      if (!J.$eq(t1.substring$2(path, start, start0), "://"))
        return;
      start = start0;
      while (true) {
        t2 = t1.get$length(path);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(start < t2 && !J.$eq(t1.codeUnitAt$1(path, start), 47)))
          break;
        ++start;
      }
      return t1.substring$2(path, 0, start);
    }
  }
}],
["path.style.windows", "package:path/src/style/windows.dart", , T, {
  "^": "",
  WindowsStyle: {
    "^": "InternalStyle;name>,separator<,separators,separatorPattern,needsSeparatorPattern,rootPattern,relativeRootPattern",
    containsSeparator$1: function(path) {
      return J.contains$1$asx(path, "/");
    },
    isSeparator$1: function(codeUnit) {
      var t1 = J.getInterceptor(codeUnit);
      return t1.$eq(codeUnit, 47) || t1.$eq(codeUnit, 92);
    },
    needsSeparator$1: function(path) {
      var t1, t2;
      t1 = J.getInterceptor$asx(path);
      if (t1.get$isEmpty(path) === true)
        return false;
      t1 = t1.codeUnitAt$1(path, J.$sub$n(t1.get$length(path), 1));
      t2 = J.getInterceptor(t1);
      return !(t2.$eq(t1, 47) || t2.$eq(t1, 92));
    },
    getRoot$1: function(path) {
      var root = this._getRoot$1(path);
      return root == null ? this.getRelativeRoot$1(path) : root;
    },
    getRelativeRoot$1: function(path) {
      var t1, t2, t3;
      t1 = J.getInterceptor$asx(path);
      if (t1.get$isEmpty(path) === true)
        return;
      t2 = t1.codeUnitAt$1(path, 0);
      t3 = J.getInterceptor(t2);
      if (!(t3.$eq(t2, 47) || t3.$eq(t2, 92)))
        return;
      if (J.$gt$n(t1.get$length(path), 1) === true) {
        t2 = t1.codeUnitAt$1(path, 1);
        t3 = J.getInterceptor(t2);
        t2 = t3.$eq(t2, 47) || t3.$eq(t2, 92);
      } else
        t2 = false;
      if (t2)
        return;
      return t1.$index(path, 0);
    },
    pathFromUri$1: function(uri) {
      var t1, t2, path;
      t1 = uri.scheme;
      t2 = J.getInterceptor(t1);
      if (!t2.$eq(t1, "") && !t2.$eq(t1, "file"))
        throw H.wrapException(P.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'."));
      path = uri._path;
      if (J.$eq(uri.get$host(uri), "")) {
        t1 = J.getInterceptor$s(path);
        if (t1.startsWith$1(path, "/") === true)
          path = t1.replaceFirst$2(path, "/", "");
      } else
        path = "\\\\" + H.S(uri.get$host(uri)) + H.S(path);
      return P.Uri__uriDecode(J.replaceAll$2$s(path, "/", "\\"), C.Utf8Codec_false, false);
    },
    _getRoot$1: function(path) {
      var t1, t2, t3, start;
      t1 = J.getInterceptor$asx(path);
      if (J.$lt$n(t1.get$length(path), 3) === true)
        return;
      if (N.isAlphabetic(t1.codeUnitAt$1(path, 0))) {
        if (!J.$eq(t1.codeUnitAt$1(path, 1), 58))
          return;
        t2 = t1.codeUnitAt$1(path, 2);
        t3 = J.getInterceptor(t2);
        if (!(t3.$eq(t2, 47) || t3.$eq(t2, 92)))
          return;
        return t1.substring$2(path, 0, 3);
      }
      if (t1.startsWith$1(path, "\\\\") !== true)
        return;
      start = 2;
      while (true) {
        t2 = t1.get$length(path);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(start < t2 && !J.$eq(t1.codeUnitAt$1(path, start), 92)))
          break;
        ++start;
      }
      if (start === 2 || start === t1.get$length(path))
        return;
      ++start;
      if (J.$eq(t1.codeUnitAt$1(path, start), 92))
        return;
      ++start;
      while (true) {
        t2 = t1.get$length(path);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(start < t2 && !J.$eq(t1.codeUnitAt$1(path, start), 92)))
          break;
        ++start;
      }
      return t1.substring$2(path, 0, start);
    }
  }
}],
["path.utils", "package:path/src/utils.dart", , N, {
  "^": "",
  isAlphabetic: function($char) {
    var t1 = J.getInterceptor$n($char);
    if (!(t1.$ge($char, 65) === true && t1.$le($char, 90) === true))
      t1 = t1.$ge($char, 97) === true && t1.$le($char, 122) === true;
    else
      t1 = true;
    return t1;
  }
}],
["polymer", "package:polymer/polymer.dart", , A, {
  "^": "",
  _shimShadowDomStyling: function(template, $name, extendee) {
    var t1 = $.get$_ShadowCss();
    if (t1 == null || $.get$_hasShadowDomPolyfill() !== true)
      return;
    t1.callMethod$2("shimStyling", [template, $name, extendee]);
  },
  _cssTextFromSheet: function(sheet) {
    var href, e, t, t1, exception;
    if (sheet == null)
      return "";
    if ($.deployMode)
      return "";
    t1 = J.getInterceptor$x(sheet);
    href = t1.get$href(sheet);
    if (J.$eq(href, ""))
      href = J.$index$asx(t1.get$attributes(sheet), "href");
    try {
      t1 = new XMLHttpRequest();
      C.HttpRequest_methods.open$3$async(t1, "GET", href, false);
      t1.send();
      t1 = t1.responseText;
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      if (!!J.getInterceptor(t1).$isDomException) {
        e = t1;
        t = new H._StackTrace(exception, null);
        $.get$_sheetLog().fine$1("failed to XHR stylesheet text href=\"" + H.S(href) + "\" error: " + H.S(e) + ", trace: " + H.S(t));
        return "";
      } else
        throw exception;
    }

  },
  _isObserverMethod: [function(symbol) {
    var $name, t1;
    $name = $.get$symbolConverter()._configuration.names.$index(0, symbol);
    if ($name == null)
      return false;
    t1 = J.getInterceptor$s($name);
    return t1.endsWith$1($name, "Changed") === true && !t1.$eq($name, "attributeChanged");
  }, "call$1", "_isObserverMethod$closure", 2, 0, 69, 70, []],
  Polymer_register: function($name, type) {
    $.get$_typesByName().$indexSet(0, $name, type);
    H.interceptedTypeCast(J.$index$asx($.get$context(), "Polymer"), "$isJsFunction").apply$1([$name]);
  },
  Polymer_applyStyleToScope: function(style, scope) {
    var clone, attr, refNode, styleElement;
    if (style == null)
      return;
    document;
    if ($.get$_hasShadowDomPolyfill() === true)
      scope = document.head;
    clone = document.createElement("style", null);
    clone.textContent = style.textContent;
    attr = style.getAttribute("element");
    if (attr != null)
      clone.setAttribute("element", attr);
    refNode = scope.firstChild;
    if (scope === document.head) {
      styleElement = W._FrozenElementList$_wrap(document.head.querySelectorAll("style[element]"), null);
      if (styleElement.get$isNotEmpty(styleElement))
        refNode = J.get$nextElementSibling$x(C.NodeList_methods.get$last(styleElement._nodeList));
    }
    scope.insertBefore(clone, refNode);
  },
  initPolymer: function() {
    A._initializeLogging();
    if ($.deployMode) {
      A.startPolymer($.initializers, true);
      return $.Zone__current;
    }
    var t1 = $.Zone__current.fork$1$specification(O.dirtyCheckZoneSpec());
    t1.run$1(new A.initPolymer_closure());
    return t1;
  },
  startPolymer: function(initializers, deployMode) {
    var poly, t1;
    if ($._startPolymerCalled)
      throw H.wrapException("Initialization was already done.");
    $._startPolymerCalled = true;
    A._hookJsPolymer();
    $._deployMode = deployMode;
    if (initializers == null)
      throw H.wrapException("Missing initialization of polymer elements. Please check that the list of entry points in your pubspec.yaml is correct. If you are using pub-serve, you may need to restart it.");
    A.Polymer_register("auto-binding-dart", C.Type_s8b);
    poly = document.createElement("polymer-element", null);
    poly.setAttribute("name", "auto-binding-dart");
    poly.setAttribute("extends", "template");
    J.$index$asx($.get$_polymerElementProto(), "init").apply$2$thisArg([], poly);
    t1 = new H.ListIterator(initializers, 8, 0, null);
    t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(initializers, 0)];
    for (; t1.moveNext$0();)
      t1._current.call$0();
  },
  _hookJsPolymer: function() {
    var polymerJs, zone, originalRegister;
    polymerJs = J.$index$asx($.get$context(), "Polymer");
    if (polymerJs == null)
      throw H.wrapException(P.StateError$("polymer.js must be loaded before polymer.dart, please add <link rel=\"import\" href=\"packages/polymer/polymer.html\"> to your <head> before any Dart scripts. Alternatively you can get a different version of polymer.js by following the instructions at http://www.polymer-project.org."));
    zone = $.Zone__current;
    polymerJs.callMethod$2("whenPolymerReady", [zone.bindCallback$1(new A._hookJsPolymer_closure())]);
    originalRegister = J.$index$asx($.get$_polymerElementProto(), "register");
    if (originalRegister == null)
      throw H.wrapException(P.StateError$("polymer.js must expose \"register\" function on polymer-element to enable polymer.dart to interoperate."));
    J.$indexSet$ax($.get$_polymerElementProto(), "register", P.JsFunction_JsFunction$withThis(new A._hookJsPolymer_registerDart(zone, originalRegister)));
  },
  _initializeLogging: function() {
    var t1, logFlags, loggers, polymerLogger, t2;
    t1 = {};
    $.hierarchicalLoggingEnabled = true;
    logFlags = J.$index$asx($.get$context(), "logFlags");
    t1.logFlags_0 = logFlags;
    if (logFlags == null)
      t1.logFlags_0 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
    loggers = [$.get$_observeLog(), $.get$_eventsLog(), $.get$_unbindLog(), $.get$_bindLog(), $.get$_watchLog(), $.get$_readyLog()];
    polymerLogger = N.Logger_Logger("polymer");
    if (!H.IterableMixinWorkaround_any(loggers, new A._initializeLogging_closure(t1))) {
      polymerLogger.set$level(C.Level_OFF_2000);
      return;
    }
    t2 = new H.IterableMixinWorkaround();
    t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(loggers, 0)];
    t1 = new H.WhereIterable(loggers, new A._initializeLogging_closure0(t1));
    t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
    t1.forEach$1(0, new A._initializeLogging_closure1());
    J.listen$1$x(polymerLogger.get$onRecord(), new A._initializeLogging_closure2());
  },
  PolymerDeclaration: {
    "^": "Object;element>,type>,superDeclaration<,name>,_polymer$_publish<,_publishLC<,_observe>,_computed<,_instanceAttributes<,_reflect<,_sheets,_styles,syntax>,_eventDelegates<,_templateDelegates,_rootUri",
    get$templateContent: function() {
      var template, t1;
      template = J.querySelector$1$x(this.element, "template");
      if (template != null)
        t1 = J.get$content$x(!!J.getInterceptor(template).$isNodeBindExtension ? template : M.nodeBindFallback(template));
      else
        t1 = null;
      return t1;
    },
    registerType$1: function($name) {
      var baseTag, decl, t1;
      for (baseTag = null, decl = this; decl != null;) {
        baseTag = J.$index$asx(J.get$attributes$x(J.get$element$x(decl)), "extends");
        decl = decl.get$superDeclaration();
      }
      t1 = document;
      W._registerCustomElement(window, t1, $name, this.type, baseTag);
    },
    resolveElementPaths$1: function(node) {
      var t1 = $.get$_Polymer();
      if (t1 == null)
        return;
      J.$index$asx(t1, "urlResolver").callMethod$2("resolveDom", [node]);
    },
    publishAttributes$1: function(superDecl) {
      var t1, t2, attrs, t3, attr, property, t4, path, t5, decl;
      if (superDecl != null) {
        if (superDecl.get$_polymer$_publish() != null) {
          t1 = superDecl.get$_polymer$_publish();
          t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
          t2.addAll$1(0, t1);
          this._polymer$_publish = t2;
        }
        if (superDecl.get$_reflect() != null) {
          t1 = superDecl.get$_reflect();
          t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
          t2.addAll$1(0, t1);
          this._reflect = t2;
        }
      }
      t1 = this.type;
      this._getPublishedProperties$1(t1);
      attrs = J.$index$asx(J.get$attributes$x(this.element), "attributes");
      if (attrs != null)
        for (t2 = J.get$iterator$ax(J.split$1$s(attrs, $.get$_ATTRIBUTES_REGEX())), t3 = this.name; t2.moveNext$0() === true;) {
          attr = J.trim$0$s(t2.get$current());
          if (J.$eq(attr, ""))
            continue;
          property = $.get$symbolConverter()._configuration._symbols.$index(0, attr);
          t4 = property != null;
          if (t4) {
            path = L.PropertyPath_PropertyPath([property]);
            t5 = this._polymer$_publish;
            if (t5 != null && t5.containsKey$1(path))
              continue;
            decl = $.get$typeInspector().getDeclaration$2(t1, property);
          } else {
            decl = null;
            path = null;
          }
          if (!t4 || decl == null || decl.get$isMethod() === true || decl.get$isFinal() === true) {
            window;
            t4 = "property for attribute " + H.S(attr) + " of polymer-element name=" + H.S(t3) + " not found.";
            if (typeof console != "undefined")
              console.warn(t4);
            continue;
          }
          t4 = this._polymer$_publish;
          if (t4 == null) {
            t4 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
            this._polymer$_publish = t4;
          }
          t4.$indexSet(0, path, decl);
        }
    },
    _getPublishedProperties$1: function(type) {
      var t1, t2, decl, t3;
      t1 = $.get$typeInspector().query$2(0, type, C.QueryOptions_sAl);
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      for (; t2.moveNext$0();) {
        decl = t2._current;
        if (decl.get$isFinal() === true)
          continue;
        t1 = this._polymer$_publish;
        if (t1 == null) {
          t1 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
          this._polymer$_publish = t1;
        }
        t3 = J.getInterceptor$x(decl);
        t1.$indexSet(0, L.PropertyPath_PropertyPath([t3.get$name(decl)]), decl);
        if (J.any$1$ax(J.where$1$ax(decl.get$annotations(), new A.PolymerDeclaration__getPublishedProperties_closure()), new A.PolymerDeclaration__getPublishedProperties_closure0()) === true) {
          t1 = this._reflect;
          if (t1 == null) {
            t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
            this._reflect = t1;
          }
          t3 = t3.get$name(decl);
          t1.add$1(0, $.get$symbolConverter()._configuration.names.$index(0, t3));
        }
      }
    },
    accumulateInstanceAttributes$0: function() {
      var t1, t2;
      t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, P.Object);
      this._instanceAttributes = t1;
      t2 = this.superDeclaration;
      if (t2 != null)
        t1.addAll$1(0, t2.get$_instanceAttributes());
      J.forEach$1$ax(J.get$attributes$x(this.element), new A.PolymerDeclaration_accumulateInstanceAttributes_closure(this));
    },
    addAttributeDelegates$1: function(delegates) {
      J.forEach$1$ax(J.get$attributes$x(this.element), new A.PolymerDeclaration_addAttributeDelegates_closure(delegates));
    },
    cacheSheets$0: function() {
      var t1 = this.findNodes$1("link[rel=stylesheet]");
      this._sheets = t1;
      for (t1 = J.get$iterator$ax(t1); t1.moveNext$0() === true;)
        J.remove$0$ax(t1.get$current());
    },
    cacheStyles$0: function() {
      var t1 = this.findNodes$1("style[polymer-scope]");
      this._styles = t1;
      for (t1 = J.get$iterator$ax(t1); t1.moveNext$0() === true;)
        J.remove$0$ax(t1.get$current());
    },
    installLocalSheets$0: function() {
      var sheets, $content, cssText, t1, str, t2, style;
      sheets = J.where$1$ax(this._sheets, new A.PolymerDeclaration_installLocalSheets_closure());
      $content = this.get$templateContent();
      if ($content != null) {
        cssText = P.StringBuffer$("");
        for (t1 = J.get$iterator$ax(sheets); t1.moveNext$0() === true;) {
          str = A._cssTextFromSheet(t1.get$current());
          t2 = cssText._contents += typeof str === "string" ? str : H.S(str);
          cssText._contents = t2 + "\n";
        }
        if (cssText._contents.length > 0) {
          style = J.createElement$1$x(J.get$ownerDocument$x(this.element), "style");
          J.set$text$x(style, H.S(cssText));
          t1 = J.getInterceptor$x($content);
          t1.insertBefore$2($content, style, t1.get$firstChild($content));
        }
      }
    },
    findNodes$2: function(selector, matcher) {
      var nodes, $content;
      nodes = J.toList$0$ax(J.querySelectorAll$1$x(this.element, selector));
      $content = this.get$templateContent();
      if ($content != null)
        J.addAll$1$ax(nodes, J.querySelectorAll$1$x($content, selector));
      return nodes;
    },
    findNodes$1: function(selector) {
      return this.findNodes$2(selector, null);
    },
    cssTextForScope$1: function(scopeDescriptor) {
      var cssText, t1, t2, str, t3;
      cssText = P.StringBuffer$("");
      t1 = new A.PolymerDeclaration_cssTextForScope_matcher("[polymer-scope=" + scopeDescriptor + "]");
      for (t2 = J.get$iterator$ax(J.where$1$ax(this._sheets, t1)); t2.moveNext$0() === true;) {
        str = A._cssTextFromSheet(t2.get$current());
        t3 = cssText._contents += typeof str === "string" ? str : H.S(str);
        cssText._contents = t3 + "\n\n";
      }
      for (t1 = J.get$iterator$ax(J.where$1$ax(this._styles, t1)); t1.moveNext$0() === true;) {
        str = J.get$text$x(t1.get$current());
        t2 = cssText._contents += typeof str === "string" ? str : H.S(str);
        cssText._contents = t2 + "\n\n";
      }
      return cssText._contents;
    },
    cssTextToScopeStyle$2: function(cssText, scopeDescriptor) {
      var t1;
      if (cssText === "")
        return;
      t1 = document.createElement("style", null);
      t1.textContent = cssText;
      t1.toString;
      t1.setAttribute("element", H.S(this.name) + "-" + scopeDescriptor);
      return t1;
    },
    inferObservers$0: function() {
      var t1, t2, decl, t3, $name;
      t1 = $.get$_changedMethodQueryOptions();
      t1 = $.get$typeInspector().query$2(0, this.type, t1);
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      for (; t2.moveNext$0();) {
        decl = t2._current;
        if (this._observe == null)
          this._observe = P.HashMap_HashMap(null, null, null, null, null);
        t1 = J.getInterceptor$x(decl);
        t3 = t1.get$name(decl);
        $name = $.get$symbolConverter()._configuration.names.$index(0, t3);
        t3 = J.getInterceptor$asx($name);
        $name = t3.substring$2($name, 0, J.$sub$n(t3.get$length($name), 7));
        this._observe.$indexSet(0, L.PropertyPath_PropertyPath($name), [t1.get$name(decl)]);
      }
    },
    explodeObservers$0: function() {
      var t1, t2;
      t1 = $.get$typeInspector().query$2(0, this.type, C.QueryOptions_xw8);
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      for (; t2.moveNext$0();)
        for (t1 = J.get$iterator$ax(t2._current.get$annotations()); t1.moveNext$0() === true;) {
          t1.get$current();
          continue;
        }
    },
    _lowerCaseMap$1: function(properties) {
      var map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, null);
      properties.forEach$1(0, new A.PolymerDeclaration__lowerCaseMap_closure(map));
      return map;
    },
    createPropertyAccessors$0: function() {
      var existing, t1, t2, decl, meta, t3, $name, prev, t4;
      existing = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t1 = $.get$typeInspector().query$2(0, this.type, C.QueryOptions_ijl);
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      t1 = this._computed;
      for (; t2.moveNext$0();) {
        decl = t2._current;
        meta = J.firstWhere$1$ax(decl.get$annotations(), new A.PolymerDeclaration_createPropertyAccessors_closure());
        t3 = J.getInterceptor$x(decl);
        $name = t3.get$name(decl);
        prev = existing.$index(0, $name);
        if (prev != null) {
          t3 = t3.get$type(decl);
          t4 = J.get$type$x(prev);
          t4 = $.get$typeInspector().isSubclassOf$2(t3, t4);
          t3 = t4;
        } else
          t3 = true;
        if (t3) {
          t1.$indexSet(0, $name, meta.get$expression());
          existing.$indexSet(0, $name, decl);
        }
      }
    },
    $isPolymerDeclaration: true,
    static: {"^": "PolymerDeclaration__polymerSyntax"}
  },
  PolymerDeclaration__getPublishedProperties_closure: {
    "^": "Closure:54;",
    call$1: [function(a) {
      return !!J.getInterceptor(a).$isPublishedProperty;
    }, "call$1", null, 2, 0, null, 48, [], "call"],
    $isFunction: true
  },
  PolymerDeclaration__getPublishedProperties_closure0: {
    "^": "Closure:54;",
    call$1: [function(a) {
      return a.get$reflect();
    }, "call$1", null, 2, 0, null, 48, [], "call"],
    $isFunction: true
  },
  PolymerDeclaration_accumulateInstanceAttributes_closure: {
    "^": "Closure:94;this_0",
    call$2: [function($name, value) {
      if (C.Map_EJj5B.containsKey$1($name) !== true && J.startsWith$1$s($name, "on-") !== true)
        this.this_0._instanceAttributes.$indexSet(0, $name, value);
    }, "call$2", null, 4, 0, null, 62, [], 19, [], "call"],
    $isFunction: true
  },
  PolymerDeclaration_addAttributeDelegates_closure: {
    "^": "Closure:94;delegates_0",
    call$2: [function($name, value) {
      var t1, t2, start, end, t3;
      t1 = J.getInterceptor$s($name);
      if (t1.startsWith$1($name, "on-") === true) {
        t2 = J.getInterceptor$asx(value);
        start = t2.indexOf$1(value, "{{");
        end = t2.lastIndexOf$1(value, "}}");
        t3 = J.getInterceptor$n(start);
        if (t3.$ge(start, 0) === true && J.$ge$n(end, 0) === true)
          this.delegates_0.$indexSet(0, t1.substring$1($name, 3), J.trim$0$s(t2.substring$2(value, t3.$add(start, 2), end)));
      }
    }, "call$2", null, 4, 0, null, 62, [], 19, [], "call"],
    $isFunction: true
  },
  PolymerDeclaration_installLocalSheets_closure: {
    "^": "Closure:54;",
    call$1: [function(s) {
      return J.get$attributes$x(s).containsKey$1("polymer-scope") !== true;
    }, "call$1", null, 2, 0, null, 84, [], "call"],
    $isFunction: true
  },
  PolymerDeclaration_cssTextForScope_matcher: {
    "^": "Closure:54;selector_0",
    call$1: [function(s) {
      return J.matches$1$x(s, this.selector_0);
    }, "call$1", null, 2, 0, null, 84, [], "call"],
    $isFunction: true
  },
  PolymerDeclaration_explodeObservers_closure: {
    "^": "Closure:14;",
    call$0: function() {
      return [];
    },
    $isFunction: true
  },
  PolymerDeclaration__lowerCaseMap_closure: {
    "^": "Closure:164;map_0",
    call$2: function(path, value) {
      this.map_0.$indexSet(0, H.S(path).toLowerCase(), value);
    },
    $isFunction: true
  },
  PolymerDeclaration_createPropertyAccessors_closure: {
    "^": "Closure:54;",
    call$1: [function(e) {
      return false;
    }, "call$1", null, 2, 0, null, 2, [], "call"],
    $isFunction: true
  },
  PolymerExpressions: {
    "^": "BindingDelegate_PolymerEventBindings;_polymer$_delegate,_bindingMaps",
    get$globals: function() {
      return this._polymer$_delegate.globals;
    },
    prepareBinding$3: function(path, $name, node) {
      if (J.startsWith$1$s($name, "on-") === true)
        return this.prepareEventBinding$3(path, $name, node);
      return this._polymer$_delegate.prepareBinding$3(path, $name, node);
    },
    prepareInstanceModel$1: function(template) {
      return this._polymer$_delegate.prepareInstanceModel$1(template);
    },
    prepareInstancePositionChanged$1: function(template) {
      return;
    },
    static: {"^": "PolymerExpressions_getExpression0,PolymerExpressions_getBinding0"}
  },
  BindingDelegate_PolymerEventBindings: {
    "^": "BindingDelegate+PolymerEventBindings;"
  },
  PolymerEventBindings: {
    "^": "Object;",
    findController$1: function(node) {
      var t1;
      for (; t1 = J.getInterceptor$x(node), t1.get$parentNode(node) != null;) {
        if (!!t1.$isPolymer && J.$index$asx(node.polymer$Polymer$_jsElem, "eventController") != null)
          return J.$index$asx(t1.get$_jsElem(node), "eventController");
        node = t1.get$parentNode(node);
      }
      return !!t1.$isShadowRoot ? node.host : null;
    },
    getEventHandler$3: function(controller, target, method) {
      var t1 = {};
      t1.controller_0 = controller;
      return new A.PolymerEventBindings_getEventHandler_closure(t1, this, target, method);
    },
    prepareEventBinding$3: function(path, $name, node) {
      var t1, t2, eventType, translated;
      t1 = {};
      t2 = J.getInterceptor$s($name);
      if (t2.startsWith$1($name, "on-") !== true)
        return;
      eventType = t2.substring$1($name, 3);
      t1.eventType_0 = eventType;
      translated = C.Map_AmbKl.$index(0, eventType);
      t1.eventType_0 = translated != null ? translated : t1.eventType_0;
      return new A.PolymerEventBindings_prepareEventBinding_closure(t1, this, path);
    }
  },
  PolymerEventBindings_getEventHandler_closure: {
    "^": "Closure:54;box_0,this_1,target_2,method_3",
    call$1: [function(e) {
      var t1, t2, controller, detail;
      t1 = this.box_0;
      t2 = t1.controller_0;
      if (t2 == null || !J.getInterceptor(t2).$isPolymer) {
        controller = this.this_1.findController$1(this.target_2);
        t1.controller_0 = controller;
        t2 = controller;
      }
      if (!!J.getInterceptor(t2).$isPolymer) {
        t2 = J.getInterceptor(e);
        if (!!t2.$isCustomEvent) {
          detail = t2.get$detail(e);
          if (detail == null)
            detail = J.$index$asx(P.JsObject_JsObject$fromBrowserObject(e), "detail");
        } else
          detail = null;
        t2 = t2.get$currentTarget(e);
        t1 = t1.controller_0;
        J.dispatchMethod$3$x(t1, t1, this.method_3, [e, detail, t2]);
      } else
        throw H.wrapException(P.StateError$("controller " + H.S(t2) + " is not a Dart polymer-element."));
    }, "call$1", null, 2, 0, null, 2, [], "call"],
    $isFunction: true
  },
  PolymerEventBindings_prepareEventBinding_closure: {
    "^": "Closure:168;box_0,this_1,path_2",
    call$3: [function(model, node, oneTime) {
      var t1, handler, t2;
      t1 = this.path_2;
      handler = P.JsFunction_JsFunction$withThis(new A.PolymerEventBindings_prepareEventBinding__closure($.Zone__current.bindUnaryCallback$1(this.this_1.getEventHandler$3(null, node, t1))));
      t2 = this.box_0;
      $.get$_PolymerGestures().callMethod$2("addEventListener", [node, t2.eventType_0, handler]);
      if (oneTime === true)
        return;
      return new A._EventBindable(t1, node, t2.eventType_0, handler);
    }, "call$3", null, 6, 0, null, 165, [], 166, [], 167, [], "call"],
    $isFunction: true
  },
  PolymerEventBindings_prepareEventBinding__closure: {
    "^": "Closure:94;eventHandler_3",
    call$2: [function(_, e) {
      return this.eventHandler_3.call$1(e);
    }, "call$2", null, 4, 0, null, 108, [], 2, [], "call"],
    $isFunction: true
  },
  _EventBindable: {
    "^": "Bindable;_polymer$_path,_polymer$_node,_polymer$_eventType,_polymer$_handler",
    get$value: function(_) {
      return "{{ " + this._polymer$_path + " }}";
    },
    open$1: function(_, callback) {
      return "{{ " + this._polymer$_path + " }}";
    },
    close$0: function(_) {
      $.get$_PolymerGestures().callMethod$2("removeEventListener", [this._polymer$_node, this._polymer$_eventType, this._polymer$_handler]);
    }
  },
  PublishedProperty: {
    "^": "ObservableProperty;reflect<",
    $isPublishedProperty: true
  },
  PolymerElement: {
    "^": "HtmlElement_Polymer_ChangeNotifier;change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_change_notifier$_records,polymer$Polymer$_polymer$_element,polymer$Polymer$_namedObservers,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$_readied,polymer$Polymer$_jsElem,polymer$Polymer$_hasBeenAttached,polymer$Polymer$shadowRoots,polymer$Polymer$$,polymer$Polymer$_properties,polymer$Polymer$_polyfillScopeStyleCache",
    PolymerElement$created$0: function(receiver) {
      this.polymerCreated$0(receiver);
    },
    static: {PolymerElement$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, W.ShadowRoot);
        t2 = P.String;
        t3 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t2, null), null, null);
        t3.$builtinTypeInfo = [t2, null];
        t2 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        t4 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        receiver.polymer$Polymer$_observers = [];
        receiver.polymer$Polymer$_readied = false;
        receiver.polymer$Polymer$_hasBeenAttached = false;
        receiver.polymer$Polymer$shadowRoots = t1;
        receiver.polymer$Polymer$$ = t3;
        receiver.polymer$Polymer$_properties = t2;
        receiver.polymer$Polymer$_polyfillScopeStyleCache = t4;
        C.PolymerElement_methods.Element$created$0(receiver);
        C.PolymerElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }}
  },
  HtmlElement_Polymer: {
    "^": "HtmlElement+Polymer;_jsElem:polymer$Polymer$_jsElem=,$$:polymer$Polymer$$=",
    $isPolymer: true,
    $isNodeBindExtension: true,
    $isObservable: true,
    $isElement: true,
    $isEventTarget: true,
    $isNode: true
  },
  HtmlElement_Polymer_ChangeNotifier: {
    "^": "HtmlElement_Polymer+ChangeNotifier;",
    $isObservable: true
  },
  Polymer: {
    "^": "Object;_jsElem:polymer$Polymer$_jsElem=,$$:polymer$Polymer$$=",
    get$element: function(receiver) {
      return receiver.polymer$Polymer$_polymer$_element;
    },
    get$syntax: function(receiver) {
      return;
    },
    get$_polymer$_name: function(receiver) {
      var t1, isAttr;
      t1 = receiver.polymer$Polymer$_polymer$_element;
      if (t1 != null)
        return J.get$name$x(t1);
      isAttr = this.get$attributes(receiver)._html$_element.getAttribute("is");
      return isAttr == null || isAttr === "" ? this.get$localName(receiver) : isAttr;
    },
    polymerCreated$0: function(receiver) {
      var t, t1;
      t = this.get$templateInstance(receiver);
      if (t != null && J.get$model$x(t) != null) {
        window;
        t1 = "Attributes on " + H.S(this.get$_polymer$_name(receiver)) + " were data bound prior to Polymer upgrading the element. This may result in incorrect binding types.";
        if (typeof console != "undefined")
          console.warn(t1);
      }
      this.prepareElement$0(receiver);
      t1 = this.get$ownerDocument(receiver);
      if (!J.$eq($.get$_isStagingDocument().$index(0, t1), true))
        this.makeElementReady$0(receiver);
    },
    prepareElement$0: function(receiver) {
      var t1, t2;
      if (receiver.polymer$Polymer$_polymer$_element != null) {
        window;
        t1 = "Element already prepared: " + H.S(this.get$_polymer$_name(receiver));
        if (typeof console != "undefined")
          console.warn(t1);
        return;
      }
      receiver.polymer$Polymer$_jsElem = P.JsObject_JsObject$fromBrowserObject(receiver);
      t1 = this.get$_polymer$_name(receiver);
      receiver.polymer$Polymer$_polymer$_element = $.get$_declarations().$index(0, t1);
      this.createPropertyObserver$0(receiver);
      t1 = receiver.polymer$Polymer$_propertyObserver;
      if (t1 != null) {
        t2 = this.get$notifyPropertyChanges(receiver);
        t1.toString;
        L._Observer.prototype.open$1.call(J.getInterceptor(t1), t1, t2);
      }
      if (receiver.polymer$Polymer$_polymer$_element.get$_polymer$_publish() != null)
        this.get$changes(receiver).listen$1(0, this.get$_propertyChangeWorkaround(receiver));
      this.copyInstanceAttributes$0(receiver);
      this.takeAttributes$0(receiver);
      this.addHostListeners$0(receiver);
    },
    makeElementReady$0: function(receiver) {
      if (receiver.polymer$Polymer$_readied)
        return;
      receiver.polymer$Polymer$_readied = true;
      this.createComputedProperties$0(receiver);
      this.parseDeclarations$1(receiver, receiver.polymer$Polymer$_polymer$_element);
      this.get$attributes(receiver).remove$1(0, "unresolved");
      $.get$_readyLog().info$1(new A.Polymer_makeElementReady_closure(receiver));
    },
    attached$0: function(receiver) {
      if (receiver.polymer$Polymer$_polymer$_element == null)
        throw H.wrapException(P.StateError$("polymerCreated was not called for custom element " + H.S(this.get$_polymer$_name(receiver)) + ", this should normally be done in the .created() if Polymer is used as a mixin."));
      this.cancelUnbindAll$0(receiver);
      if (!receiver.polymer$Polymer$_hasBeenAttached) {
        receiver.polymer$Polymer$_hasBeenAttached = true;
        this.async$1(receiver, new A.Polymer_attached_closure(receiver));
      }
    },
    detached$0: function(receiver) {
      this.asyncUnbindAll$0(receiver);
    },
    parseDeclarations$1: function(receiver, declaration) {
      if (declaration != null) {
        this.parseDeclarations$1(receiver, declaration.get$superDeclaration());
        this.parseDeclaration$1(receiver, J.get$element$x(declaration));
      }
    },
    parseDeclaration$1: function(receiver, elementElement) {
      var t1, template, root, $name;
      t1 = J.getInterceptor$x(elementElement);
      template = t1.querySelector$1(elementElement, "template");
      if (template != null) {
        root = this.shadowFromTemplate$1(receiver, template);
        $name = J.$index$asx(t1.get$attributes(elementElement), "name");
        if ($name == null)
          return;
        receiver.polymer$Polymer$shadowRoots.$indexSet(0, $name, root);
      }
    },
    shadowFromTemplate$1: function(receiver, template) {
      var root, syntax, t, dom, t1, ext;
      if (template == null)
        return;
      root = this.createShadowRoot$0(receiver);
      M.nodeBindFallback(template)._decorate$1(null);
      syntax = this.get$syntax(receiver);
      t = !!J.getInterceptor(template).$isNodeBindExtension ? template : M.nodeBindFallback(template);
      dom = J.createInstance$2$x(t, receiver, syntax == null && J.get$bindingDelegate$x(t) == null ? J.get$syntax$x(receiver.polymer$Polymer$_polymer$_element) : syntax);
      t1 = receiver.polymer$Polymer$_observers;
      ext = $.get$_instanceExtension().$index(0, dom);
      C.JSArray_methods.addAll$1(t1, ext != null ? ext.get$_bindings() : ext);
      root.appendChild(dom);
      this.marshalNodeReferences$1(receiver, root);
      return root;
    },
    marshalNodeReferences$1: function(receiver, root) {
      var t1, t2, n;
      if (root == null)
        return;
      for (t1 = J.querySelectorAll$1$x(root, "[id]"), t1 = t1.get$iterator(t1), t2 = receiver.polymer$Polymer$$; t1.moveNext$0();) {
        n = t1._current;
        t2.$indexSet(0, J.get$id$x(n), n);
      }
    },
    attributeChanged$3: function(receiver, $name, oldValue, newValue) {
      var t1 = J.getInterceptor($name);
      if (!t1.$eq($name, "class") && !t1.$eq($name, "style"))
        this.attributeToProperty$2(receiver, $name, newValue);
    },
    copyInstanceAttributes$0: function(receiver) {
      J.forEach$1$ax(receiver.polymer$Polymer$_polymer$_element.get$_instanceAttributes(), new A.Polymer_copyInstanceAttributes_closure(receiver));
    },
    takeAttributes$0: function(receiver) {
      if (receiver.polymer$Polymer$_polymer$_element.get$_publishLC() == null)
        return;
      this.get$attributes(receiver).forEach$1(0, this.get$attributeToProperty(receiver));
    },
    attributeToProperty$2: [function(receiver, $name, value) {
      var decl, t1, t2, currentValue, type, newValue;
      decl = this.propertyForAttribute$1(receiver, $name);
      if (decl == null)
        return;
      if (value == null || J.contains$1$asx(value, $.get$Polymer_bindPattern()) === true)
        return;
      t1 = J.getInterceptor$x(decl);
      t2 = t1.get$name(decl);
      currentValue = $.get$objectAccessor().read$2(receiver, t2);
      type = t1.get$type(decl);
      t2 = J.getInterceptor(type);
      newValue = Z.deserializeValue(value, currentValue, (t2.$eq(type, C.Type_HqF) || t2.$eq(type, C.Type_dynamic)) && currentValue != null ? J.get$runtimeType$(currentValue) : type);
      if (newValue == null ? currentValue != null : newValue !== currentValue) {
        t1 = t1.get$name(decl);
        $.get$objectAccessor().write$3(receiver, t1, newValue);
      }
    }, "call$2", "get$attributeToProperty", 4, 0, 169],
    propertyForAttribute$1: function(receiver, $name) {
      var publishLC = receiver.polymer$Polymer$_polymer$_element.get$_publishLC();
      if (publishLC == null)
        return;
      return J.$index$asx(publishLC, $name);
    },
    serializeValue$1: function(receiver, value) {
      if (value == null)
        return;
      if (typeof value === "boolean")
        return value ? "" : null;
      else if (typeof value === "string" || typeof value === "number")
        return H.S(value);
      return;
    },
    reflectPropertyToAttribute$1: function(receiver, path) {
      var propValue, serializedValue;
      propValue = L.PropertyPath_PropertyPath(path).getValueFrom$1(receiver);
      serializedValue = this.serializeValue$1(receiver, propValue);
      if (serializedValue != null)
        this.get$attributes(receiver)._html$_element.setAttribute(path, serializedValue);
      else if (typeof propValue === "boolean")
        this.get$attributes(receiver).remove$1(0, path);
    },
    bind$3$oneTime: function(receiver, $name, bindable, oneTime) {
      var decl, t1, observer, t2, reflect, propName;
      decl = this.propertyForAttribute$1(receiver, $name);
      if (decl == null)
        return J.bind$3$oneTime$x(M.nodeBindFallback(receiver), $name, bindable, oneTime);
      else {
        t1 = J.getInterceptor$x(decl);
        observer = this.bindProperty$3$oneTime(receiver, t1.get$name(decl), bindable, oneTime);
        if (J.$eq(J.$index$asx(J.$index$asx($.get$context(), "Platform"), "enableBindingsReflection"), true) && observer != null) {
          if (J.get$bindings$x(M.nodeBindFallback(receiver)) == null) {
            t2 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
            J.set$bindings$x(M.nodeBindFallback(receiver), t2);
          }
          J.$indexSet$ax(J.get$bindings$x(M.nodeBindFallback(receiver)), $name, observer);
        }
        reflect = receiver.polymer$Polymer$_polymer$_element.get$_reflect();
        t1 = t1.get$name(decl);
        propName = $.get$symbolConverter()._configuration.names.$index(0, t1);
        if (reflect != null && J.contains$1$asx(reflect, propName) === true)
          this.reflectPropertyToAttribute$1(receiver, propName);
        return observer;
      }
    },
    bindFinished$0: function(receiver) {
      return this.makeElementReady$0(receiver);
    },
    get$bindings: function(receiver) {
      return J.get$bindings$x(M.nodeBindFallback(receiver));
    },
    set$bindings: function(receiver, value) {
      J.set$bindings$x(M.nodeBindFallback(receiver), value);
    },
    get$templateInstance: function(receiver) {
      return J.get$templateInstance$x(M.nodeBindFallback(receiver));
    },
    asyncUnbindAll$0: function(receiver) {
      var job, t1;
      if (receiver.polymer$Polymer$_unbound === true)
        return;
      $.get$_unbindLog().fine$1(new A.Polymer_asyncUnbindAll_closure(receiver));
      job = receiver.polymer$Polymer$_unbindAllJob;
      t1 = this.get$unbindAll(receiver);
      if (job == null)
        job = new A.PolymerJob(null, null, null);
      job.start$2(0, t1, null);
      receiver.polymer$Polymer$_unbindAllJob = job;
    },
    unbindAll$0: [function(receiver) {
      if (receiver.polymer$Polymer$_unbound === true)
        return;
      this.closeObservers$0(receiver);
      this.closeNamedObservers$0(receiver);
      receiver.polymer$Polymer$_unbound = true;
    }, "call$0", "get$unbindAll", 0, 0, 13],
    cancelUnbindAll$0: function(receiver) {
      var t1;
      if (receiver.polymer$Polymer$_unbound === true) {
        $.get$_unbindLog().warning$1(new A.Polymer_cancelUnbindAll_closure(receiver));
        return;
      }
      $.get$_unbindLog().fine$1(new A.Polymer_cancelUnbindAll_closure0(receiver));
      t1 = receiver.polymer$Polymer$_unbindAllJob;
      if (t1 != null) {
        t1.stop$0(0);
        receiver.polymer$Polymer$_unbindAllJob = null;
      }
    },
    createPropertyObserver$0: function(receiver) {
      var observe, o, t1, path;
      observe = J.get$_observe$x(receiver.polymer$Polymer$_polymer$_element);
      if (observe != null) {
        o = new L.CompoundObserver(null, false, [], null, null, null, $._Observer__UNOPENED);
        o._path_observer$_value = [];
        receiver.polymer$Polymer$_propertyObserver = o;
        receiver.polymer$Polymer$_observers.push(o);
        for (t1 = J.get$iterator$ax(observe.get$keys()); t1.moveNext$0() === true;) {
          path = t1.get$current();
          o.addPath$2(receiver, path);
          this.observeArrayValue$3(receiver, path, path.getValueFrom$1(receiver), null);
        }
      }
    },
    notifyPropertyChanges$3: [function(receiver, newValues, oldValues, paths) {
      J.forEach$1$ax(oldValues, new A.Polymer_notifyPropertyChanges_closure(receiver, newValues, oldValues, paths, J.get$_observe$x(receiver.polymer$Polymer$_polymer$_element), P.HashSet_HashSet(null, null, null, null)));
    }, "call$3", "get$notifyPropertyChanges", 6, 0, 170],
    _propertyChangeWorkaround$1: [function(receiver, records) {
      var t1, t2, record, $name;
      for (t1 = J.get$iterator$ax(records), t2 = receiver.polymer$Polymer$_properties; t1.moveNext$0() === true;) {
        record = t1.get$current();
        if (!J.getInterceptor(record).$isPropertyChangeRecord)
          continue;
        $name = record.name;
        if (t2.$index(0, $name) != null)
          continue;
        this._propertyChange$3(receiver, $name, record.newValue, record.oldValue);
      }
    }, "call$1", "get$_propertyChangeWorkaround", 2, 0, 171, 163, []],
    _propertyChange$3: function(receiver, nameSymbol, newValue, oldValue) {
      var $name, reflect;
      $.get$_watchLog().info$1(new A.Polymer__propertyChange_closure(receiver, nameSymbol, newValue, oldValue));
      $name = $.get$symbolConverter()._configuration.names.$index(0, nameSymbol);
      reflect = receiver.polymer$Polymer$_polymer$_element.get$_reflect();
      if (reflect != null && J.contains$1$asx(reflect, $name) === true)
        this.reflectPropertyToAttribute$1(receiver, $name);
    },
    observeArrayValue$3: function(receiver, $name, value, old) {
      var observe = J.get$_observe$x(receiver.polymer$Polymer$_polymer$_element);
      if (observe == null)
        return;
      if (J.$index$asx(observe, $name) == null)
        return;
    },
    emitPropertyChangeRecord$3: function(receiver, $name, newValue, oldValue) {
      if (oldValue == null ? newValue == null : oldValue === newValue)
        return;
      this._propertyChange$3(receiver, $name, newValue, oldValue);
    },
    bindToAccessor$3$resolveBindingValue: function(receiver, $name, bindable, resolveBindingValue) {
      var getter, oldValue, property, t1, o, setter, value, v, t2, t3;
      getter = $.get$objectAccessor()._configuration.getters.$index(0, $name);
      if (getter == null)
        H.throwExpression(O.MissingCodeException$("getter \"" + H.S($name) + "\" in " + this.toString$0(receiver)));
      oldValue = getter.call$1(receiver);
      property = receiver.polymer$Polymer$_properties.$index(0, $name);
      if (property == null) {
        t1 = J.getInterceptor$x(bindable);
        if (t1.get$value(bindable) == null)
          t1.set$value(bindable, oldValue);
        o = new A._PolymerBinding(receiver, $name, bindable, null, null);
        o._sub = this.get$changes(receiver)._createSubscription$4(o.get$_propertyValueChanged(), null, null, false);
        t1 = J.open$1$x(bindable, o.get$_updateNode());
        o._lastValue = t1;
        setter = $.get$objectAccessor()._configuration.setters.$index(0, $name);
        if (setter == null)
          H.throwExpression(O.MissingCodeException$("setter \"" + H.S($name) + "\" in " + this.toString$0(receiver)));
        setter.call$2(receiver, t1);
        receiver.polymer$Polymer$_observers.push(o);
        return o;
      }
      property.bindable = bindable;
      t1 = J.getInterceptor$x(bindable);
      value = t1.open$1(bindable, property.get$updateValue());
      if (resolveBindingValue) {
        v = value == null ? oldValue : value;
        if (value == null ? oldValue != null : value !== oldValue) {
          t1.set$value(bindable, v);
          value = v;
        }
      }
      oldValue = property._polymer$_value;
      t1 = property._polymer$_target;
      t2 = property._polymer$_name;
      t3 = J.getInterceptor$x(t1);
      property._polymer$_value = t3.notifyPropertyChange$3(t1, t2, oldValue, value);
      t3.emitPropertyChangeRecord$3(t1, t2, value, oldValue);
      o = new A._CloseOnlyBinding(property);
      receiver.polymer$Polymer$_observers.push(o);
      return o;
    },
    bindToAccessor$2: function($receiver, name, bindable) {
      return this.bindToAccessor$3$resolveBindingValue($receiver, name, bindable, false);
    },
    _getBindingForComputedProperty$1: function(receiver, $name) {
      var exprString = J.$index$asx(receiver.polymer$Polymer$_polymer$_element.get$_computed(), $name);
      if (exprString == null)
        return;
      return T.PolymerExpressions_getBinding$closure().call$3$globals(T.PolymerExpressions_getExpression$closure().call$1(exprString), receiver, J.get$syntax$x(receiver.polymer$Polymer$_polymer$_element).get$globals());
    },
    createComputedProperties$0: function(receiver) {
      var computed, $name, binding, e, t1, t2, t3, exception;
      computed = receiver.polymer$Polymer$_polymer$_element.get$_computed();
      for (t1 = J.get$iterator$ax(computed.get$keys()), t2 = receiver.polymer$Polymer$_properties; t1.moveNext$0() === true;) {
        $name = t1.get$current();
        try {
          binding = this._getBindingForComputedProperty$1(receiver, $name);
          if (t2.$index(0, $name) == null) {
            t3 = new A._PropertyAccessor($name, J.get$value$x(binding), receiver, null);
            t3.$builtinTypeInfo = [null];
            t2.$indexSet(0, $name, t3);
          }
          this.bindToAccessor$2(receiver, $name, binding);
        } catch (exception) {
          t3 = H.unwrapException(exception);
          e = t3;
          window;
          t3 = "Failed to create computed property " + H.S($name) + " (" + H.S(J.$index$asx(computed, $name)) + "): " + H.S(e);
          if (typeof console != "undefined")
            console.error(t3);
        }

      }
    },
    closeObservers$0: function(receiver) {
      var t1, t2, o;
      t1 = receiver.polymer$Polymer$_observers;
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      for (; t2.moveNext$0();) {
        o = t2._current;
        if (o != null)
          J.close$0$x(o);
      }
      receiver.polymer$Polymer$_observers = [];
    },
    closeNamedObservers$0: function(receiver) {
      var t1, t2, sub;
      t1 = receiver.polymer$Polymer$_namedObservers;
      if (t1 == null)
        return;
      t1 = t1.get$values(t1);
      t2 = new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)];
      for (; t2.moveNext$0();) {
        sub = t2._current;
        if (sub != null)
          sub.cancel$0();
      }
      receiver.polymer$Polymer$_namedObservers.clear$0(0);
      receiver.polymer$Polymer$_namedObservers = null;
    },
    bindProperty$3$oneTime: function(receiver, $name, bindableOrValue, oneTime) {
      var t1 = $.get$_bindLog();
      t1.fine$1(new A.Polymer_bindProperty_closure(receiver, $name, bindableOrValue));
      if (oneTime === true) {
        if (!!J.getInterceptor(bindableOrValue).$isBindable)
          t1.warning$1(new A.Polymer_bindProperty_closure0(receiver, $name, bindableOrValue));
        $.get$objectAccessor().write$3(receiver, $name, bindableOrValue);
        return;
      }
      return this.bindToAccessor$3$resolveBindingValue(receiver, $name, bindableOrValue, true);
    },
    addHostListeners$0: function(receiver) {
      var events, t1;
      events = receiver.polymer$Polymer$_polymer$_element.get$_eventDelegates();
      t1 = J.getInterceptor$asx(events);
      if (t1.get$isEmpty(events) === true)
        return;
      $.get$_eventsLog().fine$1(new A.Polymer_addHostListeners_closure(receiver, events));
      t1.forEach$1(events, new A.Polymer_addHostListeners_closure0(receiver));
    },
    dispatchMethod$3: function(receiver, object, callbackOrMethod, args) {
      var t1, maxArgs, t2;
      t1 = $.get$_eventsLog();
      t1.info$1(new A.Polymer_dispatchMethod_closure(receiver, callbackOrMethod));
      if (!!J.getInterceptor(callbackOrMethod).$isFunction) {
        maxArgs = X.maxArgs(callbackOrMethod);
        if (maxArgs === -1)
          t1.warning$1("invalid callback: expected callback of 0, 1, 2, or 3 arguments");
        C.JSArray_methods.set$length(args, maxArgs);
        H.Primitives_applyFunction(callbackOrMethod, args, P.Function__toMangledNames(null));
      } else if (typeof callbackOrMethod === "string") {
        t2 = $.get$symbolConverter()._configuration._symbols.$index(0, callbackOrMethod);
        $.get$objectAccessor().invoke$5$adjust$namedArgs(object, t2, args, true, null);
      } else
        t1.warning$1("invalid callback");
      t1.fine$1(new A.Polymer_dispatchMethod_closure0(receiver, callbackOrMethod));
    },
    async$1: function(receiver, method) {
      var t1;
      P.scheduleMicrotask(F.Observable_dirtyCheck$closure());
      $.get$_Platform().callMethod$1("flush");
      t1 = window;
      C.Window_methods._ensureRequestAnimationFrame$0(t1);
      return C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(method));
    },
    fire$5$canBubble$cancelable$detail$onNode: function(receiver, type, canBubble, cancelable, detail, onNode) {
      var $event = W.CustomEvent_CustomEvent(type, true, true, detail);
      this.dispatchEvent$1(receiver, $event);
      return $event;
    },
    fire$1: function($receiver, type) {
      return this.fire$5$canBubble$cancelable$detail$onNode($receiver, type, null, null, null, null);
    },
    $isPolymer: true,
    $isNodeBindExtension: true,
    $isObservable: true,
    $isElement: true,
    $isEventTarget: true,
    $isNode: true
  },
  Polymer_makeElementReady_closure: {
    "^": "Closure:14;this_0",
    call$0: [function() {
      return "[" + J.toString$0(this.this_0) + "]: ready";
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Polymer_attached_closure: {
    "^": "Closure:54;this_0",
    call$1: [function(_) {
      return;
    }, "call$1", null, 2, 0, null, 108, [], "call"],
    $isFunction: true
  },
  Polymer_copyInstanceAttributes_closure: {
    "^": "Closure:94;this_0",
    call$2: [function($name, value) {
      var t1 = J.get$attributes$x(this.this_0);
      if (t1.containsKey$1($name) !== true)
        t1.$indexSet(0, $name, new A.Polymer_copyInstanceAttributes__closure(value).call$0());
      t1.$index(0, $name);
    }, "call$2", null, 4, 0, null, 62, [], 19, [], "call"],
    $isFunction: true
  },
  Polymer_copyInstanceAttributes__closure: {
    "^": "Closure:14;value_1",
    call$0: function() {
      return this.value_1;
    },
    $isFunction: true
  },
  Polymer_asyncUnbindAll_closure: {
    "^": "Closure:14;this_0",
    call$0: [function() {
      return "[" + H.S(J.get$_polymer$_name$x(this.this_0)) + "] asyncUnbindAll";
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Polymer_cancelUnbindAll_closure: {
    "^": "Closure:14;this_0",
    call$0: [function() {
      return "[" + H.S(J.get$_polymer$_name$x(this.this_0)) + "] already unbound, cannot cancel unbindAll";
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Polymer_cancelUnbindAll_closure0: {
    "^": "Closure:14;this_1",
    call$0: [function() {
      return "[" + H.S(J.get$_polymer$_name$x(this.this_1)) + "] cancelUnbindAll";
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Polymer_notifyPropertyChanges_closure: {
    "^": "Closure:94;this_0,newValues_1,oldValues_2,paths_3,observe_4,called_5",
    call$2: [function(i, oldValue) {
      var t1, newValue, t2, path, t3, methods, t4, t5, t6, t7, method;
      t1 = this.newValues_1;
      newValue = J.$index$asx(t1, i);
      t2 = this.paths_3;
      if (typeof i !== "number")
        return H.iae(i);
      path = J.$index$asx(t2, 2 * i + 1);
      t3 = this.observe_4;
      if (t3 == null)
        return;
      methods = J.$index$asx(t3, path);
      if (methods == null)
        return;
      for (t3 = J.get$iterator$ax(methods), t4 = this.this_0, t5 = J.getInterceptor$x(t4), t6 = this.oldValues_2, t7 = this.called_5; t3.moveNext$0() === true;) {
        method = t3.get$current();
        if (!t7.add$1(0, method))
          continue;
        t5.observeArrayValue$3(t4, path, newValue, oldValue);
        $.get$objectAccessor().invoke$5$adjust$namedArgs(t4, method, [oldValue, newValue, t1, t6, t2], true, null);
      }
    }, "call$2", null, 4, 0, null, 106, [], 63, [], "call"],
    $isFunction: true
  },
  Polymer__propertyChange_closure: {
    "^": "Closure:14;this_0,nameSymbol_1,newValue_2,oldValue_3",
    call$0: [function() {
      return "[" + J.toString$0(this.this_0) + "]: " + H.S(this.nameSymbol_1) + " changed from: " + H.S(this.oldValue_3) + " to: " + H.S(this.newValue_2);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Polymer_observeArrayValue_closure: {
    "^": "Closure:14;this_0,name_1",
    call$0: [function() {
      return "[" + H.S(J.get$_polymer$_name$x(this.this_0)) + "] observeArrayValue: unregister " + H.S(this.name_1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Polymer_observeArrayValue_closure0: {
    "^": "Closure:14;this_2,name_3",
    call$0: [function() {
      return "[" + H.S(J.get$_polymer$_name$x(this.this_2)) + "] observeArrayValue: register " + H.S(this.name_3);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Polymer_observeArrayValue_closure1: {
    "^": "Closure:54;this_4,callbacks_5",
    call$1: function(changes) {
      var t1, t2, callback;
      for (t1 = J.get$iterator$ax(this.callbacks_5), t2 = this.this_4; t1.moveNext$0() === true;) {
        callback = t1.get$current();
        $.get$objectAccessor().invoke$5$adjust$namedArgs(t2, callback, [changes], true, null);
      }
    },
    $isFunction: true
  },
  Polymer_bindProperty_closure: {
    "^": "Closure:14;this_0,name_1,bindableOrValue_2",
    call$0: [function() {
      return "bindProperty: [" + H.S(this.bindableOrValue_2) + "] to [" + H.S(J.get$_polymer$_name$x(this.this_0)) + "].[" + H.S(this.name_1) + "]";
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Polymer_bindProperty_closure0: {
    "^": "Closure:14;this_3,name_4,bindableOrValue_5",
    call$0: [function() {
      return "bindProperty: expected non-bindable value n a one-time binding to [" + H.S(J.get$_polymer$_name$x(this.this_3)) + "].[" + H.S(this.name_4) + "], but found " + H.Primitives_objectToString(this.bindableOrValue_5) + ".";
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Polymer_addHostListeners_closure: {
    "^": "Closure:14;this_0,events_1",
    call$0: [function() {
      return "[" + H.S(J.get$_polymer$_name$x(this.this_0)) + "] addHostListeners: " + H.S(this.events_1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Polymer_addHostListeners_closure0: {
    "^": "Closure:94;this_2",
    call$2: [function(type, methodName) {
      var t1 = this.this_2;
      $.get$_PolymerGestures().callMethod$2("addEventListener", [t1, type, $.Zone__current.bindUnaryCallback$1(J.get$syntax$x(t1.polymer$Polymer$_polymer$_element).getEventHandler$3(t1, t1, methodName))]);
    }, "call$2", null, 4, 0, null, 147, [], 172, [], "call"],
    $isFunction: true
  },
  Polymer_dispatchMethod_closure: {
    "^": "Closure:14;this_0,callbackOrMethod_1",
    call$0: [function() {
      return ">>> [" + H.S(J.get$_polymer$_name$x(this.this_0)) + "]: dispatch " + H.S(this.callbackOrMethod_1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Polymer_dispatchMethod_closure0: {
    "^": "Closure:14;this_2,callbackOrMethod_3",
    call$0: [function() {
      return "<<< [" + H.S(J.get$_polymer$_name$x(this.this_2)) + "]: dispatch " + H.S(this.callbackOrMethod_3);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _PolymerBinding: {
    "^": "Bindable;_polymer$_target,_property,_polymer$_bindable,_sub,_lastValue",
    _updateNode$1: [function(newValue) {
      this._lastValue = newValue;
      $.get$objectAccessor().write$3(this._polymer$_target, this._property, newValue);
    }, "call$1", "get$_updateNode", 2, 0, 18, 64, []],
    _propertyValueChanged$1: [function(records) {
      var t1, t2, record, getter, newValue;
      for (t1 = J.get$iterator$ax(records), t2 = this._property; t1.moveNext$0() === true;) {
        record = t1.get$current();
        if (!!J.getInterceptor(record).$isPropertyChangeRecord && J.$eq(record.name, t2)) {
          t1 = this._polymer$_target;
          getter = $.get$objectAccessor()._configuration.getters.$index(0, t2);
          if (getter == null)
            H.throwExpression(O.MissingCodeException$("getter \"" + H.S(t2) + "\" in " + J.toString$0(t1)));
          newValue = getter.call$1(t1);
          t1 = this._lastValue;
          if (t1 == null ? newValue != null : t1 !== newValue)
            J.set$value$x(this._polymer$_bindable, newValue);
          return;
        }
      }
    }, "call$1", "get$_propertyValueChanged", 2, 0, 171, 163, []],
    open$1: function(_, callback) {
      return J.open$1$x(this._polymer$_bindable, callback);
    },
    get$value: function(_) {
      return J.get$value$x(this._polymer$_bindable);
    },
    set$value: function(_, newValue) {
      J.set$value$x(this._polymer$_bindable, newValue);
      return newValue;
    },
    close$0: function(_) {
      var t1 = this._sub;
      if (t1 != null) {
        t1.cancel$0();
        this._sub = null;
      }
      J.close$0$x(this._polymer$_bindable);
    }
  },
  _CloseOnlyBinding: {
    "^": "Bindable;accessor",
    open$1: function(_, callback) {
    },
    get$value: function(_) {
      return;
    },
    set$value: function(_, newValue) {
    },
    deliver$0: function() {
    },
    close$0: function(_) {
      var t1, t2;
      t1 = this.accessor;
      t2 = t1.bindable;
      if (t2 == null)
        return;
      J.close$0$x(t2);
      t1.bindable = null;
    }
  },
  PolymerJob: {
    "^": "Object;_callback,_polymer$_timer,_id",
    _callback$0: function() {
      return this._callback.call$0();
    },
    start$2: [function(_, callback, wait) {
      var t1;
      this.stop$0(0);
      this._callback = callback;
      if (wait == null) {
        t1 = window;
        C.Window_methods._ensureRequestAnimationFrame$0(t1);
        this._id = C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(new A.PolymerJob_start_closure(this)));
      } else
        this._polymer$_timer = P.Timer_Timer(wait, this.get$complete(this));
    }, function($receiver, callback) {
      return this.start$2($receiver, callback, null);
    }, "start$1", "call$2", "call$1", "get$start", 2, 2, 173, 21, 39, [], 174, []],
    stop$0: [function(_) {
      var t1, t2;
      t1 = this._id;
      if (t1 != null) {
        t2 = window;
        C.Window_methods._ensureRequestAnimationFrame$0(t2);
        t2.cancelAnimationFrame(t1);
        this._id = null;
      }
      t1 = this._polymer$_timer;
      if (t1 != null) {
        t1.cancel$0();
        this._polymer$_timer = null;
      }
    }, "call$0", "get$stop", 0, 0, 13],
    complete$0: [function(_) {
      if (this._polymer$_timer != null || this._id != null) {
        this.stop$0(0);
        this._callback$0();
      }
    }, "call$0", "get$complete", 0, 0, 13]
  },
  PolymerJob_start_closure: {
    "^": "Closure:54;this_0",
    call$1: [function(_) {
      var t1 = this.this_0;
      if (t1._polymer$_timer != null || t1._id != null) {
        t1.stop$0(0);
        t1._callback$0();
      }
      return;
    }, "call$1", null, 2, 0, null, 108, [], "call"],
    $isFunction: true
  },
  CustomTag: {
    "^": "Object;tagName>"
  },
  InitMethodAnnotation: {
    "^": "Object;"
  },
  initPolymer_closure: {
    "^": "Closure:14;",
    call$0: [function() {
      return A.startPolymer($.initializers, $.deployMode);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _hookJsPolymer_closure: {
    "^": "Closure:14;",
    call$0: [function() {
      var t1 = $.get$Polymer__onReady().future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(null);
      return;
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _hookJsPolymer_registerDart: {
    "^": "Closure:177;zone_0,originalRegister_1",
    call$3: [function(jsElem, $name, extendee) {
      var type = $.get$_typesByName().$index(0, $name);
      if (type != null)
        return this.zone_0.run$1(new A._hookJsPolymer_registerDart_closure(jsElem, $name, type, $.get$_declarations().$index(0, extendee)));
      return this.originalRegister_1.apply$2$thisArg([$name, extendee], jsElem);
    }, "call$3", null, 6, 0, null, 175, [], 62, [], 176, [], "call"],
    $isFunction: true
  },
  _hookJsPolymer_registerDart_closure: {
    "^": "Closure:14;jsElem_2,name_3,type_4,extendsDecl_5",
    call$0: [function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, assetPath;
      t1 = this.jsElem_2;
      t2 = this.name_3;
      t3 = this.type_4;
      t4 = this.extendsDecl_5;
      t5 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t6 = $.get$PolymerDeclaration__polymerSyntax();
      t7 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t5 = new A.PolymerDeclaration(t1, t3, t4, t2, null, null, null, t5, null, null, null, null, t6, t7, null, null);
      $.get$_declarations().$indexSet(0, t2, t5);
      t5.publishAttributes$1(t4);
      t8 = t5._polymer$_publish;
      if (t8 != null)
        t5._publishLC = t5._lowerCaseMap$1(t8);
      t5.inferObservers$0();
      t5.explodeObservers$0();
      t5.createPropertyAccessors$0();
      t8 = J.getInterceptor$x(t1);
      t9 = t8.querySelector$1(t1, "template");
      if (t9 != null)
        J.set$bindingDelegate$x(!!J.getInterceptor(t9).$isNodeBindExtension ? t9 : M.nodeBindFallback(t9), t6);
      t5.cacheSheets$0();
      t5.cacheStyles$0();
      t5.installLocalSheets$0();
      A.Polymer_applyStyleToScope(t5.cssTextToScopeStyle$2(t5.cssTextForScope$1("global"), "global"), document.head);
      t5.resolveElementPaths$1(t1);
      t5.accumulateInstanceAttributes$0();
      t5.addAttributeDelegates$1(t7);
      assetPath = J.$index$asx(t8.get$attributes(t1), "assetpath");
      if (assetPath == null)
        assetPath = "";
      t5._rootUri = P.Uri_parse(J.get$baseUri$x(t8.get$ownerDocument(t1))).resolveUri$1(P.Uri_parse(assetPath));
      t1 = t5.get$templateContent();
      A._shimShadowDomStyling(t1, t2, t4 != null ? J.get$name$x(t4) : null);
      if ($.get$typeInspector().hasStaticMethod$2(t3, C.Symbol_registerCallback))
        $.get$objectAccessor().invoke$5$adjust$namedArgs(t3, C.Symbol_registerCallback, [t5], false, null);
      t5.registerType$1(t2);
      return;
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  closure: {
    "^": "Closure:14;",
    call$0: function() {
      var proto = J.$index$asx(P.JsObject_JsObject$fromBrowserObject(document.createElement("polymer-element", null)), "__proto__");
      return !!J.getInterceptor(proto).$isNode ? P.JsObject_JsObject$fromBrowserObject(proto) : proto;
    },
    $isFunction: true
  },
  _initializeLogging_closure: {
    "^": "Closure:54;box_0",
    call$1: function(logger) {
      return J.$eq(J.$index$asx(this.box_0.logFlags_0, J.get$name$x(logger)), true);
    },
    $isFunction: true
  },
  _initializeLogging_closure0: {
    "^": "Closure:54;box_0",
    call$1: function(logger) {
      return !J.$eq(J.$index$asx(this.box_0.logFlags_0, J.get$name$x(logger)), true);
    },
    $isFunction: true
  },
  _initializeLogging_closure1: {
    "^": "Closure:54;",
    call$1: function(logger) {
      logger.set$level(C.Level_OFF_2000);
    },
    $isFunction: true
  },
  _initializeLogging_closure2: {
    "^": "Closure:54;",
    call$1: [function(rec) {
      P.print(rec);
    }, "call$1", null, 2, 0, null, 178, [], "call"],
    $isFunction: true
  },
  _PropertyAccessor: {
    "^": "Object;_polymer$_name,_polymer$_value,_polymer$_target,bindable",
    updateValue$1: [function(newValue) {
      var oldValue, t1, t2, t3;
      oldValue = this._polymer$_value;
      t1 = this._polymer$_target;
      t2 = this._polymer$_name;
      t3 = J.getInterceptor$x(t1);
      this._polymer$_value = t3.notifyPropertyChange$3(t1, t2, oldValue, newValue);
      t3.emitPropertyChangeRecord$3(t1, t2, newValue, oldValue);
    }, "call$1", "get$updateValue", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T0", void: true, args: [T]};
      }, this.$receiver, "_PropertyAccessor");
    }, 64, []],
    get$value: function(_) {
      var t1 = this.bindable;
      if (t1 != null)
        t1.deliver$0();
      return this._polymer$_value;
    },
    set$value: function(_, newValue) {
      var t1 = this.bindable;
      if (t1 != null)
        J.set$value$x(t1, newValue);
      else
        this.updateValue$1(newValue);
    },
    toString$0: function(_) {
      var $name, hasBinding;
      $name = $.get$symbolConverter()._configuration.names.$index(0, this._polymer$_name);
      hasBinding = this.bindable == null ? "(no-binding)" : "(with-binding)";
      return "[" + H.S(new H.TypeImpl(H.getRuntimeTypeString(this), null)) + ": " + J.toString$0(this._polymer$_target) + "." + H.S($name) + ": " + H.S(this._polymer$_value) + " " + hasBinding + "]";
    }
  }
}],
["polymer.auto_binding", "package:polymer/auto_binding.dart", , Y, {
  "^": "",
  AutoBindingElement: {
    "^": "TemplateElement_Polymer_Observable;_auto_binding$_self,observable$Observable$_observable$_changes,observable$Observable$_values,observable$Observable$_records,polymer$Polymer$_polymer$_element,polymer$Polymer$_namedObservers,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$_readied,polymer$Polymer$_jsElem,polymer$Polymer$_hasBeenAttached,polymer$Polymer$shadowRoots,polymer$Polymer$$,polymer$Polymer$_properties,polymer$Polymer$_polyfillScopeStyleCache",
    get$model: function(receiver) {
      return J.get$model$x(receiver._auto_binding$_self);
    },
    get$bindingDelegate: function(receiver) {
      return J.get$bindingDelegate$x(receiver._auto_binding$_self);
    },
    set$bindingDelegate: function(receiver, value) {
      J.set$bindingDelegate$x(receiver._auto_binding$_self, value);
    },
    clear$0: function(receiver) {
      return J.clear$0$ax(receiver._auto_binding$_self);
    },
    get$syntax: function(receiver) {
      return J.get$bindingDelegate$x(receiver._auto_binding$_self);
    },
    createInstance$2: function(receiver, model, delegate) {
      return J.createInstance$2$x(receiver._auto_binding$_self, model, delegate);
    },
    dispatchMethod$3: function(receiver, obj, method, args) {
      return A.Polymer.prototype.dispatchMethod$3.call(this, receiver, obj === receiver ? J.get$model$x(receiver._auto_binding$_self) : obj, method, args);
    },
    AutoBindingElement$created$0: function(receiver) {
      var t1;
      this.polymerCreated$0(receiver);
      receiver._auto_binding$_self = M.nodeBindFallback(receiver);
      t1 = T.PolymerExpressions$(null, C.C_ScopeFactory);
      J.set$bindingDelegate$x(receiver._auto_binding$_self, new Y._AutoBindingSyntax(receiver, t1, null));
      $.get$Polymer__onReady().future.then$1(new Y.AutoBindingElement$created_closure(receiver));
    },
    $isTemplateBindExtension: true,
    $isNodeBindExtension: true,
    static: {AutoBindingElement$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, W.ShadowRoot);
        t2 = P.String;
        t3 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t2, null), null, null);
        t3.$builtinTypeInfo = [t2, null];
        t2 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        t4 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        receiver.polymer$Polymer$_observers = [];
        receiver.polymer$Polymer$_readied = false;
        receiver.polymer$Polymer$_hasBeenAttached = false;
        receiver.polymer$Polymer$shadowRoots = t1;
        receiver.polymer$Polymer$$ = t3;
        receiver.polymer$Polymer$_properties = t2;
        receiver.polymer$Polymer$_polyfillScopeStyleCache = t4;
        C.AutoBindingElement_methods.Element$created$0(receiver);
        C.AutoBindingElement_methods.AutoBindingElement$created$0(receiver);
        return receiver;
      }}
  },
  TemplateElement_Polymer: {
    "^": "TemplateElement+Polymer;_jsElem:polymer$Polymer$_jsElem=,$$:polymer$Polymer$$=",
    $isPolymer: true,
    $isNodeBindExtension: true,
    $isObservable: true,
    $isElement: true,
    $isEventTarget: true,
    $isNode: true
  },
  TemplateElement_Polymer_Observable: {
    "^": "TemplateElement_Polymer+Observable;_observable$_changes:observable$Observable$_observable$_changes%,_values:observable$Observable$_values%,_records:observable$Observable$_records%",
    $isObservable: true
  },
  AutoBindingElement$created_closure: {
    "^": "Closure:54;this_0",
    call$1: [function(_) {
      var t1 = this.this_0;
      t1.setAttribute("bind", "");
      J.async$1$x(t1, new Y.AutoBindingElement$created__closure(t1));
    }, "call$1", null, 2, 0, null, 108, [], "call"],
    $isFunction: true
  },
  AutoBindingElement$created__closure: {
    "^": "Closure:54;this_1",
    call$1: [function(_) {
      var t1, t2;
      t1 = this.this_1;
      t2 = J.getInterceptor$x(t1);
      t2.marshalNodeReferences$1(t1, t1.parentNode);
      t2.fire$1(t1, "template-bound");
    }, "call$1", null, 2, 0, null, 108, [], "call"],
    $isFunction: true
  },
  _AutoBindingSyntax: {
    "^": "PolymerExpressions;_auto_binding$_node,_polymer$_delegate,_bindingMaps",
    findController$1: function(_) {
      return this._auto_binding$_node;
    }
  }
}],
["polymer.build.log_injector", "package:polymer/src/build/log_injector.dart", , F, {
  "^": "",
  LogInjector: {
    "^": "Object;selectedMenu,selectedContent",
    injectLogsFromUrl$1: function(url) {
      return W.HttpRequest_getString(url, null, null).then$1(new F.LogInjector_injectLogsFromUrl_closure(this));
    },
    injectLogs$1: function(data) {
      var t1, logsByLevel, menuWrapper, contentWrapper, wrapperDiv;
      t1 = Z.LogEntryTable_LogEntryTable$fromJson(C.JsonCodec_null_null.decode$1(data)).entries;
      if (t1._collection$_length === 0)
        return;
      logsByLevel = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t1.get$values(t1).forEach$1(0, new F.LogInjector_injectLogs_closure(logsByLevel));
      if (logsByLevel.get$isEmpty(logsByLevel))
        return;
      menuWrapper = document.createElement("div", null);
      J.get$classes$x(menuWrapper).add$1(0, "menu");
      contentWrapper = document.createElement("div", null);
      J.get$classes$x(contentWrapper).add$1(0, "content");
      wrapperDiv = document.createElement("div", null);
      J.get$classes$x(wrapperDiv).add$1(0, "build-logs");
      wrapperDiv.appendChild(menuWrapper);
      wrapperDiv.appendChild(contentWrapper);
      logsByLevel.forEach$1(0, new F.LogInjector_injectLogs_closure0(this, menuWrapper, contentWrapper));
      document.body.appendChild(wrapperDiv);
    }
  },
  LogInjector_injectLogsFromUrl_closure: {
    "^": "Closure:54;this_0",
    call$1: [function(data) {
      return this.this_0.injectLogs$1(data);
    }, "call$1", null, 2, 0, null, 110, [], "call"],
    $isFunction: true
  },
  LogInjector_injectLogs_closure: {
    "^": "Closure:54;logsByLevel_0",
    call$1: function(list) {
      return J.forEach$1$ax(list, new F.LogInjector_injectLogs__closure2(this.logsByLevel_0));
    },
    $isFunction: true
  },
  LogInjector_injectLogs__closure2: {
    "^": "Closure:54;logsByLevel_1",
    call$1: [function(log) {
      var t1 = this.logsByLevel_1;
      t1.putIfAbsent$2(log.get$level(), new F.LogInjector_injectLogs___closure());
      J.add$1$ax(t1.$index(0, log.get$level()), log);
    }, "call$1", null, 2, 0, null, 179, [], "call"],
    $isFunction: true
  },
  LogInjector_injectLogs___closure: {
    "^": "Closure:14;",
    call$0: function() {
      return [];
    },
    $isFunction: true
  },
  LogInjector_injectLogs_closure0: {
    "^": "Closure:94;this_2,menuWrapper_3,contentWrapper_4",
    call$2: function(level, logs) {
      var levelClassName, t1, menuItem, contentItem, log, logHtml, t2, id, hashTag, message, val, t3, span, text, logElement, messageElement;
      levelClassName = J.toLowerCase$0$s(level);
      t1 = J.getInterceptor$asx(logs);
      menuItem = W.Element_Element$html("<div class=\"" + H.S(levelClassName) + "\">" + H.S(level) + " <span class=\"num\">(" + H.S(t1.get$length(logs)) + ")</span></div>", null, null);
      this.menuWrapper_3.appendChild(menuItem);
      contentItem = document.createElement("div", null);
      J.get$classes$x(contentItem).add$1(0, levelClassName);
      this.contentWrapper_4.appendChild(contentItem);
      J.listen$1$x(J.get$onClick$x(menuItem), new F.LogInjector_injectLogs__closure(this.this_2, menuItem, contentItem));
      for (t1 = t1.get$iterator(logs); t1.moveNext$0() === true;) {
        log = t1.get$current();
        logHtml = new P.StringBuffer("");
        logHtml._contents = "";
        logHtml._contents = "<div class=\"log\">";
        t2 = J.getInterceptor$x(log);
        id = J.get$id$x(t2.get$message(log));
        hashTag = H.S(id.get$$package()) + "_" + H.S(J.get$id$x(id));
        message = t2.get$message(log).get$snippet();
        val = new P.HtmlEscape(C.HtmlEscapeMode_p2v)._convert$3(message, 0, J.get$length$asx(message));
        message = val == null ? message : val;
        J.replaceAllMapped$2$s(message, $.get$_urlRegex(), new F.LogInjector_injectLogs__closure0());
        t3 = "<div class=\"message " + H.S(levelClassName) + "\">" + H.S(message) + " <a target=\"blank\" href=\"/packages/polymer/src/build/generated/messages.html#" + hashTag + "\">(more details)</a></div>";
        t3 = "<div class=\"log\">" + t3;
        logHtml._contents = t3;
        span = t2.get$span(log);
        if (span != null) {
          t2 = t3 + "<div class=\"location\">";
          logHtml._contents = t2;
          t3 = J.getInterceptor$x(span);
          text = t3.get$text(span);
          val = new P.HtmlEscape(C.HtmlEscapeMode_p2v)._convert$3(text, 0, J.get$length$asx(text));
          text = val == null ? text : val;
          t3 = "  <span class=\"location\">" + H.S(t3.get$start(span).get$toolString()) + "</span></div>  <span class=\"text\">" + H.S(text) + "</span></div>";
          t2 += t3;
          logHtml._contents = t2;
          t2 += "</div>";
          logHtml._contents = t2;
        } else
          t2 = t3;
        t2 += "</div>";
        logHtml._contents = t2;
        t3 = [];
        t3.$builtinTypeInfo = [W.NodeValidator];
        t3.push(W._Html5NodeValidator$(null));
        t3.push(W._TemplatingNodeValidator$());
        t3.push(W._SimpleNodeValidator$(new F._OpenUriPolicy(), ["A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target"], ["A", "FORM"], ["A::href", "FORM::action"]));
        logElement = W.Element_Element$html(t2, null, new W.NodeValidatorBuilder(t3));
        contentItem.appendChild(logElement);
        messageElement = J.querySelector$1$x(logElement, ".message");
        J.listen$1$x(J.get$onClick$x(messageElement), new F.LogInjector_injectLogs__closure1(messageElement));
      }
    },
    $isFunction: true
  },
  LogInjector_injectLogs__closure: {
    "^": "Closure:54;this_5,menuItem_6,contentItem_7",
    call$1: [function(_) {
      var t1, t2, t3;
      t1 = this.this_5;
      t2 = this.menuItem_6;
      if (J.$eq(t1.selectedMenu, t2)) {
        t1.selectedMenu = null;
        t1.selectedContent = null;
      } else {
        t3 = t1.selectedMenu;
        if (t3 != null) {
          J.remove$1$ax(J.get$classes$x(t3), "active");
          J.get$classes$x(t1.selectedContent).remove$1(0, "active");
        }
        t1.selectedMenu = t2;
        t1.selectedContent = this.contentItem_7;
      }
      J.get$classes$x(t2).toggle$1("active");
      J.get$classes$x(this.contentItem_7).toggle$1("active");
    }, "call$1", null, 2, 0, null, 108, [], "call"],
    $isFunction: true
  },
  LogInjector_injectLogs__closure0: {
    "^": "Closure:54;",
    call$1: [function(m) {
      return "<a href=\"" + H.S(m.group$1(0)) + "\" target=\"blank\">" + H.S(m.group$1(0)) + "</a>";
    }, "call$1", null, 2, 0, null, 88, [], "call"],
    $isFunction: true
  },
  LogInjector_injectLogs__closure1: {
    "^": "Closure:54;messageElement_8",
    call$1: [function(e) {
      var t1 = this.messageElement_8;
      if (J.$eq(J.get$target$x(e), t1))
        J.get$classes$x(t1).toggle$1("expanded");
    }, "call$1", null, 2, 0, null, 2, [], "call"],
    $isFunction: true
  },
  _OpenUriPolicy: {
    "^": "Object;",
    allowsUri$1: function(uri) {
      return true;
    }
  }
}],
["polymer.deserialize", "package:polymer/deserialize.dart", , Z, {
  "^": "",
  deserializeValue: function(value, currentValue, type) {
    var handler, t1, exception;
    handler = $.get$_typeHandlers().$index(0, type);
    if (handler != null)
      return handler.call$2(value, currentValue);
    try {
      t1 = C.JsonCodec_null_null.decode$1(J.replaceAll$2$s(value, "'", "\""));
      return t1;
    } catch (exception) {
      H.unwrapException(exception);
      return value;
    }

  },
  closure0: {
    "^": "Closure:94;",
    call$2: function(x, _) {
      return x;
    },
    $isFunction: true
  },
  closure1: {
    "^": "Closure:94;",
    call$2: function(x, _) {
      return x;
    },
    $isFunction: true
  },
  closure2: {
    "^": "Closure:94;",
    call$2: function(x, def) {
      var t1, exception;
      try {
        t1 = P.DateTime_parse(x);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        return def;
      }

    },
    $isFunction: true
  },
  closure3: {
    "^": "Closure:94;",
    call$2: function(x, _) {
      return !J.$eq(x, "false");
    },
    $isFunction: true
  },
  closure4: {
    "^": "Closure:94;",
    call$2: function(x, def) {
      return H.Primitives_parseInt(x, null, new Z._closure0(def));
    },
    $isFunction: true
  },
  _closure0: {
    "^": "Closure:54;def_0",
    call$1: function(_) {
      return this.def_0;
    },
    $isFunction: true
  },
  closure5: {
    "^": "Closure:94;",
    call$2: function(x, def) {
      return H.Primitives_parseDouble(x, new Z._closure(def));
    },
    $isFunction: true
  },
  _closure: {
    "^": "Closure:54;def_1",
    call$1: function(_) {
      return this.def_1;
    },
    $isFunction: true
  }
}],
["polymer_expressions", "package:polymer_expressions/polymer_expressions.dart", , T, {
  "^": "",
  _classAttributeConverter: [function(v) {
    var t1 = J.getInterceptor(v);
    if (!!t1.$isMap)
      t1 = J.join$1$ax(J.where$1$ax(v.get$keys(), new T._classAttributeConverter_closure(v)), " ");
    else
      t1 = !!t1.$isIterable ? t1.join$1(v, " ") : v;
    return t1;
  }, "call$1", "_classAttributeConverter$closure", 2, 0, 68, 71, []],
  _styleAttributeConverter: [function(v) {
    var t1 = J.getInterceptor(v);
    if (!!t1.$isMap)
      t1 = J.join$1$ax(J.map$1$ax(v.get$keys(), new T._styleAttributeConverter_closure(v)), ";");
    else
      t1 = !!t1.$isIterable ? t1.join$1(v, ";") : v;
    return t1;
  }, "call$1", "_styleAttributeConverter$closure", 2, 0, 68, 71, []],
  _classAttributeConverter_closure: {
    "^": "Closure:54;v_0",
    call$1: [function(k) {
      return J.$eq(this.v_0.$index(0, k), true);
    }, "call$1", null, 2, 0, null, 121, [], "call"],
    $isFunction: true
  },
  _styleAttributeConverter_closure: {
    "^": "Closure:54;v_0",
    call$1: [function(k) {
      return H.S(k) + ": " + H.S(this.v_0.$index(0, k));
    }, "call$1", null, 2, 0, null, 121, [], "call"],
    $isFunction: true
  },
  PolymerExpressions0: {
    "^": "BindingDelegate;_scopeFactory,globals<,_scopes,_scopeIdents,_bindingMaps",
    prepareBinding$3: function(path, $name, boundNode) {
      var t1, expr, t2;
      t1 = {};
      expr = T.Parser$(path, null).parse$0();
      if (M.isSemanticTemplate(boundNode)) {
        t2 = J.getInterceptor($name);
        t2 = t2.$eq($name, "bind") || t2.$eq($name, "repeat");
      } else
        t2 = false;
      if (t2)
        if (!!J.getInterceptor(expr).$isHasIdentifier)
          return new T.PolymerExpressions_prepareBinding_closure(this, expr.get$identifier(), expr.get$expr());
        else
          return new T.PolymerExpressions_prepareBinding_closure0(this, expr);
      t1.converter_0 = null;
      t2 = !!J.getInterceptor(boundNode).$isElement;
      if (t2 && J.$eq($name, "class"))
        t1.converter_0 = T._classAttributeConverter$closure();
      else if (t2 && J.$eq($name, "style"))
        t1.converter_0 = T._styleAttributeConverter$closure();
      return new T.PolymerExpressions_prepareBinding_closure1(t1, this, expr);
    },
    prepareInstanceModel$1: function(template) {
      var ident = this._scopeIdents.$index(0, template);
      if (ident == null)
        return new T.PolymerExpressions_prepareInstanceModel_closure(this, template);
      return new T.PolymerExpressions_prepareInstanceModel_closure0(this, template, ident);
    },
    _getParentScope$1: function(node) {
      var t1, $parent, templateExtension, templateInstance, model;
      t1 = J.getInterceptor$x(node);
      $parent = t1.get$parentNode(node);
      if ($parent == null)
        return;
      if (M.isSemanticTemplate(node)) {
        templateExtension = !!t1.$isNodeBindExtension ? node : M.nodeBindFallback(node);
        t1 = J.getInterceptor$x(templateExtension);
        templateInstance = t1.get$templateInstance(templateExtension);
        model = templateInstance == null ? t1.get$model(templateExtension) : J.get$model$x(templateInstance);
        if (!!J.getInterceptor(model).$isScope)
          return model;
        else
          return this._scopes.$index(0, node);
      }
      return this._getParentScope$1($parent);
    },
    _getScopeForModel$2: function(node, model) {
      var t1, t2;
      if (node == null)
        return K.Scope_Scope(model, this.globals);
      t1 = J.getInterceptor(node);
      if (!!t1.$isElement)
        ;
      if (!!J.getInterceptor(model).$isScope)
        return model;
      t2 = this._scopes;
      if (t2.$index(0, node) != null) {
        t2.$index(0, node);
        return t2.$index(0, node);
      } else if (t1.get$parentNode(node) != null)
        return this._getContainingScope$2(t1.get$parentNode(node), model);
      else {
        if (!M.isSemanticTemplate(node))
          throw H.wrapException("expected a template instead of " + H.S(node));
        return this._getContainingScope$2(node, model);
      }
    },
    _getContainingScope$2: function(node, model) {
      var templateExtension, t1, templateInstance, scope;
      if (M.isSemanticTemplate(node)) {
        templateExtension = !!J.getInterceptor(node).$isNodeBindExtension ? node : M.nodeBindFallback(node);
        t1 = J.getInterceptor$x(templateExtension);
        templateInstance = t1.get$templateInstance(templateExtension);
        if (templateInstance == null)
          t1.get$model(templateExtension);
        else
          J.get$model$x(templateInstance);
        return this._scopes.$index(0, node);
      } else {
        t1 = J.getInterceptor$x(node);
        if (t1.get$parent(node) == null) {
          scope = this._scopes.$index(0, node);
          return scope != null ? scope : K.Scope_Scope(model, this.globals);
        } else
          return this._getContainingScope$2(t1.get$parentNode(node), model);
      }
    },
    static: {"^": "PolymerExpressions_DEFAULT_GLOBALS", PolymerExpressions$: function(globals, scopeFactory) {
        var t1, t2, t3;
        t1 = new P.Expando(null);
        t1.$builtinTypeInfo = [K.Scope];
        t2 = new P.Expando(null);
        t2.$builtinTypeInfo = [P.String];
        t3 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, P.Object);
        t3.addAll$1(0, C.Map_wgles);
        return new T.PolymerExpressions0(scopeFactory, t3, t1, t2, null);
      }, PolymerExpressions_getExpression: [function(exprString) {
        return T.Parser$(exprString, null).parse$0();
      }, "call$1", "PolymerExpressions_getExpression$closure", 2, 0, 72], PolymerExpressions_getBinding: [function(expr, model, globals, oneTime) {
        var scope;
        if (globals == null) {
          globals = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
          globals.addAll$1(0, C.Map_wgles);
        }
        scope = K.Scope_Scope(model, globals);
        return oneTime ? T._Binding__oneTime(expr, scope, null) : new T._Binding(scope, null, expr, null, null, null, null);
      }, function(expr, model) {
        return T.PolymerExpressions_getBinding(expr, model, null, false);
      }, null, function(expr, model, oneTime) {
        return T.PolymerExpressions_getBinding(expr, model, null, oneTime);
      }, null, function(expr, model, globals) {
        return T.PolymerExpressions_getBinding(expr, model, globals, false);
      }, null, "call$4$globals$oneTime", "call$2", "call$3$oneTime", "call$3$globals", "PolymerExpressions_getBinding$closure", 4, 5, 73, 21, 74]}
  },
  PolymerExpressions_prepareBinding_closure: {
    "^": "Closure:180;this_1,identifier_2,bindExpr_3",
    call$3: [function(model, node, oneTime) {
      var t1, scope;
      t1 = this.this_1;
      t1._scopeIdents.$indexSet(0, node, this.identifier_2);
      scope = !!J.getInterceptor(model).$isScope ? model : K.Scope_Scope(model, t1.globals);
      t1._scopes.$indexSet(0, node, scope);
      return new T._Binding(scope, null, this.bindExpr_3, null, null, null, null);
    }, "call$3", null, 6, 0, null, 165, [], 166, [], 167, [], "call"],
    $isFunction: true
  },
  PolymerExpressions_prepareBinding_closure0: {
    "^": "Closure:180;this_4,expr_5",
    call$3: [function(model, node, oneTime) {
      var t1, scope;
      t1 = this.this_4;
      scope = !!J.getInterceptor(model).$isScope ? model : K.Scope_Scope(model, t1.globals);
      t1._scopes.$indexSet(0, node, scope);
      if (oneTime === true)
        return T._Binding__oneTime(this.expr_5, scope, null);
      return new T._Binding(scope, null, this.expr_5, null, null, null, null);
    }, "call$3", null, 6, 0, null, 165, [], 166, [], 167, [], "call"],
    $isFunction: true
  },
  PolymerExpressions_prepareBinding_closure1: {
    "^": "Closure:180;box_0,this_6,expr_7",
    call$3: [function(model, node, oneTime) {
      var scope = this.this_6._getScopeForModel$2(node, model);
      if (oneTime === true)
        return T._Binding__oneTime(this.expr_7, scope, this.box_0.converter_0);
      return new T._Binding(scope, this.box_0.converter_0, this.expr_7, null, null, null, null);
    }, "call$3", null, 6, 0, null, 165, [], 166, [], 167, [], "call"],
    $isFunction: true
  },
  PolymerExpressions_prepareInstanceModel_closure: {
    "^": "Closure:54;this_0,template_1",
    call$1: [function(model) {
      var t1, t2, existingScope;
      t1 = this.this_0;
      t2 = this.template_1;
      existingScope = t1._scopes.$index(0, t2);
      if (existingScope != null) {
        if (J.$eq(model, J.get$model$x(existingScope)))
          return existingScope;
        return K.Scope_Scope(model, t1.globals);
      } else
        return t1._getScopeForModel$2(t2, model);
    }, "call$1", null, 2, 0, null, 165, [], "call"],
    $isFunction: true
  },
  PolymerExpressions_prepareInstanceModel_closure0: {
    "^": "Closure:54;this_2,template_3,ident_4",
    call$1: [function(model) {
      var t1, t2, existingScope, t3;
      t1 = this.this_2;
      t2 = this.template_3;
      existingScope = t1._scopes.$index(0, t2);
      t3 = this.ident_4;
      if (existingScope != null)
        return existingScope.childScope$2(t3, model);
      else
        return t1._getParentScope$1(t2).childScope$2(t3, model);
    }, "call$1", null, 2, 0, null, 165, [], "call"],
    $isFunction: true
  },
  _Binding: {
    "^": "Bindable;_scope,_converter,_polymer_expressions$_expr,_polymer_expressions$_callback,_polymer_expressions$_sub,_observer,_polymer_expressions$_value",
    _converter$1: function(arg0) {
      return this._converter.call$1(arg0);
    },
    _polymer_expressions$_callback$1: function(arg0) {
      return this._polymer_expressions$_callback.call$1(arg0);
    },
    _convertAndCheck$2$skipChanges: [function(newValue, skipChanges) {
      var oldValue, t1;
      oldValue = this._polymer_expressions$_value;
      t1 = this._converter == null ? newValue : this._converter$1(newValue);
      this._polymer_expressions$_value = t1;
      if (skipChanges !== true && this._polymer_expressions$_callback != null && !J.$eq(oldValue, t1)) {
        this._polymer_expressions$_callback$1(this._polymer_expressions$_value);
        return true;
      }
      return false;
    }, function(newValue) {
      return this._convertAndCheck$2$skipChanges(newValue, false);
    }, "_convertAndCheck$1", "call$2$skipChanges", "call$1", "get$_convertAndCheck", 2, 3, 181, 74, 64, [], 182, []],
    get$value: function(_) {
      if (this._polymer_expressions$_callback != null) {
        this._polymer_expressions$_check$1$skipChanges(true);
        return this._polymer_expressions$_value;
      }
      return T._Binding__oneTime(this._polymer_expressions$_expr, this._scope, this._converter);
    },
    set$value: function(_, v) {
      var e, s, exception, t1;
      try {
        K.assign(this._polymer_expressions$_expr, v, this._scope, false);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        t1 = new P._AsyncCompleter(P._Future$(null));
        t1.$builtinTypeInfo = [null];
        t1.completeError$2("Error evaluating expression '" + H.S(this._polymer_expressions$_expr) + "': " + H.S(e), s);
      }

    },
    open$1: function(_, callback) {
      var t1, observer;
      if (this._polymer_expressions$_callback != null)
        throw H.wrapException(P.StateError$("already open"));
      this._polymer_expressions$_callback = callback;
      t1 = new P.ListQueue(null, 0, 0, 0);
      t1.$builtinTypeInfo = [null];
      t1.ListQueue$1(null, null);
      observer = J.accept$1$x(this._polymer_expressions$_expr, new K.ObserverBuilder(t1));
      this._observer = observer;
      t1 = J.listen$1$x(observer.get$onUpdate(), this.get$_convertAndCheck());
      J.onError$1$x(t1, new T._Binding_open_closure(this));
      this._polymer_expressions$_sub = t1;
      this._polymer_expressions$_check$1$skipChanges(true);
      return this._polymer_expressions$_value;
    },
    _polymer_expressions$_check$1$skipChanges: function(skipChanges) {
      var e, s, t1, exception, t2;
      try {
        t1 = this._observer;
        J.accept$1$x(t1, new K.Updater(this._scope, skipChanges));
        t1.get$currentValue();
        t1 = this._convertAndCheck$2$skipChanges(this._observer.get$currentValue(), skipChanges);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
        t1.$builtinTypeInfo = [null];
        new P._AsyncCompleter(t1).$builtinTypeInfo = [null];
        t2 = "Error evaluating expression '" + H.S(this._observer) + "': " + H.S(e);
        if (t1._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t1._asyncCompleteError$2(t2, s);
        return false;
      }

    },
    _polymer_expressions$_check$0: function() {
      return this._polymer_expressions$_check$1$skipChanges(false);
    },
    close$0: function(_) {
      var t1, t2;
      if (this._polymer_expressions$_callback == null)
        return;
      this._polymer_expressions$_sub.cancel$0();
      this._polymer_expressions$_sub = null;
      this._polymer_expressions$_callback = null;
      t1 = $.get$Closer__instance();
      t2 = this._observer;
      t1.toString;
      J.accept$1$x(t2, t1);
      this._observer = null;
    },
    deliver$0: function() {
      if (this._polymer_expressions$_callback != null)
        this._polymer_expressions$_dirtyCheck$0();
    },
    _polymer_expressions$_dirtyCheck$0: function() {
      var cycles = 0;
      while (true) {
        if (!(cycles < 1000 && this._polymer_expressions$_check$0() === true))
          break;
        ++cycles;
      }
      return cycles > 0;
    },
    static: {"^": "_Binding__MAX_DIRTY_CHECK_CYCLES", _Binding__oneTime: function(expr, scope, converter) {
        var value, e, s, t1, exception;
        try {
          value = J.accept$1$x(expr, new K.EvalVisitor(scope));
          t1 = converter == null ? value : converter.call$1(value);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = new H._StackTrace(exception, null);
          t1 = new P._AsyncCompleter(P._Future$(null));
          t1.$builtinTypeInfo = [null];
          t1.completeError$2("Error evaluating expression '" + H.S(expr) + "': " + H.S(e), s);
        }

        return;
      }}
  },
  _Binding_open_closure: {
    "^": "Closure:94;this_0",
    call$2: [function(e, s) {
      var t1 = new P._AsyncCompleter(P._Future$(null));
      t1.$builtinTypeInfo = [null];
      t1.completeError$2("Error evaluating expression '" + H.S(this.this_0._observer) + "': " + H.S(e), s);
    }, "call$2", null, 4, 0, null, 2, [], 84, [], "call"],
    $isFunction: true
  },
  ScopeFactory: {
    "^": "Object;"
  }
}],
["polymer_expressions.async", "package:polymer_expressions/async.dart", , B, {
  "^": "",
  StreamBinding: {
    "^": "ObservableBox;stream,_observable_box$_value,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_change_notifier$_records",
    StreamBinding$1: function(stream, $T) {
      this.stream.listen$1(0, new B.StreamBinding_closure($T, this));
    },
    $asObservableBox: function($T) {
      return [null];
    },
    static: {StreamBinding$: function(stream, $T) {
        var t1 = new B.StreamBinding(stream, null, null, null);
        t1.$builtinTypeInfo = [$T];
        t1.StreamBinding$1(stream, $T);
        return t1;
      }}
  },
  StreamBinding_closure: {
    "^": "Closure;T_0,this_1",
    call$1: [function(i) {
      var t1 = this.this_1;
      t1._observable_box$_value = F.notifyPropertyChangeHelper(t1, C.Symbol_value, t1._observable_box$_value, i);
    }, "call$1", null, 2, 0, null, 106, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T0", args: [T]};
      }, this.this_1, "StreamBinding");
    }
  }
}],
["polymer_expressions.eval", "package:polymer_expressions/eval.dart", , K, {
  "^": "",
  assign: function(expr, value, scope, checkAssignability) {
    var filters, t1, property, expression, isIndex, filterExpr, o;
    filters = [];
    filters.$builtinTypeInfo = [U.Expression];
    for (; t1 = J.getInterceptor(expr), !!t1.$isBinaryOperator;) {
      if (!J.$eq(t1.get$operator(expr), "|"))
        break;
      filters.push(t1.get$right(expr));
      expr = t1.get$left(expr);
    }
    if (!!t1.$isIdentifier) {
      property = t1.get$value(expr);
      expression = C.C_EmptyExpression;
      isIndex = false;
    } else if (!!t1.$isIndex) {
      expression = expr.get$receiver();
      property = expr.get$argument();
      isIndex = true;
    } else {
      if (!!t1.$isGetter) {
        expression = expr.get$receiver();
        property = t1.get$name(expr);
      } else {
        if (checkAssignability)
          throw H.wrapException(K.EvalException$("Expression is not assignable: " + H.S(expr)));
        return;
      }
      isIndex = false;
    }
    t1 = new H.ListIterator(filters, filters.length, 0, null);
    t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(filters, 0)];
    for (; t1.moveNext$0();) {
      filterExpr = t1._current;
      J.accept$1$x(filterExpr, new K.EvalVisitor(scope));
      if (checkAssignability)
        throw H.wrapException(K.EvalException$("filter must implement Transformer to be assignable: " + H.S(filterExpr)));
      else
        return;
    }
    o = J.accept$1$x(expression, new K.EvalVisitor(scope));
    if (o == null)
      return;
    if (isIndex)
      J.$indexSet$ax(o, J.accept$1$x(property, new K.EvalVisitor(scope)), value);
    else {
      t1 = $.get$symbolConverter()._configuration._symbols.$index(0, property);
      $.get$objectAccessor().write$3(o, t1, value);
    }
    return value;
  },
  Scope_Scope: function(model, variables) {
    var scope, t1, t2;
    scope = new K._ModelScope(model);
    if (variables == null)
      t1 = scope;
    else {
      t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, P.Object);
      t1.addAll$1(0, variables);
      t2 = new K._GlobalsScope(scope, t1);
      if (t1.containsKey$1("this"))
        H.throwExpression(K.EvalException$("'this' cannot be used as a variable name."));
      t1 = t2;
    }
    return t1;
  },
  closure13: {
    "^": "Closure:94;",
    call$2: function(a, b) {
      return J.$add$ns(a, b);
    },
    $isFunction: true
  },
  closure14: {
    "^": "Closure:94;",
    call$2: function(a, b) {
      return J.$sub$n(a, b);
    },
    $isFunction: true
  },
  closure15: {
    "^": "Closure:94;",
    call$2: function(a, b) {
      return J.$mul$ns(a, b);
    },
    $isFunction: true
  },
  closure16: {
    "^": "Closure:94;",
    call$2: function(a, b) {
      return J.$div$n(a, b);
    },
    $isFunction: true
  },
  closure17: {
    "^": "Closure:94;",
    call$2: function(a, b) {
      return J.$mod$n(a, b);
    },
    $isFunction: true
  },
  closure18: {
    "^": "Closure:94;",
    call$2: function(a, b) {
      return J.$eq(a, b);
    },
    $isFunction: true
  },
  closure19: {
    "^": "Closure:94;",
    call$2: function(a, b) {
      return !J.$eq(a, b);
    },
    $isFunction: true
  },
  closure20: {
    "^": "Closure:94;",
    call$2: function(a, b) {
      return a == null ? b == null : a === b;
    },
    $isFunction: true
  },
  closure21: {
    "^": "Closure:94;",
    call$2: function(a, b) {
      return a == null ? b != null : a !== b;
    },
    $isFunction: true
  },
  closure22: {
    "^": "Closure:94;",
    call$2: function(a, b) {
      return J.$gt$n(a, b);
    },
    $isFunction: true
  },
  closure23: {
    "^": "Closure:94;",
    call$2: function(a, b) {
      return J.$ge$n(a, b);
    },
    $isFunction: true
  },
  closure24: {
    "^": "Closure:94;",
    call$2: function(a, b) {
      return J.$lt$n(a, b);
    },
    $isFunction: true
  },
  closure25: {
    "^": "Closure:94;",
    call$2: function(a, b) {
      return J.$le$n(a, b);
    },
    $isFunction: true
  },
  closure26: {
    "^": "Closure:94;",
    call$2: function(a, b) {
      return a === true || b === true;
    },
    $isFunction: true
  },
  closure27: {
    "^": "Closure:94;",
    call$2: function(a, b) {
      return a === true && b === true;
    },
    $isFunction: true
  },
  closure28: {
    "^": "Closure:94;",
    call$2: function(a, f) {
      var t1 = H.buildInterfaceType(P.Object);
      t1 = H.buildFunctionType(t1, [t1])._isTest$1(f);
      if (t1)
        return f.call$1(a);
      throw H.wrapException(K.EvalException$("Filters must be a one-argument function."));
    },
    $isFunction: true
  },
  closure10: {
    "^": "Closure:54;",
    call$1: function(a) {
      return a;
    },
    $isFunction: true
  },
  closure11: {
    "^": "Closure:54;",
    call$1: function(a) {
      return J.$negate$n(a);
    },
    $isFunction: true
  },
  closure12: {
    "^": "Closure:54;",
    call$1: function(a) {
      return a !== true;
    },
    $isFunction: true
  },
  Scope: {
    "^": "Object;",
    $indexSet: function(_, $name, value) {
      throw H.wrapException(P.UnsupportedError$("[]= is not supported in Scope."));
    },
    childScope$2: function($name, value) {
      if (J.$eq($name, "this"))
        H.throwExpression(K.EvalException$("'this' cannot be used as a variable name."));
      return new K._LocalVariableScope(this, $name, value);
    },
    $isScope: true,
    $isIndexable: true,
    $asIndexable: function() {
      return [P.String, P.Object];
    }
  },
  _ModelScope: {
    "^": "Scope;model>",
    $index: function(_, $name) {
      var symbol, t1;
      if (J.$eq($name, "this"))
        return this.model;
      symbol = $.get$symbolConverter()._configuration._symbols.$index(0, $name);
      t1 = this.model;
      if (t1 == null || symbol == null)
        throw H.wrapException(K.EvalException$("variable '" + H.S($name) + "' not found"));
      t1 = $.get$objectAccessor().read$2(t1, symbol);
      return !!J.getInterceptor(t1).$isStream ? B.StreamBinding$(t1, null) : t1;
    },
    _isModelProperty$1: function($name) {
      return !J.$eq($name, "this");
    },
    toString$0: function(_) {
      return "[model: " + H.S(this.model) + "]";
    }
  },
  _LocalVariableScope: {
    "^": "Scope;parent>,varName,value>",
    get$model: function(_) {
      var t1 = this.parent;
      t1 = t1.get$model(t1);
      return t1;
    },
    $index: function(_, $name) {
      var t1;
      if (J.$eq(this.varName, $name)) {
        t1 = this.value;
        return !!J.getInterceptor(t1).$isStream ? B.StreamBinding$(t1, null) : t1;
      }
      return this.parent.$index(0, $name);
    },
    _isModelProperty$1: function($name) {
      if (J.$eq(this.varName, $name))
        return false;
      return this.parent._isModelProperty$1($name);
    },
    toString$0: function(_) {
      return this.parent.toString$0(0) + " > [local: " + H.S(this.varName) + "]";
    }
  },
  _GlobalsScope: {
    "^": "Scope;parent>,variables",
    get$model: function(_) {
      return this.parent.model;
    },
    $index: function(_, $name) {
      var t1 = this.variables;
      if (t1.containsKey$1($name)) {
        t1 = t1.$index(0, $name);
        return !!J.getInterceptor(t1).$isStream ? B.StreamBinding$(t1, null) : t1;
      }
      return this.parent.$index(0, $name);
    },
    _isModelProperty$1: function($name) {
      if (this.variables.containsKey$1($name))
        return false;
      return !J.$eq($name, "this");
    },
    toString$0: function(_) {
      var t1, t2, t3;
      t1 = "[model: " + H.S(this.parent.model) + "] > [global: ";
      t2 = this.variables;
      t3 = new P.LinkedHashMapKeyIterable(t2);
      t3.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
      return t1 + P.IterableBase_iterableToShortString(t3, "(", ")") + "]";
    }
  },
  ExpressionObserver: {
    "^": "Object;_parent?,_eval$_value<",
    get$onUpdate: function() {
      var t1, t2;
      t1 = this._eval$_controller;
      t2 = new P._BroadcastStream(t1);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      return t2;
    },
    get$expression: function() {
      return this._eval$_expr;
    },
    get$currentValue: function() {
      return this._eval$_value;
    },
    _updateSelf$1: function(scope) {
    },
    _invalidate$1: function(scope) {
      var t1;
      this._eval$_observe$2(0, scope, false);
      t1 = this._parent;
      if (t1 != null)
        t1._invalidate$1(scope);
    },
    _eval$_unobserve$0: function() {
      var t1 = this._eval$_subscription;
      if (t1 != null) {
        t1.cancel$0();
        this._eval$_subscription = null;
      }
    },
    _eval$_observe$2: function(_, scope, skipChanges) {
      var _oldValue, t1, t2;
      this._eval$_unobserve$0();
      _oldValue = this._eval$_value;
      this._updateSelf$1(scope);
      if (!skipChanges) {
        t1 = this._eval$_value;
        t1 = t1 == null ? _oldValue != null : t1 !== _oldValue;
      } else
        t1 = false;
      if (t1) {
        t1 = this._eval$_controller;
        t2 = this._eval$_value;
        if (t1._state >= 4)
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(t2);
      }
    },
    toString$0: function(_) {
      return this._eval$_expr.toString$0(0);
    },
    $isExpression: true
  },
  Updater: {
    "^": "RecursiveVisitor;scope,skipChanges",
    visitExpression$1: function(e) {
      e._eval$_observe$2(0, this.scope, this.skipChanges);
    }
  },
  Closer: {
    "^": "RecursiveVisitor;",
    visitExpression$1: function(e) {
      e._eval$_unobserve$0();
    },
    static: {"^": "Closer__instance"}
  },
  EvalVisitor: {
    "^": "Visitor;scope",
    visitEmptyExpression$1: function(e) {
      return J.get$model$x(this.scope);
    },
    visitParenthesizedExpression$1: function(e) {
      return e.child.accept$1(0, this);
    },
    visitGetter$1: function(g) {
      var receiver, t1, symbol;
      receiver = J.accept$1$x(g.get$receiver(), this);
      if (receiver == null)
        return;
      t1 = g.get$name(g);
      symbol = $.get$symbolConverter()._configuration._symbols.$index(0, t1);
      return $.get$objectAccessor().read$2(receiver, symbol);
    },
    visitIndex$1: function(i) {
      var receiver = J.accept$1$x(i.get$receiver(), this);
      if (receiver == null)
        return;
      return J.$index$asx(receiver, J.accept$1$x(i.get$argument(), this));
    },
    visitInvoke$1: function(i) {
      var receiver, args, t1, symbol;
      receiver = J.accept$1$x(i.get$receiver(), this);
      if (receiver == null)
        return;
      args = i.get$arguments() == null ? null : J.toList$1$growable$ax(J.map$1$ax(i.get$arguments(), this.get$visit()), false);
      if (i.get$method(i) == null)
        return H.Primitives_applyFunction(receiver, args, P.Function__toMangledNames(null));
      t1 = i.get$method(i);
      symbol = $.get$symbolConverter()._configuration._symbols.$index(0, t1);
      return $.get$objectAccessor().invoke$5$adjust$namedArgs(receiver, symbol, args, false, null);
    },
    visitLiteral$1: function(l) {
      return l.get$value(l);
    },
    visitListLiteral$1: function(l) {
      var t1 = new H.MappedListIterable(l.get$items(), this.get$visit());
      t1.$builtinTypeInfo = [null, null];
      return t1.toList$0(0);
    },
    visitMapLiteral$1: function(l) {
      var map, t1, t2, entry;
      map = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t1 = l.get$entries(l);
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      for (; t2.moveNext$0();) {
        entry = t2._current;
        map.$indexSet(0, J.accept$1$x(J.get$key$x(entry), this), J.accept$1$x(entry.get$entryValue(), this));
      }
      return map;
    },
    visitMapLiteralEntry$1: function(e) {
      return H.throwExpression(P.UnsupportedError$("should never be called"));
    },
    visitIdentifier$1: function(i) {
      return J.$index$asx(this.scope, i.get$value(i));
    },
    visitBinaryOperator$1: function(o) {
      var operator, left, right, f, t1;
      operator = o.get$operator(o);
      left = J.accept$1$x(o.get$left(o), this);
      right = J.accept$1$x(o.get$right(o), this);
      f = $.get$_BINARY_OPERATORS().$index(0, operator);
      t1 = J.getInterceptor(operator);
      if (t1.$eq(operator, "&&") || t1.$eq(operator, "||")) {
        t1 = left == null ? false : left;
        return f.call$2(t1, right == null ? false : right);
      } else if (t1.$eq(operator, "==") || t1.$eq(operator, "!="))
        return f.call$2(left, right);
      else if (left == null || right == null)
        return;
      return f.call$2(left, right);
    },
    visitUnaryOperator$1: function(o) {
      var expr, f;
      expr = J.accept$1$x(o.get$child(), this);
      f = $.get$_UNARY_OPERATORS().$index(0, o.get$operator(o));
      if (J.$eq(o.get$operator(o), "!"))
        return f.call$1(expr == null ? false : expr);
      return expr == null ? null : f.call$1(expr);
    },
    visitTernaryOperator$1: function(o) {
      return J.$eq(J.accept$1$x(o.get$condition(), this), true) ? J.accept$1$x(o.get$trueExpr(), this) : J.accept$1$x(o.get$falseExpr(), this);
    },
    visitInExpression$1: function(i) {
      return H.throwExpression(P.UnsupportedError$("can't eval an 'in' expression"));
    },
    visitAsExpression$1: function(i) {
      return H.throwExpression(P.UnsupportedError$("can't eval an 'as' expression"));
    }
  },
  ObserverBuilder: {
    "^": "Visitor;parents<",
    visitEmptyExpression$1: function(e) {
      return new K.EmptyObserver(e, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
    },
    visitParenthesizedExpression$1: function(e) {
      return e.child.accept$1(0, this);
    },
    visitGetter$1: function(g) {
      var receiver, getter;
      receiver = J.accept$1$x(g.get$receiver(), this);
      getter = new K.GetterObserver(receiver, g, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      receiver.set$_parent(getter);
      return getter;
    },
    visitIndex$1: function(i) {
      var receiver, arg, index;
      receiver = J.accept$1$x(i.get$receiver(), this);
      arg = J.accept$1$x(i.get$argument(), this);
      index = new K.IndexObserver(receiver, arg, i, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      receiver.set$_parent(index);
      arg.set$_parent(index);
      return index;
    },
    visitInvoke$1: function(i) {
      var receiver, args, invoke;
      receiver = J.accept$1$x(i.get$receiver(), this);
      args = i.get$arguments() == null ? null : J.toList$1$growable$ax(J.map$1$ax(i.get$arguments(), this.get$visit()), false);
      invoke = new K.InvokeObserver(receiver, args, i, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      receiver.set$_parent(invoke);
      if (args != null)
        J.forEach$1$ax(args, new K.ObserverBuilder_visitInvoke_closure(invoke));
      return invoke;
    },
    visitLiteral$1: function(l) {
      return new K.LiteralObserver(l, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
    },
    visitListLiteral$1: function(l) {
      var t1, items, list;
      t1 = new H.MappedListIterable(l.get$items(), this.get$visit());
      t1.$builtinTypeInfo = [null, null];
      items = t1.toList$1$growable(0, false);
      list = new K.ListLiteralObserver(items, l, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      H.IterableMixinWorkaround_forEach(items, new K.ObserverBuilder_visitListLiteral_closure(list));
      return list;
    },
    visitMapLiteral$1: function(l) {
      var t1, entries, map;
      t1 = new H.MappedListIterable(l.get$entries(l), this.get$visit());
      t1.$builtinTypeInfo = [null, null];
      entries = t1.toList$1$growable(0, false);
      map = new K.MapLiteralObserver(entries, l, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      H.IterableMixinWorkaround_forEach(entries, new K.ObserverBuilder_visitMapLiteral_closure(map));
      return map;
    },
    visitMapLiteralEntry$1: function(e) {
      var key, value, entry;
      key = J.accept$1$x(e.get$key(e), this);
      value = J.accept$1$x(e.get$entryValue(), this);
      entry = new K.MapLiteralEntryObserver(key, value, e, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      key.set$_parent(entry);
      value.set$_parent(entry);
      return entry;
    },
    visitIdentifier$1: function(i) {
      return new K.IdentifierObserver(i, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
    },
    visitBinaryOperator$1: function(o) {
      var left, right, binary;
      left = J.accept$1$x(o.get$left(o), this);
      right = J.accept$1$x(o.get$right(o), this);
      binary = new K.BinaryObserver(left, right, o, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      left.set$_parent(binary);
      right.set$_parent(binary);
      return binary;
    },
    visitUnaryOperator$1: function(o) {
      var expr, unary;
      expr = J.accept$1$x(o.get$child(), this);
      unary = new K.UnaryObserver(expr, o, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      expr.set$_parent(unary);
      return unary;
    },
    visitTernaryOperator$1: function(o) {
      var condition, trueExpr, falseExpr, ternary;
      condition = J.accept$1$x(o.get$condition(), this);
      trueExpr = J.accept$1$x(o.get$trueExpr(), this);
      falseExpr = J.accept$1$x(o.get$falseExpr(), this);
      ternary = new K.TernaryObserver(condition, trueExpr, falseExpr, o, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      condition.set$_parent(ternary);
      trueExpr.set$_parent(ternary);
      falseExpr.set$_parent(ternary);
      return ternary;
    },
    visitInExpression$1: function(i) {
      throw H.wrapException(P.UnsupportedError$("can't eval an 'in' expression"));
    },
    visitAsExpression$1: function(i) {
      throw H.wrapException(P.UnsupportedError$("can't eval an 'as' expression"));
    }
  },
  ObserverBuilder_visitInvoke_closure: {
    "^": "Closure:54;invoke_0",
    call$1: [function(a) {
      var t1 = this.invoke_0;
      a.set$_parent(t1);
      return t1;
    }, "call$1", null, 2, 0, null, 48, [], "call"],
    $isFunction: true
  },
  ObserverBuilder_visitListLiteral_closure: {
    "^": "Closure:54;list_0",
    call$1: function(e) {
      var t1 = this.list_0;
      e.set$_parent(t1);
      return t1;
    },
    $isFunction: true
  },
  ObserverBuilder_visitMapLiteral_closure: {
    "^": "Closure:54;map_0",
    call$1: function(e) {
      var t1 = this.map_0;
      e.set$_parent(t1);
      return t1;
    },
    $isFunction: true
  },
  EmptyObserver: {
    "^": "ExpressionObserver;_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    _updateSelf$1: function(scope) {
      this._eval$_value = J.get$model$x(scope);
    },
    accept$1: function(_, v) {
      return v.visitEmptyExpression$1(this);
    },
    $asExpressionObserver: function() {
      return [U.EmptyExpression];
    },
    $isEmptyExpression: true,
    $isExpression: true
  },
  LiteralObserver: {
    "^": "ExpressionObserver;_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    get$value: function(_) {
      var t1 = this._eval$_expr;
      return t1.get$value(t1);
    },
    _updateSelf$1: function(scope) {
      var t1 = this._eval$_expr;
      this._eval$_value = t1.get$value(t1);
    },
    accept$1: function(_, v) {
      return v.visitLiteral$1(this);
    },
    $asExpressionObserver: function() {
      return [U.Literal];
    },
    $asLiteral: function() {
      return [null];
    },
    $isLiteral: true,
    $isExpression: true
  },
  ListLiteralObserver: {
    "^": "ExpressionObserver;items<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    _updateSelf$1: function(scope) {
      var t1 = new H.MappedListIterable(this.items, new K.ListLiteralObserver__updateSelf_closure());
      t1.$builtinTypeInfo = [null, null];
      this._eval$_value = t1.toList$0(0);
    },
    accept$1: function(_, v) {
      return v.visitListLiteral$1(this);
    },
    $asExpressionObserver: function() {
      return [U.ListLiteral];
    },
    $isListLiteral: true,
    $isExpression: true
  },
  ListLiteralObserver__updateSelf_closure: {
    "^": "Closure:54;",
    call$1: [function(i) {
      return i.get$_eval$_value();
    }, "call$1", null, 2, 0, null, 106, [], "call"],
    $isFunction: true
  },
  MapLiteralObserver: {
    "^": "ExpressionObserver;entries>,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    _updateSelf$1: function(scope) {
      this._eval$_value = H.IterableMixinWorkaround_fold(this.entries, P.LinkedHashMap_LinkedHashMap(null, null, null, null, null), new K.MapLiteralObserver__updateSelf_closure());
    },
    accept$1: function(_, v) {
      return v.visitMapLiteral$1(this);
    },
    $asExpressionObserver: function() {
      return [U.MapLiteral];
    },
    $isMapLiteral: true,
    $isExpression: true
  },
  MapLiteralObserver__updateSelf_closure: {
    "^": "Closure:94;",
    call$2: function(m, e) {
      J.$indexSet$ax(m, J.get$key$x(e).get$_eval$_value(), e.get$entryValue().get$_eval$_value());
      return m;
    },
    $isFunction: true
  },
  MapLiteralEntryObserver: {
    "^": "ExpressionObserver;key>,entryValue<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    accept$1: function(_, v) {
      return v.visitMapLiteralEntry$1(this);
    },
    $asExpressionObserver: function() {
      return [U.MapLiteralEntry];
    },
    $isMapLiteralEntry: true,
    $isExpression: true
  },
  IdentifierObserver: {
    "^": "ExpressionObserver;_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    get$value: function(_) {
      var t1 = this._eval$_expr;
      return t1.get$value(t1);
    },
    _updateSelf$1: function(scope) {
      var t1, t2, model, symbol;
      t1 = this._eval$_expr;
      t2 = J.getInterceptor$asx(scope);
      this._eval$_value = t2.$index(scope, t1.get$value(t1));
      if (scope._isModelProperty$1(t1.get$value(t1)) !== true)
        return;
      model = t2.get$model(scope);
      t2 = J.getInterceptor(model);
      if (!t2.$isObservable)
        return;
      t1 = t1.get$value(t1);
      symbol = $.get$symbolConverter()._configuration._symbols.$index(0, t1);
      this._eval$_subscription = t2.get$changes(model).listen$1(0, new K.IdentifierObserver__updateSelf_closure(this, scope, symbol));
    },
    accept$1: function(_, v) {
      return v.visitIdentifier$1(this);
    },
    $asExpressionObserver: function() {
      return [U.Identifier];
    },
    $isIdentifier: true,
    $isExpression: true
  },
  IdentifierObserver__updateSelf_closure: {
    "^": "Closure:54;this_0,scope_1,symbol_2",
    call$1: [function(changes) {
      if (J.any$1$ax(changes, new K.IdentifierObserver__updateSelf__closure(this.symbol_2)) === true)
        this.this_0._invalidate$1(this.scope_1);
    }, "call$1", null, 2, 0, null, 183, [], "call"],
    $isFunction: true
  },
  IdentifierObserver__updateSelf__closure: {
    "^": "Closure:54;symbol_3",
    call$1: [function(c) {
      return !!J.getInterceptor(c).$isPropertyChangeRecord && J.$eq(c.name, this.symbol_3);
    }, "call$1", null, 2, 0, null, 184, [], "call"],
    $isFunction: true
  },
  UnaryObserver: {
    "^": "ExpressionObserver;child<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    get$operator: function(_) {
      var t1 = this._eval$_expr;
      return t1.get$operator(t1);
    },
    _updateSelf$1: function(scope) {
      var t1, f;
      t1 = this._eval$_expr;
      f = $.get$_UNARY_OPERATORS().$index(0, t1.get$operator(t1));
      if (J.$eq(t1.get$operator(t1), "!")) {
        t1 = this.child.get$_eval$_value();
        this._eval$_value = f.call$1(t1 == null ? false : t1);
      } else {
        t1 = this.child;
        this._eval$_value = t1.get$_eval$_value() == null ? null : f.call$1(t1.get$_eval$_value());
      }
    },
    accept$1: function(_, v) {
      return v.visitUnaryOperator$1(this);
    },
    $asExpressionObserver: function() {
      return [U.UnaryOperator];
    },
    $isUnaryOperator: true,
    $isExpression: true
  },
  BinaryObserver: {
    "^": "ExpressionObserver;left>,right>,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    get$operator: function(_) {
      var t1 = this._eval$_expr;
      return t1.get$operator(t1);
    },
    _updateSelf$1: function(scope) {
      var t1, f, t2;
      t1 = this._eval$_expr;
      f = $.get$_BINARY_OPERATORS().$index(0, t1.get$operator(t1));
      if (J.$eq(t1.get$operator(t1), "&&") || J.$eq(t1.get$operator(t1), "||")) {
        t1 = this.left.get$_eval$_value();
        if (t1 == null)
          t1 = false;
        t2 = this.right.get$_eval$_value();
        this._eval$_value = f.call$2(t1, t2 == null ? false : t2);
      } else if (J.$eq(t1.get$operator(t1), "==") || J.$eq(t1.get$operator(t1), "!="))
        this._eval$_value = f.call$2(this.left.get$_eval$_value(), this.right.get$_eval$_value());
      else {
        t2 = this.left;
        if (t2.get$_eval$_value() == null || this.right.get$_eval$_value() == null)
          this._eval$_value = null;
        else {
          if (J.$eq(t1.get$operator(t1), "|"))
            t2.get$_eval$_value();
          this._eval$_value = f.call$2(t2.get$_eval$_value(), this.right.get$_eval$_value());
        }
      }
    },
    accept$1: function(_, v) {
      return v.visitBinaryOperator$1(this);
    },
    $asExpressionObserver: function() {
      return [U.BinaryOperator];
    },
    $isBinaryOperator: true,
    $isExpression: true
  },
  BinaryObserver__updateSelf_closure: {
    "^": "Closure:54;this_0,scope_1",
    call$1: function(_) {
      return this.this_0._invalidate$1(this.scope_1);
    },
    $isFunction: true
  },
  TernaryObserver: {
    "^": "ExpressionObserver;condition<,trueExpr<,falseExpr<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    _updateSelf$1: function(scope) {
      var t1 = this.condition.get$_eval$_value();
      this._eval$_value = (t1 == null ? false : t1) === true ? this.trueExpr.get$_eval$_value() : this.falseExpr.get$_eval$_value();
    },
    accept$1: function(_, v) {
      return v.visitTernaryOperator$1(this);
    },
    $asExpressionObserver: function() {
      return [U.TernaryOperator];
    },
    $isTernaryOperator: true,
    $isExpression: true
  },
  GetterObserver: {
    "^": "ExpressionObserver;receiver<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    get$name: function(_) {
      var t1 = this._eval$_expr;
      return t1.get$name(t1);
    },
    _updateSelf$1: function(scope) {
      var receiverValue, t1, symbol;
      receiverValue = this.receiver.get$_eval$_value();
      if (receiverValue == null) {
        this._eval$_value = null;
        return;
      }
      t1 = this._eval$_expr;
      t1 = t1.get$name(t1);
      symbol = $.get$symbolConverter()._configuration._symbols.$index(0, t1);
      this._eval$_value = $.get$objectAccessor().read$2(receiverValue, symbol);
      t1 = J.getInterceptor(receiverValue);
      if (!!t1.$isObservable)
        this._eval$_subscription = t1.get$changes(receiverValue).listen$1(0, new K.GetterObserver__updateSelf_closure(this, scope, symbol));
    },
    accept$1: function(_, v) {
      return v.visitGetter$1(this);
    },
    $asExpressionObserver: function() {
      return [U.Getter];
    },
    $isGetter: true,
    $isExpression: true
  },
  GetterObserver__updateSelf_closure: {
    "^": "Closure:54;this_0,scope_1,symbol_2",
    call$1: [function(changes) {
      if (J.any$1$ax(changes, new K.GetterObserver__updateSelf__closure(this.symbol_2)) === true)
        this.this_0._invalidate$1(this.scope_1);
    }, "call$1", null, 2, 0, null, 183, [], "call"],
    $isFunction: true
  },
  GetterObserver__updateSelf__closure: {
    "^": "Closure:54;symbol_3",
    call$1: [function(c) {
      return !!J.getInterceptor(c).$isPropertyChangeRecord && J.$eq(c.name, this.symbol_3);
    }, "call$1", null, 2, 0, null, 184, [], "call"],
    $isFunction: true
  },
  IndexObserver: {
    "^": "ExpressionObserver;receiver<,argument<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    _updateSelf$1: function(scope) {
      var receiverValue, key, t1;
      receiverValue = this.receiver.get$_eval$_value();
      if (receiverValue == null) {
        this._eval$_value = null;
        return;
      }
      key = this.argument.get$_eval$_value();
      t1 = J.getInterceptor$asx(receiverValue);
      this._eval$_value = t1.$index(receiverValue, key);
      if (!!t1.$isObservable)
        this._eval$_subscription = t1.get$changes(receiverValue).listen$1(0, new K.IndexObserver__updateSelf_closure(this, scope, key));
    },
    accept$1: function(_, v) {
      return v.visitIndex$1(this);
    },
    $asExpressionObserver: function() {
      return [U.Index];
    },
    $isIndex: true,
    $isExpression: true
  },
  IndexObserver__updateSelf_closure0: {
    "^": "Closure:54;this_0,scope_1,key_2",
    call$1: function(changes) {
      changes.any$1(0, new K.IndexObserver__updateSelf__closure0(this.key_2));
    },
    $isFunction: true
  },
  IndexObserver__updateSelf__closure0: {
    "^": "Closure:54;key_3",
    call$1: [function(c) {
      return c.indexChanged$1(this.key_3);
    }, "call$1", null, 2, 0, null, 184, [], "call"],
    $isFunction: true
  },
  IndexObserver__updateSelf_closure: {
    "^": "Closure:54;this_4,scope_5,key_6",
    call$1: [function(changes) {
      if (J.any$1$ax(changes, new K.IndexObserver__updateSelf__closure(this.key_6)) === true)
        this.this_4._invalidate$1(this.scope_5);
    }, "call$1", null, 2, 0, null, 183, [], "call"],
    $isFunction: true
  },
  IndexObserver__updateSelf__closure: {
    "^": "Closure:54;key_7",
    call$1: [function(c) {
      return !!J.getInterceptor(c).$isMapChangeRecord && J.$eq(c.key, this.key_7);
    }, "call$1", null, 2, 0, null, 184, [], "call"],
    $isFunction: true
  },
  InvokeObserver: {
    "^": "ExpressionObserver;receiver<,arguments<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    get$method: function(_) {
      var t1 = this._eval$_expr;
      return t1.get$method(t1);
    },
    _updateSelf$1: function(scope) {
      var args, receiverValue, t1, symbol;
      args = J.toList$0$ax(J.map$1$ax(this.arguments, new K.InvokeObserver__updateSelf_closure()));
      receiverValue = this.receiver.get$_eval$_value();
      if (receiverValue == null) {
        this._eval$_value = null;
        return;
      }
      t1 = this._eval$_expr;
      if (t1.get$method(t1) == null) {
        t1 = H.Primitives_applyFunction(receiverValue, args, P.Function__toMangledNames(null));
        this._eval$_value = !!J.getInterceptor(t1).$isStream ? B.StreamBinding$(t1, null) : t1;
      } else {
        t1 = t1.get$method(t1);
        symbol = $.get$symbolConverter()._configuration._symbols.$index(0, t1);
        this._eval$_value = $.get$objectAccessor().invoke$5$adjust$namedArgs(receiverValue, symbol, args, false, null);
        t1 = J.getInterceptor(receiverValue);
        if (!!t1.$isObservable)
          this._eval$_subscription = t1.get$changes(receiverValue).listen$1(0, new K.InvokeObserver__updateSelf_closure0(this, scope, symbol));
      }
    },
    accept$1: function(_, v) {
      return v.visitInvoke$1(this);
    },
    $asExpressionObserver: function() {
      return [U.Invoke];
    },
    $isInvoke: true,
    $isExpression: true
  },
  InvokeObserver__updateSelf_closure: {
    "^": "Closure:54;",
    call$1: [function(a) {
      return a.get$_eval$_value();
    }, "call$1", null, 2, 0, null, 48, [], "call"],
    $isFunction: true
  },
  InvokeObserver__updateSelf_closure0: {
    "^": "Closure:185;this_0,scope_1,symbol_2",
    call$1: [function(changes) {
      if (J.any$1$ax(changes, new K.InvokeObserver__updateSelf__closure(this.symbol_2)) === true)
        this.this_0._invalidate$1(this.scope_1);
    }, "call$1", null, 2, 0, null, 183, [], "call"],
    $isFunction: true
  },
  InvokeObserver__updateSelf__closure: {
    "^": "Closure:54;symbol_3",
    call$1: [function(c) {
      return !!J.getInterceptor(c).$isPropertyChangeRecord && J.$eq(c.name, this.symbol_3);
    }, "call$1", null, 2, 0, null, 184, [], "call"],
    $isFunction: true
  },
  EvalException: {
    "^": "Object;message>",
    toString$0: function(_) {
      return "EvalException: " + this.message;
    },
    static: {EvalException$: function(message) {
        return new K.EvalException(message);
      }}
  }
}],
["polymer_expressions.expression", "package:polymer_expressions/expression.dart", , U, {
  "^": "",
  _listEquals: function(a, b) {
    var t1, t2, i, t3;
    t1 = J.getInterceptor(a);
    if (t1.$eq(a, b))
      return true;
    if (a == null || b == null)
      return false;
    t2 = J.getInterceptor$asx(b);
    if (!J.$eq(t1.get$length(a), t2.get$length(b)))
      return false;
    i = 0;
    while (true) {
      t3 = t1.get$length(a);
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (!(i < t3))
        break;
      if (!J.$eq(t1.$index(a, i), t2.$index(b, i)))
        return false;
      ++i;
    }
    return true;
  },
  _hashList: function(l) {
    return U._JenkinsSmiHash_finish0(J.fold$2$ax(l, 0, new U._hashList_closure()));
  },
  _JenkinsSmiHash_combine1: function(hash, value) {
    var t1 = J.$add$ns(hash, value);
    if (typeof t1 !== "number")
      return H.iae(t1);
    hash = 536870911 & t1;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _JenkinsSmiHash_finish0: function(hash) {
    if (typeof hash !== "number")
      return H.iae(hash);
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash = (hash ^ hash >>> 11) >>> 0;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  AstFactory: {
    "^": "Object;",
    index$2: [function(_, e, a) {
      return new U.Index(e, a);
    }, "call$2", "get$index", 4, 0, 186, 2, [], 48, []],
    invoke$3: function(e, m, a) {
      return new U.Invoke(e, m, a);
    }
  },
  Expression: {
    "^": "Object;",
    $isExpression: true
  },
  EmptyExpression: {
    "^": "Expression;",
    accept$1: function(_, v) {
      return v.visitEmptyExpression$1(this);
    },
    $isEmptyExpression: true
  },
  Literal: {
    "^": "Expression;value>",
    accept$1: function(_, v) {
      return v.visitLiteral$1(this);
    },
    toString$0: function(_) {
      var t1 = this.value;
      return typeof t1 === "string" ? "\"" + H.S(t1) + "\"" : H.S(t1);
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = H.checkSubtype(o, "$isLiteral", [H.getTypeArgumentByIndex(this, 0)], "$asLiteral");
      return t1 && J.$eq(J.get$value$x(o), this.value);
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.value);
    },
    $isLiteral: true
  },
  ListLiteral: {
    "^": "Expression;items<",
    accept$1: function(_, v) {
      return v.visitListLiteral$1(this);
    },
    toString$0: function(_) {
      return H.S(this.items);
    },
    $eq: function(_, o) {
      if (o == null)
        return false;
      return !!J.getInterceptor(o).$isListLiteral && U._listEquals(o.get$items(), this.items);
    },
    get$hashCode: function(_) {
      return U._hashList(this.items);
    },
    $isListLiteral: true
  },
  MapLiteral: {
    "^": "Expression;entries>",
    accept$1: function(_, v) {
      return v.visitMapLiteral$1(this);
    },
    toString$0: function(_) {
      return "{" + H.S(this.entries) + "}";
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isMapLiteral && U._listEquals(t1.get$entries(o), this.entries);
    },
    get$hashCode: function(_) {
      return U._hashList(this.entries);
    },
    $isMapLiteral: true
  },
  MapLiteralEntry: {
    "^": "Expression;key>,entryValue<",
    accept$1: function(_, v) {
      return v.visitMapLiteralEntry$1(this);
    },
    toString$0: function(_) {
      return this.key.toString$0(0) + ": " + H.S(this.entryValue);
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isMapLiteralEntry && J.$eq(t1.get$key(o), this.key) && J.$eq(o.get$entryValue(), this.entryValue);
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.key.value);
      t2 = J.get$hashCode$(this.entryValue);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2));
    },
    $isMapLiteralEntry: true
  },
  ParenthesizedExpression: {
    "^": "Expression;child",
    accept$1: function(_, v) {
      return v.visitParenthesizedExpression$1(this);
    },
    toString$0: function(_) {
      return "(" + H.S(this.child) + ")";
    },
    $eq: function(_, o) {
      if (o == null)
        return false;
      return !!J.getInterceptor(o).$isParenthesizedExpression && J.$eq(o.child, this.child);
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.child);
    },
    $isParenthesizedExpression: true
  },
  Identifier: {
    "^": "Expression;value>",
    accept$1: function(_, v) {
      return v.visitIdentifier$1(this);
    },
    toString$0: function(_) {
      return this.value;
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isIdentifier && J.$eq(t1.get$value(o), this.value);
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.value);
    },
    $isIdentifier: true
  },
  UnaryOperator: {
    "^": "Expression;operator>,child<",
    accept$1: function(_, v) {
      return v.visitUnaryOperator$1(this);
    },
    toString$0: function(_) {
      return H.S(this.operator) + " " + H.S(this.child);
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isUnaryOperator && J.$eq(t1.get$operator(o), this.operator) && J.$eq(o.get$child(), this.child);
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.operator);
      t2 = J.get$hashCode$(this.child);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2));
    },
    $isUnaryOperator: true
  },
  BinaryOperator: {
    "^": "Expression;operator>,left>,right>",
    accept$1: function(_, v) {
      return v.visitBinaryOperator$1(this);
    },
    toString$0: function(_) {
      return "(" + H.S(this.left) + " " + H.S(this.operator) + " " + H.S(this.right) + ")";
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isBinaryOperator && J.$eq(t1.get$operator(o), this.operator) && J.$eq(t1.get$left(o), this.left) && J.$eq(t1.get$right(o), this.right);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = J.get$hashCode$(this.operator);
      t2 = J.get$hashCode$(this.left);
      t3 = J.get$hashCode$(this.right);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2), t3));
    },
    $isBinaryOperator: true
  },
  TernaryOperator: {
    "^": "Expression;condition<,trueExpr<,falseExpr<",
    accept$1: function(_, v) {
      return v.visitTernaryOperator$1(this);
    },
    toString$0: function(_) {
      return "(" + H.S(this.condition) + " ? " + H.S(this.trueExpr) + " : " + H.S(this.falseExpr) + ")";
    },
    $eq: function(_, o) {
      if (o == null)
        return false;
      return !!J.getInterceptor(o).$isTernaryOperator && J.$eq(o.get$condition(), this.condition) && J.$eq(o.get$trueExpr(), this.trueExpr) && J.$eq(o.get$falseExpr(), this.falseExpr);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = J.get$hashCode$(this.condition);
      t2 = J.get$hashCode$(this.trueExpr);
      t3 = J.get$hashCode$(this.falseExpr);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2), t3));
    },
    $isTernaryOperator: true
  },
  InExpression: {
    "^": "Expression;left>,right>",
    accept$1: function(_, v) {
      return v.visitInExpression$1(this);
    },
    get$identifier: function() {
      var t1 = this.left;
      return t1.get$value(t1);
    },
    get$expr: function() {
      return this.right;
    },
    toString$0: function(_) {
      return "(" + H.S(this.left) + " in " + H.S(this.right) + ")";
    },
    $eq: function(_, o) {
      if (o == null)
        return false;
      return !!J.getInterceptor(o).$isInExpression && o.left.$eq(0, this.left) && J.$eq(o.right, this.right);
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = this.left;
      t1 = t1.get$hashCode(t1);
      t2 = J.get$hashCode$(this.right);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2));
    },
    $isInExpression: true,
    $isHasIdentifier: true
  },
  AsExpression: {
    "^": "Expression;left>,right>",
    accept$1: function(_, v) {
      return v.visitAsExpression$1(this);
    },
    get$identifier: function() {
      var t1 = this.right;
      return t1.get$value(t1);
    },
    get$expr: function() {
      return this.left;
    },
    toString$0: function(_) {
      return "(" + H.S(this.left) + " as " + H.S(this.right) + ")";
    },
    $eq: function(_, o) {
      if (o == null)
        return false;
      return !!J.getInterceptor(o).$isAsExpression && J.$eq(o.left, this.left) && o.right.$eq(0, this.right);
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.left);
      t2 = this.right;
      t2 = t2.get$hashCode(t2);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2));
    },
    $isAsExpression: true,
    $isHasIdentifier: true
  },
  Index: {
    "^": "Expression;receiver<,argument<",
    accept$1: function(_, v) {
      return v.visitIndex$1(this);
    },
    toString$0: function(_) {
      return H.S(this.receiver) + "[" + H.S(this.argument) + "]";
    },
    $eq: function(_, o) {
      if (o == null)
        return false;
      return !!J.getInterceptor(o).$isIndex && J.$eq(o.get$receiver(), this.receiver) && J.$eq(o.get$argument(), this.argument);
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.receiver);
      t2 = J.get$hashCode$(this.argument);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2));
    },
    $isIndex: true
  },
  Getter: {
    "^": "Expression;receiver<,name>",
    accept$1: function(_, v) {
      return v.visitGetter$1(this);
    },
    toString$0: function(_) {
      return H.S(this.receiver) + "." + H.S(this.name);
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isGetter && J.$eq(o.get$receiver(), this.receiver) && J.$eq(t1.get$name(o), this.name);
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.receiver);
      t2 = J.get$hashCode$(this.name);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2));
    },
    $isGetter: true
  },
  Invoke: {
    "^": "Expression;receiver<,method>,arguments<",
    accept$1: function(_, v) {
      return v.visitInvoke$1(this);
    },
    toString$0: function(_) {
      return H.S(this.receiver) + "." + H.S(this.method) + "(" + H.S(this.arguments) + ")";
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isInvoke && J.$eq(o.get$receiver(), this.receiver) && J.$eq(t1.get$method(o), this.method) && U._listEquals(o.get$arguments(), this.arguments);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = J.get$hashCode$(this.receiver);
      t2 = J.get$hashCode$(this.method);
      t3 = U._hashList(this.arguments);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2), t3));
    },
    $isInvoke: true
  },
  _hashList_closure: {
    "^": "Closure:94;",
    call$2: [function(h, item) {
      return U._JenkinsSmiHash_combine1(h, J.get$hashCode$(item));
    }, "call$2", null, 4, 0, null, 187, [], 188, [], "call"],
    $isFunction: true
  }
}],
["polymer_expressions.parser", "package:polymer_expressions/parser.dart", , T, {
  "^": "",
  Parser: {
    "^": "Object;_astFactory,_tokenizer,_tokens,_parser$_iterator",
    get$_token: function() {
      return this._parser$_iterator._current;
    },
    parse$0: function() {
      var t1, t2;
      t1 = this._tokenizer.tokenize$0();
      this._tokens = t1;
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      this._parser$_iterator = t2;
      this._advance$0();
      return this._parseExpression$0();
    },
    _advance$2: function(kind, value) {
      var t1;
      if (kind != null) {
        t1 = this._parser$_iterator._current;
        t1 = t1 == null || !J.$eq(J.get$kind$x(t1), kind);
      } else
        t1 = false;
      if (!t1)
        if (value != null) {
          t1 = this._parser$_iterator._current;
          t1 = t1 == null || !J.$eq(J.get$value$x(t1), value);
        } else
          t1 = false;
      else
        t1 = true;
      if (t1)
        throw H.wrapException(Y.ParseException$("Expected kind " + H.S(kind) + " (" + H.S(value) + "): " + H.S(this.get$_token())));
      this._parser$_iterator.moveNext$0();
    },
    _advance$0: function() {
      return this._advance$2(null, null);
    },
    _advance$1: function(kind) {
      return this._advance$2(kind, null);
    },
    _parseExpression$0: function() {
      if (this._parser$_iterator._current == null) {
        this._astFactory.toString;
        return C.C_EmptyExpression;
      }
      var expr = this._parseUnary$0();
      return expr == null ? null : this._parsePrecedence$2(expr, 0);
    },
    _parsePrecedence$2: function(left, precedence) {
      var t1, args, indexExpr, right, trueExpr, falseExpr;
      for (; t1 = this._parser$_iterator._current, t1 != null;)
        if (J.$eq(J.get$kind$x(t1), 9))
          if (J.$eq(J.get$value$x(this._parser$_iterator._current), "(")) {
            args = this._parseArguments$0();
            this._astFactory.toString;
            left = new U.Invoke(left, null, args);
          } else if (J.$eq(J.get$value$x(this._parser$_iterator._current), "[")) {
            indexExpr = this._parseIndex$0();
            this._astFactory.toString;
            left = new U.Index(left, indexExpr);
          } else
            break;
        else if (J.$eq(J.get$kind$x(this._parser$_iterator._current), 3)) {
          this._advance$0();
          left = this._makeInvokeOrGetter$2(left, this._parseUnary$0());
        } else if (J.$eq(J.get$kind$x(this._parser$_iterator._current), 10))
          if (J.$eq(J.get$value$x(this._parser$_iterator._current), "in")) {
            if (!J.getInterceptor(left).$isIdentifier)
              H.throwExpression(Y.ParseException$("in... statements must start with an identifier"));
            this._advance$0();
            right = this._parseExpression$0();
            this._astFactory.toString;
            left = new U.InExpression(left, right);
          } else if (J.$eq(J.get$value$x(this._parser$_iterator._current), "as")) {
            this._advance$0();
            right = this._parseExpression$0();
            if (!J.getInterceptor(right).$isIdentifier)
              H.throwExpression(Y.ParseException$("'as' statements must end with an identifier"));
            this._astFactory.toString;
            left = new U.AsExpression(left, right);
          } else
            break;
        else if (J.$eq(J.get$kind$x(this._parser$_iterator._current), 8) && J.$ge$n(this._parser$_iterator._current.get$precedence(), precedence) === true)
          if (J.$eq(J.get$value$x(this._parser$_iterator._current), "?")) {
            this._advance$2(8, "?");
            trueExpr = this._parseExpression$0();
            this._advance$1(5);
            falseExpr = this._parseExpression$0();
            this._astFactory.toString;
            left = new U.TernaryOperator(left, trueExpr, falseExpr);
          } else
            left = this._parseBinary$1(left);
        else
          break;
      return left;
    },
    _makeInvokeOrGetter$2: function(left, right) {
      var t1, t2;
      t1 = J.getInterceptor(right);
      if (!!t1.$isIdentifier) {
        t1 = t1.get$value(right);
        this._astFactory.toString;
        return new U.Getter(left, t1);
      } else if (!!t1.$isInvoke && !!J.getInterceptor(right.get$receiver()).$isIdentifier) {
        t1 = J.get$value$x(right.get$receiver());
        t2 = right.get$arguments();
        this._astFactory.toString;
        return new U.Invoke(left, t1, t2);
      } else
        throw H.wrapException(Y.ParseException$("expected identifier: " + H.S(right)));
    },
    _parseBinary$1: function(left) {
      var op, t1, right, t2;
      op = this._parser$_iterator._current;
      t1 = J.getInterceptor$x(op);
      if (!C.JSArray_methods.contains$1(C.List_EuK, t1.get$value(op)))
        throw H.wrapException(Y.ParseException$("unknown operator: " + H.S(t1.get$value(op))));
      this._advance$0();
      right = this._parseUnary$0();
      while (true) {
        t2 = this._parser$_iterator._current;
        if (t2 != null)
          t2 = (J.$eq(J.get$kind$x(t2), 8) || J.$eq(J.get$kind$x(this._parser$_iterator._current), 3) || J.$eq(J.get$kind$x(this._parser$_iterator._current), 9)) && J.$gt$n(this._parser$_iterator._current.get$precedence(), op.get$precedence()) === true;
        else
          t2 = false;
        if (!t2)
          break;
        right = this._parsePrecedence$2(right, this._parser$_iterator._current.get$precedence());
      }
      t1 = t1.get$value(op);
      this._astFactory.toString;
      return new U.BinaryOperator(t1, left, right);
    },
    _parseUnary$0: function() {
      var value, t1, t2, expr;
      if (J.$eq(J.get$kind$x(this._parser$_iterator._current), 8)) {
        value = J.get$value$x(this._parser$_iterator._current);
        t1 = J.getInterceptor(value);
        if (t1.$eq(value, "+") || t1.$eq(value, "-")) {
          this._advance$0();
          if (J.$eq(J.get$kind$x(this._parser$_iterator._current), 6)) {
            t1 = H.Primitives_parseInt(H.S(value) + H.S(J.get$value$x(this._parser$_iterator._current)), null, null);
            this._astFactory.toString;
            value = new U.Literal(t1);
            value.$builtinTypeInfo = [null];
            this._advance$0();
            return value;
          } else {
            t1 = this._astFactory;
            if (J.$eq(J.get$kind$x(this._parser$_iterator._current), 7)) {
              t2 = H.Primitives_parseDouble(H.S(value) + H.S(J.get$value$x(this._parser$_iterator._current)), null);
              t1.toString;
              value = new U.Literal(t2);
              value.$builtinTypeInfo = [null];
              this._advance$0();
              return value;
            } else {
              expr = this._parsePrecedence$2(this._parsePrimary$0(), 11);
              t1.toString;
              return new U.UnaryOperator(value, expr);
            }
          }
        } else if (t1.$eq(value, "!")) {
          this._advance$0();
          expr = this._parsePrecedence$2(this._parsePrimary$0(), 11);
          this._astFactory.toString;
          return new U.UnaryOperator(value, expr);
        } else
          throw H.wrapException(Y.ParseException$("unexpected token: " + H.S(value)));
      }
      return this._parsePrimary$0();
    },
    _parsePrimary$0: function() {
      var keyword, expr;
      switch (J.get$kind$x(this._parser$_iterator._current)) {
        case 10:
          keyword = J.get$value$x(this._parser$_iterator._current);
          if (J.$eq(keyword, "this")) {
            this._advance$0();
            this._astFactory.toString;
            return new U.Identifier("this");
          } else if (C.JSArray_methods.contains$1(C.List_as_in_this, keyword))
            throw H.wrapException(Y.ParseException$("unexpected keyword: " + H.S(keyword)));
          throw H.wrapException(Y.ParseException$("unrecognized keyword: " + H.S(keyword)));
        case 2:
          return this._parseInvokeOrIdentifier$0();
        case 1:
          return this._parseString$0();
        case 6:
          return this._parseInteger$0();
        case 7:
          return this._parseDecimal$0();
        case 9:
          if (J.$eq(J.get$value$x(this._parser$_iterator._current), "(")) {
            this._advance$0();
            expr = this._parseExpression$0();
            this._advance$2(9, ")");
            this._astFactory.toString;
            return new U.ParenthesizedExpression(expr);
          } else if (J.$eq(J.get$value$x(this._parser$_iterator._current), "{"))
            return this._parseMapLiteral$0();
          else if (J.$eq(J.get$value$x(this._parser$_iterator._current), "["))
            return this._parseListLiteral$0();
          return;
        case 5:
          throw H.wrapException(Y.ParseException$("unexpected token \":\""));
        default:
          return;
      }
    },
    _parseListLiteral$0: function() {
      var items, t1;
      items = [];
      do {
        this._advance$0();
        if (J.$eq(J.get$kind$x(this._parser$_iterator._current), 9) && J.$eq(J.get$value$x(this._parser$_iterator._current), "]"))
          break;
        items.push(this._parseExpression$0());
        t1 = this._parser$_iterator._current;
      } while (t1 != null && J.$eq(J.get$value$x(t1), ","));
      this._advance$2(9, "]");
      return new U.ListLiteral(items);
    },
    _parseMapLiteral$0: function() {
      var entries, t1, value;
      entries = [];
      do {
        this._advance$0();
        if (J.$eq(J.get$kind$x(this._parser$_iterator._current), 9) && J.$eq(J.get$value$x(this._parser$_iterator._current), "}"))
          break;
        t1 = J.get$value$x(this._parser$_iterator._current);
        this._astFactory.toString;
        value = new U.Literal(t1);
        value.$builtinTypeInfo = [null];
        this._advance$0();
        this._advance$2(5, ":");
        entries.push(new U.MapLiteralEntry(value, this._parseExpression$0()));
        t1 = this._parser$_iterator._current;
      } while (t1 != null && J.$eq(J.get$value$x(t1), ","));
      this._advance$2(9, "}");
      return new U.MapLiteral(entries);
    },
    _parseInvokeOrIdentifier$0: function() {
      var t1, value, identifier, args;
      if (J.$eq(J.get$value$x(this._parser$_iterator._current), "true")) {
        this._advance$0();
        this._astFactory.toString;
        t1 = new U.Literal(true);
        t1.$builtinTypeInfo = [null];
        return t1;
      }
      if (J.$eq(J.get$value$x(this._parser$_iterator._current), "false")) {
        this._advance$0();
        this._astFactory.toString;
        t1 = new U.Literal(false);
        t1.$builtinTypeInfo = [null];
        return t1;
      }
      if (J.$eq(J.get$value$x(this._parser$_iterator._current), "null")) {
        this._advance$0();
        this._astFactory.toString;
        t1 = new U.Literal(null);
        t1.$builtinTypeInfo = [null];
        return t1;
      }
      if (!J.$eq(J.get$kind$x(this._parser$_iterator._current), 2))
        H.throwExpression(Y.ParseException$("expected identifier: " + H.S(this.get$_token()) + ".value"));
      value = J.get$value$x(this._parser$_iterator._current);
      this._advance$0();
      this._astFactory.toString;
      identifier = new U.Identifier(value);
      args = this._parseArguments$0();
      if (args == null)
        return identifier;
      else
        return new U.Invoke(identifier, null, args);
    },
    _parseArguments$0: function() {
      var t1, args;
      t1 = this._parser$_iterator._current;
      if (t1 != null && J.$eq(J.get$kind$x(t1), 9) && J.$eq(J.get$value$x(this._parser$_iterator._current), "(")) {
        args = [];
        do {
          this._advance$0();
          if (J.$eq(J.get$kind$x(this._parser$_iterator._current), 9) && J.$eq(J.get$value$x(this._parser$_iterator._current), ")"))
            break;
          args.push(this._parseExpression$0());
          t1 = this._parser$_iterator._current;
        } while (t1 != null && J.$eq(J.get$value$x(t1), ","));
        this._advance$2(9, ")");
        return args;
      }
      return;
    },
    _parseIndex$0: function() {
      var t1, expr;
      t1 = this._parser$_iterator._current;
      if (t1 != null && J.$eq(J.get$kind$x(t1), 9) && J.$eq(J.get$value$x(this._parser$_iterator._current), "[")) {
        this._advance$0();
        expr = this._parseExpression$0();
        this._advance$2(9, "]");
        return expr;
      }
      return;
    },
    _parseString$0: function() {
      var t1, value;
      t1 = J.get$value$x(this._parser$_iterator._current);
      this._astFactory.toString;
      value = new U.Literal(t1);
      value.$builtinTypeInfo = [null];
      this._advance$0();
      return value;
    },
    _parseInteger$1: function(prefix) {
      var t1, value;
      t1 = H.Primitives_parseInt(H.S(prefix) + H.S(J.get$value$x(this._parser$_iterator._current)), null, null);
      this._astFactory.toString;
      value = new U.Literal(t1);
      value.$builtinTypeInfo = [null];
      this._advance$0();
      return value;
    },
    _parseInteger$0: function() {
      return this._parseInteger$1("");
    },
    _parseDecimal$1: function(prefix) {
      var t1, value;
      t1 = H.Primitives_parseDouble(H.S(prefix) + H.S(J.get$value$x(this._parser$_iterator._current)), null);
      this._astFactory.toString;
      value = new U.Literal(t1);
      value.$builtinTypeInfo = [null];
      this._advance$0();
      return value;
    },
    _parseDecimal$0: function() {
      return this._parseDecimal$1("");
    },
    static: {Parser$: function(input, astFactory) {
        var t1, t2, t3;
        t1 = [];
        t1.$builtinTypeInfo = [Y.Token];
        t2 = P.StringBuffer$("");
        t3 = new U.AstFactory();
        return new T.Parser(t3, new Y.Tokenizer(t1, t2, new P.RuneIterator(input, 0, 0, null), null), null, null);
      }}
  }
}],
["polymer_expressions.src.globals", "package:polymer_expressions/src/globals.dart", , K, {
  "^": "",
  enumerate: [function(iterable) {
    var t1 = new K.EnumerateIterable(iterable);
    t1.$builtinTypeInfo = [null];
    return t1;
  }, "call$1", "enumerate$closure", 2, 0, 75, 76, []],
  IndexedValue: {
    "^": "Object;index>,value>",
    $eq: function(_, o) {
      if (o == null)
        return false;
      return !!J.getInterceptor(o).$isIndexedValue && J.$eq(o.index, this.index) && J.$eq(o.value, this.value);
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.value);
    },
    toString$0: function(_) {
      return "(" + H.S(this.index) + ", " + H.S(this.value) + ")";
    },
    $isIndexedValue: true
  },
  EnumerateIterable: {
    "^": "IterableBase;_globals$_iterable",
    get$iterator: function(_) {
      var t1 = new K.EnumerateIterator(J.get$iterator$ax(this._globals$_iterable), 0, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      return J.get$length$asx(this._globals$_iterable);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._globals$_iterable);
    },
    get$first: function(_) {
      var t1 = new K.IndexedValue(0, J.get$first$ax(this._globals$_iterable));
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$last: function(_) {
      var t1, t2;
      t1 = this._globals$_iterable;
      t2 = J.getInterceptor$asx(t1);
      t1 = new K.IndexedValue(J.$sub$n(t2.get$length(t1), 1), t2.get$last(t1));
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    elementAt$1: function(_, index) {
      var t1 = new K.IndexedValue(index, J.elementAt$1$ax(this._globals$_iterable, index));
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    $asIterableBase: function($V) {
      return [[K.IndexedValue, $V]];
    },
    $asIterable: function($V) {
      return [[K.IndexedValue, $V]];
    }
  },
  EnumerateIterator: {
    "^": "Iterator;_globals$_iterator,_globals$_index,_globals$_current",
    get$current: function() {
      return this._globals$_current;
    },
    moveNext$0: function() {
      var t1 = this._globals$_iterator;
      if (t1.moveNext$0() === true) {
        t1 = new K.IndexedValue(this._globals$_index++, t1.get$current());
        t1.$builtinTypeInfo = [null];
        this._globals$_current = t1;
        return true;
      }
      this._globals$_current = null;
      return false;
    },
    $asIterator: function($V) {
      return [[K.IndexedValue, $V]];
    }
  }
}],
["polymer_expressions.tokenizer", "package:polymer_expressions/tokenizer.dart", , Y, {
  "^": "",
  escape: function(c) {
    switch (c) {
      case 102:
        return 12;
      case 110:
        return 10;
      case 114:
        return 13;
      case 116:
        return 9;
      case 118:
        return 11;
      default:
        return c;
    }
  },
  Token: {
    "^": "Object;kind>,value>,precedence<",
    toString$0: function(_) {
      return "(" + this.kind + ", '" + this.value + "')";
    },
    $isToken: true
  },
  Tokenizer: {
    "^": "Object;_tokenizer$_tokens,_sb,_tokenizer$_iterator,_tokenizer$_next",
    tokenize$0: function() {
      var t1, t2, t3, t4, startChar, op2, op, value;
      t1 = this._tokenizer$_iterator;
      this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
      for (t2 = this._tokenizer$_tokens; t3 = this._tokenizer$_next, t3 != null;) {
        t4 = J.getInterceptor(t3);
        if (t4.$eq(t3, 32) || t4.$eq(t3, 9) || t4.$eq(t3, 160))
          this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
        else {
          t3 = this._tokenizer$_next;
          t4 = J.getInterceptor(t3);
          if (t4.$eq(t3, 34) || t4.$eq(t3, 39))
            this.tokenizeString$0();
          else {
            t3 = this._tokenizer$_next;
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (!(97 <= t3 && t3 <= 122))
              t4 = 65 <= t3 && t3 <= 90 || t3 === 95 || t3 === 36 || t3 > 127;
            else
              t4 = true;
            if (t4)
              this.tokenizeIdentifierOrKeyword$0();
            else if (48 <= t3 && t3 <= 57)
              this.tokenizeNumber$0();
            else if (t3 === 46) {
              t3 = t1.moveNext$0() ? t1._currentCodePoint : null;
              this._tokenizer$_next = t3;
              if (typeof t3 !== "number")
                return H.iae(t3);
              if (48 <= t3 && t3 <= 57)
                this.tokenizeFraction$0();
              else
                t2.push(new Y.Token(3, ".", 11));
            } else if (J.$eq(this._tokenizer$_next, 44)) {
              this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
              t2.push(new Y.Token(4, ",", 0));
            } else if (J.$eq(this._tokenizer$_next, 58)) {
              this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
              t2.push(new Y.Token(5, ":", 0));
            } else if (C.JSArray_methods.contains$1(C.List_mC8, this._tokenizer$_next)) {
              startChar = this._tokenizer$_next;
              t3 = t1.moveNext$0() ? t1._currentCodePoint : null;
              this._tokenizer$_next = t3;
              if (C.JSArray_methods.contains$1(C.List_mC8, t3)) {
                t3 = this._tokenizer$_next;
                op2 = H.Primitives_stringFromCharCodes([startChar, t3]);
                if (C.JSArray_methods.contains$1(C.List_Ynd, op2)) {
                  t3 = t1.moveNext$0() ? t1._currentCodePoint : null;
                  this._tokenizer$_next = t3;
                  if (J.$eq(t3, 61)) {
                    t3 = J.getInterceptor(startChar);
                    t3 = t3.$eq(startChar, 33) || t3.$eq(startChar, 61);
                  } else
                    t3 = false;
                  if (t3) {
                    op = op2 + "=";
                    this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
                  } else
                    op = op2;
                } else
                  op = H.Primitives_stringFromCharCode(startChar);
              } else
                op = H.Primitives_stringFromCharCode(startChar);
              t2.push(new Y.Token(8, op, C.Map_L0VM2.$index(0, op)));
            } else if (C.JSArray_methods.contains$1(C.List_ww8, this._tokenizer$_next)) {
              value = H.Primitives_stringFromCharCode(this._tokenizer$_next);
              t2.push(new Y.Token(9, value, C.Map_L0VM2.$index(0, value)));
              this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
            } else
              this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
          }
        }
      }
      return t2;
    },
    tokenizeString$0: function() {
      var quoteChar, t1, t2, t3;
      quoteChar = this._tokenizer$_next;
      t1 = this._tokenizer$_iterator;
      t2 = t1.moveNext$0() ? t1._currentCodePoint : null;
      this._tokenizer$_next = t2;
      for (t3 = this._sb; !J.$eq(t2, quoteChar);) {
        t2 = this._tokenizer$_next;
        if (t2 == null)
          throw H.wrapException(Y.ParseException$("unterminated string"));
        if (J.$eq(t2, 92)) {
          t2 = t1.moveNext$0() ? t1._currentCodePoint : null;
          this._tokenizer$_next = t2;
          if (t2 == null)
            throw H.wrapException(Y.ParseException$("unterminated string"));
          t2 = H.Primitives_stringFromCharCode(Y.escape(t2));
          t3._contents += t2;
        } else {
          t2 = H.Primitives_stringFromCharCode(this._tokenizer$_next);
          t3._contents += t2;
        }
        t2 = t1.moveNext$0() ? t1._currentCodePoint : null;
        this._tokenizer$_next = t2;
      }
      this._tokenizer$_tokens.push(new Y.Token(1, t3._contents, 0));
      t3._contents = "";
      this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
    },
    tokenizeIdentifierOrKeyword$0: function() {
      var t1, t2, t3, t4, value;
      t1 = this._tokenizer$_iterator;
      t2 = this._sb;
      while (true) {
        t3 = this._tokenizer$_next;
        if (t3 != null) {
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(97 <= t3 && t3 <= 122))
            if (!(65 <= t3 && t3 <= 90))
              t4 = 48 <= t3 && t3 <= 57 || t3 === 95 || t3 === 36 || t3 > 127;
            else
              t4 = true;
          else
            t4 = true;
        } else
          t4 = false;
        if (!t4)
          break;
        t3 = H.Primitives_stringFromCharCode(t3);
        t2._contents += t3;
        this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
      }
      value = t2._contents;
      t1 = this._tokenizer$_tokens;
      if (C.JSArray_methods.contains$1(C.List_as_in_this, value))
        t1.push(new Y.Token(10, value, 0));
      else
        t1.push(new Y.Token(2, value, 0));
      t2._contents = "";
    },
    tokenizeNumber$0: function() {
      var t1, t2, t3, t4;
      t1 = this._tokenizer$_iterator;
      t2 = this._sb;
      while (true) {
        t3 = this._tokenizer$_next;
        if (t3 != null) {
          if (typeof t3 !== "number")
            return H.iae(t3);
          t4 = 48 <= t3 && t3 <= 57;
        } else
          t4 = false;
        if (!t4)
          break;
        t3 = H.Primitives_stringFromCharCode(t3);
        t2._contents += t3;
        this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
      }
      if (J.$eq(t3, 46)) {
        t1 = t1.moveNext$0() ? t1._currentCodePoint : null;
        this._tokenizer$_next = t1;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (48 <= t1 && t1 <= 57)
          this.tokenizeFraction$0();
        else
          this._tokenizer$_tokens.push(new Y.Token(3, ".", 11));
      } else {
        this._tokenizer$_tokens.push(new Y.Token(6, t2._contents, 0));
        t2._contents = "";
      }
    },
    tokenizeFraction$0: function() {
      var t1, t2, t3, t4;
      t1 = this._sb;
      t1.write$1(H.Primitives_stringFromCharCode(46));
      t2 = this._tokenizer$_iterator;
      while (true) {
        t3 = this._tokenizer$_next;
        if (t3 != null) {
          if (typeof t3 !== "number")
            return H.iae(t3);
          t4 = 48 <= t3 && t3 <= 57;
        } else
          t4 = false;
        if (!t4)
          break;
        t3 = H.Primitives_stringFromCharCode(t3);
        t1._contents += t3;
        this._tokenizer$_next = t2.moveNext$0() ? t2._currentCodePoint : null;
      }
      this._tokenizer$_tokens.push(new Y.Token(7, t1._contents, 0));
      t1._contents = "";
    }
  },
  ParseException: {
    "^": "Object;message>",
    toString$0: function(_) {
      return "ParseException: " + this.message;
    },
    static: {ParseException$: function(message) {
        return new Y.ParseException(message);
      }}
  }
}],
["polymer_expressions.visitor", "package:polymer_expressions/visitor.dart", , S, {
  "^": "",
  Visitor: {
    "^": "Object;",
    visit$1: [function(s) {
      return J.accept$1$x(s, this);
    }, "call$1", "get$visit", 2, 0, 189, 84, []]
  },
  RecursiveVisitor: {
    "^": "Visitor;",
    visitExpression$1: function(e) {
    },
    visitEmptyExpression$1: function(e) {
      this.visitExpression$1(e);
    },
    visitParenthesizedExpression$1: function(e) {
      e.child.accept$1(0, this);
      this.visitExpression$1(e);
    },
    visitGetter$1: function(i) {
      J.accept$1$x(i.get$receiver(), this);
      this.visitExpression$1(i);
    },
    visitIndex$1: function(i) {
      J.accept$1$x(i.get$receiver(), this);
      J.accept$1$x(i.get$argument(), this);
      this.visitExpression$1(i);
    },
    visitInvoke$1: function(i) {
      var t1;
      J.accept$1$x(i.get$receiver(), this);
      if (i.get$arguments() != null)
        for (t1 = J.get$iterator$ax(i.get$arguments()); t1.moveNext$0() === true;)
          J.accept$1$x(t1.get$current(), this);
      this.visitExpression$1(i);
    },
    visitLiteral$1: function(l) {
      this.visitExpression$1(l);
    },
    visitListLiteral$1: function(l) {
      var t1, t2;
      t1 = l.get$items();
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      for (; t2.moveNext$0();)
        J.accept$1$x(t2._current, this);
      this.visitExpression$1(l);
    },
    visitMapLiteral$1: function(l) {
      var t1, t2;
      t1 = l.get$entries(l);
      t2 = new H.ListIterator(t1, t1.length, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      for (; t2.moveNext$0();)
        J.accept$1$x(t2._current, this);
      this.visitExpression$1(l);
    },
    visitMapLiteralEntry$1: function(e) {
      J.accept$1$x(e.get$key(e), this);
      J.accept$1$x(e.get$entryValue(), this);
      this.visitExpression$1(e);
    },
    visitIdentifier$1: function(i) {
      this.visitExpression$1(i);
    },
    visitBinaryOperator$1: function(o) {
      J.accept$1$x(o.get$left(o), this);
      J.accept$1$x(o.get$right(o), this);
      this.visitExpression$1(o);
    },
    visitUnaryOperator$1: function(o) {
      J.accept$1$x(o.get$child(), this);
      this.visitExpression$1(o);
    },
    visitTernaryOperator$1: function(o) {
      J.accept$1$x(o.get$condition(), this);
      J.accept$1$x(o.get$trueExpr(), this);
      J.accept$1$x(o.get$falseExpr(), this);
      this.visitExpression$1(o);
    },
    visitInExpression$1: function(c) {
      c.left.accept$1(0, this);
      c.right.accept$1(0, this);
      this.visitExpression$1(c);
    },
    visitAsExpression$1: function(c) {
      c.left.accept$1(0, this);
      c.right.accept$1(0, this);
      this.visitExpression$1(c);
    }
  }
}],
["purity.core", "package:purity/core.dart", , G, {
  "^": "",
  _Base: {
    "^": "Object_EventEmitter_EventDetector;_purityId<-190",
    get$hashCode: [function(_) {
      return J.get$hashCode$(this._purityId);
    }, null, null, 1, 0, 128, "hashCode"],
    $eq: [function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_Base && J.$eq(this._purityId, other._purityId);
    }, "call$1", "get$==", 2, 0, 126, 127, [], "=="],
    $is_Base: true
  },
  Object_EventEmitter: {
    "^": "Object+EventEmitter;_actionQueues:eventable$EventEmitter$_actionQueues@-152,_emittingType:eventable$EventEmitter$_emittingType@-153",
    $isEventEmitter: true
  },
  Object_EventEmitter_EventDetector: {
    "^": "Object_EventEmitter+EventDetector;_typeIndexes:eventable$EventDetector$_typeIndexes*-143,_emitterIndexes:eventable$EventDetector$_emitterIndexes*-144"
  },
  Consumer: {
    "^": "Object_EventDetector;",
    Consumer$1: function(_src) {
    }
  },
  Object_EventDetector: {
    "^": "Object+EventDetector;_typeIndexes:eventable$EventDetector$_typeIndexes*-143,_emitterIndexes:eventable$EventDetector$_emitterIndexes*-144"
  },
  RestrictedMethodError: {
    "^": "Object;method>",
    get$message: function(_) {
      return H.S(this.method) + " is a restricted access method.";
    },
    static: {RestrictedMethodError$: function(method) {
        return new G.RestrictedMethodError(method);
      }}
  },
  Source: {
    "^": "_Base;_core0$_this@-191",
    _core0$_invoke$1: [function(inv) {
      var t1;
      if (this._core0$_this == null)
        this._core0$_this = H.reflect(this);
      t1 = J.getInterceptor$x(inv);
      if ($.get$Source__restrictedMethods().contains$1(0, t1.get$method(inv)) || J.startsWith$1$s(J.get$_name$x(t1.get$method(inv)), "_") === true)
        throw H.wrapException(G.RestrictedMethodError$(t1.get$method(inv)));
      else
        this._core0$_this.invoke$3(t1.get$method(inv), inv.get$posArgs(), inv.get$namArgs());
    }, "call$1", "get$_core0$_invoke", 2, 0, 192, 193, [], "_core0$_invoke"],
    emitEvent$1: [function(data) {
      data.lock$0();
      return X.EventEmitter.prototype.emitEvent$1.call(this, data);
    }, "call$1", "get$emitEvent", 2, 0, 194, 110, [], "emitEvent"]
  },
  IEndPointMessage: {
    "^": "Object;endPointName@-195,isProxyToSource@-196,message*-195",
    static: {IEndPointMessage$: [function() {
        return new G.IEndPointMessage(null, null, null);
      }, null, null, 0, 0, 77, "new IEndPointMessage"]}
  },
  "+IEndPointMessage": [197],
  _IGarbageCollectionReport: {
    "^": "Object;proxies@-198",
    static: {_IGarbageCollectionReport$: [function() {
        return new G._IGarbageCollectionReport(null);
      }, null, null, 0, 0, 78, "new _IGarbageCollectionReport"]}
  },
  "+_IGarbageCollectionReport": [197],
  _ProxyInvocation: {
    "^": "_Transmission;"
  },
  _IProxyInvocation: {
    "^": "Object;src*-199,method*-200,posArgs@-201,namArgs@-202",
    static: {_IProxyInvocation$: [function() {
        return new G._IProxyInvocation(null, null, null, null);
      }, null, null, 0, 0, 79, "new _IProxyInvocation"]}
  },
  "+_IProxyInvocation": [197],
  _ISourceEvent: {
    "^": "Object;proxy@-203,data*-204",
    static: {_ISourceEvent$: [function() {
        return new G._ISourceEvent(null, null);
      }, null, null, 0, 0, 80, "new _ISourceEvent"]}
  },
  "+_ISourceEvent": [197],
  _ISourceReady: {
    "^": "Object;src*-199",
    static: {_ISourceReady$: [function() {
        return new G._ISourceReady(null);
      }, null, null, 0, 0, 81, "new _ISourceReady"]}
  },
  "+_ISourceReady": [197],
  _Transmission: {
    "^": "Transmittable;"
  }
}],
["smoke", "package:smoke/smoke.dart", , A, {
  "^": "",
  QueryOptions: {
    "^": "Object;includeFields,includeProperties,includeInherited,includeUpTo,excludeFinal,includeMethods,withAnnotations,matches",
    matches$1: function($receiver, arg0) {
      return this.matches.call$1(arg0);
    },
    toString$0: function(_) {
      var t1 = P.StringBuffer$("");
      t1.write$1("(options:");
      t1.write$1(this.includeFields ? "fields " : "");
      t1.write$1(this.includeProperties ? "properties " : "");
      t1.write$1(this.includeMethods ? "methods " : "");
      t1.write$1(this.includeInherited ? "inherited " : "_");
      t1.write$1(this.excludeFinal ? "no finals " : "");
      t1.write$1("annotations: " + H.S(this.withAnnotations));
      t1.write$1(this.matches != null ? "with matcher" : "");
      t1.write$1(")");
      return t1._contents;
    }
  },
  Declaration: {
    "^": "Object;name>,kind>,isFinal<,type>,isStatic<,annotations<",
    get$isField: function() {
      return this.kind === C.DeclarationKind_0;
    },
    get$isProperty: function() {
      return this.kind === C.DeclarationKind_1;
    },
    get$isMethod: function() {
      return this.kind === C.DeclarationKind_2;
    },
    get$hashCode: function(_) {
      var t1 = this.name;
      return t1.get$hashCode(t1);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isDeclaration && this.name.$eq(0, other.name) && this.kind === other.kind && this.isFinal === other.isFinal && this.type.$eq(0, other.type) && this.isStatic === other.isStatic && X.compareLists(this.annotations, other.annotations, false);
    },
    toString$0: function(_) {
      var t1 = P.StringBuffer$("");
      t1.write$1("(declaration ");
      t1.write$1(this.name);
      t1.write$1(this.kind === C.DeclarationKind_1 ? " (property) " : " (method) ");
      t1.write$1(this.isFinal ? "final " : "");
      t1.write$1(this.isStatic ? "static " : "");
      t1.write$1(this.annotations);
      t1.write$1(")");
      return t1._contents;
    },
    $isDeclaration: true
  },
  DeclarationKind: {
    "^": "Object;kind>"
  }
}],
["smoke.src.common", "package:smoke/src/common.dart", , X, {
  "^": "",
  adjustList: function(input, min, max) {
    var t1, t2;
    t1 = J.getInterceptor$asx(input);
    if (J.$lt$n(t1.get$length(input), min) === true) {
      t2 = Array(min);
      t2.fixed$length = init;
      t1 = t1.get$length(input);
      H.IterableMixinWorkaround_setRangeList(t2, 0, t1, input, 0);
      return t2;
    }
    if (J.$gt$n(t1.get$length(input), max) === true) {
      if (typeof max !== "number")
        return H.iae(max);
      t1 = Array(max);
      t1.fixed$length = init;
      H.IterableMixinWorkaround_setRangeList(t1, 0, max, input, 0);
      return t1;
    }
    return input;
  },
  matchesAnnotation: function(metadata, queryAnnotations) {
    var t1, meta, t2, t3, queryMeta, t4;
    for (t1 = J.get$iterator$ax(metadata); t1.moveNext$0() === true;) {
      meta = t1.get$current();
      queryAnnotations.length;
      t2 = new H.ListIterator(queryAnnotations, 1, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(queryAnnotations, 0)];
      t3 = J.getInterceptor(meta);
      for (; t2.moveNext$0();) {
        queryMeta = t2._current;
        if (t3.$eq(meta, queryMeta))
          return true;
        if (!!J.getInterceptor(queryMeta).$isType) {
          t4 = t3.get$runtimeType(meta);
          t4 = $.get$typeInspector().isSubclassOf$2(t4, queryMeta);
        } else
          t4 = false;
        if (t4)
          return true;
      }
    }
    return false;
  },
  minArgs: function(f) {
    var t1, t2;
    t1 = H.getDynamicRuntimeType();
    t2 = H.buildFunctionType(t1)._isTest$1(f);
    if (t2)
      return 0;
    t2 = H.buildFunctionType(t1, [t1])._isTest$1(f);
    if (t2)
      return 1;
    t2 = H.buildFunctionType(t1, [t1, t1])._isTest$1(f);
    if (t2)
      return 2;
    t1 = H.buildFunctionType(t1, [t1, t1, t1])._isTest$1(f);
    if (t1)
      return 3;
    return 4;
  },
  maxArgs: function(f) {
    var t1, t2;
    t1 = H.getDynamicRuntimeType();
    t2 = H.buildFunctionType(t1, [t1, t1, t1])._isTest$1(f);
    if (t2)
      return 3;
    t2 = H.buildFunctionType(t1, [t1, t1])._isTest$1(f);
    if (t2)
      return 2;
    t2 = H.buildFunctionType(t1, [t1])._isTest$1(f);
    if (t2)
      return 1;
    t1 = H.buildFunctionType(t1)._isTest$1(f);
    if (t1)
      return 0;
    return -1;
  },
  compareLists: function(a, b, unordered) {
    var countMap, t1, x, count, i;
    if (unordered) {
      countMap = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t1 = new H.ListIterator(b, 2, 0, null);
      t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(b, 0)];
      for (; t1.moveNext$0();) {
        x = t1._current;
        count = countMap.$index(0, x);
        countMap.$indexSet(0, x, J.$add$ns(count == null ? 0 : count, 1));
      }
      t1 = new H.ListIterator(a, 2, 0, null);
      t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(a, 0)];
      for (; t1.moveNext$0();) {
        x = t1._current;
        count = countMap.$index(0, x);
        if (count == null)
          return false;
        if (count === 1)
          countMap.remove$1(0, x);
        else
          countMap.$indexSet(0, x, count - 1);
      }
      return countMap.get$isEmpty(countMap);
    } else
      for (i = 0; i < 2; ++i)
        if (a[i] !== b[i])
          return false;
    return true;
  }
}],
["smoke.src.implementation", "package:smoke/src/implementation.dart", , D, {
  "^": "",
  throwNotConfiguredError: function() {
    throw H.wrapException(P.Exception_Exception("The \"smoke\" library has not been configured. Make sure you import and configure one of the implementations (package:smoke/mirrors.dart or package:smoke/static.dart)."));
  }
}],
["smoke.static", "package:smoke/static.dart", , O, {
  "^": "",
  StaticConfiguration: {
    "^": "Object;getters<,setters<,parents<,declarations<,staticMethods<,names<,_symbols,checkedMode",
    addAll$1: function(_, other) {
      this.getters.addAll$1(0, other.get$getters());
      this.setters.addAll$1(0, other.get$setters());
      this.parents.addAll$1(0, other.get$parents());
      O.StaticConfiguration__nestedAddAll(this.declarations, other.get$declarations());
      O.StaticConfiguration__nestedAddAll(this.staticMethods, other.get$staticMethods());
      this.names.addAll$1(0, other.get$names());
      J.forEach$1$ax(other.get$names(), new O.StaticConfiguration_addAll_closure(this));
    },
    StaticConfiguration$7$checkedMode$declarations$getters$names$parents$setters$staticMethods: function(checkedMode, declarations, getters, names, parents, setters, staticMethods) {
      this.names.forEach$1(0, new O.StaticConfiguration_closure(this));
    },
    static: {StaticConfiguration$: function(checkedMode, declarations, getters, names, parents, setters, staticMethods) {
        var t1, t2;
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        t2 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        t1 = new O.StaticConfiguration(getters, setters, parents, declarations, t2, names, t1, checkedMode);
        t1.StaticConfiguration$7$checkedMode$declarations$getters$names$parents$setters$staticMethods(checkedMode, declarations, getters, names, parents, setters, staticMethods);
        return t1;
      }, StaticConfiguration__nestedAddAll: function(a, b) {
        var t1, t2, key;
        for (t1 = J.get$iterator$ax(b.get$keys()), t2 = J.getInterceptor$asx(b); t1.moveNext$0() === true;) {
          key = t1.get$current();
          a.putIfAbsent$2(key, new O.StaticConfiguration__nestedAddAll_closure());
          J.addAll$1$ax(a.$index(0, key), t2.$index(b, key));
        }
      }}
  },
  StaticConfiguration_closure: {
    "^": "Closure:94;this_0",
    call$2: function(k, v) {
      this.this_0._symbols.$indexSet(0, v, k);
    },
    $isFunction: true
  },
  StaticConfiguration_addAll_closure: {
    "^": "Closure:94;this_0",
    call$2: [function(k, v) {
      this.this_0._symbols.$indexSet(0, v, k);
    }, "call$2", null, 4, 0, null, 121, [], 71, [], "call"],
    $isFunction: true
  },
  StaticConfiguration__nestedAddAll_closure: {
    "^": "Closure:14;",
    call$0: function() {
      return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
    },
    $isFunction: true
  },
  GeneratedObjectAccessorService: {
    "^": "Object;_configuration",
    read$2: function(object, $name) {
      var getter = this._configuration.getters.$index(0, $name);
      if (getter == null)
        throw H.wrapException(O.MissingCodeException$("getter \"" + H.S($name) + "\" in " + H.S(object)));
      return getter.call$1(object);
    },
    write$3: function(object, $name, value) {
      var setter = this._configuration.setters.$index(0, $name);
      if (setter == null)
        throw H.wrapException(O.MissingCodeException$("setter \"" + H.S($name) + "\" in " + H.S(object)));
      setter.call$2(object, value);
    },
    invoke$5$adjust$namedArgs: function(object, $name, args, adjust, namedArgs) {
      var method, tentativeError, t1, classMethods, getter, min, max, exception;
      method = null;
      t1 = this._configuration;
      if (!!J.getInterceptor(object).$isType) {
        classMethods = t1.staticMethods.$index(0, object);
        method = classMethods == null ? null : J.$index$asx(classMethods, $name);
      } else {
        getter = t1.getters.$index(0, $name);
        method = getter == null ? null : getter.call$1(object);
      }
      if (method == null)
        throw H.wrapException(O.MissingCodeException$("method \"" + H.S($name) + "\" in " + H.S(object)));
      tentativeError = null;
      if (adjust) {
        min = X.minArgs(method);
        if (min > 3) {
          tentativeError = "we tried to adjust the arguments for calling \"" + H.S($name) + "\", but we couldn't determine the exact number of arguments it expects (it is more than 3).";
          args = X.adjustList(args, min, P.max(min, J.get$length$asx(args)));
        } else {
          max = X.maxArgs(method);
          t1 = max >= 0 ? max : J.get$length$asx(args);
          args = X.adjustList(args, min, t1);
        }
      }
      try {
        t1 = H.Primitives_applyFunction(method, args, P.Function__toMangledNames(null));
        return t1;
      } catch (exception) {
        if (!!J.getInterceptor(H.unwrapException(exception)).$isNoSuchMethodError) {
          if (tentativeError != null)
            P.print(tentativeError);
          throw exception;
        } else
          throw exception;
      }

    },
    invoke$3: function(object, name, args) {
      return this.invoke$5$adjust$namedArgs(object, name, args, false, null);
    }
  },
  GeneratedTypeInspectorService: {
    "^": "Object;_configuration",
    isSubclassOf$2: function(type, supertype) {
      var t1, t2, parentType;
      if (J.$eq(type, supertype) || J.$eq(supertype, C.Type_HqF))
        return true;
      for (t1 = this._configuration, t2 = t1.parents; !J.$eq(type, C.Type_HqF); type = parentType) {
        parentType = t2.$index(0, type);
        if (J.$eq(parentType, supertype))
          return true;
        if (parentType == null) {
          if (!t1.checkedMode)
            return false;
          throw H.wrapException(O.MissingCodeException$("superclass of \"" + H.S(type) + "\" (" + H.S(parentType) + ")"));
        }
      }
      return false;
    },
    hasInstanceMethod$2: function(type, $name) {
      var decl = this._findDeclaration$2(type, $name);
      return decl != null && decl.get$isMethod() === true && decl.get$isStatic() !== true;
    },
    hasStaticMethod$2: function(type, $name) {
      var t1, map, decl;
      t1 = this._configuration;
      map = t1.declarations.$index(0, type);
      if (map == null) {
        if (!t1.checkedMode)
          return false;
        throw H.wrapException(O.MissingCodeException$("declarations for " + H.S(type)));
      }
      decl = J.$index$asx(map, $name);
      return decl != null && decl.get$isMethod() === true && decl.get$isStatic() === true;
    },
    getDeclaration$2: function(type, $name) {
      var decl = this._findDeclaration$2(type, $name);
      if (decl == null) {
        if (!this._configuration.checkedMode)
          return;
        throw H.wrapException(O.MissingCodeException$("declaration for " + H.S(type) + "." + H.S($name)));
      }
      return decl;
    },
    query$2: function(_, type, options) {
      var result, t1, superclass, map, decl, t2;
      result = [];
      if (options.includeInherited) {
        t1 = this._configuration;
        superclass = t1.parents.$index(0, type);
        if (superclass == null) {
          if (t1.checkedMode)
            throw H.wrapException(O.MissingCodeException$("superclass of \"" + H.S(type) + "\""));
        } else if (!J.$eq(superclass, options.includeUpTo))
          result = this.query$2(0, superclass, options);
      }
      t1 = this._configuration;
      map = t1.declarations.$index(0, type);
      if (map == null) {
        if (!t1.checkedMode)
          return result;
        throw H.wrapException(O.MissingCodeException$("declarations for " + H.S(type)));
      }
      for (t1 = J.get$iterator$ax(J.get$values$x(map)); t1.moveNext$0() === true;) {
        decl = t1.get$current();
        if (!options.includeFields && decl.get$isField() === true)
          continue;
        if (!options.includeProperties && decl.get$isProperty() === true)
          continue;
        if (options.excludeFinal && decl.get$isFinal() === true)
          continue;
        if (!options.includeMethods && decl.get$isMethod() === true)
          continue;
        if (options.matches != null && options.matches$1(0, J.get$name$x(decl)) !== true)
          continue;
        t2 = options.withAnnotations;
        if (t2 != null && !X.matchesAnnotation(decl.get$annotations(), t2))
          continue;
        result.push(decl);
      }
      return result;
    },
    _findDeclaration$2: function(type, $name) {
      var t1, t2, t3, declarations, declaration, parentType;
      for (t1 = this._configuration, t2 = t1.parents, t3 = t1.declarations; !J.$eq(type, C.Type_HqF); type = parentType) {
        declarations = t3.$index(0, type);
        if (declarations != null) {
          declaration = J.$index$asx(declarations, $name);
          if (declaration != null)
            return declaration;
        }
        parentType = t2.$index(0, type);
        if (parentType == null) {
          if (!t1.checkedMode)
            return;
          throw H.wrapException(O.MissingCodeException$("superclass of \"" + H.S(type) + "\""));
        }
      }
      return;
    }
  },
  GeneratedSymbolConverterService: {
    "^": "Object;_configuration"
  },
  MissingCodeException: {
    "^": "Object;description",
    toString$0: function(_) {
      return "Missing " + this.description + ". Code generation for the smoke package seems incomplete.";
    },
    static: {MissingCodeException$: function(description) {
        return new O.MissingCodeException(description);
      }}
  }
}],
["source_span.location", "package:source_span/src/location.dart", , O, {
  "^": "",
  SourceLocation: {
    "^": "Object;sourceUrl<,offset>,line,column",
    get$toolString: function() {
      return H.S(this.sourceUrl) + ":" + H.S(J.$add$ns(this.line, 1)) + ":" + H.S(J.$add$ns(this.column, 1));
    },
    distance$1: function(other) {
      var t1, t2;
      t1 = this.sourceUrl;
      t2 = other.sourceUrl;
      if (!t1.$eq(0, t2))
        throw H.wrapException(P.ArgumentError$("Source URLs \"" + t1.toString$0(0) + "\" and \"" + t2.toString$0(0) + "\" don't match."));
      return J.abs$0$n(J.$sub$n(this.offset, other.offset));
    },
    compareTo$1: function(_, other) {
      var t1 = this.sourceUrl;
      if (!t1.$eq(0, other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$("Source URLs \"" + t1.toString$0(0) + "\" and \"" + H.S(other.get$sourceUrl()) + "\" don't match."));
      return J.$sub$n(this.offset, J.get$offset$x(other));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return this.sourceUrl.$eq(0, other.get$sourceUrl()) && J.$eq(this.offset, J.get$offset$x(other));
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = this.sourceUrl;
      t1 = t1.get$hashCode(t1);
      t2 = this.offset;
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 + t2;
    },
    toString$0: function(_) {
      return "<" + H.S(new H.TypeImpl(H.getRuntimeTypeString(this), null)) + ": " + H.S(this.offset) + " " + this.get$toolString() + ">";
    },
    SourceLocation$4$column$line$sourceUrl: function(offset, column, line, sourceUrl) {
      if (J.$lt$n(this.offset, 0) === true)
        throw H.wrapException(P.RangeError$("Offset may not be negative, was " + H.S(offset) + "."));
      else if (J.$lt$n(this.line, 0) === true)
        throw H.wrapException(P.RangeError$("Line may not be negative, was " + H.S(line) + "."));
      else if (J.$lt$n(this.column, 0) === true)
        throw H.wrapException(P.RangeError$("Column may not be negative, was " + H.S(column) + "."));
    },
    static: {SourceLocation$: function(offset, column, line, sourceUrl) {
        var t1, t2;
        t1 = line == null ? 0 : line;
        t2 = column == null ? offset : column;
        t2 = new O.SourceLocation(sourceUrl, offset, t1, t2);
        t2.SourceLocation$4$column$line$sourceUrl(offset, column, line, sourceUrl);
        return t2;
      }}
  }
}],
["source_span.span", "package:source_span/src/span.dart", , T, {
  "^": "",
  SourceSpan: {
    "^": "Object;"
  },
  SourceSpanBase: {
    "^": "SourceSpanMixin;start>,end<,text>",
    start$0: function($receiver) {
      return this.start.call$0();
    },
    SourceSpanBase$3: function(start, end, text) {
      var t1, t2, t3, t4;
      t1 = this.end;
      t2 = t1.sourceUrl;
      t3 = this.start;
      t4 = t3.sourceUrl;
      if (!t2.$eq(0, t4))
        throw H.wrapException(P.ArgumentError$("Source URLs \"" + t4.toString$0(0) + "\" and  \"" + t2.toString$0(0) + "\" don't match."));
      else if (J.$lt$n(t1.offset, t3.offset) === true)
        throw H.wrapException(P.ArgumentError$("End " + t1.toString$0(0) + " must come after start " + t3.toString$0(0) + "."));
      else {
        t2 = this.text;
        if (!J.$eq(J.get$length$asx(t2), t3.distance$1(t1)))
          throw H.wrapException(P.ArgumentError$("Text \"" + H.S(t2) + "\" must be " + H.S(t3.distance$1(t1)) + " characters long."));
      }
    }
  }
}],
["source_span.span_mixin", "package:source_span/src/span_mixin.dart", , Y, {
  "^": "",
  SourceSpanMixin: {
    "^": "Object;",
    get$sourceUrl: function() {
      return this.get$start(this).sourceUrl;
    },
    get$length: function(_) {
      return J.$sub$n(this.get$end().offset, this.start.offset);
    },
    compareTo$1: function(_, other) {
      var d = this.get$start(this).compareTo$1(0, J.get$start$x(other));
      return J.$eq(d, 0) ? this.end.compareTo$1(0, other.get$end()) : d;
    },
    message$2$color: [function(_, message, color) {
      var buffer, t1, textLine;
      if (J.$eq(color, true))
        color = "\u001b[31m";
      if (J.$eq(color, false))
        color = null;
      buffer = P.StringBuffer$("");
      t1 = this.start;
      buffer.write$1("line " + H.S(J.$add$ns(this.get$start(this).line, 1)) + ", column " + H.S(J.$add$ns(t1.column, 1)));
      buffer.write$1(" of " + $.get$context0().prettyUri$1(t1.sourceUrl));
      buffer.write$1(": " + H.S(message));
      if (J.$eq(J.$sub$n(this.end.offset, t1.offset), 0))
        return buffer._contents;
      buffer.write$1("\n");
      textLine = J.get$first$ax(J.split$1$s(this.text, "\n"));
      t1 = color != null;
      if (t1)
        buffer.write$1(color);
      buffer.write$1(textLine);
      buffer.write$1("\n");
      buffer.write$1(C.JSString_methods.$mul("^", J.get$length$asx(textLine)));
      if (t1)
        buffer.write$1("\u001b[0m");
      return buffer._contents;
    }, function($receiver, message) {
      return this.message$2$color($receiver, message, null);
    }, "message$1", "call$2$color", "call$1", "get$message", 2, 3, 205, 21],
    $eq: function(_, other) {
      if (other == null)
        return false;
      return this.get$start(this).$eq(0, J.get$start$x(other)) && this.end.$eq(0, other.get$end());
    },
    get$hashCode: function(_) {
      var t1, t2, t3, t4;
      t1 = this.get$start(this);
      t2 = t1.sourceUrl;
      t2 = t2.get$hashCode(t2);
      t1 = t1.offset;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t3 = this.end;
      t4 = t3.sourceUrl;
      t4 = t4.get$hashCode(t4);
      t3 = t3.offset;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return t2 + t1 + 31 * (t4 + t3);
    },
    toString$0: function(_) {
      var t1, t2, t3;
      t1 = "<" + H.S(new H.TypeImpl(H.getRuntimeTypeString(this), null)) + ": from ";
      t2 = this.get$start(this);
      t3 = this.end;
      return t1 + ("<" + H.S(new H.TypeImpl(H.getRuntimeTypeString(t2), null)) + ": " + H.S(t2.offset) + " " + t2.get$toolString() + ">") + " to " + ("<" + H.S(new H.TypeImpl(H.getRuntimeTypeString(t3), null)) + ": " + H.S(t3.offset) + " " + t3.get$toolString() + ">") + " \"" + H.S(this.text) + "\">";
    }
  }
}],
["stopwatch.interface", "package:purity_stopwatch_example/interface/i_stopwatch.dart", , N, {
  "^": "",
  registerStopwatchTranTypes: function() {
    if ($._stopwatchTranTypesRegistered)
      return;
    $._stopwatchTranTypesRegistered = true;
    B.registerTranTypes("stopwatch.interface", "si", new N.registerStopwatchTranTypes_closure());
  },
  registerStopwatchTranTypes_closure: {
    "^": "Closure:14;",
    call$0: function() {
      B.registerTranSubtype(C.Type_OqP, new N.registerStopwatchTranTypes__closure());
      B.registerTranSubtype(C.Type_4y3, new N.registerStopwatchTranTypes__closure0());
      B.registerTranSubtype(C.Type_AuK, new N.registerStopwatchTranTypes__closure1());
    },
    $isFunction: true
  },
  registerStopwatchTranTypes__closure: {
    "^": "Closure:14;",
    call$0: function() {
      var t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, null);
      B._registerTranTranTypes();
      return new N.DurationChange(t1);
    },
    $isFunction: true
  },
  registerStopwatchTranTypes__closure0: {
    "^": "Closure:14;",
    call$0: function() {
      var t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, null);
      B._registerTranTranTypes();
      return new N.Start(t1);
    },
    $isFunction: true
  },
  registerStopwatchTranTypes__closure1: {
    "^": "Closure:14;",
    call$0: function() {
      var t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, null);
      B._registerTranTranTypes();
      return new N.Stop(t1);
    },
    $isFunction: true
  },
  DurationChange: {
    "^": "Transmittable;_internal"
  },
  IDurationChange: {
    "^": "Object;duration*-206",
    static: {IDurationChange$: [function() {
        return new N.IDurationChange(null);
      }, null, null, 0, 0, 82, "new IDurationChange"]}
  },
  "+IDurationChange": [197],
  Start: {
    "^": "Transmittable;_internal"
  },
  Stop: {
    "^": "Transmittable;_internal"
  }
}],
["stopwatch.model", "package:purity_stopwatch_example/model/stopwatch.dart", , F, {
  "^": "",
  Stopwatch: {
    "^": "Source;_timer@-207,_du@-206,_core0$_this-191,_purityId-190,eventable$EventDetector$_typeIndexes-143,eventable$EventDetector$_emitterIndexes-144,eventable$EventEmitter$_actionQueues-152,eventable$EventEmitter$_emittingType-153",
    get$_isRunning: [function() {
      return this._timer != null;
    }, null, null, 1, 0, 115, "_isRunning"],
    set$_duration: [function(du) {
      var t1;
      this._du = P.Duration$(0, 0, 0, 0, 0, J.abs$0$n(du.get$inSeconds()));
      t1 = new N.DurationChange(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, null));
      B._registerTranTranTypes();
      t1.set$duration(0, this._du);
      t1.lock$0();
      X.EventEmitter.prototype.emitEvent$1.call(this, t1);
    }, null, null, 3, 0, 208, 209, [], "_duration"],
    start$0: [function(_) {
      var t1;
      if (this._timer == null) {
        this._timer = P.Timer_Timer$periodic(C.Duration_1000000, this.get$_handleTick());
        t1 = new N.Start(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, null));
        B._registerTranTranTypes();
        t1.lock$0();
        X.EventEmitter.prototype.emitEvent$1.call(this, t1);
      }
    }, "call$0", "get$start", 0, 0, 13, "start"],
    stop$0: [function(_) {
      var t1 = this._timer;
      if (t1 != null) {
        t1.cancel$0();
        this._timer = null;
        t1 = new N.Stop(P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, null));
        B._registerTranTranTypes();
        t1.lock$0();
        X.EventEmitter.prototype.emitEvent$1.call(this, t1);
      }
    }, "call$0", "get$stop", 0, 0, 13, "stop"],
    reset$0: [function(_) {
      this.stop$0(0);
      this.set$_duration(P.Duration$(0, 0, 0, 0, 0, 0));
    }, "call$0", "get$reset", 0, 0, 13, "reset"],
    _handleTick$1: [function(timer) {
      this.set$_duration(J.$add$ns(this._du, C.Duration_1000000));
    }, "call$1", "get$_handleTick", 2, 0, 210, 211, [], "_handleTick"],
    static: {Stopwatch$: [function() {
        var t1, t2;
        t1 = P.Duration$(0, 0, 0, 0, 0, 0);
        t2 = new F.ObjectId(null);
        t2.ObjectId$1$clientMode(false);
        N.registerStopwatchTranTypes();
        return new F.Stopwatch(null, t1, null, t2, null, null, null, null);
      }, null, null, 0, 0, 14, "new Stopwatch"]}
  },
  "+Stopwatch": [212, 213]
}],
["stopwatch.view", "package:purity_stopwatch_example/view/purity_stopwatch.dart", , B, {
  "^": "",
  PurityStopwatch: {
    "^": "PolymerElement_EventDetector_ChangeNotifier;_view$__$counter,consumer},stopButton,startButton,resetButton,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_change_notifier$_records,eventable$EventDetector$_typeIndexes-143,eventable$EventDetector$_emitterIndexes-144,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_change_notifier$_records,polymer$Polymer$_polymer$_element,polymer$Polymer$_namedObservers,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$_readied,polymer$Polymer$_jsElem,polymer$Polymer$_hasBeenAttached,polymer$Polymer$shadowRoots,polymer$Polymer$$,polymer$Polymer$_properties,polymer$Polymer$_polyfillScopeStyleCache",
    get$counter: function(receiver) {
      return receiver._view$__$counter;
    },
    set$counter: function(receiver, value) {
      receiver._view$__$counter = this.notifyPropertyChange$3(receiver, C.Symbol_counter, receiver._view$__$counter, value);
    },
    attached$0: function(receiver) {
      A.Polymer.prototype.attached$0.call(this, receiver);
      receiver.startButton = this.get$$$(receiver)._observable_map$_map.$index(0, "startButton");
      receiver.stopButton = this.get$$$(receiver)._observable_map$_map.$index(0, "stopButton");
      receiver.resetButton = this.get$$$(receiver)._observable_map$_map.$index(0, "resetButton");
    },
    detached$0: function(receiver) {
      A.Polymer.prototype.detached$0.call(this, receiver);
    },
    start$3: [function(receiver, e, detail, target) {
      receiver.consumer._src.start$0(0);
    }, "call$3", "get$start", 6, 0, 214, 2, [], 215, [], 216, []],
    stop$3: [function(receiver, e, detail, target) {
      receiver.consumer._src.stop$0(0);
    }, "call$3", "get$stop", 6, 0, 214, 2, [], 215, [], 216, []],
    reset$3: [function(receiver, e, detail, target) {
      var t1 = receiver.consumer._src;
      t1.stop$0(0);
      t1.set$_duration(P.Duration$(0, 0, 0, 0, 0, 0));
    }, "call$3", "get$reset", 6, 0, 214, 2, [], 215, [], 216, []],
    _initSourceBinding$0: function(receiver) {
      var t1;
      this.listen$3(receiver, receiver.consumer._src, C.Type_OqP, this.get$_handleDurationChange(receiver));
      t1 = receiver.consumer._src;
      t1.stop$0(0);
      t1.set$_duration(P.Duration$(0, 0, 0, 0, 0, 0));
    },
    _handleDurationChange$1: [function(receiver, e) {
      var t1, seconds, minutes, hours;
      t1 = J.get$duration$x(J.get$data$x(e));
      seconds = J.$mod$n(t1.get$inSeconds(), 60);
      seconds = J.$lt$n(seconds, 10) === true ? "0" + H.S(seconds) : H.S(seconds);
      minutes = J.$mod$n(t1.get$inMinutes(), 60);
      minutes = J.$lt$n(minutes, 10) === true ? "0" + H.S(minutes) : H.S(minutes);
      hours = t1.get$inHours();
      t1 = (J.$lt$n(hours, 10) === true ? "0" + H.S(hours) : H.S(hours)) + " : " + minutes + " : " + seconds;
      receiver._view$__$counter = this.notifyPropertyChange$3(receiver, C.Symbol_counter, receiver._view$__$counter, t1);
    }, "call$1", "get$_handleDurationChange", 2, 0, 217, 2, []],
    static: {PurityStopwatch$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, W.ShadowRoot);
        t2 = P.String;
        t3 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t2, null), null, null);
        t3.$builtinTypeInfo = [t2, null];
        t2 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        t4 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        receiver.polymer$Polymer$_observers = [];
        receiver.polymer$Polymer$_readied = false;
        receiver.polymer$Polymer$_hasBeenAttached = false;
        receiver.polymer$Polymer$shadowRoots = t1;
        receiver.polymer$Polymer$$ = t3;
        receiver.polymer$Polymer$_properties = t2;
        receiver.polymer$Polymer$_polyfillScopeStyleCache = t4;
        C.PurityStopwatch_methods.Element$created$0(receiver);
        C.PurityStopwatch_methods.PolymerElement$created$0(receiver);
        return receiver;
      }}
  },
  PolymerElement_EventDetector: {
    "^": "PolymerElement+EventDetector;_typeIndexes:eventable$EventDetector$_typeIndexes%-143,_emitterIndexes:eventable$EventDetector$_emitterIndexes%-144"
  },
  PolymerElement_EventDetector_ChangeNotifier: {
    "^": "PolymerElement_EventDetector+ChangeNotifier;",
    $isObservable: true
  },
  StopwatchConsumer: {
    "^": "Consumer;view,_src,eventable$EventDetector$_typeIndexes-143,eventable$EventDetector$_emitterIndexes-144",
    StopwatchConsumer$1: function(src) {
      var t1, t2;
      N.registerStopwatchTranTypes();
      t1 = this.view;
      t2 = J.getInterceptor$x(t1);
      t2.set$consumer(t1, this);
      t2._initSourceBinding$0(t1);
    }
  }
}],
["template_binding", "package:template_binding/template_binding.dart", , M, {
  "^": "",
  _createInstanceBindingMap: function(node, delegate) {
    var map, t1, c, children, index, childMap, t2;
    map = M._getBindings(node, delegate);
    if (map == null)
      map = new M._InstanceBindingMap([], null, null);
    for (t1 = J.getInterceptor$x(node), c = t1.get$firstChild(node), children = null, index = 0; c != null; c = J.get$nextNode$x(c), ++index) {
      childMap = M._createInstanceBindingMap(c, delegate);
      if (childMap == null)
        continue;
      if (children == null) {
        t2 = J.get$length$asx(t1.get$nodes(node));
        if (typeof t2 !== "number")
          return H.iae(t2);
        children = Array(t2);
      }
      if (index >= children.length)
        return H.ioore(children, index);
      children[index] = childMap;
    }
    map.children = children;
    return map;
  },
  _cloneAndBindInstance: function(node, $parent, stagingDocument, bindings, model, delegate, instanceBindings, instanceRecord) {
    var clone, c, t1, i;
    clone = J.append$1$x($parent, J.importNode$2$x(stagingDocument, node, false));
    for (c = J.get$firstChild$x(node), t1 = bindings != null, i = 0; c != null; c = J.get$nextNode$x(c), ++i)
      M._cloneAndBindInstance(c, clone, stagingDocument, t1 ? bindings.getChild$1(i) : null, model, delegate, instanceBindings, null);
    if (bindings.get$isTemplate() === true) {
      M.nodeBindFallback(clone)._decorate$1(node);
      if (delegate != null)
        J.set$bindingDelegate$x(M.nodeBindFallback(clone), delegate);
    }
    M._processBindings(clone, bindings, model, instanceBindings);
    return clone;
  },
  _dartToJsName: function(node, $name) {
    return !!J.getInterceptor(node).$isText && J.$eq($name, "text") ? "textContent" : $name;
  },
  jsObjectToBindable: function(obj) {
    var b;
    if (obj == null)
      return;
    b = J.$index$asx(obj, "__dartBindable");
    return !!J.getInterceptor(b).$isBindable ? b : new M._JsBindable(obj);
  },
  bindableToJsObject: function(bindable) {
    var zone, t1, t2;
    if (!!J.getInterceptor(bindable).$is_JsBindable)
      return bindable._js;
    zone = $.Zone__current;
    t1 = new M.bindableToJsObject_inZone(zone);
    t2 = new M.bindableToJsObject_inZoneUnary(zone);
    return P.JsObject_JsObject$jsify(P.LinkedHashMap_LinkedHashMap$_literal(["open", t2.call$1(new M.bindableToJsObject_closure(bindable)), "close", t1.call$1(new M.bindableToJsObject_closure0(bindable)), "discardChanges", t1.call$1(new M.bindableToJsObject_closure1(bindable)), "setValue", t2.call$1(new M.bindableToJsObject_closure2(bindable)), "deliver", t1.call$1(new M.bindableToJsObject_closure3(bindable)), "__dartBindable", bindable], null, null));
  },
  _getFragmentRoot: function(node) {
    var p;
    for (; p = J.get$parentNode$x(node), p != null; node = p)
      ;
    return node;
  },
  _searchRefId: function(node, id) {
    var selector, t1, values, instance, ref, t2;
    if (id == null || J.$eq(id, ""))
      return;
    selector = "#" + H.S(id);
    for (; true;) {
      node = M._getFragmentRoot(node);
      t1 = $.get$_instanceExtension();
      t1.toString;
      values = H.Primitives_getProperty(node, "expando$values");
      instance = values == null ? null : H.Primitives_getProperty(values, t1._getKey$0());
      t1 = instance == null;
      if (!t1 && instance.get$_protoContent() != null)
        ref = J.querySelector$1$x(instance.get$_protoContent(), selector);
      else {
        t2 = J.getInterceptor(node);
        ref = !!t2.$isDocument || !!t2.$isShadowRoot || !!t2.$isSvgSvgElement ? t2.getElementById$1(node, id) : null;
      }
      if (ref != null)
        return ref;
      if (t1)
        return;
      node = instance.get$_templateCreator();
      if (node == null)
        return;
    }
  },
  _getDelegateFactory: function($name, node, delegate) {
    if (delegate == null)
      return;
    return new M._getDelegateFactory_closure($name, node, delegate);
  },
  _getBindings: function(node, delegate) {
    var t1, tokens;
    t1 = J.getInterceptor(node);
    if (!!t1.$isElement)
      return M._parseAttributeBindings(node, delegate);
    if (!!t1.$isText) {
      tokens = S.MustacheTokens_parse(node.textContent, M._getDelegateFactory("text", node, delegate));
      if (tokens != null)
        return new M._InstanceBindingMap(["text", tokens], null, null);
    }
    return;
  },
  _parseWithDefault: function(element, $name, delegate) {
    var v = element.getAttribute($name);
    if (v === "")
      v = "{{}}";
    return S.MustacheTokens_parse(v, M._getDelegateFactory($name, element, delegate));
  },
  _parseAttributeBindings: function(element, delegate) {
    var t1, isTemplateNode, t2, bindings, result, t3;
    t1 = {};
    t1.bindings_0 = null;
    isTemplateNode = M.isSemanticTemplate(element);
    new W._ElementAttributeMap(element).forEach$1(0, new M._parseAttributeBindings_closure(t1, element, delegate, isTemplateNode));
    if (isTemplateNode) {
      t2 = t1.bindings_0;
      if (t2 == null) {
        bindings = [];
        t1.bindings_0 = bindings;
        t1 = bindings;
      } else
        t1 = t2;
      result = new M._TemplateBindingMap(null, null, null, t1, null, null);
      t1 = M._parseWithDefault(element, "if", delegate);
      result._if = t1;
      t2 = M._parseWithDefault(element, "bind", delegate);
      result._bind = t2;
      t3 = M._parseWithDefault(element, "repeat", delegate);
      result._repeat = t3;
      if (t1 != null && t2 == null && t3 == null)
        result._bind = S.MustacheTokens_parse("{{}}", M._getDelegateFactory("bind", element, delegate));
      return result;
    }
    t1 = t1.bindings_0;
    return t1 == null ? null : new M._InstanceBindingMap(t1, null, null);
  },
  _processOneTimeBinding: function($name, tokens, node, model) {
    var delegateFn, value, t1, t2, values, i, t3;
    if (tokens.get$hasOnePath() === true) {
      delegateFn = tokens.getPrepareBinding$1(0);
      value = delegateFn != null ? delegateFn.call$3(model, node, true) : tokens.getPath$1(0).getValueFrom$1(model);
      return tokens.get$isSimplePath() === true ? value : tokens.combinator$1(value);
    }
    t1 = J.getInterceptor$asx(tokens);
    t2 = t1.get$length(tokens);
    if (typeof t2 !== "number")
      return H.iae(t2);
    values = Array(t2);
    values.fixed$length = init;
    t2 = values.length;
    i = 0;
    while (true) {
      t3 = t1.get$length(tokens);
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (!(i < t3))
        break;
      delegateFn = tokens.getPrepareBinding$1(i);
      t3 = delegateFn != null ? delegateFn.call$3(model, node, false) : tokens.getPath$1(i).getValueFrom$1(model);
      if (i >= t2)
        return H.ioore(values, i);
      values[i] = t3;
      ++i;
    }
    return tokens.combinator$1(values);
  },
  _processBinding: function($name, tokens, node, model) {
    var delegateFn, observer, t1, i, t2, oneTime, value, path;
    if (tokens.get$onlyOneTime() === true)
      return M._processOneTimeBinding($name, tokens, node, model);
    if (tokens.get$hasOnePath() === true) {
      delegateFn = tokens.getPrepareBinding$1(0);
      observer = delegateFn != null ? delegateFn.call$3(model, node, false) : new L.PathObserver(L.PropertyPath_PropertyPath(tokens.getPath$1(0)), model, null, null, null, null, $._Observer__UNOPENED);
      return tokens.get$isSimplePath() === true ? observer : new Y.ObserverTransform(observer, tokens.get$combinator(), null, null, null);
    }
    observer = new L.CompoundObserver(null, false, [], null, null, null, $._Observer__UNOPENED);
    observer._path_observer$_value = [];
    t1 = J.getInterceptor$asx(tokens);
    i = 0;
    while (true) {
      t2 = t1.get$length(tokens);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (!(i < t2))
        break;
      c$0: {
        oneTime = tokens.getOneTime$1(i);
        delegateFn = tokens.getPrepareBinding$1(i);
        if (delegateFn != null) {
          value = delegateFn.call$3(model, node, oneTime);
          if (oneTime === true)
            observer.addPath$1(value);
          else
            observer.addObserver$1(value);
          break c$0;
        }
        path = tokens.getPath$1(i);
        if (oneTime === true)
          observer.addPath$1(path.getValueFrom$1(model));
        else
          observer.addPath$2(model, path);
      }
      ++i;
    }
    return new Y.ObserverTransform(observer, tokens.get$combinator(), null, null, null);
  },
  _processBindings: function(node, map, model, instanceBindings) {
    var t1, bindings, nodeExt, t2, t3, i, t4, $name, tokens, binding, templateExt, iter;
    t1 = J.getInterceptor$x(map);
    bindings = t1.get$bindings(map);
    nodeExt = !!J.getInterceptor(node).$isNodeBindExtension ? node : M.nodeBindFallback(node);
    t2 = J.getInterceptor$asx(bindings);
    t3 = J.getInterceptor$x(nodeExt);
    i = 0;
    while (true) {
      t4 = t2.get$length(bindings);
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (!(i < t4))
        break;
      $name = t2.$index(bindings, i);
      tokens = t2.$index(bindings, i + 1);
      binding = t3.bind$3$oneTime(nodeExt, $name, M._processBinding($name, tokens, node, model), tokens.get$onlyOneTime());
      if (binding != null && true)
        instanceBindings.push(binding);
      i += 2;
    }
    t3.bindFinished$0(nodeExt);
    if (!t1.$is_TemplateBindingMap)
      return;
    templateExt = M.nodeBindFallback(node);
    templateExt.set$_model(model);
    iter = templateExt._processBindingDirectives$1(map);
    if (iter != null && true)
      instanceBindings.push(iter);
  },
  nodeBindFallback: function(node) {
    var t1, values, extension, t2;
    t1 = $.get$_expando();
    t1.toString;
    values = H.Primitives_getProperty(node, "expando$values");
    extension = values == null ? null : H.Primitives_getProperty(values, t1._getKey$0());
    if (extension != null)
      return extension;
    t2 = J.getInterceptor(node);
    if (!!t2.$isElement)
      if (!(node.tagName === "TEMPLATE" && node.namespaceURI === "http://www.w3.org/1999/xhtml"))
        if (!(t2.get$attributes(node).containsKey$1("template") === true && C.Map_05U44.containsKey$1(t2.get$localName(node)) === true))
          t2 = node.tagName === "template" && t2.get$namespaceUri(node) === "http://www.w3.org/2000/svg";
        else
          t2 = true;
      else
        t2 = true;
    else
      t2 = false;
    extension = t2 ? new M.TemplateBindExtension(null, null, null, false, null, null, null, null, null, null, node, P.JsObject_JsObject$fromBrowserObject(node), null) : new M.NodeBindExtension(node, P.JsObject_JsObject$fromBrowserObject(node), null);
    t1.$indexSet(0, node, extension);
    return extension;
  },
  isSemanticTemplate: function(n) {
    var t1 = J.getInterceptor(n);
    if (!!t1.$isElement)
      if (!(n.tagName === "TEMPLATE" && n.namespaceURI === "http://www.w3.org/1999/xhtml"))
        if (!(t1.get$attributes(n).containsKey$1("template") === true && C.Map_05U44.containsKey$1(t1.get$localName(n)) === true))
          t1 = n.tagName === "template" && t1.get$namespaceUri(n) === "http://www.w3.org/2000/svg";
        else
          t1 = true;
      else
        t1 = true;
    else
      t1 = false;
    return t1;
  },
  BindingDelegate: {
    "^": "Object;_bindingMaps@",
    prepareBinding$3: function(path, $name, node) {
      return;
    },
    prepareInstanceModel$1: function(template) {
      return;
    },
    prepareInstancePositionChanged$1: function(template) {
      return;
    },
    static: {"^": "BindingDelegate__DEFAULT"}
  },
  _InstanceBindingMap: {
    "^": "Object;bindings>,children,content>",
    get$isTemplate: function() {
      return false;
    },
    getChild$1: function(index) {
      var t1 = this.children;
      if (t1 == null || index >= t1.length)
        return;
      if (index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    }
  },
  _TemplateBindingMap: {
    "^": "_InstanceBindingMap;_if,_bind,_repeat,bindings,children,content",
    get$isTemplate: function() {
      return true;
    },
    $is_TemplateBindingMap: true
  },
  NodeBindExtension: {
    "^": "Object;_node<,_js,_templateInstance?",
    get$bindings: function(_) {
      var b = J.$index$asx(this._js, "bindings_");
      if (b == null)
        return;
      return new M._NodeBindingsMap(this.get$_node(), b);
    },
    set$bindings: function(_, value) {
      var b = this.get$bindings(this);
      if (b == null) {
        J.$indexSet$ax(this._js, "bindings_", P.JsObject_JsObject$jsify(P.LinkedHashMap_LinkedHashMap$_empty(null, null)));
        b = this.get$bindings(this);
      }
      b.addAll$1(0, value);
    },
    bind$3$oneTime: function(_, $name, value, oneTime) {
      $name = M._dartToJsName(this.get$_node(), $name);
      if (oneTime !== true && !!J.getInterceptor(value).$isBindable)
        value = M.bindableToJsObject(value);
      return M.jsObjectToBindable(this._js.callMethod$2("bind", [$name, value, oneTime]));
    },
    bindFinished$0: function(_) {
      return this._js.callMethod$1("bindFinished");
    },
    get$templateInstance: function(_) {
      var t1 = this._templateInstance;
      if (t1 != null)
        ;
      else if (J.get$parent$x(this.get$_node()) != null) {
        t1 = J.get$parent$x(this.get$_node());
        t1 = J.get$templateInstance$x(!!J.getInterceptor(t1).$isNodeBindExtension ? t1 : M.nodeBindFallback(t1));
      } else
        t1 = null;
      return t1;
    },
    $isNodeBindExtension: true
  },
  _NodeBindingsMap: {
    "^": "MapBase;_node<,_bindings<",
    get$keys: function() {
      return J.map$1$ax(J.$index$asx($.get$context(), "Object").callMethod$2("keys", [this._bindings]), new M._NodeBindingsMap_keys_closure(this));
    },
    $index: function(_, $name) {
      if (!!J.getInterceptor(this._node).$isText && J.$eq($name, "text"))
        $name = "textContent";
      return M.jsObjectToBindable(J.$index$asx(this._bindings, $name));
    },
    $indexSet: function(_, $name, value) {
      if (!!J.getInterceptor(this._node).$isText && J.$eq($name, "text"))
        $name = "textContent";
      J.$indexSet$ax(this._bindings, $name, M.bindableToJsObject(value));
    },
    remove$1: [function(_, $name) {
      var t1, t2, old;
      t1 = this._node;
      $name = M._dartToJsName(t1, $name);
      t2 = this._bindings;
      old = M.jsObjectToBindable(J.$index$asx(t2, M._dartToJsName(t1, $name)));
      t2.deleteProperty$1($name);
      return old;
    }, "call$1", "get$remove", 2, 0, 218, 62, []],
    clear$0: function(_) {
      J.forEach$1$ax(this.get$keys(), this.get$remove(this));
    },
    $asMapBase: function() {
      return [P.String, A.Bindable];
    },
    $asMap: function() {
      return [P.String, A.Bindable];
    }
  },
  _NodeBindingsMap_keys_closure: {
    "^": "Closure:54;this_0",
    call$1: [function($name) {
      return !!J.getInterceptor(this.this_0._node).$isText && J.$eq($name, "textContent") ? "text" : $name;
    }, "call$1", null, 2, 0, null, 62, [], "call"],
    $isFunction: true
  },
  _JsBindable: {
    "^": "Bindable;_js",
    open$1: function(_, callback) {
      return this._js.callMethod$2("open", [$.Zone__current.bindUnaryCallback$1(callback)]);
    },
    close$0: function(_) {
      return this._js.callMethod$1("close");
    },
    get$value: function(_) {
      return this._js.callMethod$1("discardChanges");
    },
    set$value: function(_, newValue) {
      this._js.callMethod$2("setValue", [newValue]);
    },
    deliver$0: function() {
      return this._js.callMethod$1("deliver");
    },
    $is_JsBindable: true
  },
  bindableToJsObject_inZone: {
    "^": "Closure:54;zone_0",
    call$1: function(f) {
      return this.zone_0.bindCallback$2$runGuarded(f, false);
    },
    $isFunction: true
  },
  bindableToJsObject_inZoneUnary: {
    "^": "Closure:54;zone_1",
    call$1: function(f) {
      return this.zone_1.bindUnaryCallback$2$runGuarded(f, false);
    },
    $isFunction: true
  },
  bindableToJsObject_closure: {
    "^": "Closure:54;bindable_2",
    call$1: [function(callback) {
      return J.open$1$x(this.bindable_2, new M.bindableToJsObject__closure(callback));
    }, "call$1", null, 2, 0, null, 39, [], "call"],
    $isFunction: true
  },
  bindableToJsObject__closure: {
    "^": "Closure:54;callback_3",
    call$1: [function(x) {
      return this.callback_3.apply$1([x]);
    }, "call$1", null, 2, 0, null, 159, [], "call"],
    $isFunction: true
  },
  bindableToJsObject_closure0: {
    "^": "Closure:14;bindable_4",
    call$0: [function() {
      return J.close$0$x(this.bindable_4);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  bindableToJsObject_closure1: {
    "^": "Closure:14;bindable_5",
    call$0: [function() {
      return J.get$value$x(this.bindable_5);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  bindableToJsObject_closure2: {
    "^": "Closure:54;bindable_6",
    call$1: [function(x) {
      J.set$value$x(this.bindable_6, x);
      return x;
    }, "call$1", null, 2, 0, null, 159, [], "call"],
    $isFunction: true
  },
  bindableToJsObject_closure3: {
    "^": "Closure:14;bindable_7",
    call$0: [function() {
      return this.bindable_7.deliver$0();
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  TemplateInstance: {
    "^": "Object;model>,_firstNode,_lastNode"
  },
  TemplateBindExtension: {
    "^": "NodeBindExtension;_model?,_bindingDelegate,_template_binding$_iterator<,_setModelScheduled,_templateInstanceRef?,_content?,_templateIsDecorated?,_stagingDocument,_bindingMap,_refContent,_node,_js,_templateInstance",
    get$_node: function() {
      return this._node;
    },
    bind$3$oneTime: function(_, $name, value, oneTime) {
      var t1, ref;
      if (!J.$eq($name, "ref"))
        return M.NodeBindExtension.prototype.bind$3$oneTime.call(this, this, $name, value, oneTime);
      t1 = oneTime === true;
      ref = t1 ? value : J.open$1$x(value, new M.TemplateBindExtension_bind_closure(this));
      J.$indexSet$ax(J.get$attributes$x(this._node), "ref", ref);
      this._refChanged$0();
      if (t1)
        return;
      if (this.get$bindings(this) == null)
        this.set$bindings(0, P.LinkedHashMap_LinkedHashMap$_empty(null, null));
      t1 = this.get$bindings(this);
      J.$indexSet$ax(t1._bindings, M._dartToJsName(t1._node, "ref"), M.bindableToJsObject(value));
      return value;
    },
    _processBindingDirectives$1: function(directives) {
      var t1 = this._template_binding$_iterator;
      if (t1 != null)
        t1._closeDependencies$0();
      if (directives._if == null && directives._bind == null && directives._repeat == null) {
        t1 = this._template_binding$_iterator;
        if (t1 != null) {
          t1.close$0(0);
          this._template_binding$_iterator = null;
        }
        return;
      }
      t1 = this._template_binding$_iterator;
      if (t1 == null) {
        t1 = new M._TemplateIterator(this, [], [], null, false, null, null, null, null, null, null, null, false, null, null);
        this._template_binding$_iterator = t1;
      }
      t1._updateDependencies$2(directives, this._model);
      J.observe$3$attributeFilter$attributes$x($.get$TemplateBindExtension__templateObserver(), this._node, ["ref"], true);
      return this._template_binding$_iterator;
    },
    createInstance$2: function(_, model, delegate) {
      var t1, t2, delegate0, t3, map, owner, doc, instance, instanceExt, t4, instanceRecord, c, i, collectTerminator, childMap, clone;
      if (delegate == null)
        delegate = this._bindingDelegate;
      t1 = this._refContent;
      if (t1 == null) {
        t1 = this.get$_ref();
        t1 = J.get$content$x(!!J.getInterceptor(t1).$isNodeBindExtension ? t1 : M.nodeBindFallback(t1));
        this._refContent = t1;
      }
      t2 = J.getInterceptor$x(t1);
      if (t2.get$firstChild(t1) == null)
        return $.get$_emptyInstance();
      delegate0 = delegate == null ? $.get$BindingDelegate__DEFAULT() : delegate;
      if (delegate0.get$_bindingMaps() == null) {
        t3 = new P.Expando(null);
        t3.$builtinTypeInfo = [null];
        delegate0.set$_bindingMaps(t3);
      }
      map = J.$index$asx(delegate0.get$_bindingMaps(), t1);
      if (map == null) {
        map = M._createInstanceBindingMap(t1, delegate0);
        J.$indexSet$ax(delegate0.get$_bindingMaps(), t1, map);
      }
      t3 = this._stagingDocument;
      if (t3 == null) {
        owner = J.get$ownerDocument$x(this._node);
        t3 = $.get$TemplateBindExtension__ownerStagingDocument();
        doc = t3.$index(0, owner);
        if (doc == null) {
          doc = J.createHtmlDocument$1$x(J.get$implementation$x(owner), "");
          $.get$_isStagingDocument().$indexSet(0, doc, true);
          M.TemplateBindExtension__baseUriWorkaround(doc);
          t3.$indexSet(0, owner, doc);
        }
        this._stagingDocument = doc;
        t3 = doc;
      }
      instance = J.createDocumentFragment$0$x(t3);
      t3 = [];
      instanceExt = new M._InstanceExtension(t3, null, null, null);
      t4 = $.get$_instanceExtension();
      instanceExt._templateCreator = this._node;
      instanceExt._protoContent = t1;
      t4.$indexSet(0, instance, instanceExt);
      instanceRecord = new M.TemplateInstance(model, null, null);
      M.nodeBindFallback(instance).set$_templateInstance(instanceRecord);
      for (c = t2.get$firstChild(t1), t1 = map != null, i = 0, collectTerminator = false; c != null; c = t2.get$nextNode(c), ++i) {
        t2 = J.getInterceptor$x(c);
        if (t2.get$nextNode(c) == null)
          collectTerminator = true;
        childMap = t1 ? map.getChild$1(i) : null;
        clone = M._cloneAndBindInstance(c, instance, this._stagingDocument, childMap, model, delegate, t3, null);
        M.nodeBindFallback(clone).set$_templateInstance(instanceRecord);
        if (collectTerminator)
          instanceExt._terminator = clone;
      }
      t1 = J.getInterceptor$x(instance);
      instanceRecord._firstNode = t1.get$firstChild(instance);
      instanceRecord._lastNode = t1.get$lastChild(instance);
      instanceExt._protoContent = null;
      instanceExt._templateCreator = null;
      return instance;
    },
    get$model: function(_) {
      return this._model;
    },
    get$bindingDelegate: function(_) {
      return this._bindingDelegate;
    },
    set$bindingDelegate: function(_, value) {
      var t1;
      if (this._bindingDelegate != null)
        throw H.wrapException(P.StateError$("Template must be cleared before a new bindingDelegate can be assigned"));
      this._bindingDelegate = value;
      this._bindingMap = null;
      t1 = this._template_binding$_iterator;
      if (t1 != null) {
        t1._initPrepareFunctions = false;
        t1._instanceModelFn = null;
        t1._instancePositionChangedFn = null;
      }
    },
    _refChanged$0: function() {
      var t1, t2;
      if (this._template_binding$_iterator != null) {
        t1 = this._refContent;
        t2 = this.get$_ref();
        t1 = J.$eq(t1, J.get$content$x(!!J.getInterceptor(t2).$isNodeBindExtension ? t2 : M.nodeBindFallback(t2)));
      } else
        t1 = true;
      if (t1)
        return;
      this._refContent = null;
      this._template_binding$_iterator._valueChanged$1(null);
      t1 = this._template_binding$_iterator;
      t1._updateIteratedValue$1(t1._getUpdatedValue$0());
    },
    clear$0: function(_) {
      var ref, t1;
      this._model = null;
      this._bindingDelegate = null;
      if (this.get$bindings(this) != null) {
        ref = this.get$bindings(this).remove$1(0, "ref");
        if (ref != null)
          ref.close$0(0);
      }
      this._refContent = null;
      t1 = this._template_binding$_iterator;
      if (t1 == null)
        return;
      t1._valueChanged$1(null);
      this._template_binding$_iterator.close$0(0);
      this._template_binding$_iterator = null;
    },
    get$_ref: function() {
      var ref, nextRef;
      this._decorate$0();
      ref = M._searchRefId(this._node, J.$index$asx(J.get$attributes$x(this._node), "ref"));
      if (ref == null) {
        ref = this._templateInstanceRef;
        if (ref == null)
          return this._node;
      }
      nextRef = M.nodeBindFallback(ref).get$_ref();
      return nextRef != null ? nextRef : ref;
    },
    get$content: function(_) {
      var t1;
      this._decorate$0();
      t1 = this._content;
      return t1 != null ? t1 : H.interceptedTypeCast(this._node, "$isTemplateElement").content;
    },
    _decorate$1: function(instanceRef) {
      var isNativeHtmlTemplate, liftContents, t1, t2, templateElementExt, liftRoot, template, t3;
      if (this._templateIsDecorated === true)
        return false;
      M.TemplateBindExtension__injectStylesheet();
      M.TemplateBindExtension__globalBaseUriWorkaround();
      this._templateIsDecorated = true;
      isNativeHtmlTemplate = !!J.getInterceptor(this._node).$isTemplateElement;
      liftContents = !isNativeHtmlTemplate;
      if (liftContents) {
        t1 = this._node;
        t2 = J.getInterceptor$x(t1);
        if (t2.get$attributes(t1).containsKey$1("template") === true && C.Map_05U44.containsKey$1(t2.get$localName(t1)) === true) {
          if (instanceRef != null)
            throw H.wrapException(P.ArgumentError$("instanceRef should not be supplied for attribute templates."));
          templateElementExt = M.TemplateBindExtension__extractTemplateFromAttributeTemplate(this._node);
          templateElementExt = !!J.getInterceptor(templateElementExt).$isNodeBindExtension ? templateElementExt : M.nodeBindFallback(templateElementExt);
          templateElementExt.set$_templateIsDecorated(true);
          isNativeHtmlTemplate = !!J.getInterceptor(templateElementExt.get$_node()).$isTemplateElement;
          liftRoot = true;
        } else {
          t1 = this._node;
          t2 = J.getInterceptor$x(t1);
          if (J.$eq(t2.get$tagName(t1), "template") && J.$eq(t2.get$namespaceUri(t1), "http://www.w3.org/2000/svg")) {
            t1 = this._node;
            t2 = J.getInterceptor$x(t1);
            template = J.createElement$1$x(t2.get$ownerDocument(t1), "template");
            J.insertBefore$2$x(t2.get$parentNode(t1), template, t1);
            t3 = J.getInterceptor$x(template);
            J.addAll$1$ax(t3.get$attributes(template), t2.get$attributes(t1));
            J.clear$0$ax(t2.get$attributes(t1));
            t2.remove$0(t1);
            templateElementExt = !!t3.$isNodeBindExtension ? template : M.nodeBindFallback(template);
            templateElementExt.set$_templateIsDecorated(true);
            isNativeHtmlTemplate = !!J.getInterceptor(templateElementExt.get$_node()).$isTemplateElement;
          } else {
            templateElementExt = this;
            isNativeHtmlTemplate = false;
          }
          liftRoot = false;
        }
      } else {
        templateElementExt = this;
        liftRoot = false;
      }
      if (!isNativeHtmlTemplate)
        templateElementExt.set$_content(J.createDocumentFragment$0$x(M.TemplateBindExtension__getOrCreateTemplateContentsOwner(templateElementExt.get$_node())));
      if (instanceRef != null)
        templateElementExt.set$_templateInstanceRef(instanceRef);
      else if (liftContents)
        M.TemplateBindExtension__liftNonNativeChildrenIntoContent(templateElementExt, this._node, liftRoot);
      else
        M.TemplateBindExtension_bootstrap(J.get$content$x(templateElementExt));
      return true;
    },
    _decorate$0: function() {
      return this._decorate$1(null);
    },
    $isTemplateBindExtension: true,
    static: {"^": "TemplateBindExtension__contentsOwner,TemplateBindExtension__ownerStagingDocument,TemplateBindExtension__allTemplatesSelectors,TemplateBindExtension__initStyles,TemplateBindExtension__initBaseUriWorkaround,TemplateBindExtension__templateObserver", TemplateBindExtension__getOrCreateTemplateContentsOwner: function(template) {
        var doc, t1, d;
        doc = J.get$ownerDocument$x(template);
        t1 = J.getInterceptor$x(doc);
        if (t1.get$window(doc) == null)
          return doc;
        d = $.get$TemplateBindExtension__contentsOwner().$index(0, doc);
        if (d == null) {
          d = J.createHtmlDocument$1$x(t1.get$implementation(doc), "");
          for (t1 = J.getInterceptor$x(d); t1.get$lastChild(d) != null;)
            J.remove$0$ax(t1.get$lastChild(d));
          $.get$TemplateBindExtension__contentsOwner().$indexSet(0, doc, d);
        }
        return d;
      }, TemplateBindExtension__extractTemplateFromAttributeTemplate: function(el) {
        var t1, template, t2, t3, $name;
        t1 = J.getInterceptor$x(el);
        template = J.createElement$1$x(t1.get$ownerDocument(el), "template");
        J.insertBefore$2$x(t1.get$parentNode(el), template, el);
        for (t2 = J.get$iterator$ax(J.toList$0$ax(t1.get$attributes(el).get$keys())), t3 = J.getInterceptor$x(template); t2.moveNext$0() === true;) {
          $name = t2.get$current();
          switch ($name) {
            case "template":
              J.remove$1$ax(t1.get$attributes(el), $name);
              break;
            case "repeat":
            case "bind":
            case "ref":
              J.$indexSet$ax(t3.get$attributes(template), $name, J.remove$1$ax(t1.get$attributes(el), $name));
              break;
          }
        }
        return template;
      }, TemplateBindExtension__liftNonNativeChildrenIntoContent: function(template, el, useRoot) {
        var $content, t1, t2, child;
        $content = J.get$content$x(template);
        if (useRoot) {
          J.append$1$x($content, el);
          return;
        }
        for (t1 = J.getInterceptor$x(el), t2 = J.getInterceptor$x($content); child = t1.get$firstChild(el), child != null;)
          t2.append$1($content, child);
      }, TemplateBindExtension_bootstrap: function($content) {
        var t1, descendents;
        t1 = new M.TemplateBindExtension_bootstrap__bootstrap();
        descendents = J.querySelectorAll$1$x($content, $.get$TemplateBindExtension__allTemplatesSelectors());
        if (M.isSemanticTemplate($content))
          t1.call$1($content);
        J.forEach$1$ax(descendents, t1);
      }, TemplateBindExtension__injectStylesheet: function() {
        if ($.TemplateBindExtension__initStyles === true)
          return;
        $.TemplateBindExtension__initStyles = true;
        var style = document.createElement("style", null);
        style.textContent = H.S($.get$TemplateBindExtension__allTemplatesSelectors()) + " { display: none; }";
        document.head.appendChild(style);
      }, TemplateBindExtension__globalBaseUriWorkaround: function() {
        var t, d;
        if ($.TemplateBindExtension__initBaseUriWorkaround === true)
          return;
        $.TemplateBindExtension__initBaseUriWorkaround = true;
        t = document.createElement("template", null);
        if (!!J.getInterceptor(t).$isTemplateElement) {
          d = t.content.ownerDocument;
          if (d.documentElement == null)
            d.appendChild(d.createElement("html", null)).appendChild(d.createElement("head", null));
          if (J.get$head$x(d).querySelector("base") == null)
            M.TemplateBindExtension__baseUriWorkaround(d);
        }
      }, TemplateBindExtension__baseUriWorkaround: function(doc) {
        var t1, base;
        t1 = J.getInterceptor$x(doc);
        base = t1.createElement$1(doc, "base");
        J.set$href$x(base, document.baseURI);
        J.append$1$x(t1.get$head(doc), base);
      }}
  },
  TemplateBindExtension_bind_closure: {
    "^": "Closure:54;this_0",
    call$1: [function(ref) {
      var t1 = this.this_0;
      J.$indexSet$ax(J.get$attributes$x(t1._node), "ref", ref);
      t1._refChanged$0();
    }, "call$1", null, 2, 0, null, 219, [], "call"],
    $isFunction: true
  },
  TemplateBindExtension_bootstrap__bootstrap: {
    "^": "Closure:18;",
    call$1: [function(template) {
      if (M.nodeBindFallback(template)._decorate$1(null) !== true)
        M.TemplateBindExtension_bootstrap(J.get$content$x(!!J.getInterceptor(template).$isNodeBindExtension ? template : M.nodeBindFallback(template)));
    }, "call$1", null, 2, 0, null, 220, [], "call"],
    $isFunction: true
  },
  closure6: {
    "^": "Closure:54;",
    call$1: [function(k) {
      return H.S(k) + "[template]";
    }, "call$1", null, 2, 0, null, 121, [], "call"],
    $isFunction: true
  },
  closure8: {
    "^": "Closure:94;",
    call$2: [function(records, _) {
      var t1;
      for (t1 = J.get$iterator$ax(records); t1.moveNext$0() === true;)
        M.nodeBindFallback(J.get$target$x(t1.get$current()))._refChanged$0();
    }, "call$2", null, 4, 0, null, 163, [], 108, [], "call"],
    $isFunction: true
  },
  closure9: {
    "^": "Closure:14;",
    call$0: function() {
      var empty = document.createDocumentFragment();
      $.get$_instanceExtension().$indexSet(0, empty, new M._InstanceExtension([], null, null, null));
      return empty;
    },
    $isFunction: true
  },
  _InstanceExtension: {
    "^": "Object;_bindings<,_terminator<,_templateCreator<,_protoContent<"
  },
  _getDelegateFactory_closure: {
    "^": "Closure:54;name_0,node_1,delegate_2",
    call$1: function(pathString) {
      return this.delegate_2.prepareBinding$3(pathString, this.name_0, this.node_1);
    },
    $isFunction: true
  },
  _parseAttributeBindings_closure: {
    "^": "Closure:94;box_0,element_1,delegate_2,isTemplateNode_3",
    call$2: function($name, value) {
      var t1, tokens, t2, bindings;
      for (; t1 = J.getInterceptor$asx($name), J.$eq(t1.$index($name, 0), "_");)
        $name = t1.substring$1($name, 1);
      if (this.isTemplateNode_3)
        t1 = t1.$eq($name, "bind") || t1.$eq($name, "if") || t1.$eq($name, "repeat");
      else
        t1 = false;
      if (t1)
        return;
      tokens = S.MustacheTokens_parse(value, M._getDelegateFactory($name, this.element_1, this.delegate_2));
      if (tokens != null) {
        t1 = this.box_0;
        t2 = t1.bindings_0;
        if (t2 == null) {
          bindings = [];
          t1.bindings_0 = bindings;
          t1 = bindings;
        } else
          t1 = t2;
        t1.push($name);
        t1.push(tokens);
      }
    },
    $isFunction: true
  },
  _TemplateIterator: {
    "^": "Bindable;_templateExt,_instances,_iteratedValue,_presentValue,_closed,_ifValue,_template_binding$_value,_hasIf,_hasRepeat,_ifOneTime,_oneTime,_listSub,_initPrepareFunctions,_instanceModelFn,_instancePositionChangedFn",
    _instanceModelFn$1: function(arg0) {
      return this._instanceModelFn.call$1(arg0);
    },
    _instancePositionChangedFn$2: function(arg0, arg1) {
      return this._instancePositionChangedFn.call$2(arg0, arg1);
    },
    open$1: function(_, callback) {
      return H.throwExpression(P.StateError$("binding already opened"));
    },
    get$value: function(_) {
      return this._template_binding$_value;
    },
    _closeDependencies$0: function() {
      var t1, t2;
      t1 = this._ifValue;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isBindable) {
        t2.close$0(t1);
        this._ifValue = null;
      }
      t1 = this._template_binding$_value;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isBindable) {
        t2.close$0(t1);
        this._template_binding$_value = null;
      }
    },
    _updateDependencies$2: function(directives, model) {
      var template, t1, t2, ifValue, value;
      this._closeDependencies$0();
      template = this._templateExt._node;
      t1 = directives._if;
      t2 = t1 != null;
      this._hasIf = t2;
      this._hasRepeat = directives._repeat != null;
      if (t2) {
        this._ifOneTime = t1.onlyOneTime;
        ifValue = M._processBinding("if", t1, template, model);
        this._ifValue = ifValue;
        t1 = this._ifOneTime === true;
        if (t1)
          t2 = !(null != ifValue && false !== ifValue);
        else
          t2 = false;
        if (t2) {
          this._valueChanged$1(null);
          return;
        }
        if (!t1)
          ifValue = H.interceptedTypeCast(ifValue, "$isBindable").open$1(0, this.get$_updateIfValue());
      } else
        ifValue = true;
      if (this._hasRepeat === true) {
        t1 = directives._repeat;
        this._oneTime = t1.onlyOneTime;
        t1 = M._processBinding("repeat", t1, template, model);
        this._template_binding$_value = t1;
        value = t1;
      } else {
        t1 = directives._bind;
        this._oneTime = t1.onlyOneTime;
        t1 = M._processBinding("bind", t1, template, model);
        this._template_binding$_value = t1;
        value = t1;
      }
      if (this._oneTime !== true)
        value = J.open$1$x(value, this.get$_updateIteratedValue());
      if (!(null != ifValue && false !== ifValue)) {
        this._valueChanged$1(null);
        return;
      }
      this._updateValue$1(value);
    },
    _getUpdatedValue$0: function() {
      var value, t1;
      value = this._template_binding$_value;
      t1 = this._oneTime;
      return !(null != t1 && t1) ? J.get$value$x(value) : value;
    },
    _updateIfValue$1: [function(ifValue) {
      if (!(null != ifValue && false !== ifValue)) {
        this._valueChanged$1(null);
        return;
      }
      this._updateValue$1(this._getUpdatedValue$0());
    }, "call$1", "get$_updateIfValue", 2, 0, 18, 221, []],
    _updateIteratedValue$1: [function(value) {
      var ifValue;
      if (this._hasIf === true) {
        ifValue = this._ifValue;
        if (this._ifOneTime !== true) {
          H.interceptedTypeCast(ifValue, "$isBindable");
          ifValue = ifValue.get$value(ifValue);
        }
        if (!(null != ifValue && false !== ifValue)) {
          this._valueChanged$1([]);
          return;
        }
      }
      this._updateValue$1(value);
    }, "call$1", "get$_updateIteratedValue", 2, 0, 18, 19, []],
    _updateValue$1: function(value) {
      this._valueChanged$1(this._hasRepeat !== true ? [value] : value);
    },
    _valueChanged$1: function(value) {
      var t1, t2;
      t1 = J.getInterceptor(value);
      if (!t1.$isList)
        value = !!t1.$isIterable ? t1.toList$0(value) : [];
      t1 = this._iteratedValue;
      if (value === t1)
        return;
      this._unobserve$0();
      this._presentValue = value;
      t2 = this._presentValue;
      t2 = t2 != null ? t2 : [];
      this._handleSplices$1(G.calcSplices(t2, 0, J.get$length$asx(t2), t1, 0, t1.length));
    },
    _getLastInstanceNode$1: function(index) {
      var t1, t2, terminator, subtemplateIterator;
      if (J.$eq(index, -1))
        return this._templateExt._node;
      t1 = $.get$_instanceExtension();
      t2 = this._instances;
      if (index >>> 0 !== index || index >= t2.length)
        return H.ioore(t2, index);
      terminator = t1.$index(0, t2[index]).get$_terminator();
      if (terminator == null)
        return this._getLastInstanceNode$1(index - 1);
      if (!M.isSemanticTemplate(terminator) || terminator === this._templateExt._node)
        return terminator;
      subtemplateIterator = M.nodeBindFallback(terminator).get$_template_binding$_iterator();
      if (subtemplateIterator == null)
        return terminator;
      return subtemplateIterator._getLastTemplateNode$0();
    },
    _getLastTemplateNode$0: function() {
      return this._getLastInstanceNode$1(this._instances.length - 1);
    },
    _extractInstanceAt$1: function(index) {
      var previousInstanceLast, lastNode, instance, t1, t2, node, t3;
      previousInstanceLast = this._getLastInstanceNode$1(J.$sub$n(index, 1));
      lastNode = this._getLastInstanceNode$1(index);
      J.get$parentNode$x(this._templateExt._node);
      instance = C.JSArray_methods.removeAt$1(this._instances, index);
      for (t1 = J.getInterceptor$x(instance), t2 = J.getInterceptor$x(previousInstanceLast); !J.$eq(lastNode, previousInstanceLast);) {
        node = t2.get$nextNode(previousInstanceLast);
        t3 = J.getInterceptor(node);
        if (t3.$eq(node, lastNode))
          lastNode = previousInstanceLast;
        t3.remove$0(node);
        t1.append$1(instance, node);
      }
      return instance;
    },
    _handleSplices$1: function(splices) {
      var delegate, model, instance, e, s, t1, template, t2, delegate0, instanceCache, t3, removeDelta, splice, t4, t5, model0, instance0, addIndex, exception, t6, previousInstanceLast, $parent;
      if (this._closed || splices.length === 0)
        return;
      t1 = this._templateExt;
      template = t1._node;
      if (J.get$parentNode$x(template) == null) {
        this.close$0(0);
        return;
      }
      t2 = this._iteratedValue;
      Q.ObservableList_applyChangeRecords(t2, this._presentValue, splices);
      delegate = t1._bindingDelegate;
      if (!this._initPrepareFunctions) {
        this._initPrepareFunctions = true;
        delegate0 = J.get$bindingDelegate$x(!!J.getInterceptor(t1._node).$isTemplateBindExtension ? t1._node : t1);
        if (delegate0 != null) {
          this._instanceModelFn = delegate0.prepareInstanceModel$1(template);
          this._instancePositionChangedFn = delegate0.prepareInstancePositionChanged$1(template);
        }
      }
      instanceCache = P.HashMap_HashMap(P.identical$closure(), null, null, null, null);
      t3 = new H.ListIterator(splices, splices.length, 0, null);
      t3.$builtinTypeInfo = [H.getTypeArgumentByIndex(splices, 0)];
      removeDelta = 0;
      for (; t3.moveNext$0();) {
        splice = t3._current;
        for (t4 = J.get$iterator$ax(splice.get$removed()), t5 = J.getInterceptor$x(splice); t4.moveNext$0() === true;) {
          model0 = t4.get$current();
          instance0 = this._extractInstanceAt$1(J.$add$ns(t5.get$index(splice), removeDelta));
          if (!J.$eq(instance0, $.get$_emptyInstance()))
            instanceCache.$indexSet(0, model0, instance0);
        }
        t4 = splice.get$addedCount();
        if (typeof t4 !== "number")
          return H.iae(t4);
        removeDelta -= t4;
      }
      t3 = new H.ListIterator(splices, splices.length, 0, null);
      t3.$builtinTypeInfo = [H.getTypeArgumentByIndex(splices, 0)];
      for (; t3.moveNext$0();) {
        splice = t3._current;
        for (t4 = J.getInterceptor$x(splice), addIndex = t4.get$index(splice); J.$lt$n(addIndex, J.$add$ns(t4.get$index(splice), splice.get$addedCount())) === true; ++addIndex) {
          if (addIndex >>> 0 !== addIndex || addIndex >= t2.length)
            return H.ioore(t2, addIndex);
          model = t2[addIndex];
          instance = instanceCache.remove$1(0, model);
          if (instance == null)
            try {
              if (this._instanceModelFn != null)
                model = this._instanceModelFn$1(model);
              if (model == null)
                instance = $.get$_emptyInstance();
              else
                instance = t1.createInstance$2(0, model, delegate);
            } catch (exception) {
              t5 = H.unwrapException(exception);
              e = t5;
              s = new H._StackTrace(exception, null);
              t5 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
              t5.$builtinTypeInfo = [null];
              new P._AsyncCompleter(t5).$builtinTypeInfo = [null];
              t6 = e;
              if (t6 == null)
                H.throwExpression(P.ArgumentError$("Error must not be null"));
              if (t5._state !== 0)
                H.throwExpression(P.StateError$("Future already completed"));
              t5._asyncCompleteError$2(t6, s);
              instance = $.get$_emptyInstance();
            }

          t5 = instance;
          previousInstanceLast = this._getLastInstanceNode$1(addIndex - 1);
          $parent = J.get$parentNode$x(t1._node);
          C.JSArray_methods.insert$2(this._instances, addIndex, t5);
          J.insertBefore$2$x($parent, t5, J.get$nextNode$x(previousInstanceLast));
        }
      }
      t1 = instanceCache.get$values(instanceCache);
      t2 = new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)];
      for (; t2.moveNext$0();)
        this._closeInstanceBindings$1(t2._current);
      if (this._instancePositionChangedFn != null)
        this._reportInstancesMoved$1(splices);
    },
    _reportInstanceMoved$1: function(index) {
      var t1, instance;
      t1 = this._instances;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      instance = t1[index];
      t1 = J.getInterceptor(instance);
      if (t1.$eq(instance, $.get$_emptyInstance()))
        return;
      this._instancePositionChangedFn$2(J.get$templateInstance$x(!!t1.$isNodeBindExtension ? instance : M.nodeBindFallback(instance)), index);
    },
    _reportInstancesMoved$1: function(splices) {
      var t1, index, offset, splice, t2, t3, $length;
      t1 = new H.ListIterator(splices, splices.length, 0, null);
      t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(splices, 0)];
      index = 0;
      offset = 0;
      for (; t1.moveNext$0();) {
        splice = t1._current;
        if (offset !== 0)
          for (t2 = J.getInterceptor$x(splice); t3 = J.getInterceptor$n(index), t3.$lt(index, t2.get$index(splice)) === true;) {
            this._reportInstanceMoved$1(index);
            index = t3.$add(index, 1);
          }
        else
          index = J.get$index$x(splice);
        for (t2 = J.getInterceptor$x(splice); t3 = J.getInterceptor$n(index), t3.$lt(index, J.$add$ns(t2.get$index(splice), splice.get$addedCount())) === true;) {
          this._reportInstanceMoved$1(index);
          index = t3.$add(index, 1);
        }
        t2 = J.$sub$n(splice.get$addedCount(), J.get$length$asx(splice.get$removed()));
        if (typeof t2 !== "number")
          return H.iae(t2);
        offset += t2;
      }
      if (offset === 0)
        return;
      $length = this._instances.length;
      for (; t1 = J.getInterceptor$n(index), t1.$lt(index, $length) === true;) {
        this._reportInstanceMoved$1(index);
        index = t1.$add(index, 1);
      }
    },
    _closeInstanceBindings$1: [function(instance) {
      var t1, values;
      t1 = $.get$_instanceExtension();
      t1.toString;
      values = H.Primitives_getProperty(instance, "expando$values");
      for (t1 = J.get$iterator$ax((values == null ? null : H.Primitives_getProperty(values, t1._getKey$0())).get$_bindings()); t1.moveNext$0() === true;)
        J.close$0$x(t1.get$current());
    }, "call$1", "get$_closeInstanceBindings", 2, 0, 222],
    _unobserve$0: function() {
      return;
    },
    close$0: function(_) {
      var t1;
      if (this._closed)
        return;
      this._unobserve$0();
      t1 = this._instances;
      H.IterableMixinWorkaround_forEach(t1, this.get$_closeInstanceBindings());
      C.JSArray_methods.set$length(t1, 0);
      this._closeDependencies$0();
      this._templateExt._template_binding$_iterator = null;
      this._closed = true;
    }
  }
}],
["template_binding.src.mustache_tokens", "package:template_binding/src/mustache_tokens.dart", , S, {
  "^": "",
  MustacheTokens: {
    "^": "Object;_mustache_tokens$_tokens,onlyOneTime<,_combinator",
    get$hasOnePath: function() {
      return this._mustache_tokens$_tokens.length === 5;
    },
    get$isSimplePath: function() {
      var t1, t2;
      t1 = this._mustache_tokens$_tokens;
      t2 = t1.length;
      if (t2 === 5) {
        if (0 >= t2)
          return H.ioore(t1, 0);
        if (J.$eq(t1[0], "")) {
          if (4 >= t1.length)
            return H.ioore(t1, 4);
          t1 = J.$eq(t1[4], "");
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$combinator: function() {
      return this._combinator;
    },
    combinator$1: function(arg0) {
      return this.get$combinator().call$1(arg0);
    },
    get$length: function(_) {
      return C.JSInt_methods._tdivFast$1(this._mustache_tokens$_tokens.length, 4);
    },
    getOneTime$1: function(i) {
      var t1, t2;
      t1 = this._mustache_tokens$_tokens;
      t2 = i * 4 + 1;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    getPath$1: function(i) {
      var t1, t2;
      t1 = this._mustache_tokens$_tokens;
      t2 = i * 4 + 2;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    getPrepareBinding$1: function(i) {
      var t1, t2;
      t1 = this._mustache_tokens$_tokens;
      t2 = i * 4 + 3;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    _singleCombinator$1: [function(value) {
      var t1, t2, t3, t4;
      if (value == null)
        value = "";
      t1 = this._mustache_tokens$_tokens;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t2 = H.S(t1[0]) + H.S(value);
      t3 = t1.length;
      t4 = C.JSInt_methods._tdivFast$1(t3, 4) * 4;
      if (t4 >= t3)
        return H.ioore(t1, t4);
      return t2 + H.S(t1[t4]);
    }, "call$1", "get$_singleCombinator", 2, 0, 223, 19, []],
    _listCombinator$1: [function(values) {
      var t1, newValue, len, t2, i, value, t3, str;
      t1 = this._mustache_tokens$_tokens;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      newValue = P.StringBuffer$(t1[0]);
      len = C.JSInt_methods._tdivFast$1(t1.length, 4);
      for (t2 = J.getInterceptor$asx(values), i = 0; i < len;) {
        value = t2.$index(values, i);
        if (value != null)
          newValue._contents += typeof value === "string" ? value : H.S(value);
        ++i;
        t3 = i * 4;
        if (t3 >= t1.length)
          return H.ioore(t1, t3);
        str = t1[t3];
        newValue._contents += typeof str === "string" ? str : H.S(str);
      }
      return newValue._contents;
    }, "call$1", "get$_listCombinator", 2, 0, 224, 225, []],
    MustacheTokens$_$2: function(_tokens, onlyOneTime) {
      this._combinator = this._mustache_tokens$_tokens.length === 5 ? this.get$_singleCombinator() : this.get$_listCombinator();
    },
    static: {"^": "MustacheTokens__TOKEN_TEXT,MustacheTokens__TOKEN_ONETIME,MustacheTokens__TOKEN_PATH,MustacheTokens__TOKEN_PREPAREFN,MustacheTokens__TOKEN_SIZE,MustacheTokens__TOKEN_ENDTEXT", MustacheTokens_parse: function(s, fnFactory) {
        var $length, t1, t2, tokens, lastIndex, onlyOneTime, startIndex, oneTimeStart, t3, oneTime, terminator, endIndex, pathString, delegateFn;
        if (s == null || s.length === 0)
          return;
        $length = s.length;
        for (t1 = fnFactory == null, t2 = J.getInterceptor$asx(s), tokens = null, lastIndex = 0, onlyOneTime = true; lastIndex < $length;) {
          startIndex = t2.indexOf$2(s, "{{", lastIndex);
          oneTimeStart = C.JSString_methods.indexOf$2(s, "[[", lastIndex);
          if (oneTimeStart >= 0)
            t3 = startIndex < 0 || oneTimeStart < startIndex;
          else
            t3 = false;
          if (t3) {
            startIndex = oneTimeStart;
            oneTime = true;
            terminator = "]]";
          } else {
            oneTime = false;
            terminator = "}}";
          }
          endIndex = startIndex >= 0 ? C.JSString_methods.indexOf$2(s, terminator, startIndex + 2) : -1;
          if (endIndex < 0) {
            if (tokens == null)
              return;
            tokens.push(C.JSString_methods.substring$1(s, lastIndex));
            break;
          }
          if (tokens == null)
            tokens = [];
          tokens.push(C.JSString_methods.substring$2(s, lastIndex, startIndex));
          pathString = C.JSString_methods.trim$0(C.JSString_methods.substring$2(s, startIndex + 2, endIndex));
          tokens.push(oneTime);
          onlyOneTime = onlyOneTime && oneTime;
          delegateFn = t1 ? null : fnFactory.call$1(pathString);
          if (delegateFn == null)
            tokens.push(L.PropertyPath_PropertyPath(pathString));
          else
            tokens.push(null);
          tokens.push(delegateFn);
          lastIndex = endIndex + 2;
        }
        if (lastIndex === $length)
          tokens.push("");
        t1 = new S.MustacheTokens(tokens, onlyOneTime, null);
        t1.MustacheTokens$_$2(tokens, onlyOneTime);
        return t1;
      }}
  }
}],
["transmittable", "package:transmittable/transmittable.dart", , B, {
  "^": "",
  _getValueFromTranSection: function(s) {
    var t1, idx1, idx2, key, tranCodec, type, t2, collectionPlaceholder, collectionPlaceholderIdx, v;
    t1 = J.getInterceptor$asx(s);
    idx1 = t1.indexOf$1(s, ":");
    idx2 = t1.indexOf$2(s, ":", J.$add$ns(idx1, 1));
    key = t1.substring$2(s, 0, idx1);
    tranCodec = $.get$_tranCodecsByKey().$index(0, key);
    type = tranCodec.get$_type();
    if (tranCodec.get$_isTranSubtype() !== true) {
      t2 = J.getInterceptor(type);
      t2 = t2.$eq(type, C.Type_UWS) || t2.$eq(type, C.Type_Q1p) || t2.$eq(type, C.Type_46y);
    } else
      t2 = true;
    if (t2) {
      collectionPlaceholder = new P.Object();
      t2 = $.get$_uniqueValues();
      collectionPlaceholderIdx = t2.length;
      t2.push(collectionPlaceholder);
    } else {
      collectionPlaceholder = null;
      collectionPlaceholderIdx = null;
    }
    v = B._valueProcessor(tranCodec._decode$1(t1.substring$1(s, J.$add$ns(idx2, 1))));
    t1 = J.getInterceptor(v);
    if (!!t1.$is_InternalPointer)
      return v;
    if (tranCodec.get$_isTranSubtype() === true || !!t1.$isList || !!t1.$isSet || !!t1.$isMap) {
      t1 = $.get$_uniqueValues();
      J.insert$2$ax(t1, collectionPlaceholderIdx, v);
      C.JSArray_methods.remove$1(t1, collectionPlaceholder);
    } else
      $.get$_uniqueValues().push(v);
    return v;
  },
  _processStringBackToListOrSet: function(col, s) {
    var t1, t2, start, addedToResolveList, dataLengthStartIdx, dataLengthEndIdx, dataEndIdx, val;
    t1 = J.getInterceptor(col);
    if (!t1.$isSet && !t1.$isList)
      throw H.wrapException("Expecting either List or Set only");
    for (t2 = J.getInterceptor$asx(s), start = 0, addedToResolveList = false; J.$lt$n(start, t2.get$length(s)) === true; start = dataEndIdx) {
      dataLengthStartIdx = J.$add$ns(t2.indexOf$2(s, ":", start), 1);
      dataLengthEndIdx = t2.indexOf$2(s, ":", dataLengthStartIdx);
      dataEndIdx = J.$add$ns(J.$add$ns(dataLengthEndIdx, H.Primitives_parseInt(t2.substring$2(s, dataLengthStartIdx, dataLengthEndIdx), null, null)), 1);
      val = B._getValueFromTranSection(t2.substring$2(s, start, dataEndIdx));
      if (!addedToResolveList && !!J.getInterceptor(val).$is_InternalPointer) {
        $.get$_collectionsWithInternalPointers().push(col);
        addedToResolveList = true;
      }
      t1.add$1(col, val);
    }
    return col;
  },
  _processStringBackToMap: [function(s) {
    var map, t1, start, addedToResolveList, key, i, dataLengthStartIdx, dataLengthEndIdx, dataEndIdx, t2;
    map = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    for (t1 = J.getInterceptor$asx(s), start = 0, addedToResolveList = false; J.$lt$n(start, t1.get$length(s)) === true;)
      for (key = null, i = 0; i < 2; ++i, start = dataEndIdx) {
        dataLengthStartIdx = J.$add$ns(t1.indexOf$2(s, ":", start), 1);
        dataLengthEndIdx = t1.indexOf$2(s, ":", dataLengthStartIdx);
        dataEndIdx = J.$add$ns(J.$add$ns(dataLengthEndIdx, H.Primitives_parseInt(t1.substring$2(s, dataLengthStartIdx, dataLengthEndIdx), null, null)), 1);
        if (i === 0)
          key = B._getValueFromTranSection(t1.substring$2(s, start, dataEndIdx));
        else {
          map.$indexSet(0, key, B._getValueFromTranSection(t1.substring$2(s, start, dataEndIdx)));
          if (!addedToResolveList)
            t2 = !!J.getInterceptor(key).$is_InternalPointer || !!J.getInterceptor(map.$index(0, key)).$is_InternalPointer;
          else
            t2 = false;
          if (t2) {
            $.get$_collectionsWithInternalPointers().push(map);
            addedToResolveList = true;
          }
        }
      }
    return map;
  }, "call$1", "_processStringBackToMap$closure", 2, 0, 83, 84, []],
  _processStringBackToRegExp: [function(s) {
    var t1, start, t2, end, p, c;
    t1 = J.getInterceptor$asx(s);
    start = J.$add$ns(t1.indexOf$1(s, ":"), 1);
    t2 = J.getInterceptor$n(start);
    end = t2.$add(start, P.num_parse(t1.substring$2(s, 0, t2.$sub(start, 1)), null));
    p = t1.substring$2(s, start, end);
    t2 = J.getInterceptor$ns(end);
    c = J.$eq(t1.substring$2(s, end, t2.$add(end, 1)), "t");
    return new H.JSSyntaxRegExp(p, H.JSSyntaxRegExp_makeNative(p, J.$eq(t1.substring$2(s, t2.$add(end, 1), t2.$add(end, 2)), "t"), c, false), null, null);
  }, "call$1", "_processStringBackToRegExp$closure", 2, 0, 85, 84, []],
  registerTranTypes: function(namespaceFull, namespace, registerTypes) {
    var t1;
    B._registerTranTranTypes();
    try {
      t1 = $._currentNamespace;
      if (t1 != null) {
        t1 = B.NestedRegisterTranTypesCallError$(t1, namespace);
        throw H.wrapException(t1);
      }
      if (J.contains$1$asx(namespace, ":") === true) {
        t1 = B.InvalidTranNamespaceError$(namespace);
        throw H.wrapException(t1);
      }
      t1 = $.get$_namespaces();
      t1.toString;
      new P.LinkedHashMapKeyIterable(t1).$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      if (t1.containsKey$1(namespace)) {
        t1 = B.DuplicateTranNamespaceError$(namespace, namespaceFull);
        throw H.wrapException(t1);
      }
      t1.$indexSet(0, namespace, namespaceFull);
      $._currentNamespace = namespace;
      registerTypes.call$0();
    } finally {
      $._currentNamespace = null;
      $._currentNamespaceKeyCount = 0;
    }
  },
  registerTranSubtype: function(subtype, $constructor) {
    B._registerTranCodec(subtype, true, B._processTranToString$closure(), new B.registerTranSubtype_closure($constructor));
  },
  _registerTranCodec: function(type, isTranSubtype, encode, decode) {
    var t1, key, t2, t3;
    if ($._currentNamespace == null)
      throw H.wrapException(B.TranRegistrationOutsideOfNamespaceError$(type));
    t1 = $.get$_tranCodecsByType();
    if (t1.containsKey$1(type))
      throw H.wrapException(B.DuplicateTranTypeError$(type));
    key = H.S($._currentNamespace) + B._GetNextKeyForCurrentNamespace();
    t2 = $.get$_tranCodecsByKey();
    if (t2.containsKey$1(key))
      throw H.wrapException(B.DuplicateTranKeyError$(key));
    t3 = new B._TranCodec(isTranSubtype, key, type, encode, decode);
    t1.$indexSet(0, type, t3);
    t2.$indexSet(0, key, t3);
  },
  _GetNextKeyForCurrentNamespace: function() {
    var keyBuff, tempCount, tempCount0, division, remainder, t1;
    keyBuff = P.StringBuffer$("");
    tempCount = $._currentNamespaceKeyCount;
    tempCount0 = tempCount;
    do {
      division = C.JSInt_methods._tdivFast$1(tempCount0, 95);
      remainder = tempCount0 - division * 95;
      if (remainder < 0 || remainder >= 95)
        return H.ioore(C.List_0, remainder);
      t1 = C.List_0[remainder];
      t1 = keyBuff._contents += t1;
      if (division === 0)
        break;
      if (true) {
        tempCount0 = division;
        continue;
      } else
        break;
    } while (true);
    $._currentNamespaceKeyCount = tempCount + 1;
    return t1;
  },
  _registerTranTranTypes: function() {
    if ($._tranTranTypesRegistered)
      return;
    $._tranTranTypesRegistered = true;
    B.registerTranTypes("transmittable", "", new B._registerTranTranTypes_closure());
  },
  _getTranSectionFromValue: function(v) {
    var type, t1, tranCodec, tranStr;
    v = B._handleUniqueValues(B._valueProcessor(v));
    if (v == null)
      type = null;
    else if (typeof v === "number")
      type = C.Type_xM7;
    else {
      if (typeof v === "boolean")
        t1 = C.Type_EsU;
      else if (typeof v === "string")
        t1 = C.Type_Ejg;
      else {
        t1 = J.getInterceptor(v);
        if (!!t1.$isList)
          t1 = C.Type_UWS;
        else if (!!t1.$isSet)
          t1 = C.Type_Q1p;
        else if (!!t1.$isMap)
          t1 = C.Type_46y;
        else if (!!t1.$isRegExp)
          t1 = C.Type_dOE;
        else if (!!t1.$isType)
          t1 = C.Type_T43;
        else if (!!t1.$isSymbol0)
          t1 = C.Type_I5O;
        else {
          t1 = H.reflect(v);
          t1 = t1.get$type(t1).get$reflectedType();
        }
      }
      type = t1;
    }
    t1 = $.get$_tranCodecsByType();
    if (!t1.containsKey$1(type))
      throw H.wrapException(B.UnregisteredTypeError$(type));
    tranCodec = t1.$index(0, type);
    tranStr = tranCodec._encode$1(v);
    return H.S(tranCodec.get$_transmittable$_key()) + ":" + H.S(J.get$length$asx(tranStr)) + ":" + H.S(tranStr);
  },
  _valueProcessor: function(v) {
    var t1, i, vpp;
    for (t1 = $.get$_valueProcessors(), t1.length, i = -1; false; --i) {
      t1.length;
      return H.ioore(t1, i);
      vpp = t1[i];
      v = vpp.call$1(v);
    }
    return v;
  },
  _handleUniqueValues: function(v) {
    var t1, valIndex;
    t1 = $.get$_uniqueValues();
    valIndex = H.Lists_indexOf(t1, v, 0, t1.length);
    if (J.$eq(valIndex, -1)) {
      t1.push(v);
      return v;
    } else
      return new B._InternalPointer(valIndex);
  },
  _processIterableToString: [function(iter) {
    var strB = P.StringBuffer$("");
    J.forEach$1$ax(iter, new B._processIterableToString_closure(strB));
    return strB._contents;
  }, "call$1", "_processIterableToString$closure", 2, 0, 86],
  _processMapToString: [function(m) {
    var strB = P.StringBuffer$("");
    J.forEach$1$ax(m, new B._processMapToString_closure(strB));
    return strB._contents;
  }, "call$1", "_processMapToString$closure", 2, 0, 87, 88, []],
  _processTranToString: [function(t) {
    return B._processMapToString(t.get$_internal());
  }, "call$1", "_processTranToString$closure", 2, 0, 89],
  _processTypeToString: function(t) {
    var t1 = $.get$_tranCodecsByType();
    if (t1.containsKey$1(t))
      return t1.$index(0, t).get$_transmittable$_key();
    else
      throw H.wrapException(B.UnregisteredTypeError$(t));
  },
  _processRegExpToString: [function(r) {
    var p, c, m;
    p = J.get$pattern$x(r);
    c = r.get$isCaseSensitive() === true ? "t" : "f";
    m = r.get$isMultiLine() === true ? "t" : "f";
    return H.S(J.get$length$asx(p)) + ":" + H.S(p) + c + m;
  }, "call$1", "_processRegExpToString$closure", 2, 0, 90],
  getRegisteredMappingsByType: function() {
    var map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Type, P.String);
    $.get$_tranCodecsByType().forEach$1(0, new B.getRegisteredMappingsByType_closure(map));
    return map;
  },
  getRegisteredMappingsByKey: function() {
    var map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, P.Type);
    $.get$_tranCodecsByKey().forEach$1(0, new B.getRegisteredMappingsByKey_closure(map));
    return map;
  },
  DuplicateTranKeyError: {
    "^": "Object;key>,mapping",
    get$message: function(_) {
      return "Key \"" + this.key + "\" has already been used.";
    },
    static: {DuplicateTranKeyError$: function(key) {
        return new B.DuplicateTranKeyError(key, B.getRegisteredMappingsByKey());
      }}
  },
  DuplicateTranNamespaceError: {
    "^": "Object;namespace,namespaceFull,registeredNamespaces",
    get$message: function(_) {
      return "Namespace \"" + this.namespace + "\" has already been registered.";
    },
    static: {DuplicateTranNamespaceError$: function(namespace, namespaceFull) {
        return new B.DuplicateTranNamespaceError(namespace, namespaceFull, $.get$_namespaces());
      }}
  },
  DuplicateTranTypeError: {
    "^": "Object;type>,mapping",
    get$message: function(_) {
      return "Type \"" + H.S(this.type) + "\" has already been registered.";
    },
    static: {DuplicateTranTypeError$: function(type) {
        return new B.DuplicateTranTypeError(type, B.getRegisteredMappingsByType());
      }}
  },
  InvalidTranNamespaceError: {
    "^": "Object;namespace",
    get$message: function(_) {
      return "Namespace \"" + this.namespace + "\" is invalid. Tran namespaces must not contain a \":\" character.";
    },
    static: {InvalidTranNamespaceError$: function(namespace) {
        return new B.InvalidTranNamespaceError(namespace);
      }}
  },
  NestedRegisterTranTypesCallError: {
    "^": "Object;currentNamespace,nestedNamespace",
    get$message: function(_) {
      return "A call to registerTranTypes is already in progress for \"" + H.S(this.currentNamespace) + "\", it is an illegal operation to registerTranTypes for \"" + this.nestedNamespace + "\" at the same time.";
    },
    static: {NestedRegisterTranTypesCallError$: function(currentNamespace, nestedNamespace) {
        return new B.NestedRegisterTranTypesCallError(currentNamespace, nestedNamespace);
      }}
  },
  TranMethodError: {
    "^": "Object;methodName",
    get$message: function(_) {
      return "Methods are not transmittable, attempted invocation of method: " + H.S(this.methodName);
    },
    static: {TranMethodError$: function(methodName) {
        return new B.TranMethodError(methodName);
      }}
  },
  TranRegistrationOutsideOfNamespaceError: {
    "^": "Object;type>",
    get$message: function(_) {
      return "Calls to registerTranCodec and registerTranSubtype must only be made from within the second parameter of registerTranTypes.";
    },
    static: {TranRegistrationOutsideOfNamespaceError$: function(type) {
        return new B.TranRegistrationOutsideOfNamespaceError(type);
      }}
  },
  TransmittableLockedError: {
    "^": "Object;setter",
    get$message: function(_) {
      return "The Transmittable object is locked, calling any Setter on this object is an error.";
    },
    static: {TransmittableLockedError$: function(setter) {
        return new B.TransmittableLockedError(setter);
      }}
  },
  UnregisteredTypeError: {
    "^": "Object;type>",
    get$message: function(_) {
      return "Type \"" + H.S(this.type) + "\" has not been registered with registerTranType().";
    },
    static: {UnregisteredTypeError$: function(type) {
        return new B.UnregisteredTypeError(type);
      }}
  },
  _InternalPointer: {
    "^": "Object;_uniqueValueIndex<",
    $is_InternalPointer: true
  },
  registerTranSubtype_closure: {
    "^": "Closure:3;constructor_0",
    call$1: [function(s) {
      var t1 = this.constructor_0.call$0();
      t1.set$_internal(B._processStringBackToMap(s));
      return t1;
    }, "call$1", null, 2, 0, null, 84, [], "call"],
    $isFunction: true
  },
  _registerTranTranTypes_closure: {
    "^": "Closure:14;",
    call$0: function() {
      B._registerTranCodec(null, false, new B._registerTranTranTypes__closure(), new B._registerTranTranTypes__closure0());
      B._registerTranCodec(C.Type_ki2, false, new B._registerTranTranTypes__closure1(), new B._registerTranTranTypes__closure2());
      B._registerTranCodec(C.Type_xM7, false, new B._registerTranTranTypes__closure3(), new B._registerTranTranTypes__closure4());
      B._registerTranCodec(C.Type_SnA, false, new B._registerTranTranTypes__closure5(), new B._registerTranTranTypes__closure6());
      B._registerTranCodec(C.Type_qq1, false, new B._registerTranTranTypes__closure7(), new B._registerTranTranTypes__closure8());
      B._registerTranCodec(C.Type_Ejg, false, new B._registerTranTranTypes__closure9(), new B._registerTranTranTypes__closure10());
      B._registerTranCodec(C.Type_EsU, false, new B._registerTranTranTypes__closure11(), new B._registerTranTranTypes__closure12());
      B._registerTranCodec(C.Type_UWS, false, B._processIterableToString$closure(), new B._registerTranTranTypes__closure13());
      B._registerTranCodec(C.Type_Q1p, false, B._processIterableToString$closure(), new B._registerTranTranTypes__closure14());
      B._registerTranCodec(C.Type_46y, false, B._processMapToString$closure(), B._processStringBackToMap$closure());
      B._registerTranCodec(C.Type_dOE, false, B._processRegExpToString$closure(), B._processStringBackToRegExp$closure());
      B._registerTranCodec(C.Type_T43, false, new B._registerTranTranTypes__closure15(), new B._registerTranTranTypes__closure16());
      B._registerTranCodec(C.Type_dVs, false, new B._registerTranTranTypes__closure17(), new B._registerTranTranTypes__closure18());
      B._registerTranCodec(C.Type_oOt, false, new B._registerTranTranTypes__closure19(), new B._registerTranTranTypes__closure20());
      B._registerTranCodec(C.Type_I5O, false, new B._registerTranTranTypes__closure21(), new B._registerTranTranTypes__closure22());
      B.registerTranSubtype(C.Type_q2l, new B._registerTranTranTypes__closure23());
    },
    $isFunction: true
  },
  _registerTranTranTypes__closure: {
    "^": "Closure:54;",
    call$1: function(o) {
      return "";
    },
    $isFunction: true
  },
  _registerTranTranTypes__closure0: {
    "^": "Closure:54;",
    call$1: [function(s) {
      return;
    }, "call$1", null, 2, 0, null, 84, [], "call"],
    $isFunction: true
  },
  _registerTranTranTypes__closure1: {
    "^": "Closure:226;",
    call$1: function(ip) {
      return J.toString$0(ip.get$_uniqueValueIndex());
    },
    $isFunction: true
  },
  _registerTranTranTypes__closure2: {
    "^": "Closure:3;",
    call$1: [function(s) {
      return new B._InternalPointer(H.Primitives_parseInt(s, null, null));
    }, "call$1", null, 2, 0, null, 84, [], "call"],
    $isFunction: true
  },
  _registerTranTranTypes__closure3: {
    "^": "Closure:227;",
    call$1: function(n) {
      return J.toString$0(n);
    },
    $isFunction: true
  },
  _registerTranTranTypes__closure4: {
    "^": "Closure:3;",
    call$1: [function(s) {
      return P.num_parse(s, null);
    }, "call$1", null, 2, 0, null, 84, [], "call"],
    $isFunction: true
  },
  _registerTranTranTypes__closure5: {
    "^": "Closure:99;",
    call$1: function(i) {
      return J.toString$0(i);
    },
    $isFunction: true
  },
  _registerTranTranTypes__closure6: {
    "^": "Closure:3;",
    call$1: [function(s) {
      return H.Primitives_parseInt(s, null, null);
    }, "call$1", null, 2, 0, null, 84, [], "call"],
    $isFunction: true
  },
  _registerTranTranTypes__closure7: {
    "^": "Closure:228;",
    call$1: function(f) {
      return J.toString$0(f);
    },
    $isFunction: true
  },
  _registerTranTranTypes__closure8: {
    "^": "Closure:3;",
    call$1: [function(s) {
      return H.Primitives_parseDouble(s, null);
    }, "call$1", null, 2, 0, null, 84, [], "call"],
    $isFunction: true
  },
  _registerTranTranTypes__closure9: {
    "^": "Closure:3;",
    call$1: function(s) {
      return s;
    },
    $isFunction: true
  },
  _registerTranTranTypes__closure10: {
    "^": "Closure:3;",
    call$1: [function(s) {
      return s;
    }, "call$1", null, 2, 0, null, 84, [], "call"],
    $isFunction: true
  },
  _registerTranTranTypes__closure11: {
    "^": "Closure:117;",
    call$1: function(b) {
      return b === true ? "t" : "f";
    },
    $isFunction: true
  },
  _registerTranTranTypes__closure12: {
    "^": "Closure:3;",
    call$1: [function(s) {
      return J.$eq(s, "t") && true;
    }, "call$1", null, 2, 0, null, 84, [], "call"],
    $isFunction: true
  },
  _registerTranTranTypes__closure13: {
    "^": "Closure:3;",
    call$1: [function(s) {
      return B._processStringBackToListOrSet([], s);
    }, "call$1", null, 2, 0, null, 84, [], "call"],
    $isFunction: true
  },
  _registerTranTranTypes__closure14: {
    "^": "Closure:3;",
    call$1: [function(s) {
      return B._processStringBackToListOrSet(P.LinkedHashSet_LinkedHashSet(null, null, null, null), s);
    }, "call$1", null, 2, 0, null, 84, [], "call"],
    $isFunction: true
  },
  _registerTranTranTypes__closure15: {
    "^": "Closure:229;",
    call$1: function(t) {
      return B._processTypeToString(t);
    },
    $isFunction: true
  },
  _registerTranTranTypes__closure16: {
    "^": "Closure:3;",
    call$1: [function(s) {
      return $.get$_tranCodecsByKey().$index(0, s).get$_type();
    }, "call$1", null, 2, 0, null, 84, [], "call"],
    $isFunction: true
  },
  _registerTranTranTypes__closure17: {
    "^": "Closure:230;",
    call$1: function(d) {
      return J.toString$0(d);
    },
    $isFunction: true
  },
  _registerTranTranTypes__closure18: {
    "^": "Closure:3;",
    call$1: [function(s) {
      return P.DateTime_parse(s);
    }, "call$1", null, 2, 0, null, 84, [], "call"],
    $isFunction: true
  },
  _registerTranTranTypes__closure19: {
    "^": "Closure:231;",
    call$1: function(dur) {
      return J.toString$0(dur.get$inMilliseconds());
    },
    $isFunction: true
  },
  _registerTranTranTypes__closure20: {
    "^": "Closure:3;",
    call$1: [function(s) {
      return P.Duration$(0, 0, 0, P.num_parse(s, null), 0, 0);
    }, "call$1", null, 2, 0, null, 84, [], "call"],
    $isFunction: true
  },
  _registerTranTranTypes__closure21: {
    "^": "Closure:232;",
    call$1: function(sy) {
      return J.get$_name$x(sy);
    },
    $isFunction: true
  },
  _registerTranTranTypes__closure22: {
    "^": "Closure:3;",
    call$1: [function(s) {
      return H.getSymbol(s, null);
    }, "call$1", null, 2, 0, null, 84, [], "call"],
    $isFunction: true
  },
  _registerTranTranTypes__closure23: {
    "^": "Closure:14;",
    call$0: function() {
      var t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, null);
      B._registerTranTranTypes();
      return new B.Transmittable(t1);
    },
    $isFunction: true
  },
  _processIterableToString_closure: {
    "^": "Closure:54;strB_0",
    call$1: [function(o) {
      return this.strB_0.write$1(B._getTranSectionFromValue(o));
    }, "call$1", null, 2, 0, null, 67, [], "call"],
    $isFunction: true
  },
  _processMapToString_closure: {
    "^": "Closure:94;strB_0",
    call$2: [function(k, v) {
      var t1 = this.strB_0;
      t1.write$1(B._getTranSectionFromValue(k));
      t1.write$1(B._getTranSectionFromValue(v));
    }, "call$2", null, 4, 0, null, 121, [], 71, [], "call"],
    $isFunction: true
  },
  _TranCodec: {
    "^": "Object;_isTranSubtype<,_transmittable$_key<,_type<,_encode,_decode",
    _encode$1: function(arg0) {
      return this._encode.call$1(arg0);
    },
    _decode$1: function(arg0) {
      return this._decode.call$1(arg0);
    },
    $is_TranCodec: true
  },
  getRegisteredMappingsByType_closure: {
    "^": "Closure:94;map_0",
    call$2: function(k, v) {
      var t1 = v.get$_transmittable$_key();
      this.map_0.$indexSet(0, k, t1);
      return t1;
    },
    $isFunction: true
  },
  getRegisteredMappingsByKey_closure: {
    "^": "Closure:94;map_0",
    call$2: function(k, v) {
      var t1 = v.get$_type();
      this.map_0.$indexSet(0, k, t1);
      return t1;
    },
    $isFunction: true
  },
  Transmittable: {
    "^": "Object;_internal@",
    lock$0: function() {
      this._internal.$indexSet(0, "_locked", true);
    },
    noSuchMethod$1: [function(_, inv) {
      var positionalArgs, property;
      if (inv.get$isMethod() === true)
        throw H.wrapException(B.TranMethodError$(P.MirrorSystem_getName(inv.get$memberName())));
      positionalArgs = inv.get$positionalArguments() != null ? J.get$length$asx(inv.get$positionalArguments()) : 0;
      property = J.get$_name$x(inv.get$memberName());
      if (inv.get$isGetter() === true && J.$eq(positionalArgs, 0)) {
        if (this._internal.containsKey$1(property))
          return this._internal.$index(0, property);
        return;
      } else if (inv.get$isSetter() === true && J.$eq(positionalArgs, 1)) {
        if (J.$eq(this._internal.$index(0, "_locked"), true))
          throw H.wrapException(B.TransmittableLockedError$(P.MirrorSystem_getName(inv.get$memberName())));
        property = J.replaceAll$2$s(property, "=", "");
        this._internal.$indexSet(0, property, J.$index$asx(inv.get$positionalArguments(), 0));
        return this._internal.$index(0, property);
      }
      P.Object.prototype.noSuchMethod$1.call(this, this, inv);
    }, "call$1", "get$noSuchMethod", 2, 0, 130, 193, [], "noSuchMethod"],
    forEach$1: function(_, f) {
      return this._internal.forEach$1(0, f);
    },
    clear$0: function(_) {
      return this._internal.clear$0(0);
    }
  }
}],
["utf.list_range", "package:utf/src/list_range.dart", , G, {
  "^": "",
  ListRange: {
    "^": "IterableBase;_list_range$_source,_list_range$_offset,_list_range$_length",
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._list_range$_offset;
      t2 = this._list_range$_length;
      if (typeof t2 !== "number")
        return H.iae(t2);
      return new G._ListRangeIteratorImpl(this._list_range$_source, t1 - 1, t1 + t2);
    },
    get$length: function(_) {
      return this._list_range$_length;
    },
    ListRange$3: function(source, offset, $length) {
      var t1, t2, t3;
      t1 = this._list_range$_offset;
      t2 = J.get$length$asx(this._list_range$_source);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = t1 > t2;
      if (t2)
        throw H.wrapException(P.RangeError$value(t1));
      t2 = this._list_range$_length;
      if (t2 != null && J.$lt$n(t2, 0) === true)
        throw H.wrapException(P.RangeError$value(t2));
      t3 = J.getInterceptor$ns(t2);
      if (J.$gt$n(t3.$add(t2, t1), J.get$length$asx(this._list_range$_source)) === true)
        throw H.wrapException(P.RangeError$value(t3.$add(t2, t1)));
    },
    $asIterableBase: function() {
      return [null];
    },
    $asIterable: function() {
      return [null];
    }
  },
  _ListRangeIteratorImpl: {
    "^": "Object;_list_range$_source,_list_range$_offset,_end",
    get$current: function() {
      return J.$index$asx(this._list_range$_source, this._list_range$_offset);
    },
    moveNext$0: function() {
      return ++this._list_range$_offset < this._end;
    },
    skip$1: function(_, count) {
      var t1 = this._list_range$_offset;
      if (typeof count !== "number")
        return H.iae(count);
      this._list_range$_offset = t1 + count;
    }
  }
}],
["utf.utf_16_code_unit_decoder", "package:utf/src/utf_16_code_unit_decoder.dart", , Z, {
  "^": "",
  Utf16CodeUnitDecoder: {
    "^": "Object;utf16CodeUnitIterator,replacementCodepoint,_utf_16_code_unit_decoder$_current",
    get$iterator: function(_) {
      return this;
    },
    get$current: function() {
      return this._utf_16_code_unit_decoder$_current;
    },
    moveNext$0: function() {
      var t1, t2, t3, t4, t5, value, t6, nextValue;
      this._utf_16_code_unit_decoder$_current = null;
      t1 = this.utf16CodeUnitIterator;
      t2 = ++t1._list_range$_offset;
      t3 = t1._end;
      if (!(t2 < t3))
        return false;
      t4 = t1._list_range$_source;
      t5 = J.getInterceptor$asx(t4);
      value = t5.$index(t4, t2);
      t2 = J.getInterceptor$n(value);
      if (t2.$lt(value, 0) === true)
        this._utf_16_code_unit_decoder$_current = this.replacementCodepoint;
      else {
        if (t2.$lt(value, 55296) !== true)
          t6 = t2.$gt(value, 57343) === true && t2.$le(value, 65535) === true;
        else
          t6 = true;
        if (t6)
          this._utf_16_code_unit_decoder$_current = value;
        else if (t2.$lt(value, 56320) === true && ++t1._list_range$_offset < t3) {
          nextValue = t5.$index(t4, t1._list_range$_offset);
          t3 = J.getInterceptor$n(nextValue);
          if (t3.$ge(nextValue, 56320) === true && t3.$le(nextValue, 57343) === true) {
            value = J.$shl$n(t2.$sub(value, 55296), 10);
            t1 = t3.$sub(nextValue, 56320);
            if (typeof t1 !== "number")
              return H.iae(t1);
            this._utf_16_code_unit_decoder$_current = J.$add$ns(value, 65536 + t1);
          } else {
            if (t3.$ge(nextValue, 55296) === true && t3.$lt(nextValue, 56320) === true)
              --t1._list_range$_offset;
            this._utf_16_code_unit_decoder$_current = this.replacementCodepoint;
          }
        } else
          this._utf_16_code_unit_decoder$_current = this.replacementCodepoint;
      }
      return true;
    }
  }
}],
["utf.util", "package:utf/src/util.dart", , U, {
  "^": "",
  utf16CodeUnitsToCodepoints: function(utf16CodeUnits, offset, $length, replacementCodepoint) {
    var t1, t2, decoder, codepoints, i, i0, codepointTrunc;
    t1 = J.$sub$n(J.get$length$asx(utf16CodeUnits), offset);
    new G.ListRange(utf16CodeUnits, offset, t1).ListRange$3(utf16CodeUnits, offset, $length);
    if (typeof t1 !== "number")
      return H.iae(t1);
    t1 = offset + t1;
    t2 = offset - 1;
    decoder = new Z.Utf16CodeUnitDecoder(new G._ListRangeIteratorImpl(utf16CodeUnits, t2, t1), replacementCodepoint, null);
    codepoints = Array(t1 - t2 - 1);
    codepoints.$builtinTypeInfo = [P.$int];
    for (t1 = codepoints.length, i = 0; decoder.moveNext$0(); i = i0) {
      i0 = i + 1;
      t2 = decoder._utf_16_code_unit_decoder$_current;
      if (i >= t1)
        return H.ioore(codepoints, i);
      codepoints[i] = t2;
    }
    if (i === t1)
      return codepoints;
    else {
      codepointTrunc = Array(i);
      codepointTrunc.fixed$length = init;
      codepointTrunc.$builtinTypeInfo = [P.$int];
      H.IterableMixinWorkaround_setRangeList(codepointTrunc, 0, i, codepoints, 0);
      return codepointTrunc;
    }
  }
}],
["web_components.interop", "package:web_components/interop.dart", , N, {
  "^": "",
  registerDartType: function(tagName, dartType, extendsTag) {
    var t1, upgrader;
    t1 = $.get$_doc();
    if (t1.hasProperty$1("_registerDartTypeUpgrader") !== true)
      throw H.wrapException(P.UnsupportedError$("Couldn't find `document._registerDartTypeUpgrader`. Please make sure that `packages/web_components/dart_support.js` is loaded and available before calling this function."));
    upgrader = new W._JSElementUpgrader(null, null, null);
    upgrader._JSElementUpgrader$3(document, dartType, extendsTag);
    t1.callMethod$2("_registerDartTypeUpgrader", [tagName, new N.registerDartType_upgradeElement(dartType, upgrader)]);
  },
  registerDartType_upgradeElement: {
    "^": "Closure:54;dartType_0,upgrader_1",
    call$1: [function(e) {
      var t1, t2;
      t1 = J.getInterceptor(e);
      if (!t1.get$runtimeType(e).$eq(0, this.dartType_0)) {
        t2 = this.upgrader_1;
        if (!t1.get$runtimeType(e).$eq(0, t2._nativeType))
          H.throwExpression(P.ArgumentError$("element is not subclass of " + H.S(t2._nativeType)));
        t1 = H.makeLeafDispatchRecord(t2._interceptor);
        Object.defineProperty(e, init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        t2._constructor(e);
      }
    }, "call$1", null, 2, 0, null, 2, [], "call"],
    $isFunction: true
  }
}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Runtime type support
;(function() {
  var TRUE = !0, _;
  _ = P.$int;
  _.$is$int = TRUE;
  _.$isnum = TRUE;
  _.$isComparable = TRUE;
  _.$asComparable = [P.num];
  _.$isObject = TRUE;
  _ = P.$double;
  _.$is$double = TRUE;
  _.$isnum = TRUE;
  _.$isComparable = TRUE;
  _.$asComparable = [P.num];
  _.$isObject = TRUE;
  _ = W.Node;
  _.$isNode = TRUE;
  _.$isObject = TRUE;
  W.Entry.$isObject = TRUE;
  _ = P.String;
  _.$isString = TRUE;
  _.$isComparable = TRUE;
  _.$asComparable = [P.String];
  _.$isObject = TRUE;
  _ = P.num;
  _.$isnum = TRUE;
  _.$isComparable = TRUE;
  _.$asComparable = [P.num];
  _.$isObject = TRUE;
  _ = P.Duration;
  _.$isDuration = TRUE;
  _.$isComparable = TRUE;
  _.$asComparable = [P.Duration];
  _.$isObject = TRUE;
  _ = P.List;
  _.$isList = TRUE;
  _.$isIterable = TRUE;
  _.$isObject = TRUE;
  _ = P.Match;
  _.$isMatch = TRUE;
  _.$isObject = TRUE;
  _ = N.Level;
  _.$isComparable = TRUE;
  _.$asComparable = [N.Level];
  _.$isObject = TRUE;
  P.Object.$isObject = TRUE;
  _ = A.Bindable;
  _.$isBindable = TRUE;
  _.$isObject = TRUE;
  _ = K.IndexedValue;
  _.$isIndexedValue = TRUE;
  _.$isObject = TRUE;
  _ = O.SourceLocation;
  _.$isComparable = TRUE;
  _.$asComparable = [O.SourceLocation];
  _.$isObject = TRUE;
  _ = T.SourceSpan;
  _.$isComparable = TRUE;
  _.$asComparable = [T.SourceSpan];
  _.$isObject = TRUE;
  _ = U.TernaryOperator;
  _.$isExpression = TRUE;
  _.$isObject = TRUE;
  _ = U.UnaryOperator;
  _.$isExpression = TRUE;
  _.$isObject = TRUE;
  _ = U.BinaryOperator;
  _.$isExpression = TRUE;
  _.$isObject = TRUE;
  _ = U.Identifier;
  _.$isIdentifier = TRUE;
  _.$isExpression = TRUE;
  _.$isObject = TRUE;
  _ = U.MapLiteralEntry;
  _.$isExpression = TRUE;
  _.$isObject = TRUE;
  _ = U.MapLiteral;
  _.$isExpression = TRUE;
  _.$isObject = TRUE;
  _ = U.ListLiteral;
  _.$isExpression = TRUE;
  _.$isObject = TRUE;
  _ = U.Literal;
  _.$isExpression = TRUE;
  _.$isObject = TRUE;
  _ = U.Invoke;
  _.$isExpression = TRUE;
  _.$isObject = TRUE;
  _ = U.Index;
  _.$isIndex = TRUE;
  _.$isExpression = TRUE;
  _.$isObject = TRUE;
  _ = U.Getter;
  _.$isExpression = TRUE;
  _.$isObject = TRUE;
  _ = U.EmptyExpression;
  _.$isExpression = TRUE;
  _.$isObject = TRUE;
  _ = X.Event;
  _.$isEvent = TRUE;
  _.$isObject = TRUE;
  _ = T.ChangeRecord;
  _.$isChangeRecord = TRUE;
  _.$isObject = TRUE;
  _ = P.Type;
  _.$isType = TRUE;
  _.$isObject = TRUE;
  B._TranCodec.$isObject = TRUE;
  _ = P.LibraryMirror;
  _.$isLibraryMirror = TRUE;
  _.$isMirror = TRUE;
  _.$isMirror = TRUE;
  _.$isObject = TRUE;
  _ = P.Symbol0;
  _.$isSymbol0 = TRUE;
  _.$isObject = TRUE;
  _ = P.ClassMirror;
  _.$isTypeMirror = TRUE;
  _.$isMirror = TRUE;
  _.$isMirror = TRUE;
  _.$isObject = TRUE;
  _ = X.EventEmitter;
  _.$isEventEmitter = TRUE;
  _.$isObject = TRUE;
  _ = P.Map;
  _.$isMap = TRUE;
  _.$isObject = TRUE;
  F.Observable.$isObject = TRUE;
  N.Logger.$isObject = TRUE;
  A.PolymerDeclaration.$isObject = TRUE;
  _ = P.DeclarationMirror;
  _.$isMirror = TRUE;
  _.$isObject = TRUE;
  _ = P.TypeVariableMirror;
  _.$isTypeMirror = TRUE;
  _.$isMirror = TRUE;
  _.$isObject = TRUE;
  _ = P.MethodMirror;
  _.$isMirror = TRUE;
  _.$isObject = TRUE;
  _ = H.JsMethodMirror;
  _.$isMirror = TRUE;
  _.$isMirror = TRUE;
  _.$isMirror = TRUE;
  _.$isObject = TRUE;
  _ = P.VariableMirror;
  _.$isMirror = TRUE;
  _.$isObject = TRUE;
  _ = P.TypeMirror;
  _.$isTypeMirror = TRUE;
  _.$isMirror = TRUE;
  _.$isObject = TRUE;
  _ = P.Mirror;
  _.$isMirror = TRUE;
  _.$isObject = TRUE;
  _ = L.PropertyPath;
  _.$isPropertyPath = TRUE;
  _.$isObject = TRUE;
  K.Scope.$isObject = TRUE;
  N.LogRecord.$isObject = TRUE;
  _ = P.bool;
  _.$isbool = TRUE;
  _.$isObject = TRUE;
  W.HttpRequest.$isObject = TRUE;
  _ = W.ProgressEvent;
  _.$isEvent0 = TRUE;
  _.$isObject = TRUE;
  _ = W.NodeValidator;
  _.$isNodeValidator = TRUE;
  _.$isObject = TRUE;
  _ = W.MouseEvent;
  _.$isEvent0 = TRUE;
  _.$isObject = TRUE;
  _ = P.Stream;
  _.$isStream = TRUE;
  _.$isObject = TRUE;
  _ = P.StreamSubscription;
  _.$isStreamSubscription = TRUE;
  _.$isObject = TRUE;
  H.RawReceivePortImpl.$isObject = TRUE;
  H._IsolateEvent.$isObject = TRUE;
  H._IsolateContext.$isObject = TRUE;
  _ = W.ShadowRoot;
  _.$isDocumentFragment = TRUE;
  _.$isNode = TRUE;
  _.$isObject = TRUE;
  _ = G.ListChangeRecord;
  _.$isListChangeRecord = TRUE;
  _.$isChangeRecord = TRUE;
  _.$isObject = TRUE;
  Y.Token.$isObject = TRUE;
  _ = W.Event0;
  _.$isEvent0 = TRUE;
  _.$isObject = TRUE;
  _ = U.Expression;
  _.$isExpression = TRUE;
  _.$isObject = TRUE;
  _ = P.ParameterMirror;
  _.$isMirror = TRUE;
  _.$isObject = TRUE;
  _ = B._InternalPointer;
  _.$is_InternalPointer = TRUE;
  _.$isObject = TRUE;
  _ = P.DateTime;
  _.$isDateTime = TRUE;
  _.$isComparable = TRUE;
  _.$asComparable = [null];
  _.$isObject = TRUE;
  _ = P.ZoneDelegate;
  _.$isZoneDelegate = TRUE;
  _.$isObject = TRUE;
  _ = P.Zone;
  _.$isZone = TRUE;
  _.$isObject = TRUE;
  _ = P.StackTrace;
  _.$isStackTrace = TRUE;
  _.$isObject = TRUE;
  _ = P._BufferingStreamSubscription;
  _.$is_BufferingStreamSubscription = TRUE;
  _.$is_EventSink = TRUE;
  _.$isStreamSubscription = TRUE;
  _.$isObject = TRUE;
  _ = P._BroadcastSubscription;
  _.$is_BroadcastSubscription = TRUE;
  _.$is_BufferingStreamSubscription = TRUE;
  _.$is_EventSink = TRUE;
  _.$isStreamSubscription = TRUE;
  _.$isObject = TRUE;
  _ = P.Comparable;
  _.$isComparable = TRUE;
  _.$isObject = TRUE;
  _ = P.Iterable;
  _.$isIterable = TRUE;
  _.$isObject = TRUE;
  _ = P.RegExp;
  _.$isRegExp = TRUE;
  _.$isObject = TRUE;
  _ = B.Transmittable;
  _.$isTransmittable = TRUE;
  _.$isObject = TRUE;
  _ = P.ZoneSpecification;
  _.$isZoneSpecification = TRUE;
  _.$isObject = TRUE;
  _ = P.Timer;
  _.$isTimer = TRUE;
  _.$isObject = TRUE;
  _ = W.Element;
  _.$isElement = TRUE;
  _.$isNode = TRUE;
  _.$isObject = TRUE;
  _ = W._Html5NodeValidator;
  _.$is_Html5NodeValidator = TRUE;
  _.$isNodeValidator = TRUE;
  _.$isObject = TRUE;
  _ = P.InstanceMirror;
  _.$isInstanceMirror = TRUE;
  _.$isMirror = TRUE;
  _.$isObject = TRUE;
  _ = P._EventSink;
  _.$is_EventSink = TRUE;
  _.$isObject = TRUE;
  _ = P.Future;
  _.$isFuture = TRUE;
  _.$isObject = TRUE;
  _ = P._DelayedEvent;
  _.$is_DelayedEvent = TRUE;
  _.$isObject = TRUE;
  _ = N.DurationChange;
  _.$isDurationChange = TRUE;
  _.$isTransmittable = TRUE;
  _.$isObject = TRUE;
  _ = Z.BuildLogEntry;
  _.$isBuildLogEntry = TRUE;
  _.$isObject = TRUE;
  _ = P.Function;
  _.$isFunction = TRUE;
  _.$isObject = TRUE;
  _ = A.Declaration;
  _.$isDeclaration = TRUE;
  _.$isObject = TRUE;
  _ = A.QueryOptions;
  _.$isQueryOptions = TRUE;
  _.$isObject = TRUE;
  _ = L._Observer;
  _.$is_Observer = TRUE;
  _.$isBindable = TRUE;
  _.$isObject = TRUE;
  _ = W.DocumentFragment;
  _.$isDocumentFragment = TRUE;
  _.$isNode = TRUE;
  _.$isObject = TRUE;
})();
;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$i = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSNumber.prototype;
  }
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return J.getInterceptor$n(receiver).$and(receiver, a0);
};
J.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return J.getInterceptor$n(receiver).$div(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return J.getInterceptor$n(receiver).$le(receiver, a0);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mod$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$mod(receiver, a0);
};
J.$mul$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$ns(receiver).$mul(receiver, a0);
};
J.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return J.getInterceptor$n(receiver).$negate(receiver);
};
J.$or$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver | a0) >>> 0;
  return J.getInterceptor$n(receiver).$or(receiver, a0);
};
J.$shl$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$shl(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.$tdiv$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
J.$xor$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver ^ a0) >>> 0;
  return J.getInterceptor$n(receiver).$xor(receiver, a0);
};
J.__isolate_helper$_add$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).__isolate_helper$_add$1(receiver, a0);
};
J._async$_add$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver)._async$_add$1(receiver, a0);
};
J._clearChildren$0$x = function(receiver) {
  return J.getInterceptor$x(receiver)._clearChildren$0(receiver);
};
J._initCustomEvent$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver)._initCustomEvent$4(receiver, a0, a1, a2, a3);
};
J.abs$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).abs$0(receiver);
};
J.accept$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).accept$1(receiver, a0);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.addAll$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.any$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).any$1(receiver, a0);
};
J.append$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).append$1(receiver, a0);
};
J.async$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).async$1(receiver, a0);
};
J.attached$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).attached$0(receiver);
};
J.attributeChanged$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).attributeChanged$3(receiver, a0, a1, a2);
};
J.bind$3$oneTime$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).bind$3$oneTime(receiver, a0, a1, a2);
};
J.clear$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).clear$0(receiver);
};
J.close$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).close$0(receiver);
};
J.codeUnitAt$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.contains$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
J.contains$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
J.createDocumentFragment$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createDocumentFragment$0(receiver);
};
J.createElement$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).createElement$1(receiver, a0);
};
J.createFragment$3$treeSanitizer$validator$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).createFragment$3$treeSanitizer$validator(receiver, a0, a1, a2);
};
J.createHtmlDocument$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).createHtmlDocument$1(receiver, a0);
};
J.createInstance$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).createInstance$2(receiver, a0, a1);
};
J.detached$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).detached$0(receiver);
};
J.dispatchMethod$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).dispatchMethod$3(receiver, a0, a1, a2);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.endsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
};
J.firstWhere$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).firstWhere$1(receiver, a0);
};
J.fold$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).fold$2(receiver, a0, a1);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$_children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_children(receiver);
};
J.get$_element$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_element(receiver);
};
J.get$_name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_name(receiver);
};
J.get$_observe$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_observe(receiver);
};
J.get$_polymer$_name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_polymer$_name(receiver);
};
J.get$_self$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_self(receiver);
};
J.get$_values$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_values(receiver);
};
J.get$attributes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$attributes(receiver);
};
J.get$baseUri$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$baseUri(receiver);
};
J.get$bindingDelegate$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$bindingDelegate(receiver);
};
J.get$bindings$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$bindings(receiver);
};
J.get$className$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$className(receiver);
};
J.get$classes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$classes(receiver);
};
J.get$codeUnits$s = function(receiver) {
  return J.getInterceptor$s(receiver).get$codeUnits(receiver);
};
J.get$content$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$content(receiver);
};
J.get$counter$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$counter(receiver);
};
J.get$data$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$data(receiver);
};
J.get$defaultValue$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$defaultValue(receiver);
};
J.get$duration$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$duration(receiver);
};
J.get$element$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$element(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$first$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$first(receiver);
};
J.get$firstChild$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$firstChild(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$head$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$head(receiver);
};
J.get$icon$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$icon(receiver);
};
J.get$iconSrc$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$iconSrc(receiver);
};
J.get$id$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$id(receiver);
};
J.get$implementation$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$implementation(receiver);
};
J.get$index$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$index(receiver);
};
J.get$isEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
J.get$isNotEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$key$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$key(receiver);
};
J.get$kind$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$kind(receiver);
};
J.get$label$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$label(receiver);
};
J.get$last$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$last(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$message$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$message(receiver);
};
J.get$model$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$model(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$nextElementSibling$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nextElementSibling(receiver);
};
J.get$nextNode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nextNode(receiver);
};
J.get$offset$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$offset(receiver);
};
J.get$onClick$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onClick(receiver);
};
J.get$ownerDocument$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$ownerDocument(receiver);
};
J.get$parent$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$parent(receiver);
};
J.get$parentNode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$parentNode(receiver);
};
J.get$pattern$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$pattern(receiver);
};
J.get$raisedButton$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$raisedButton(receiver);
};
J.get$reset$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$reset(receiver);
};
J.get$responseText$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$responseText(receiver);
};
J.get$runtimeType$ = function(receiver) {
  return J.getInterceptor(receiver).get$runtimeType(receiver);
};
J.get$start$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$start(receiver);
};
J.get$stop$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$stop(receiver);
};
J.get$syntax$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$syntax(receiver);
};
J.get$tagName$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$tagName(receiver);
};
J.get$target$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$target(receiver);
};
J.get$templateInstance$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$templateInstance(receiver);
};
J.get$text$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$text(receiver);
};
J.get$topLeft$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$topLeft(receiver);
};
J.get$type$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$type(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$values$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$values(receiver);
};
J.get$z$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$z(receiver);
};
J.getBoundingClientRect$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).getBoundingClientRect$0(receiver);
};
J.importNode$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).importNode$2(receiver, a0, a1);
};
J.insert$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).insert$2(receiver, a0, a1);
};
J.insertBefore$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).insertBefore$2(receiver, a0, a1);
};
J.join$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).join$1(receiver, a0);
};
J.listen$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).listen$1(receiver, a0);
};
J.listen$3$onDone$onError$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).listen$3$onDone$onError(receiver, a0, a1, a2);
};
J.map$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).map$1(receiver, a0);
};
J.matches$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).matches$1(receiver, a0);
};
J.matchesWithAncestors$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).matchesWithAncestors$1(receiver, a0);
};
J.noSuchMethod$1 = function(receiver, a0) {
  return J.getInterceptor(receiver).noSuchMethod$1(receiver, a0);
};
J.observe$3$attributeFilter$attributes$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).observe$3$attributeFilter$attributes(receiver, a0, a1, a2);
};
J.onError$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).onError$1(receiver, a0);
};
J.open$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).open$1(receiver, a0);
};
J.print$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).print$1(receiver, a0);
};
J.querySelector$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).querySelector$1(receiver, a0);
};
J.querySelectorAll$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).querySelectorAll$1(receiver, a0);
};
J.remove$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).remove$0(receiver);
};
J.remove$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.replaceAll$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
J.replaceAllMapped$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).replaceAllMapped$2(receiver, a0, a1);
};
J.round$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).round$0(receiver);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$_dartDetail$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$_dartDetail(receiver, value);
};
J.set$_selector$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$_selector(receiver, value);
};
J.set$bindingDelegate$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$bindingDelegate(receiver, value);
};
J.set$bindings$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$bindings(receiver, value);
};
J.set$className$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$className(receiver, value);
};
J.set$counter$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$counter(receiver, value);
};
J.set$href$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$href(receiver, value);
};
J.set$icon$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$icon(receiver, value);
};
J.set$iconSrc$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$iconSrc(receiver, value);
};
J.set$length$asx = function(receiver, value) {
  return J.getInterceptor$asx(receiver).set$length(receiver, value);
};
J.set$text$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$text(receiver, value);
};
J.set$value$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$value(receiver, value);
};
J.set$z$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$z(receiver, value);
};
J.split$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).split$1(receiver, a0);
};
J.startsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
};
J.sublist$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
};
J.substring$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).substring$1(receiver, a0);
};
J.substring$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
};
J.toInt$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toInt$0(receiver);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toList$1$growable$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).toList$1$growable(receiver, a0);
};
J.toLowerCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
J.toRadixString$1$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.toUpperCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toUpperCase$0(receiver);
};
J.trim$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).trim$0(receiver);
};
J.where$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).where$1(receiver, a0);
};
C.AutoBindingElement_methods = Y.AutoBindingElement.prototype;
C.CoreIcon_methods = L.CoreIcon.prototype;
C.CoreIconset_methods = M.CoreIconset.prototype;
C.CoreMeta_methods = S.CoreMeta.prototype;
C.HttpRequest_methods = W.HttpRequest.prototype;
C.JSArray_methods = J.JSArray.prototype;
C.JSDouble_methods = J.JSDouble.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNull_methods = J.JSNull.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.NodeList_methods = W.NodeList.prototype;
C.PaperButton_methods = G.PaperButton.prototype;
C.PaperFocusable_methods = N.PaperFocusable.prototype;
C.PaperRipple_methods = F.PaperRipple.prototype;
C.PaperShadow_methods = V.PaperShadow.prototype;
C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
C.PolymerElement_methods = A.PolymerElement.prototype;
C.PurityStopwatch_methods = B.PurityStopwatch.prototype;
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.Window_methods = W.Window.prototype;
C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
C.C_EmptyExpression = new U.EmptyExpression();
C.C_EmptyIterable = new H.EmptyIterable();
C.C_EmptyIterator = new H.EmptyIterator();
C.C_OutOfMemoryError = new P.OutOfMemoryError();
C.C_ScopeFactory = new T.ScopeFactory();
C.C__DelayedDone = new P._DelayedDone();
C.C__JSRandom = new P._JSRandom();
C.C__ObserverSentinel = new L._ObserverSentinel();
C.C__RootZone = new P._RootZone();
C.DeclarationKind_0 = new A.DeclarationKind(0);
C.DeclarationKind_1 = new A.DeclarationKind(1);
C.DeclarationKind_2 = new A.DeclarationKind(2);
C.Symbol_counter = new H.Symbol("counter");
C.Type_Ejg = H.createRuntimeType('String');
C.C_Reflectable = new K.Reflectable();
C.PublishedProperty_false = new A.PublishedProperty(false);
Isolate.makeConstantList = function(list) {
  list.immutable$list = init;
  list.fixed$length = init;
  return list;
};
;
C.List_bTJ = Isolate.makeConstantList([C.C_Reflectable, C.PublishedProperty_false]);
C.Declaration_W3w = new A.Declaration(C.Symbol_counter, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_bTJ);
C.Duration_0 = new P.Duration(0);
C.Duration_1000000 = new P.Duration(1000000);
C.Endianness_false = new P.Endianness(false);
C.Endianness_true = new P.Endianness(true);
C.EventStreamProvider_click = H.setRuntimeTypeInfo(new W.EventStreamProvider("click"), [W.MouseEvent]);
C.EventStreamProvider_error = H.setRuntimeTypeInfo(new W.EventStreamProvider("error"), [W.ProgressEvent]);
C.EventStreamProvider_error0 = H.setRuntimeTypeInfo(new W.EventStreamProvider("error"), [W.Event0]);
C.EventStreamProvider_load = H.setRuntimeTypeInfo(new W.EventStreamProvider("load"), [W.ProgressEvent]);
C.HtmlEscapeMode_p2v = new P.HtmlEscapeMode("unknown", true, true, true, true);
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_8ZY = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string" &&
        name.length > 2 &&
        name !== "Object" &&
        name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_gkc = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.JS_CONST_oRe = function() {
  function typeNameInChrome(o) {
    var name = o.constructor.name;
    if (name) return name;
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
C.JS_CONST_s8I = function(_, letter) { return letter.toUpperCase(); };
C.JsonCodec_null_null = new P.JsonCodec(null, null);
C.JsonDecoder_null = new P.JsonDecoder(null);
C.Level_FINER_400 = new N.Level("FINER", 400);
C.Level_FINE_500 = new N.Level("FINE", 500);
C.Level_INFO_800 = new N.Level("INFO", 800);
C.Level_OFF_2000 = new N.Level("OFF", 2000);
C.Level_WARNING_900 = new N.Level("WARNING", 900);
C.List_0 = Isolate.makeConstantList(["1", "!", "2", "\"", "3", "\u00a3", "4", "$", "5", "%", "6", "^", "7", "&", "8", "*", "9", "(", "0", ")", "a", "A", "b", "B", "c", "C", "d", "D", "e", "E", "f", "F", "g", "G", "h", "H", "i", "I", "j", "J", "k", "K", "l", "L", "m", "M", "n", "N", "o", "O", "p", "P", "q", "Q", "r", "R", "s", "S", "t", "T", "u", "U", "v", "V", "w", "W", "x", "X", "y", "Y", "z", "Z", "\\", "|", ",", "<", ".", ">", "/", "?", ";", "'", "@", "#", "~", "[", "{", "]", "}", "-", "_", "=", "+", "`", "\u00ac"]);
C.List_127_2047_65535_1114111 = H.setRuntimeTypeInfo(Isolate.makeConstantList([127, 2047, 65535, 1114111]), [P.$int]);
C.List_1GN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [P.String]);
C.List_2Vk = Isolate.makeConstantList([0, 0, 32776, 33792, 1, 10240, 0, 0]);
C.Symbol_keys = new H.Symbol("keys");
C.Symbol_values = new H.Symbol("values");
C.Symbol_length = new H.Symbol("length");
C.Symbol_isEmpty = new H.Symbol("isEmpty");
C.Symbol_isNotEmpty = new H.Symbol("isNotEmpty");
C.List_8QI = Isolate.makeConstantList([C.Symbol_keys, C.Symbol_values, C.Symbol_length, C.Symbol_isEmpty, C.Symbol_isNotEmpty]);
C.List_CVk = Isolate.makeConstantList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]);
C.List_EuK = H.setRuntimeTypeInfo(Isolate.makeConstantList(["+", "-", "*", "/", "%", "^", "==", "!=", ">", "<", ">=", "<=", "||", "&&", "&", "===", "!==", "|"]), [P.String]);
C.Type_6WV = H.createRuntimeType('ObservableProperty');
C.List_GGa = Isolate.makeConstantList([C.Type_6WV]);
C.List_JYB = Isolate.makeConstantList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]);
C.List_WnV = Isolate.makeConstantList(["/", "\\"]);
C.List_Ynd = Isolate.makeConstantList(["==", "!=", "<=", ">=", "||", "&&"]);
C.List_as_in_this = Isolate.makeConstantList(["as", "in", "this"]);
C.List_cSk = Isolate.makeConstantList(["/"]);
C.List_empty = Isolate.makeConstantList([]);
C.List_empty0 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.TypeVariableMirror]);
C.List_empty1 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.TypeMirror]);
C.List_empty2 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.String]);
C.List_empty3 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.$int]);
C.List_gRj = Isolate.makeConstantList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]);
C.List_mC8 = Isolate.makeConstantList([43, 45, 42, 47, 33, 38, 37, 60, 61, 62, 63, 94, 124]);
C.List_nxB = Isolate.makeConstantList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]);
C.List_qNA = Isolate.makeConstantList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]);
C.List_qg4 = Isolate.makeConstantList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]);
C.List_qg40 = Isolate.makeConstantList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]);
C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [P.String]);
C.List_ww8 = Isolate.makeConstantList([40, 41, 91, 93, 123, 125]);
C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [P.String]);
C.List_05B = Isolate.makeConstantList(["caption", "col", "colgroup", "option", "optgroup", "tbody", "td", "tfoot", "th", "thead", "tr"]);
C.Map_05U44 = new H.ConstantStringMap(11, {caption: null, col: null, colgroup: null, option: null, optgroup: null, tbody: null, td: null, tfoot: null, th: null, thead: null, tr: null}, C.List_05B);
C.List_AmO = Isolate.makeConstantList(["domfocusout", "domfocusin", "dommousescroll", "animationend", "animationiteration", "animationstart", "doubleclick", "fullscreenchange", "fullscreenerror", "keyadded", "keyerror", "keymessage", "needkey", "speechchange"]);
C.Map_AmbKl = new H.ConstantStringMap(14, {domfocusout: "DOMFocusOut", domfocusin: "DOMFocusIn", dommousescroll: "DOMMouseScroll", animationend: "webkitAnimationEnd", animationiteration: "webkitAnimationIteration", animationstart: "webkitAnimationStart", doubleclick: "dblclick", fullscreenchange: "webkitfullscreenchange", fullscreenerror: "webkitfullscreenerror", keyadded: "webkitkeyadded", keyerror: "webkitkeyerror", keymessage: "webkitkeymessage", needkey: "webkitneedkey", speechchange: "webkitSpeechChange"}, C.List_AmO);
C.List_EJ5 = Isolate.makeConstantList(["name", "extends", "constructor", "noscript", "assetpath", "cache-csstext", "attributes"]);
C.Map_EJj5B = new H.ConstantStringMap(7, {name: 1, extends: 1, constructor: 1, noscript: 1, assetpath: 1, "cache-csstext": 1, attributes: 1}, C.List_EJ5);
C.List_L0C = Isolate.makeConstantList(["!", ":", ",", ")", "]", "}", "?", "||", "&&", "|", "^", "&", "!=", "==", "!==", "===", ">=", ">", "<=", "<", "+", "-", "%", "/", "*", "(", "[", ".", "{"]);
C.Map_L0VM2 = new H.ConstantStringMap(29, {"!": 0, ":": 0, ",": 0, ")": 0, "]": 0, "}": 0, "?": 1, "||": 2, "&&": 3, "|": 4, "^": 5, "&": 6, "!=": 7, "==": 7, "!==": 7, "===": 7, ">=": 8, ">": 8, "<=": 8, "<": 8, "+": 9, "-": 9, "%": 10, "/": 10, "*": 10, "(": 11, "[": 11, ".": 11, "{": 11}, C.List_L0C);
C.Map_empty = new H.ConstantStringMap(0, {}, C.List_empty);
C.List_enumerate = Isolate.makeConstantList(["enumerate"]);
C.Map_wgles = new H.ConstantStringMap(1, {enumerate: K.enumerate$closure()}, C.List_enumerate);
C.Type_fPs = H.createRuntimeType('HtmlElement');
C.Type_Vav = H.createRuntimeType('ComputedProperty');
C.List_kvD = Isolate.makeConstantList([C.Type_Vav]);
C.QueryOptions_ijl = new A.QueryOptions(true, true, true, C.Type_fPs, false, false, C.List_kvD, null);
C.Type_oGx = H.createRuntimeType('PublishedProperty');
C.List_JQl = Isolate.makeConstantList([C.Type_oGx]);
C.QueryOptions_sAl = new A.QueryOptions(true, true, true, C.Type_fPs, false, false, C.List_JQl, null);
C.Type_oqK = H.createRuntimeType('ObserveProperty');
C.List_M2f = Isolate.makeConstantList([C.Type_oqK]);
C.QueryOptions_xw8 = new A.QueryOptions(false, false, true, C.Type_fPs, false, true, C.List_M2f, null);
C.Symbol_addEventAction = new H.Symbol("addEventAction");
C.Symbol_blurAction = new H.Symbol("blurAction");
C.Symbol_call = new H.Symbol("call");
C.Symbol_contextMenuAction = new H.Symbol("contextMenuAction");
C.Symbol_downAction = new H.Symbol("downAction");
C.Symbol_dynamic = new H.Symbol("dynamic");
C.Symbol_emitEvent = new H.Symbol("emitEvent");
C.Symbol_focusAction = new H.Symbol("focusAction");
C.Symbol_icon = new H.Symbol("icon");
C.Symbol_iconSrc = new H.Symbol("iconSrc");
C.Symbol_ignoreAllEvents = new H.Symbol("ignoreAllEvents");
C.Symbol_ignoreAllEventsFrom = new H.Symbol("ignoreAllEventsFrom");
C.Symbol_ignoreAllEventsOfType = new H.Symbol("ignoreAllEventsOfType");
C.Symbol_ignoreSpecificEventBinding = new H.Symbol("ignoreSpecificEventBinding");
C.Symbol_label = new H.Symbol("label");
C.Symbol_listen = new H.Symbol("listen");
C.Symbol_noSuchMethod = new H.Symbol("noSuchMethod");
C.Symbol_raisedButton = new H.Symbol("raisedButton");
C.Symbol_registerCallback = new H.Symbol("registerCallback");
C.Symbol_removeEventAction = new H.Symbol("removeEventAction");
C.Symbol_reset = new H.Symbol("reset");
C.Symbol_start = new H.Symbol("start");
C.Symbol_stop = new H.Symbol("stop");
C.Symbol_upAction = new H.Symbol("upAction");
C.Symbol_value = new H.Symbol("value");
C.Symbol_void = new H.Symbol("void");
C.Symbol_z = new H.Symbol("z");
C.Type_46y = H.createRuntimeType('Map');
C.Type_4y3 = H.createRuntimeType('Start');
C.Type_6L0 = H.createRuntimeType('Uint8List');
C.Type_ACQ = H.createRuntimeType('CoreIconset');
C.Type_AGr = H.createRuntimeType('JsTypeVariableMirror');
C.Type_AHF = H.createRuntimeType('NativeTypedArray');
C.Type_Art = H.createRuntimeType('Float32List');
C.Type_AuK = H.createRuntimeType('Stop');
C.Type_AyE = H.createRuntimeType('PaperRipple');
C.Type_CAk = H.createRuntimeType('Uint16List');
C.Type_EOZ = H.createRuntimeType('_M1');
C.Type_EQs = H.createRuntimeType('GlobalEventHandlers');
C.Type_EjN = H.createRuntimeType('Function');
C.Type_EsU = H.createRuntimeType('bool');
C.Type_GNh = H.createRuntimeType('_M0');
C.Type_HqF = H.createRuntimeType('Object');
C.Type_I2I = H.createRuntimeType('PolymerElement');
C.Type_I5O = H.createRuntimeType('Symbol0');
C.Type_K6o = H.createRuntimeType('PaperFocusable');
C.Type_MPa = H.createRuntimeType('PaperButton');
C.Type_NlB = H.createRuntimeType('NativeTypedArrayOfDouble');
C.Type_OqP = H.createRuntimeType('DurationChange');
C.Type_Q1p = H.createRuntimeType('Set');
C.Type_QuW = H.createRuntimeType('Uint8ClampedList');
C.Type_QyU = H.createRuntimeType('WindowEventHandlers');
C.Type_SnA = H.createRuntimeType('$int');
C.Type_T43 = H.createRuntimeType('Type');
C.Type_UWS = H.createRuntimeType('List');
C.Type_UoK = H.createRuntimeType('Int16List');
C.Type_XXD = H.createRuntimeType('JSObject');
C.Type_aB0 = H.createRuntimeType('CoreMeta');
C.Type_aRS = H.createRuntimeType('PaperShadow');
C.Type_ckn = H.createRuntimeType('Float64List');
C.Type_dOE = H.createRuntimeType('RegExp');
C.Type_dTZ = H.createRuntimeType('Int32List');
C.Type_dVs = H.createRuntimeType('DateTime');
C.Type_dynamic = H.createRuntimeType('dynamic');
C.Type_eZO = H.createRuntimeType('Null');
C.Type_irB = H.createRuntimeType('Uint32List');
C.Type_jWj = H.createRuntimeType('CoreIcon');
C.Type_ki2 = H.createRuntimeType('_InternalPointer');
C.Type_mp3 = H.createRuntimeType('Int8List');
C.Type_oGP = H.createRuntimeType('ByteData');
C.Type_oOt = H.createRuntimeType('Duration');
C.Type_ol5 = H.createRuntimeType('PurityStopwatch');
C.Type_q2l = H.createRuntimeType('Transmittable');
C.Type_qq1 = H.createRuntimeType('$double');
C.Type_s8b = H.createRuntimeType('AutoBindingElement');
C.Type_wAg = H.createRuntimeType('ByteBuffer');
C.Type_wOW = H.createRuntimeType('NativeTypedArrayOfInt');
C.Type_xM7 = H.createRuntimeType('num');
C.Type_yzX = H.createRuntimeType('Omni');
C.Utf8Codec_false = new P.Utf8Codec(false);
C._ZoneFunction_3bB = new P._ZoneFunction(C.C__RootZone, P._rootCreatePeriodicTimer$closure());
C._ZoneFunction_7G2 = new P._ZoneFunction(C.C__RootZone, P._rootRegisterBinaryCallback$closure());
C._ZoneFunction_Eeh = new P._ZoneFunction(C.C__RootZone, P._rootRegisterUnaryCallback$closure());
C._ZoneFunction_NMc = new P._ZoneFunction(C.C__RootZone, P._rootHandleUncaughtError$closure());
C._ZoneFunction__RootZone__rootCreateTimer = new P._ZoneFunction(C.C__RootZone, P._rootCreateTimer$closure());
C._ZoneFunction__RootZone__rootFork = new P._ZoneFunction(C.C__RootZone, P._rootFork$closure());
C._ZoneFunction__RootZone__rootPrint = new P._ZoneFunction(C.C__RootZone, P._rootPrint$closure());
C._ZoneFunction__RootZone__rootRegisterCallback = new P._ZoneFunction(C.C__RootZone, P._rootRegisterCallback$closure());
C._ZoneFunction__RootZone__rootRun = new P._ZoneFunction(C.C__RootZone, P._rootRun$closure());
C._ZoneFunction__RootZone__rootRunBinary = new P._ZoneFunction(C.C__RootZone, P._rootRunBinary$closure());
C._ZoneFunction__RootZone__rootRunUnary = new P._ZoneFunction(C.C__RootZone, P._rootRunUnary$closure());
C._ZoneFunction__RootZone__rootScheduleMicrotask = new P._ZoneFunction(C.C__RootZone, P._rootScheduleMicrotask$closure());
C._ZoneSpecification_woc = new P._ZoneSpecification(null, null, null, null, null, null, null, null, null, null, null, null);
$.libraries_to_load = {};
$.IsolateNatives_enableSpawnWorker = null;
$.RawReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.Closure_functionCounter = 0;
$.BoundClosure_selfFieldNameCache = null;
$.BoundClosure_receiverFieldNameCache = null;
$.RuntimeFunctionType_inAssert = false;
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.printToZone = null;
$.classMirrors = null;
$._nextCallback = null;
$._lastCallback = null;
$._lastPriorityCallback = null;
$._isInCallbackLoop = false;
$.Zone__current = C.C__RootZone;
$._RootZone__rootDelegate = null;
$.Expando__keyCount = 0;
$.Element__parseDocument = null;
$.Element__parseRange = null;
$.Element__defaultValidator = null;
$.Element__defaultSanitizer = null;
$.Device__isOpera = null;
$.Device__isIE = null;
$.Device__isFirefox = null;
$.Device__isWebKit = null;
$.Device__cachedCssPrefix = null;
$.hierarchicalLoggingEnabled = false;
$._rootLevel = C.Level_INFO_800;
$.LogRecord__nextNumber = 0;
$._allObservablesCount = 0;
$._allObservables = null;
$._delivering = false;
$._Observer__UNOPENED = 0;
$._Observer__OPENED = 1;
$._Observer__CLOSED = 2;
$._ObservedSet__lastSet = null;
$._deployMode = false;
$._startPolymerCalled = false;
$.initializers = null;
$.deployMode = true;
$._stopwatchTranTypesRegistered = false;
$.TemplateBindExtension__initStyles = null;
$.TemplateBindExtension__initBaseUriWorkaround = null;
$._currentNamespace = null;
$._currentNamespaceKeyCount = 0;
$._tranTranTypesRegistered = false;
$.interceptedNames = ["$add", "$and", "$div", "$eq", "$ge", "$gt", "$index", "$indexSet", "$le", "$lt", "$mod", "$mul", "$negate", "$not", "$or", "$shl", "$shr", "$sub", "$tdiv", "$xor", "AutoBindingElement$created$0", "Element$created$0", "PolymerElement$created$0", "__isolate_helper$_add$1", "_add$1", "_async$_add$1", "_checkIndex$2", "_checkSublistArguments$3", "_clearChildren$0", "_ensureRequestAnimationFrame$0", "_eval$_observe$2", "_getBindingForComputedProperty$1", "_getPropertyValueHelper$1", "_handleDurationChange$1", "_initCustomEvent$4", "_initSourceBinding$0", "_initialiseIndexes$2", "_invalidIndex$2", "_observable$_observed$0", "_propertyChange$3", "_propertyChangeWorkaround$1", "_rangeCheck$2", "_requestAnimationFrame$1", "_setPropertyHelper$3", "_setRangeFast$4", "_shlPositive$1", "_shrOtherPositive$1", "_tdivFast$1", "_unobserved$0", "abs$0", "accept$1", "add$1", "addAll$1", "addEventListener$3", "addHostListeners$0", "allMatches$1", "allMatches$2", "any$1", "append$1", "async$1", "asyncUnbindAll$0", "attached$0", "attributeChanged$3", "attributeToProperty$2", "bind$3$oneTime", "bindFinished$0", "bindProperty$3$oneTime", "bindToAccessor$2", "bindToAccessor$3$resolveBindingValue", "cancelUnbindAll$0", "clear$0", "close$0", "closeNamedObservers$0", "closeObservers$0", "codeUnitAt$1", "compareTo$1", "complete$0", "complete$1", "contains$1", "contains$2", "copyInstanceAttributes$0", "createComputedProperties$0", "createDocumentFragment$0", "createElement$1", "createElement$2", "createFragment$3$treeSanitizer$validator", "createHtmlDocument$1", "createInstance$2", "createPropertyObserver$0", "createShadowRoot$0", "defaultValue$1", "deliverChanges$0", "detached$0", "dispatchEvent$1", "dispatchMethod$3", "elementAt$1", "emitPropertyChangeRecord$3", "endsWith$1", "fire$1", "fire$5$canBubble$cancelable$detail$onNode", "firstWhere$1", "firstWhere$2$defaultValue", "firstWhere$2$orElse", "fold$2", "forEach$1", "get$$$", "get$__js_helper$_name", "get$_children", "get$_dartDetail", "get$_element", "get$_emitterIndexes", "get$_jsElem", "get$_name", "get$_observable$_changes", "get$_observe", "get$_polymer$_name", "get$_records", "get$_selector", "get$_self", "get$_typeIndexes", "get$_values", "get$attributes", "get$baseUri", "get$bindingDelegate", "get$bindings", "get$bottom", "get$changes", "get$className", "get$classes", "get$clear", "get$codeUnits", "get$consumer", "get$content", "get$counter", "get$currentTarget", "get$data", "get$defaultValue", "get$detail", "get$duration", "get$element", "get$entries", "get$error", "get$first", "get$firstChild", "get$hasObservers", "get$hashCode", "get$head", "get$height", "get$host", "get$hostname", "get$href", "get$icon", "get$iconSrc", "get$id", "get$implementation", "get$index", "get$isEmpty", "get$isNaN", "get$isNegative", "get$isNotEmpty", "get$iterator", "get$jsElement", "get$key", "get$kind", "get$label", "get$last", "get$lastChild", "get$left", "get$length", "get$localName", "get$message", "get$method", "get$model", "get$name", "get$namespaceUri", "get$nextElementSibling", "get$nextNode", "get$nodes", "get$offset", "get$onClick", "get$onError", "get$operator", "get$ownerDocument", "get$parent", "get$parentNode", "get$pattern", "get$port", "get$protocol", "get$raisedButton", "get$responseText", "get$right", "get$runtimeType", "get$single", "get$span", "get$src", "get$start", "get$syntax", "get$tagName", "get$target", "get$templateInstance", "get$text", "get$top", "get$topLeft", "get$type", "get$value", "get$values", "get$width", "get$window", "get$x", "get$y", "get$z", "getBoundingClientRect$0", "getElementById$1", "getPropertyValue$1", "getRange$2", "ignoreAllEvents$0", "ignoreAllEventsFrom$1", "ignoreAllEventsOfType$1", "ignoreSpecificEventBinding$2", "importNode$2", "index$2", "indexOf$1", "indexOf$2", "insert$2", "insertBefore$2", "join$1", "join$8", "lastIndexOf$1", "lastIndexOf$2", "listen$1", "listen$3", "listen$3$onDone$onError", "listen$4$cancelOnError$onDone$onError", "makeElementReady$0", "map$1", "marshalNodeReferences$1", "matches$1", "matchesWithAncestors$1", "message$1", "message$2$color", "noSuchMethod$1", "notifyChange$1", "notifyPropertyChange$3", "notifyPropertyChanges$3", "observe$2", "observe$3$attributeFilter$attributes", "observe$8$attributeFilter$attributeOldValue$attributes$characterData$characterDataOldValue$childList$subtree", "observeArrayValue$3", "observed$0", "onError$1", "open$1", "open$3$async", "open$5$async$password$user", "parseDeclaration$1", "parseDeclarations$1", "pause$0", "pause$1", "polymerCreated$0", "prepareElement$0", "print$1", "propertyForAttribute$1", "query$2", "querySelector$1", "querySelectorAll$1", "reflectPropertyToAttribute$1", "remainder$1", "remove$0", "remove$1", "removeAt$1", "removeEventListener$3", "removeLast$0", "replaceAll$2", "replaceAllMapped$2", "replaceFirst$2", "reset$0", "reset$1", "reset$3", "round$0", "roundToDouble$0", "send$1", "send$2", "serializeValue$1", "set$$$", "set$__js_helper$_name", "set$_children", "set$_dartDetail", "set$_element", "set$_emitterIndexes", "set$_jsElem", "set$_name", "set$_observable$_changes", "set$_observe", "set$_records", "set$_selector", "set$_self", "set$_typeIndexes", "set$_values", "set$baseUri", "set$bindingDelegate", "set$bindings", "set$bottom", "set$className", "set$consumer", "set$content", "set$counter", "set$data", "set$defaultValue", "set$duration", "set$element", "set$entries", "set$error", "set$firstChild", "set$height", "set$hostname", "set$href", "set$icon", "set$iconSrc", "set$id", "set$implementation", "set$index", "set$key", "set$kind", "set$label", "set$lastChild", "set$left", "set$length", "set$message", "set$method", "set$model", "set$name", "set$nextElementSibling", "set$nextNode", "set$offset", "set$operator", "set$ownerDocument", "set$parent", "set$parentNode", "set$pattern", "set$port", "set$protocol", "set$responseText", "set$right", "set$span", "set$src", "set$start", "set$syntax", "set$tagName", "set$target", "set$text", "set$top", "set$type", "set$value", "set$values", "set$width", "set$x", "set$y", "set$z", "setProperty$3", "setRange$4", "shadowFromTemplate$1", "skip$1", "split$1", "start$0", "start$1", "start$2", "start$3", "startsWith$1", "startsWith$2", "stop$0", "stop$3", "sublist$1", "sublist$2", "substring$1", "substring$2", "take$1", "takeAttributes$0", "toInt$0", "toList$0", "toList$1$growable", "toLowerCase$0", "toRadixString$1", "toString$0", "toUpperCase$0", "trim$0", "unbindAll$0", "unobserved$0", "where$1"];
$.mapTypeToInterceptor = [C.Type_fPs, W.HtmlElement, {}, C.Type_ACQ, M.CoreIconset, {created: M.CoreIconset$created}, C.Type_AHF, H.NativeTypedArray, {"": H.NativeTypedArray$}, C.Type_AyE, F.PaperRipple, {created: F.PaperRipple$created}, C.Type_EQs, W.GlobalEventHandlers, {}, C.Type_I2I, A.PolymerElement, {created: A.PolymerElement$created}, C.Type_K6o, N.PaperFocusable, {created: N.PaperFocusable$created}, C.Type_MPa, G.PaperButton, {created: G.PaperButton$created}, C.Type_NlB, H.NativeTypedArrayOfDouble, {"": H.NativeTypedArrayOfDouble$}, C.Type_QyU, W.WindowEventHandlers, {}, C.Type_aB0, S.CoreMeta, {created: S.CoreMeta$created}, C.Type_aRS, V.PaperShadow, {created: V.PaperShadow$created}, C.Type_jWj, L.CoreIcon, {created: L.CoreIcon$created}, C.Type_ol5, B.PurityStopwatch, {created: B.PurityStopwatch$created}, C.Type_s8b, Y.AutoBindingElement, {created: Y.AutoBindingElement$created}, C.Type_wOW, H.NativeTypedArrayOfInt, {"": H.NativeTypedArrayOfInt$}];
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  var t1 = new P.Expando(null);
  t1.$builtinTypeInfo = [P.$int];
  return t1;
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({toString: function() {
      return "$receiver$";
    }}));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null, toString: function() {
      return "$receiver$";
    }}));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    var $argumentsExpr$ = '$arguments$';
    try {
      null.$method$($argumentsExpr$);
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    var $argumentsExpr$ = '$arguments$';
    try {
      (void 0).$method$($argumentsExpr$);
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    try {
      null.$method$;
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    try {
      (void 0).$method$;
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "_current_increment", "_Statics__current_increment", "get$_Statics__current_increment", function() {
  return C.C__JSRandom.nextInt$1(4294967295);
});
Isolate.$lazy($, "RandomId", "_Statics_RandomId", "get$_Statics_RandomId", function() {
  return C.C__JSRandom.nextInt$1(4294967295);
});
Isolate.$lazy($, "publicSymbolPattern", "Symbol_publicSymbolPattern", "get$Symbol_publicSymbolPattern", function() {
  return new H.JSSyntaxRegExp("^(?:(?:[\\-+*/%&|^]|\\[\\]=?|==|~/?|<[<=]?|>[>=]?|unary-)$|(?!(?:assert|break|c(?:a(?:se|tch)|lass|on(?:st|tinue))|d(?:efault|o)|e(?:lse|num|xtends)|f(?:alse|inal(?:ly)?|or)|i[fns]|n(?:ew|ull)|ret(?:hrow|urn)|s(?:uper|witch)|t(?:h(?:is|row)|r(?:ue|y))|v(?:ar|oid)|w(?:hile|ith))\\b(?!\\$))[a-zA-Z$][\\w$]*(?:=?$|[.](?!$)))+?$", H.JSSyntaxRegExp_makeNative("^(?:(?:[\\-+*/%&|^]|\\[\\]=?|==|~/?|<[<=]?|>[>=]?|unary-)$|(?!(?:assert|break|c(?:a(?:se|tch)|lass|on(?:st|tinue))|d(?:efault|o)|e(?:lse|num|xtends)|f(?:alse|inal(?:ly)?|or)|i[fns]|n(?:ew|ull)|ret(?:hrow|urn)|s(?:uper|witch)|t(?:h(?:is|row)|r(?:ue|y))|v(?:ar|oid)|w(?:hile|ith))\\b(?!\\$))[a-zA-Z$][\\w$]*(?:=?$|[.](?!$)))+?$", false, true, false), null, null);
});
Isolate.$lazy($, "_dynamicType", "JsMirrorSystem__dynamicType", "get$JsMirrorSystem__dynamicType", function() {
  return new H.JsTypeMirror(C.Symbol_dynamic);
});
Isolate.$lazy($, "_voidType", "JsMirrorSystem__voidType", "get$JsMirrorSystem__voidType", function() {
  return new H.JsTypeMirror(C.Symbol_void);
});
Isolate.$lazy($, "librariesByName", "JsMirrorSystem_librariesByName", "get$JsMirrorSystem_librariesByName", function() {
  return H.JsMirrorSystem_computeLibrariesByName();
});
Isolate.$lazy($, "currentJsMirrorSystem", "currentJsMirrorSystem", "get$currentJsMirrorSystem", function() {
  return new H.JsMirrorSystem(null, new H.JsIsolateMirror(init.globalState.currentContext));
});
Isolate.$lazy($, "mangledNames", "mangledNames", "get$mangledNames", function() {
  return H.computeMangledNames(init.mangledNames, false);
});
Isolate.$lazy($, "reflectiveNames", "reflectiveNames", "get$reflectiveNames", function() {
  return H.computeReflectiveNames($.get$mangledNames());
});
Isolate.$lazy($, "mangledGlobalNames", "mangledGlobalNames", "get$mangledGlobalNames", function() {
  return H.computeMangledNames(init.mangledGlobalNames, true);
});
Isolate.$lazy($, "scheduleImmediateClosure", "_AsyncRun_scheduleImmediateClosure", "get$_AsyncRun_scheduleImmediateClosure", function() {
  return P._AsyncRun__initializeScheduleImmediate();
});
Isolate.$lazy($, "_rootMap", "_RootZone__rootMap", "get$_RootZone__rootMap", function() {
  return P.HashMap_HashMap(null, null, null, null, null);
});
Isolate.$lazy($, "_toStringVisiting", "IterableBase__toStringVisiting", "get$IterableBase__toStringVisiting", function() {
  return [];
});
Isolate.$lazy($, "_allowedElements", "_Html5NodeValidator__allowedElements", "get$_Html5NodeValidator__allowedElements", function() {
  var t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t1.addAll$1(0, ["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"]);
  return t1;
});
Isolate.$lazy($, "_attributeValidators", "_Html5NodeValidator__attributeValidators", "get$_Html5NodeValidator__attributeValidators", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "context", "context", "get$context", function() {
  return P._wrapToDart(self);
});
Isolate.$lazy($, "_DART_OBJECT_PROPERTY_NAME", "_DART_OBJECT_PROPERTY_NAME", "get$_DART_OBJECT_PROPERTY_NAME", function() {
  return init.getIsolateTag("_$dart_dartObject");
});
Isolate.$lazy($, "_DART_CLOSURE_PROPERTY_NAME", "_DART_CLOSURE_PROPERTY_NAME", "get$_DART_CLOSURE_PROPERTY_NAME", function() {
  return init.getIsolateTag("_$dart_dartClosure");
});
Isolate.$lazy($, "_dartProxyCtor", "_dartProxyCtor", "get$_dartProxyCtor", function() {
  return function DartObject(o) {
    this.o = o;
  };
});
Isolate.$lazy($, "_loggers", "Logger__loggers", "get$Logger__loggers", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(P.String, N.Logger);
});
Isolate.$lazy($, "_logger", "_logger", "get$_logger", function() {
  return N.Logger_Logger("Observable.dirtyCheck");
});
Isolate.$lazy($, "_instance", "_InvalidPropertyPath__instance", "get$_InvalidPropertyPath__instance", function() {
  return new L._InvalidPropertyPath([]);
});
Isolate.$lazy($, "_identRegExp", "_identRegExp", "get$_identRegExp", function() {
  return new L.closure7().call$0();
});
Isolate.$lazy($, "_logger", "_logger0", "get$_logger0", function() {
  return N.Logger_Logger("observe.PathObserver");
});
Isolate.$lazy($, "_pathCache", "_pathCache", "get$_pathCache", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, L.PropertyPath);
});
Isolate.$lazy($, "context", "context0", "get$context0", function() {
  return new F.Context($.get$Style_platform(), null);
});
Isolate.$lazy($, "posix", "Style_posix", "get$Style_posix", function() {
  return new Z.PosixStyle("posix", "/", C.List_cSk, new H.JSSyntaxRegExp("/", H.JSSyntaxRegExp_makeNative("/", false, true, false), null, null), new H.JSSyntaxRegExp("[^/]$", H.JSSyntaxRegExp_makeNative("[^/]$", false, true, false), null, null), new H.JSSyntaxRegExp("^/", H.JSSyntaxRegExp_makeNative("^/", false, true, false), null, null), null);
});
Isolate.$lazy($, "windows", "Style_windows", "get$Style_windows", function() {
  return new T.WindowsStyle("windows", "\\", C.List_WnV, new H.JSSyntaxRegExp("[/\\\\]", H.JSSyntaxRegExp_makeNative("[/\\\\]", false, true, false), null, null), new H.JSSyntaxRegExp("[^/\\\\]$", H.JSSyntaxRegExp_makeNative("[^/\\\\]$", false, true, false), null, null), new H.JSSyntaxRegExp("^(\\\\\\\\[^\\\\]+\\\\[^\\\\/]+|[a-zA-Z]:[/\\\\])", H.JSSyntaxRegExp_makeNative("^(\\\\\\\\[^\\\\]+\\\\[^\\\\/]+|[a-zA-Z]:[/\\\\])", false, true, false), null, null), new H.JSSyntaxRegExp("^[/\\\\](?![/\\\\])", H.JSSyntaxRegExp_makeNative("^[/\\\\](?![/\\\\])", false, true, false), null, null));
});
Isolate.$lazy($, "url", "Style_url", "get$Style_url", function() {
  return new E.UrlStyle("url", "/", C.List_cSk, new H.JSSyntaxRegExp("/", H.JSSyntaxRegExp_makeNative("/", false, true, false), null, null), new H.JSSyntaxRegExp("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$", H.JSSyntaxRegExp_makeNative("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$", false, true, false), null, null), new H.JSSyntaxRegExp("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*", H.JSSyntaxRegExp_makeNative("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*", false, true, false), null, null), new H.JSSyntaxRegExp("^/", H.JSSyntaxRegExp_makeNative("^/", false, true, false), null, null));
});
Isolate.$lazy($, "platform", "Style_platform", "get$Style_platform", function() {
  return S.Style__getPlatformStyle();
});
Isolate.$lazy($, "_polymerSyntax", "PolymerDeclaration__polymerSyntax", "get$PolymerDeclaration__polymerSyntax", function() {
  return new A.PolymerExpressions(T.PolymerExpressions$(null, C.C_ScopeFactory), null);
});
Isolate.$lazy($, "_typesByName", "_typesByName", "get$_typesByName", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, P.Type);
});
Isolate.$lazy($, "_declarations", "_declarations", "get$_declarations", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, A.PolymerDeclaration);
});
Isolate.$lazy($, "_hasShadowDomPolyfill", "_hasShadowDomPolyfill", "get$_hasShadowDomPolyfill", function() {
  return $.get$context().hasProperty$1("ShadowDOMPolyfill");
});
Isolate.$lazy($, "_ShadowCss", "_ShadowCss", "get$_ShadowCss", function() {
  var t1 = $.get$_Platform();
  return t1 != null ? J.$index$asx(t1, "ShadowCSS") : null;
});
Isolate.$lazy($, "_sheetLog", "_sheetLog", "get$_sheetLog", function() {
  return N.Logger_Logger("polymer.stylesheet");
});
Isolate.$lazy($, "_changedMethodQueryOptions", "_changedMethodQueryOptions", "get$_changedMethodQueryOptions", function() {
  return new A.QueryOptions(false, false, true, C.Type_fPs, false, true, null, A._isObserverMethod$closure());
});
Isolate.$lazy($, "_ATTRIBUTES_REGEX", "_ATTRIBUTES_REGEX", "get$_ATTRIBUTES_REGEX", function() {
  return new H.JSSyntaxRegExp("\\s|,", H.JSSyntaxRegExp_makeNative("\\s|,", false, true, false), null, null);
});
Isolate.$lazy($, "_Platform", "_Platform", "get$_Platform", function() {
  return J.$index$asx($.get$context(), "Platform");
});
Isolate.$lazy($, "_Polymer", "_Polymer", "get$_Polymer", function() {
  return J.$index$asx($.get$context(), "Polymer");
});
Isolate.$lazy($, "bindPattern", "Polymer_bindPattern", "get$Polymer_bindPattern", function() {
  return new H.JSSyntaxRegExp("\\{\\{([^{}]*)}}", H.JSSyntaxRegExp_makeNative("\\{\\{([^{}]*)}}", false, true, false), null, null);
});
Isolate.$lazy($, "_onReady", "Polymer__onReady", "get$Polymer__onReady", function() {
  var t1 = new P._AsyncCompleter(P._Future$(null));
  t1.$builtinTypeInfo = [null];
  return t1;
});
Isolate.$lazy($, "_observeLog", "_observeLog", "get$_observeLog", function() {
  return N.Logger_Logger("polymer.observe");
});
Isolate.$lazy($, "_eventsLog", "_eventsLog", "get$_eventsLog", function() {
  return N.Logger_Logger("polymer.events");
});
Isolate.$lazy($, "_unbindLog", "_unbindLog", "get$_unbindLog", function() {
  return N.Logger_Logger("polymer.unbind");
});
Isolate.$lazy($, "_bindLog", "_bindLog", "get$_bindLog", function() {
  return N.Logger_Logger("polymer.bind");
});
Isolate.$lazy($, "_watchLog", "_watchLog", "get$_watchLog", function() {
  return N.Logger_Logger("polymer.watch");
});
Isolate.$lazy($, "_readyLog", "_readyLog", "get$_readyLog", function() {
  return N.Logger_Logger("polymer.ready");
});
Isolate.$lazy($, "_PolymerGestures", "_PolymerGestures", "get$_PolymerGestures", function() {
  return J.$index$asx($.get$context(), "PolymerGestures");
});
Isolate.$lazy($, "_polymerElementProto", "_polymerElementProto", "get$_polymerElementProto", function() {
  return new A.closure().call$0();
});
Isolate.$lazy($, "_urlRegex", "_urlRegex", "get$_urlRegex", function() {
  return new H.JSSyntaxRegExp("http://[^ ]*", H.JSSyntaxRegExp_makeNative("http://[^ ]*", false, true, false), null, null);
});
Isolate.$lazy($, "_typeHandlers", "_typeHandlers", "get$_typeHandlers", function() {
  return P.LinkedHashMap_LinkedHashMap$_literal([C.Type_Ejg, new Z.closure0(), C.Type_eZO, new Z.closure1(), C.Type_dVs, new Z.closure2(), C.Type_EsU, new Z.closure3(), C.Type_SnA, new Z.closure4(), C.Type_qq1, new Z.closure5()], null, null);
});
Isolate.$lazy($, "_BINARY_OPERATORS", "_BINARY_OPERATORS", "get$_BINARY_OPERATORS", function() {
  return P.LinkedHashMap_LinkedHashMap$_literal(["+", new K.closure13(), "-", new K.closure14(), "*", new K.closure15(), "/", new K.closure16(), "%", new K.closure17(), "==", new K.closure18(), "!=", new K.closure19(), "===", new K.closure20(), "!==", new K.closure21(), ">", new K.closure22(), ">=", new K.closure23(), "<", new K.closure24(), "<=", new K.closure25(), "||", new K.closure26(), "&&", new K.closure27(), "|", new K.closure28()], null, null);
});
Isolate.$lazy($, "_UNARY_OPERATORS", "_UNARY_OPERATORS", "get$_UNARY_OPERATORS", function() {
  return P.LinkedHashMap_LinkedHashMap$_literal(["+", new K.closure10(), "-", new K.closure11(), "!", new K.closure12()], null, null);
});
Isolate.$lazy($, "_instance", "Closer__instance", "get$Closer__instance", function() {
  return new K.Closer();
});
Isolate.$lazy($, "_restrictedMethods", "Source__restrictedMethods", "get$Source__restrictedMethods", function() {
  var t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.Symbol0);
  t1.addAll$1(0, [C.Symbol_emitEvent, C.Symbol_addEventAction, C.Symbol_removeEventAction, C.Symbol_listen, C.Symbol_ignoreSpecificEventBinding, C.Symbol_ignoreAllEventsOfType, C.Symbol_ignoreAllEventsFrom, C.Symbol_ignoreAllEvents]);
  return t1;
});
Isolate.$lazy($, "objectAccessor", "objectAccessor", "get$objectAccessor", function() {
  return D.throwNotConfiguredError();
});
Isolate.$lazy($, "typeInspector", "typeInspector", "get$typeInspector", function() {
  return D.throwNotConfiguredError();
});
Isolate.$lazy($, "symbolConverter", "symbolConverter", "get$symbolConverter", function() {
  return D.throwNotConfiguredError();
});
Isolate.$lazy($, "_DEFAULT", "BindingDelegate__DEFAULT", "get$BindingDelegate__DEFAULT", function() {
  return new M.BindingDelegate(null);
});
Isolate.$lazy($, "_contentsOwner", "TemplateBindExtension__contentsOwner", "get$TemplateBindExtension__contentsOwner", function() {
  var t1 = new P.Expando(null);
  t1.$builtinTypeInfo = [null];
  return t1;
});
Isolate.$lazy($, "_ownerStagingDocument", "TemplateBindExtension__ownerStagingDocument", "get$TemplateBindExtension__ownerStagingDocument", function() {
  var t1 = new P.Expando(null);
  t1.$builtinTypeInfo = [null];
  return t1;
});
Isolate.$lazy($, "_allTemplatesSelectors", "TemplateBindExtension__allTemplatesSelectors", "get$TemplateBindExtension__allTemplatesSelectors", function() {
  return C.JSString_methods.$add("template, ", J.join$1$ax(J.map$1$ax(C.Map_05U44.get$keys(), new M.closure6()), ", "));
});
Isolate.$lazy($, "_templateObserver", "TemplateBindExtension__templateObserver", "get$TemplateBindExtension__templateObserver", function() {
  return new (window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver)(H.convertDartClosureToJS(W._wrapBinaryZone(new M.closure8()), 2));
});
Isolate.$lazy($, "_emptyInstance", "_emptyInstance", "get$_emptyInstance", function() {
  return new M.closure9().call$0();
});
Isolate.$lazy($, "_instanceExtension", "_instanceExtension", "get$_instanceExtension", function() {
  var t1 = new P.Expando(null);
  t1.$builtinTypeInfo = [null];
  return t1;
});
Isolate.$lazy($, "_isStagingDocument", "_isStagingDocument", "get$_isStagingDocument", function() {
  var t1 = new P.Expando(null);
  t1.$builtinTypeInfo = [null];
  return t1;
});
Isolate.$lazy($, "_expando", "_expando", "get$_expando", function() {
  var t1 = new P.Expando("template_binding");
  t1.$builtinTypeInfo = [null];
  return t1;
});
Isolate.$lazy($, "_collectionsWithInternalPointers", "_collectionsWithInternalPointers", "get$_collectionsWithInternalPointers", function() {
  return [];
});
Isolate.$lazy($, "_namespaces", "_namespaces", "get$_namespaces", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, P.String);
});
Isolate.$lazy($, "_valueProcessors", "_valueProcessors", "get$_valueProcessors", function() {
  var t1 = [];
  t1.$builtinTypeInfo = [{func: "args1", args: [null]}];
  return t1;
});
Isolate.$lazy($, "_uniqueValues", "_uniqueValues", "get$_uniqueValues", function() {
  return [];
});
Isolate.$lazy($, "_tranCodecsByKey", "_tranCodecsByKey", "get$_tranCodecsByKey", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, B._TranCodec);
});
Isolate.$lazy($, "_tranCodecsByType", "_tranCodecsByType", "get$_tranCodecsByType", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, P.Type, B._TranCodec);
});
Isolate.$lazy($, "_doc", "_doc", "get$_doc", function() {
  return P.JsObject_JsObject$fromBrowserObject(document);
});
// Native classes

init.metadata = ["object",
"sender",
"e",
{func: "dynamic__String", args: [P.String]},
"closure",
"isolate",
"numberOfArguments",
"arg1",
"arg2",
"arg3",
"arg4",
{func: "String__Match", ret: P.String, args: [P.Match]},
{func: "String__String", ret: P.String, args: [P.String]},
{func: "void_", void: true},
{func: "args0"},
{func: "InstanceMirror__Object", ret: P.InstanceMirror, args: [P.Object]},
"reflectee",
{func: "void__void_", void: true, args: [{func: "void_", void: true}]},
{func: "void__dynamic", void: true, args: [null]},
"value",
{func: "void__dynamic__StackTrace", void: true, args: [null], opt: [P.StackTrace]},
,
"error",
"stackTrace",
{func: "void__Zone_ZoneDelegate_Zone_dynamic_StackTrace", void: true, args: [P.Zone, P.ZoneDelegate, P.Zone, null, P.StackTrace]},
"self",
"parent",
"zone",
{func: "dynamic__Zone_ZoneDelegate_Zone_args0", args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args0"}]},
"f",
{func: "dynamic__Zone_ZoneDelegate_Zone_args1_dynamic", args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args1", args: [null]}, null]},
"arg",
{func: "dynamic__Zone_ZoneDelegate_Zone_args2_dynamic_dynamic", args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args2", args: [null, null]}, null, null]},
{func: "ZoneCallback__Zone_ZoneDelegate_Zone_args0", ret: {func: "args0"}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args0"}]},
{func: "ZoneUnaryCallback__Zone_ZoneDelegate_Zone_args1", ret: {func: "args1", args: [null]}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args1", args: [null]}]},
{func: "ZoneBinaryCallback__Zone_ZoneDelegate_Zone_args2", ret: {func: "args2", args: [null, null]}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args2", args: [null, null]}]},
{func: "void__Zone_ZoneDelegate_Zone_args0", void: true, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args0"}]},
{func: "Timer__Zone_ZoneDelegate_Zone_Duration_void_", ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: "void_", void: true}]},
"duration",
"callback",
{func: "Timer__Zone_ZoneDelegate_Zone_Duration_void__Timer", ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: "void__Timer", void: true, args: [P.Timer]}]},
{func: "void__Zone_ZoneDelegate_Zone_String", void: true, args: [P.Zone, P.ZoneDelegate, P.Zone, P.String]},
"line",
{func: "void__String", void: true, args: [P.String]},
{func: "Zone__Zone_ZoneDelegate_Zone_ZoneSpecification_Map", ret: P.Zone, args: [P.Zone, P.ZoneDelegate, P.Zone, P.ZoneSpecification, P.Map]},
"specification",
"zoneValues",
{func: "bool__dynamic_dynamic", ret: P.bool, args: [null, null]},
"a",
"b",
{func: "int__dynamic", ret: P.$int, args: [null]},
{func: "int__Comparable_Comparable", ret: P.$int, args: [P.Comparable, P.Comparable]},
{func: "bool__Object_Object", ret: P.bool, args: [P.Object, P.Object]},
{func: "int__Object", ret: P.$int, args: [P.Object]},
{func: "args1", args: [null]},
"encodedComponent",
{func: "bool__Element_String_String__Html5NodeValidator", ret: P.bool, args: [W.Element, P.String, P.String, W._Html5NodeValidator]},
"element",
"attributeName",
"context",
"receiver",
{func: "args4", args: [null, null, null, null]},
"name",
"oldValue",
"newValue",
"captureThis",
"arguments",
"o",
{func: "Object__dynamic", ret: P.Object, args: [null]},
{func: "bool__Symbol", ret: P.bool, args: [P.Symbol0]},
"symbol",
"v",
{func: "Expression__String", ret: U.Expression, args: [P.String]},
{func: "dynamic__Expression_dynamic__Map_dynamic", args: [U.Expression, null], named: {globals: [P.Map, P.String, P.Object], oneTime: null}},
false,
{func: "Iterable__Iterable", ret: [P.Iterable, K.IndexedValue], args: [P.Iterable]},
"iterable",
{func: "IEndPointMessage_", ret: G.IEndPointMessage},
{func: "_IGarbageCollectionReport_", ret: G._IGarbageCollectionReport},
{func: "_IProxyInvocation_", ret: G._IProxyInvocation},
{func: "_ISourceEvent_", ret: G._ISourceEvent},
{func: "_ISourceReady_", ret: G._ISourceReady},
{func: "IDurationChange_", ret: N.IDurationChange},
{func: "Map__String", ret: P.Map, args: [P.String]},
"s",
{func: "RegExp__String", ret: P.RegExp, args: [P.String]},
{func: "String__Iterable", ret: P.String, args: [P.Iterable]},
{func: "String__Map", ret: P.String, args: [P.Map]},
"m",
{func: "String__Transmittable", ret: P.String, args: [B.Transmittable]},
{func: "String__RegExp", ret: P.String, args: [P.RegExp]},
"invocation",
"key",
"val",
{func: "args2", args: [null, null]},
{func: "int__int", ret: P.$int, args: [P.$int]},
{func: "dynamic__String_dynamic", args: [P.String, null]},
H.TearOffClosure,
{func: "dynamic__dynamic_String", args: [null, P.String]},
{func: "dynamic__int", args: [P.$int]},
{func: "dynamic__Symbol_Mirror", args: [P.Symbol0, P.Mirror]},
{func: "dynamic__Symbol_dynamic", args: [P.Symbol0, null]},
"t",
"tv",
{func: "TypeMirror__int", ret: P.TypeMirror, args: [P.$int]},
{func: "String__int", ret: P.String, args: [P.$int]},
"i",
{func: "dynamic__String_String", args: [P.String, P.String]},
"_",
{func: "dynamic__void_", args: [{func: "void_", void: true}]},
"data",
{func: "void__Object__StackTrace", void: true, args: [P.Object], opt: [P.StackTrace]},
"ignored",
{func: "void___dynamic", void: true, opt: [null]},
{func: "dynamic__dynamic__dynamic", args: [null], opt: [null]},
{func: "bool_", ret: P.bool},
"st",
{func: "dynamic__bool", args: [P.bool]},
{func: "dynamic__dynamic_StackTrace", args: [null, P.StackTrace]},
{func: "void__dynamic_StackTrace", void: true, args: [null, P.StackTrace]},
"each",
"k",
{func: "int__dynamic_int", ret: P.$int, args: [null, P.$int]},
{func: "void__int_int", void: true, args: [P.$int, P.$int]},
{func: "int__String", ret: P.$int, args: [P.String]},
{func: "double__String", ret: P.$double, args: [P.String]},
{func: "bool__dynamic", ret: P.bool, args: [null]},
"other",
{func: "int_", ret: P.$int},
{func: "String_", ret: P.String},
{func: "dynamic__Invocation", args: [P.Invocation]},
{func: "Type_", ret: P.Type},
{func: "void___int", void: true, opt: [P.$int]},
0,
"rawIndex",
{func: "bool__int", ret: P.bool, args: [P.$int]},
{func: "int__dynamic_dynamic", ret: P.$int, args: [null, null]},
"byteString",
{func: "void__String__dynamic", void: true, args: [P.String], opt: [null]},
{func: "int__int_int", ret: P.$int, args: [P.$int, P.$int]},
"xhr",
"attr",
{func: "void__Node", void: true, args: [W.Node]},
[P.Map, X.EventEmitter, [P.Map, P.Type, {func: "void__Event", void: true, args: [X.Event]}]],
[P.Map, P.Type, [P.Map, X.EventEmitter, {func: "void__Event", void: true, args: [X.Event]}]],
{func: "void__EventEmitter_Type_EventAction", void: true, args: [X.EventEmitter, P.Type, {func: "void__Event", void: true, args: [X.Event]}]},
"emitter",
"type",
"action",
{func: "void__EventEmitter_Type", void: true, args: [X.EventEmitter, P.Type]},
{func: "void__Type", void: true, args: [P.Type]},
{func: "void__EventEmitter", void: true, args: [X.EventEmitter]},
[P.Map, P.Type, [P.List, {func: "void__Event", void: true, args: [X.Event]}]],
P.Type,
{func: "void__Type_EventAction", void: true, args: [P.Type, {func: "void__Event", void: true, args: [X.Event]}]},
{func: "dynamic__EventAction", args: [{func: "void__Event", void: true, args: [X.Event]}]},
{func: "dynamic__int_dynamic", args: [P.$int, null]},
{func: "dynamic__ZoneDelegate_Zone", args: [P.ZoneDelegate, P.Zone]},
{func: "dynamic__Zone_ZoneDelegate_Zone_args1", args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args1", args: [null]}]},
"x",
{func: "void__Object_Object", void: true, args: [P.Object, P.Object]},
"obj",
"prop",
"records",
{func: "dynamic__PropertyPath_dynamic", args: [L.PropertyPath, null]},
"model",
"node",
"oneTime",
{func: "args3", args: [null, null, null]},
{func: "void__String_String", void: true, args: [P.String, P.String]},
{func: "void__List_Map_List", void: true, args: [P.List, P.Map, P.List]},
{func: "void__List", void: true, args: [[P.List, T.ChangeRecord]]},
"methodName",
{func: "void__void___Duration", void: true, args: [{func: "void_", void: true}], opt: [P.Duration]},
"wait",
"jsElem",
"extendee",
{func: "dynamic__dynamic_String_String", args: [null, P.String, P.String]},
"rec",
"log",
{func: "dynamic__dynamic_Node_bool", args: [null, W.Node, P.bool]},
{func: "bool__dynamic__bool", ret: P.bool, args: [null], named: {skipChanges: P.bool}},
"skipChanges",
"changes",
"c",
{func: "dynamic__List", args: [[P.List, T.ChangeRecord]]},
{func: "Index__Expression_Expression", ret: U.Index, args: [U.Expression, U.Expression]},
"h",
"item",
{func: "dynamic__Expression", args: [U.Expression]},
F.ObjectId,
P.InstanceMirror,
{func: "void___ProxyInvocation", void: true, args: [G._ProxyInvocation]},
"inv",
{func: "Future__Transmittable", ret: [P.Future, [X.Event, B.Transmittable]], args: [B.Transmittable]},
P.String,
P.bool,
P.Object,
[P.Set, G._Proxy0],
G._Base,
P.Symbol0,
P.List,
[P.Map, P.Symbol0, null],
G._Proxy0,
B.Transmittable,
{func: "String__String__dynamic", ret: P.String, args: [P.String], named: {color: null}},
P.Duration,
P.Timer,
{func: "void__Duration", void: true, args: [P.Duration]},
"du",
{func: "void__Timer", void: true, args: [P.Timer]},
"timer",
G.Source,
N.IStopwatch,
{func: "void__Event_dynamic_Node", void: true, args: [W.Event0, null, W.Node]},
"detail",
"target",
{func: "void__Event0", void: true, args: [[X.Event, N.DurationChange]]},
{func: "Bindable__String", ret: A.Bindable, args: [P.String]},
"ref",
"template",
"ifValue",
{func: "void__DocumentFragment", void: true, args: [W.DocumentFragment]},
{func: "String__Object", ret: P.String, args: [P.Object]},
{func: "String__List", ret: P.String, args: [[P.List, P.Object]]},
"values",
{func: "dynamic___InternalPointer", args: [B._InternalPointer]},
{func: "dynamic__num", args: [P.num]},
{func: "dynamic__double", args: [P.$double]},
{func: "dynamic__Type", args: [P.Type]},
{func: "dynamic__DateTime", args: [P.DateTime]},
{func: "dynamic__Duration", args: [P.Duration]},
{func: "dynamic__Symbol", args: [P.Symbol0]},
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {
  }
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
;
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(fieldDescriptor, accessors, cls) {
    var fieldInformation = fieldDescriptor.split("-");
    var field = fieldInformation[0];
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable;
    if (fieldInformation.length > 1)
      reflectable = true;
    else
      reflectable = false;
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc["^"], supr, name = cls, fields = classData;
        if (typeof classData == "object" && classData instanceof Array) {
          classData = fields = classData[0];
        }
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        split = supr.split(":");
        if (split.length == 2) {
          supr = split[0];
          var functionSignature = split[1];
          if (functionSignature)
            desc.$signature = function(s) {
              return function() {
                return init.metadata[s];
              };
            }(functionSignature);
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      constructor["@"] = desc;
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    var objectClassObject = collectedClasses.Object, shortNames = "run$1,eval$1,fine$1,info$1,lock$0,apply$1,finer$1,get$end,toRti$0,write$1,_check$0,cancel$0,get$_key,get$_ref,get$_run,get$next,get$zone,invoke$3,lookup$1,modify$1,set$next,toJson$0,toggle$1,toggle$2,_decode$1,_encode$1,deliver$0,get$_fork,get$_next,get$_node,get$_type,get$_zone,get$level,get$names,get$owner,perform$1,process$0,set$_next,set$level,warning$1,_publish$1,callback$0,get$_error,get$_print,get$_value,hasMatch$1,invokeOn$2,moveNext$0,runUnary$2,set$_model,set$_value,writeAll$2,_addError$2,_decorate$1,_getField$1,_setError$2,_setValue$1,allowsUri$1,get$_isOpen,get$_jsName,get$_target,get$current,get$getters,get$globals,get$inHours,get$isField,get$isFinal,get$parents,get$reflect,get$removed,get$setters,get$snippet,runBinary$3,set$_parent,_getStream$0,callMethod$1,callMethod$2,childScope$2,combinator$1,get$$package,get$_onError,get$_onValue,get$_reflect,get$fullName,get$isGetter,get$isMethod,get$isPaused,get$isSetter,get$isStatic,get$onRecord,get$onUpdate,get$receiver,isLoggable$1,runGuarded$1,set$_content,_addPending$1,_refChanged$0,containsKey$1,createTimer$2,get$$function,get$__classes,get$_bindings,get$_computed,get$_contents,get$_delegate,get$_hasError,get$_hasValue,get$_internal,get$_isClosed,get$_isFiring,get$_previous,get$_runUnary,get$_typeName,get$arguments,get$errorZone,get$inMinutes,get$inSeconds,get$reflectee,get$sourceUrl,get$uriPolicy,hasProperty$1,readClasses$0,set$_internal,set$_previous,bindCallback$1,get$_errorTest,get$_publishLC,get$_runBinary,get$addedCount,get$combinator,get$entryValue,get$expression,get$hasOnePath,get$isProperty,get$isTemplate,get$jsFunction,get$memberName,get$precedence,get$simpleName,get$stackTrace,get$toolString,indexChanged$1,set$_isChained,whenComplete$1,_expectsEvent$1,allowsElement$1,get$_eventState,get$_isComplete,get$_jsFunction,get$_terminator,get$annotations,get$controlPort,get$isMultiLine,get$mangledName,get$onlyOneTime,set$_eventState,set$initialized,_completeError$2,_toggleEventId$0,cancelSchedule$0,deleteProperty$1,get$_bindingMaps,get$_createTimer,get$_eval$_value,get$_mangledName,get$currentValue,get$declarations,get$isGetterStub,get$isSimplePath,prepareBinding$3,set$_bindingMaps,_iterateObjects$1,_iterateObjects$2,allowsAttribute$3,get$_async$_value,get$_nextListener,get$_protoContent,get$delayedEvents,get$isConstructor,get$isIntercepted,get$qualifiedName,get$reflectedType,get$staticMethods,get$typeVariables,inSameErrorZone$1,runUnaryGuarded$2,set$_nextListener,_eval$_unobserve$0,_isModelProperty$1,_removeListeners$0,get$_isTranSubtype,get$_jsConstructor,get$inMilliseconds,get$isNoSuchMethod,get$isolateStatics,get$namedArguments,runBinaryGuarded$3,bindUnaryCallback$1,get$_eventDelegates,get$isCaseSensitive,_completeWithValue$1,get$_async$_previous,get$_templateCreator,get$superDeclaration,set$_async$_previous,set$_onErrorCallback,set$_onValueCallback,_getFieldsWithOwner$1,createPeriodicTimer$2,get$_collection$_next,get$_polymer$_publish,get$_registerCallback,get$_uniqueValueIndex,handleUncaughtError$2,set$_collection$_next,set$_templateInstance,_getLastTemplateNode$0,_getMethodsWithOwner$1,get$__js_mirrors$_type,get$_removeAfterFiring,get$_scheduleMicrotask,handleControlMessage$1,prepareInstanceModel$1,set$_errorTestCallback,_setRemoveAfterFiring$0,canInvokeReflectively$0,get$_instanceAttributes,get$_transmittable$_key,get$_whenCompleteAction,get$originalDeclaration,get$positionalArguments,registerUnaryCallback$1,get$__isolate_helper$_id,get$_createPeriodicTimer,get$_handleUncaughtError,registerBinaryCallback$1,set$_templateInstanceRef,set$_templateIsDecorated,__isolate_helper$_close$0,get$_registerUnaryCallback,get$millisecondsSinceEpoch,_processBindingDirectives$1,get$_registerBinaryCallback,get$_template_binding$_iterator,set$_whenCompleteActionCallback,prepareInstancePositionChanged$1".split(",");
    var longNames = "run,eval,fine,info,lock,apply,finer,end,toRti,write,_check,cancel,_key,_ref,_run,next,zone,invoke,lookup,modify,next=,toJson,toggle,toggle,_decode,_encode,deliver,_fork,_next,_node,_type,_zone,level,names,owner,perform,process,_next=,level=,warning,_publish,callback,_error,_print,_value,hasMatch,invokeOn,moveNext,runUnary,_model=,_value=,writeAll,_addError,_decorate,_getField,_setError,_setValue,allowsUri,_isOpen,_jsName,_target,current,getters,globals,inHours,isField,isFinal,parents,reflect,removed,setters,snippet,runBinary,_parent=,_getStream,callMethod,callMethod,childScope,combinator,package,_onError,_onValue,_reflect,fullName,isGetter,isMethod,isPaused,isSetter,isStatic,onRecord,onUpdate,receiver,isLoggable,runGuarded,_content=,_addPending,_refChanged,containsKey,createTimer,function,__classes,_bindings,_computed,_contents,_delegate,_hasError,_hasValue,_internal,_isClosed,_isFiring,_previous,_runUnary,_typeName,arguments,errorZone,inMinutes,inSeconds,reflectee,sourceUrl,uriPolicy,hasProperty,readClasses,_internal=,_previous=,bindCallback,_errorTest,_publishLC,_runBinary,addedCount,combinator,entryValue,expression,hasOnePath,isProperty,isTemplate,jsFunction,memberName,precedence,simpleName,stackTrace,toolString,indexChanged,_isChained=,whenComplete,_expectsEvent,allowsElement,_eventState,_isComplete,_jsFunction,_terminator,annotations,controlPort,isMultiLine,mangledName,onlyOneTime,_eventState=,initialized=,_completeError,_toggleEventId,cancelSchedule,deleteProperty,_bindingMaps,_createTimer,_value,_mangledName,currentValue,declarations,isGetterStub,isSimplePath,prepareBinding,_bindingMaps=,_iterateObjects,_iterateObjects,allowsAttribute,_value,_nextListener,_protoContent,delayedEvents,isConstructor,isIntercepted,qualifiedName,reflectedType,staticMethods,typeVariables,inSameErrorZone,runUnaryGuarded,_nextListener=,_unobserve,_isModelProperty,_removeListeners,_isTranSubtype,_jsConstructor,inMilliseconds,isNoSuchMethod,isolateStatics,namedArguments,runBinaryGuarded,bindUnaryCallback,_eventDelegates,isCaseSensitive,_completeWithValue,_previous,_templateCreator,superDeclaration,_previous=,_onErrorCallback=,_onValueCallback=,_getFieldsWithOwner,createPeriodicTimer,_next,_publish,_registerCallback,_uniqueValueIndex,handleUncaughtError,_next=,_templateInstance=,_getLastTemplateNode,_getMethodsWithOwner,_type,_removeAfterFiring,_scheduleMicrotask,handleControlMessage,prepareInstanceModel,_errorTestCallback=,_setRemoveAfterFiring,canInvokeReflectively,_instanceAttributes,_key,_whenCompleteAction,originalDeclaration,positionalArguments,registerUnaryCallback,_id,_createPeriodicTimer,_handleUncaughtError,registerBinaryCallback,_templateInstanceRef=,_templateIsDecorated=,_close,_registerUnaryCallback,millisecondsSinceEpoch,_processBindingDirectives,_registerBinaryCallback,_iterator,_whenCompleteActionCallback=,prepareInstancePositionChanged".split(",");
    if (objectClassObject instanceof Array)
      objectClassObject = objectClassObject[1];
    if (objectClassObject) {
      for (var j = 0; j < shortNames.length; j++) {
        var type = 0;
        var short = shortNames[j];
        if (short[0] == "g")
          type = 1;
        if (short[0] == "s")
          type = 2;
        objectClassObject[short] = function(name, short, type) {
          return function() {
            return this.noSuchMethod$1(this, H.createInvocationMirror(name, short, type, Array.prototype.slice.call(arguments), []));
          };
        }(longNames[j], short, type);
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    if (!init.lazies)
      init.lazies = {};
    init.lazies[fieldName] = getterName;
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined)
              if ($[fieldName] === sentinelInProgress)
                $[fieldName] = null;
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
!function() {
  function intern(s) {
    var o = {};
    o[s] = 1;
    return Object.keys(convertToFastObject(o))[0];
  }
  init.getIsolateTag = function(name) {
    return intern("___dart_" + name + init.isolateTag);
  };
  var tableProperty = "___dart_isolate_tags_";
  var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
  var rootProperty = "_ZxYxX";
  for (var i = 0;; i++) {
    var property = intern(rootProperty + "_" + i + "_");
    if (!(property in usedProperties)) {
      usedProperties[property] = 1;
      init.isolateTag = property;
      break;
    }
  }
}();
init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
// BEGIN invoke [main].
;(function(callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }
  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function(a) {
      H.startRootIsolate(E.main$closure(), a);
    }, []);
  } else {
    (function(a) {
      H.startRootIsolate(E.main$closure(), a);
    })([]);
  }
});
;
// END invoke [main].
})()

//# sourceMappingURL=index_without_purity.html_bootstrap.dart.js.map
{
  var message =
      'Deprecation: Automatic generation of output for Content Security\n' +
      'Policy is deprecated and will be removed with the next development\n' +
      'release. Use the --csp option to generate CSP restricted output.';
  if (typeof dartPrint == "function") {
    dartPrint(message);
  } else if (typeof console == "object" && typeof console.log == "function") {
    console.log(message);
  } else if (typeof print == "function") {
    print(message);
  }
}
function dart_precompiled($collectedClasses) {
  var $desc;
  function HtmlElement() {
  }
  HtmlElement.builtin$cls = "HtmlElement";
  if (!"name" in HtmlElement)
    HtmlElement.name = "HtmlElement";
  $desc = $collectedClasses.HtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement.prototype = $desc;
  function _EntryArray() {
  }
  _EntryArray.builtin$cls = "_EntryArray";
  if (!"name" in _EntryArray)
    _EntryArray.name = "_EntryArray";
  $desc = $collectedClasses._EntryArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EntryArray.prototype = $desc;
  function AnchorElement() {
  }
  AnchorElement.builtin$cls = "AnchorElement";
  if (!"name" in AnchorElement)
    AnchorElement.name = "AnchorElement";
  $desc = $collectedClasses.AnchorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnchorElement.prototype = $desc;
  AnchorElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  AnchorElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  AnchorElement.prototype.get$hostname = function(receiver) {
    return receiver.hostname;
  };
  AnchorElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  AnchorElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  AnchorElement.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  AnchorElement.prototype.get$protocol = function(receiver) {
    return receiver.protocol;
  };
  function AnimationEvent() {
  }
  AnimationEvent.builtin$cls = "AnimationEvent";
  if (!"name" in AnimationEvent)
    AnimationEvent.name = "AnimationEvent";
  $desc = $collectedClasses.AnimationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationEvent.prototype = $desc;
  function AreaElement() {
  }
  AreaElement.builtin$cls = "AreaElement";
  if (!"name" in AreaElement)
    AreaElement.name = "AreaElement";
  $desc = $collectedClasses.AreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AreaElement.prototype = $desc;
  AreaElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  AreaElement.prototype.get$hostname = function(receiver) {
    return receiver.hostname;
  };
  AreaElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  AreaElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  AreaElement.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  AreaElement.prototype.get$protocol = function(receiver) {
    return receiver.protocol;
  };
  function AudioElement() {
  }
  AudioElement.builtin$cls = "AudioElement";
  if (!"name" in AudioElement)
    AudioElement.name = "AudioElement";
  $desc = $collectedClasses.AudioElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioElement.prototype = $desc;
  function AutocompleteErrorEvent() {
  }
  AutocompleteErrorEvent.builtin$cls = "AutocompleteErrorEvent";
  if (!"name" in AutocompleteErrorEvent)
    AutocompleteErrorEvent.name = "AutocompleteErrorEvent";
  $desc = $collectedClasses.AutocompleteErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AutocompleteErrorEvent.prototype = $desc;
  function BRElement() {
  }
  BRElement.builtin$cls = "BRElement";
  if (!"name" in BRElement)
    BRElement.name = "BRElement";
  $desc = $collectedClasses.BRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BRElement.prototype = $desc;
  function BaseElement() {
  }
  BaseElement.builtin$cls = "BaseElement";
  if (!"name" in BaseElement)
    BaseElement.name = "BaseElement";
  $desc = $collectedClasses.BaseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BaseElement.prototype = $desc;
  BaseElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  BaseElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  BaseElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  function BeforeLoadEvent() {
  }
  BeforeLoadEvent.builtin$cls = "BeforeLoadEvent";
  if (!"name" in BeforeLoadEvent)
    BeforeLoadEvent.name = "BeforeLoadEvent";
  $desc = $collectedClasses.BeforeLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BeforeLoadEvent.prototype = $desc;
  function BeforeUnloadEvent() {
  }
  BeforeUnloadEvent.builtin$cls = "BeforeUnloadEvent";
  if (!"name" in BeforeUnloadEvent)
    BeforeUnloadEvent.name = "BeforeUnloadEvent";
  $desc = $collectedClasses.BeforeUnloadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BeforeUnloadEvent.prototype = $desc;
  function Blob() {
  }
  Blob.builtin$cls = "Blob";
  if (!"name" in Blob)
    Blob.name = "Blob";
  $desc = $collectedClasses.Blob;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Blob.prototype = $desc;
  Blob.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function BodyElement() {
  }
  BodyElement.builtin$cls = "BodyElement";
  if (!"name" in BodyElement)
    BodyElement.name = "BodyElement";
  $desc = $collectedClasses.BodyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BodyElement.prototype = $desc;
  function ButtonElement() {
  }
  ButtonElement.builtin$cls = "ButtonElement";
  if (!"name" in ButtonElement)
    ButtonElement.name = "ButtonElement";
  $desc = $collectedClasses.ButtonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ButtonElement.prototype = $desc;
  ButtonElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ButtonElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  ButtonElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  ButtonElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function CDataSection() {
  }
  CDataSection.builtin$cls = "CDataSection";
  if (!"name" in CDataSection)
    CDataSection.name = "CDataSection";
  $desc = $collectedClasses.CDataSection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CDataSection.prototype = $desc;
  function CanvasElement() {
  }
  CanvasElement.builtin$cls = "CanvasElement";
  if (!"name" in CanvasElement)
    CanvasElement.name = "CanvasElement";
  $desc = $collectedClasses.CanvasElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasElement.prototype = $desc;
  function CharacterData() {
  }
  CharacterData.builtin$cls = "CharacterData";
  if (!"name" in CharacterData)
    CharacterData.name = "CharacterData";
  $desc = $collectedClasses.CharacterData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CharacterData.prototype = $desc;
  CharacterData.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  CharacterData.prototype.set$data = function(receiver, v) {
    return receiver.data = v;
  };
  CharacterData.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  CharacterData.prototype.get$nextElementSibling = function(receiver) {
    return receiver.nextElementSibling;
  };
  function CloseEvent() {
  }
  CloseEvent.builtin$cls = "CloseEvent";
  if (!"name" in CloseEvent)
    CloseEvent.name = "CloseEvent";
  $desc = $collectedClasses.CloseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CloseEvent.prototype = $desc;
  function Comment() {
  }
  Comment.builtin$cls = "Comment";
  if (!"name" in Comment)
    Comment.name = "Comment";
  $desc = $collectedClasses.Comment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comment.prototype = $desc;
  function CompositionEvent() {
  }
  CompositionEvent.builtin$cls = "CompositionEvent";
  if (!"name" in CompositionEvent)
    CompositionEvent.name = "CompositionEvent";
  $desc = $collectedClasses.CompositionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CompositionEvent.prototype = $desc;
  CompositionEvent.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  function ContentElement() {
  }
  ContentElement.builtin$cls = "ContentElement";
  if (!"name" in ContentElement)
    ContentElement.name = "ContentElement";
  $desc = $collectedClasses.ContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContentElement.prototype = $desc;
  function CssFontFaceLoadEvent() {
  }
  CssFontFaceLoadEvent.builtin$cls = "CssFontFaceLoadEvent";
  if (!"name" in CssFontFaceLoadEvent)
    CssFontFaceLoadEvent.name = "CssFontFaceLoadEvent";
  $desc = $collectedClasses.CssFontFaceLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssFontFaceLoadEvent.prototype = $desc;
  function CssStyleDeclaration() {
  }
  CssStyleDeclaration.builtin$cls = "CssStyleDeclaration";
  if (!"name" in CssStyleDeclaration)
    CssStyleDeclaration.name = "CssStyleDeclaration";
  $desc = $collectedClasses.CssStyleDeclaration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssStyleDeclaration.prototype = $desc;
  CssStyleDeclaration.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function CustomEvent() {
  }
  CustomEvent.builtin$cls = "CustomEvent";
  if (!"name" in CustomEvent)
    CustomEvent.name = "CustomEvent";
  $desc = $collectedClasses.CustomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CustomEvent.prototype = $desc;
  CustomEvent.prototype.set$_dartDetail = function(receiver, v) {
    return receiver._dartDetail = v;
  };
  function DListElement() {
  }
  DListElement.builtin$cls = "DListElement";
  if (!"name" in DListElement)
    DListElement.name = "DListElement";
  $desc = $collectedClasses.DListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DListElement.prototype = $desc;
  function DataListElement() {
  }
  DataListElement.builtin$cls = "DataListElement";
  if (!"name" in DataListElement)
    DataListElement.name = "DataListElement";
  $desc = $collectedClasses.DataListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DataListElement.prototype = $desc;
  function DetailsElement() {
  }
  DetailsElement.builtin$cls = "DetailsElement";
  if (!"name" in DetailsElement)
    DetailsElement.name = "DetailsElement";
  $desc = $collectedClasses.DetailsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DetailsElement.prototype = $desc;
  function DeviceMotionEvent() {
  }
  DeviceMotionEvent.builtin$cls = "DeviceMotionEvent";
  if (!"name" in DeviceMotionEvent)
    DeviceMotionEvent.name = "DeviceMotionEvent";
  $desc = $collectedClasses.DeviceMotionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceMotionEvent.prototype = $desc;
  function DeviceOrientationEvent() {
  }
  DeviceOrientationEvent.builtin$cls = "DeviceOrientationEvent";
  if (!"name" in DeviceOrientationEvent)
    DeviceOrientationEvent.name = "DeviceOrientationEvent";
  $desc = $collectedClasses.DeviceOrientationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceOrientationEvent.prototype = $desc;
  function DialogElement() {
  }
  DialogElement.builtin$cls = "DialogElement";
  if (!"name" in DialogElement)
    DialogElement.name = "DialogElement";
  $desc = $collectedClasses.DialogElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DialogElement.prototype = $desc;
  function DivElement() {
  }
  DivElement.builtin$cls = "DivElement";
  if (!"name" in DivElement)
    DivElement.name = "DivElement";
  $desc = $collectedClasses.DivElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DivElement.prototype = $desc;
  function Document() {
  }
  Document.builtin$cls = "Document";
  if (!"name" in Document)
    Document.name = "Document";
  $desc = $collectedClasses.Document;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Document.prototype = $desc;
  Document.prototype.get$implementation = function(receiver) {
    return receiver.implementation;
  };
  function DocumentFragment() {
  }
  DocumentFragment.builtin$cls = "DocumentFragment";
  if (!"name" in DocumentFragment)
    DocumentFragment.name = "DocumentFragment";
  $desc = $collectedClasses.DocumentFragment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocumentFragment.prototype = $desc;
  function DomError() {
  }
  DomError.builtin$cls = "DomError";
  if (!"name" in DomError)
    DomError.name = "DomError";
  $desc = $collectedClasses.DomError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomError.prototype = $desc;
  DomError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  DomError.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function DomException() {
  }
  DomException.builtin$cls = "DomException";
  if (!"name" in DomException)
    DomException.name = "DomException";
  $desc = $collectedClasses.DomException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomException.prototype = $desc;
  DomException.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function DomImplementation() {
  }
  DomImplementation.builtin$cls = "DomImplementation";
  if (!"name" in DomImplementation)
    DomImplementation.name = "DomImplementation";
  $desc = $collectedClasses.DomImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomImplementation.prototype = $desc;
  function Element() {
  }
  Element.builtin$cls = "Element";
  if (!"name" in Element)
    Element.name = "Element";
  $desc = $collectedClasses.Element;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Element.prototype = $desc;
  Element.prototype.get$className = function(receiver) {
    return receiver.className;
  };
  Element.prototype.set$className = function(receiver, v) {
    return receiver.className = v;
  };
  Element.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  Element.prototype.get$tagName = function(receiver) {
    return receiver.tagName;
  };
  Element.prototype.get$nextElementSibling = function(receiver) {
    return receiver.nextElementSibling;
  };
  function EmbedElement() {
  }
  EmbedElement.builtin$cls = "EmbedElement";
  if (!"name" in EmbedElement)
    EmbedElement.name = "EmbedElement";
  $desc = $collectedClasses.EmbedElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmbedElement.prototype = $desc;
  EmbedElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  EmbedElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  EmbedElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  EmbedElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function ErrorEvent() {
  }
  ErrorEvent.builtin$cls = "ErrorEvent";
  if (!"name" in ErrorEvent)
    ErrorEvent.name = "ErrorEvent";
  $desc = $collectedClasses.ErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ErrorEvent.prototype = $desc;
  ErrorEvent.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  ErrorEvent.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function Event0() {
  }
  Event0.builtin$cls = "Event0";
  if (!"name" in Event0)
    Event0.name = "Event0";
  $desc = $collectedClasses.Event0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Event0.prototype = $desc;
  Event0.prototype.set$_selector = function(receiver, v) {
    return receiver._selector = v;
  };
  Event0.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function EventTarget() {
  }
  EventTarget.builtin$cls = "EventTarget";
  if (!"name" in EventTarget)
    EventTarget.name = "EventTarget";
  $desc = $collectedClasses.EventTarget;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventTarget.prototype = $desc;
  function FieldSetElement() {
  }
  FieldSetElement.builtin$cls = "FieldSetElement";
  if (!"name" in FieldSetElement)
    FieldSetElement.name = "FieldSetElement";
  $desc = $collectedClasses.FieldSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FieldSetElement.prototype = $desc;
  FieldSetElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  FieldSetElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function File() {
  }
  File.builtin$cls = "File";
  if (!"name" in File)
    File.name = "File";
  $desc = $collectedClasses.File;
  if ($desc instanceof Array)
    $desc = $desc[1];
  File.prototype = $desc;
  File.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function FileError() {
  }
  FileError.builtin$cls = "FileError";
  if (!"name" in FileError)
    FileError.name = "FileError";
  $desc = $collectedClasses.FileError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FileError.prototype = $desc;
  function FocusEvent() {
  }
  FocusEvent.builtin$cls = "FocusEvent";
  if (!"name" in FocusEvent)
    FocusEvent.name = "FocusEvent";
  $desc = $collectedClasses.FocusEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FocusEvent.prototype = $desc;
  function FormElement() {
  }
  FormElement.builtin$cls = "FormElement";
  if (!"name" in FormElement)
    FormElement.name = "FormElement";
  $desc = $collectedClasses.FormElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormElement.prototype = $desc;
  FormElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  FormElement.prototype.get$method = function(receiver) {
    return receiver.method;
  };
  FormElement.prototype.set$method = function(receiver, v) {
    return receiver.method = v;
  };
  FormElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  FormElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  function HRElement() {
  }
  HRElement.builtin$cls = "HRElement";
  if (!"name" in HRElement)
    HRElement.name = "HRElement";
  $desc = $collectedClasses.HRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HRElement.prototype = $desc;
  function HashChangeEvent() {
  }
  HashChangeEvent.builtin$cls = "HashChangeEvent";
  if (!"name" in HashChangeEvent)
    HashChangeEvent.name = "HashChangeEvent";
  $desc = $collectedClasses.HashChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashChangeEvent.prototype = $desc;
  function HeadElement() {
  }
  HeadElement.builtin$cls = "HeadElement";
  if (!"name" in HeadElement)
    HeadElement.name = "HeadElement";
  $desc = $collectedClasses.HeadElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadElement.prototype = $desc;
  function HeadingElement() {
  }
  HeadingElement.builtin$cls = "HeadingElement";
  if (!"name" in HeadingElement)
    HeadingElement.name = "HeadingElement";
  $desc = $collectedClasses.HeadingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadingElement.prototype = $desc;
  function HtmlCollection() {
  }
  HtmlCollection.builtin$cls = "HtmlCollection";
  if (!"name" in HtmlCollection)
    HtmlCollection.name = "HtmlCollection";
  $desc = $collectedClasses.HtmlCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlCollection.prototype = $desc;
  function HtmlDocument() {
  }
  HtmlDocument.builtin$cls = "HtmlDocument";
  if (!"name" in HtmlDocument)
    HtmlDocument.name = "HtmlDocument";
  $desc = $collectedClasses.HtmlDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlDocument.prototype = $desc;
  function HtmlFormControlsCollection() {
  }
  HtmlFormControlsCollection.builtin$cls = "HtmlFormControlsCollection";
  if (!"name" in HtmlFormControlsCollection)
    HtmlFormControlsCollection.name = "HtmlFormControlsCollection";
  $desc = $collectedClasses.HtmlFormControlsCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlFormControlsCollection.prototype = $desc;
  function HtmlHtmlElement() {
  }
  HtmlHtmlElement.builtin$cls = "HtmlHtmlElement";
  if (!"name" in HtmlHtmlElement)
    HtmlHtmlElement.name = "HtmlHtmlElement";
  $desc = $collectedClasses.HtmlHtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlHtmlElement.prototype = $desc;
  function HtmlOptionsCollection() {
  }
  HtmlOptionsCollection.builtin$cls = "HtmlOptionsCollection";
  if (!"name" in HtmlOptionsCollection)
    HtmlOptionsCollection.name = "HtmlOptionsCollection";
  $desc = $collectedClasses.HtmlOptionsCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlOptionsCollection.prototype = $desc;
  function HttpRequest() {
  }
  HttpRequest.builtin$cls = "HttpRequest";
  if (!"name" in HttpRequest)
    HttpRequest.name = "HttpRequest";
  $desc = $collectedClasses.HttpRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest.prototype = $desc;
  HttpRequest.prototype.get$responseText = function(receiver) {
    return receiver.responseText;
  };
  function HttpRequestEventTarget() {
  }
  HttpRequestEventTarget.builtin$cls = "HttpRequestEventTarget";
  if (!"name" in HttpRequestEventTarget)
    HttpRequestEventTarget.name = "HttpRequestEventTarget";
  $desc = $collectedClasses.HttpRequestEventTarget;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequestEventTarget.prototype = $desc;
  function IFrameElement() {
  }
  IFrameElement.builtin$cls = "IFrameElement";
  if (!"name" in IFrameElement)
    IFrameElement.name = "IFrameElement";
  $desc = $collectedClasses.IFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IFrameElement.prototype = $desc;
  IFrameElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  IFrameElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  IFrameElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  function ImageData() {
  }
  ImageData.builtin$cls = "ImageData";
  if (!"name" in ImageData)
    ImageData.name = "ImageData";
  $desc = $collectedClasses.ImageData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageData.prototype = $desc;
  ImageData.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  function ImageElement() {
  }
  ImageElement.builtin$cls = "ImageElement";
  if (!"name" in ImageElement)
    ImageElement.name = "ImageElement";
  $desc = $collectedClasses.ImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement.prototype = $desc;
  ImageElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  ImageElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  function InputElement() {
  }
  InputElement.builtin$cls = "InputElement";
  if (!"name" in InputElement)
    InputElement.name = "InputElement";
  $desc = $collectedClasses.InputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InputElement.prototype = $desc;
  InputElement.prototype.get$defaultValue = function(receiver) {
    return receiver.defaultValue;
  };
  InputElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  InputElement.prototype.get$pattern = function(receiver) {
    return receiver.pattern;
  };
  InputElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  InputElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  InputElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  InputElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  InputElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  InputElement.prototype.get$entries = function(receiver) {
    return receiver.webkitEntries;
  };
  function InstallEvent() {
  }
  InstallEvent.builtin$cls = "InstallEvent";
  if (!"name" in InstallEvent)
    InstallEvent.name = "InstallEvent";
  $desc = $collectedClasses.InstallEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InstallEvent.prototype = $desc;
  function InstallPhaseEvent() {
  }
  InstallPhaseEvent.builtin$cls = "InstallPhaseEvent";
  if (!"name" in InstallPhaseEvent)
    InstallPhaseEvent.name = "InstallPhaseEvent";
  $desc = $collectedClasses.InstallPhaseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InstallPhaseEvent.prototype = $desc;
  function KeyboardEvent() {
  }
  KeyboardEvent.builtin$cls = "KeyboardEvent";
  if (!"name" in KeyboardEvent)
    KeyboardEvent.name = "KeyboardEvent";
  $desc = $collectedClasses.KeyboardEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeyboardEvent.prototype = $desc;
  function KeygenElement() {
  }
  KeygenElement.builtin$cls = "KeygenElement";
  if (!"name" in KeygenElement)
    KeygenElement.name = "KeygenElement";
  $desc = $collectedClasses.KeygenElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeygenElement.prototype = $desc;
  KeygenElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  KeygenElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function LIElement() {
  }
  LIElement.builtin$cls = "LIElement";
  if (!"name" in LIElement)
    LIElement.name = "LIElement";
  $desc = $collectedClasses.LIElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LIElement.prototype = $desc;
  LIElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  LIElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function LabelElement() {
  }
  LabelElement.builtin$cls = "LabelElement";
  if (!"name" in LabelElement)
    LabelElement.name = "LabelElement";
  $desc = $collectedClasses.LabelElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LabelElement.prototype = $desc;
  function LegendElement() {
  }
  LegendElement.builtin$cls = "LegendElement";
  if (!"name" in LegendElement)
    LegendElement.name = "LegendElement";
  $desc = $collectedClasses.LegendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LegendElement.prototype = $desc;
  function LinkElement() {
  }
  LinkElement.builtin$cls = "LinkElement";
  if (!"name" in LinkElement)
    LinkElement.name = "LinkElement";
  $desc = $collectedClasses.LinkElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkElement.prototype = $desc;
  LinkElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  LinkElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  LinkElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function Location() {
  }
  Location.builtin$cls = "Location";
  if (!"name" in Location)
    Location.name = "Location";
  $desc = $collectedClasses.Location;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Location.prototype = $desc;
  Location.prototype.get$hostname = function(receiver) {
    return receiver.hostname;
  };
  Location.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  Location.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  Location.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  Location.prototype.get$protocol = function(receiver) {
    return receiver.protocol;
  };
  function MapElement() {
  }
  MapElement.builtin$cls = "MapElement";
  if (!"name" in MapElement)
    MapElement.name = "MapElement";
  $desc = $collectedClasses.MapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapElement.prototype = $desc;
  MapElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function MediaElement() {
  }
  MediaElement.builtin$cls = "MediaElement";
  if (!"name" in MediaElement)
    MediaElement.name = "MediaElement";
  $desc = $collectedClasses.MediaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaElement.prototype = $desc;
  MediaElement.prototype.get$duration = function(receiver) {
    return receiver.duration;
  };
  MediaElement.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  MediaElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  MediaElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  function MediaError() {
  }
  MediaError.builtin$cls = "MediaError";
  if (!"name" in MediaError)
    MediaError.name = "MediaError";
  $desc = $collectedClasses.MediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaError.prototype = $desc;
  function MediaKeyError() {
  }
  MediaKeyError.builtin$cls = "MediaKeyError";
  if (!"name" in MediaKeyError)
    MediaKeyError.name = "MediaKeyError";
  $desc = $collectedClasses.MediaKeyError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyError.prototype = $desc;
  function MediaKeyEvent() {
  }
  MediaKeyEvent.builtin$cls = "MediaKeyEvent";
  if (!"name" in MediaKeyEvent)
    MediaKeyEvent.name = "MediaKeyEvent";
  $desc = $collectedClasses.MediaKeyEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyEvent.prototype = $desc;
  MediaKeyEvent.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function MediaKeyMessageEvent() {
  }
  MediaKeyMessageEvent.builtin$cls = "MediaKeyMessageEvent";
  if (!"name" in MediaKeyMessageEvent)
    MediaKeyMessageEvent.name = "MediaKeyMessageEvent";
  $desc = $collectedClasses.MediaKeyMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyMessageEvent.prototype = $desc;
  MediaKeyMessageEvent.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function MediaKeyNeededEvent() {
  }
  MediaKeyNeededEvent.builtin$cls = "MediaKeyNeededEvent";
  if (!"name" in MediaKeyNeededEvent)
    MediaKeyNeededEvent.name = "MediaKeyNeededEvent";
  $desc = $collectedClasses.MediaKeyNeededEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyNeededEvent.prototype = $desc;
  function MediaStream() {
  }
  MediaStream.builtin$cls = "MediaStream";
  if (!"name" in MediaStream)
    MediaStream.name = "MediaStream";
  $desc = $collectedClasses.MediaStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStream.prototype = $desc;
  MediaStream.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  MediaStream.prototype.get$label = function(receiver) {
    return receiver.label;
  };
  function MediaStreamEvent() {
  }
  MediaStreamEvent.builtin$cls = "MediaStreamEvent";
  if (!"name" in MediaStreamEvent)
    MediaStreamEvent.name = "MediaStreamEvent";
  $desc = $collectedClasses.MediaStreamEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamEvent.prototype = $desc;
  function MediaStreamTrackEvent() {
  }
  MediaStreamTrackEvent.builtin$cls = "MediaStreamTrackEvent";
  if (!"name" in MediaStreamTrackEvent)
    MediaStreamTrackEvent.name = "MediaStreamTrackEvent";
  $desc = $collectedClasses.MediaStreamTrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamTrackEvent.prototype = $desc;
  function MenuElement() {
  }
  MenuElement.builtin$cls = "MenuElement";
  if (!"name" in MenuElement)
    MenuElement.name = "MenuElement";
  $desc = $collectedClasses.MenuElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MenuElement.prototype = $desc;
  function MessageEvent() {
  }
  MessageEvent.builtin$cls = "MessageEvent";
  if (!"name" in MessageEvent)
    MessageEvent.name = "MessageEvent";
  $desc = $collectedClasses.MessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MessageEvent.prototype = $desc;
  function MetaElement() {
  }
  MetaElement.builtin$cls = "MetaElement";
  if (!"name" in MetaElement)
    MetaElement.name = "MetaElement";
  $desc = $collectedClasses.MetaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetaElement.prototype = $desc;
  MetaElement.prototype.get$content = function(receiver) {
    return receiver.content;
  };
  MetaElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function MeterElement() {
  }
  MeterElement.builtin$cls = "MeterElement";
  if (!"name" in MeterElement)
    MeterElement.name = "MeterElement";
  $desc = $collectedClasses.MeterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MeterElement.prototype = $desc;
  MeterElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  MeterElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function MidiConnectionEvent() {
  }
  MidiConnectionEvent.builtin$cls = "MidiConnectionEvent";
  if (!"name" in MidiConnectionEvent)
    MidiConnectionEvent.name = "MidiConnectionEvent";
  $desc = $collectedClasses.MidiConnectionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiConnectionEvent.prototype = $desc;
  MidiConnectionEvent.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  function MidiInput() {
  }
  MidiInput.builtin$cls = "MidiInput";
  if (!"name" in MidiInput)
    MidiInput.name = "MidiInput";
  $desc = $collectedClasses.MidiInput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiInput.prototype = $desc;
  function MidiMessageEvent() {
  }
  MidiMessageEvent.builtin$cls = "MidiMessageEvent";
  if (!"name" in MidiMessageEvent)
    MidiMessageEvent.name = "MidiMessageEvent";
  $desc = $collectedClasses.MidiMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiMessageEvent.prototype = $desc;
  MidiMessageEvent.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  function MidiOutput() {
  }
  MidiOutput.builtin$cls = "MidiOutput";
  if (!"name" in MidiOutput)
    MidiOutput.name = "MidiOutput";
  $desc = $collectedClasses.MidiOutput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiOutput.prototype = $desc;
  function MidiPort() {
  }
  MidiPort.builtin$cls = "MidiPort";
  if (!"name" in MidiPort)
    MidiPort.name = "MidiPort";
  $desc = $collectedClasses.MidiPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiPort.prototype = $desc;
  MidiPort.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  MidiPort.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  MidiPort.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function ModElement() {
  }
  ModElement.builtin$cls = "ModElement";
  if (!"name" in ModElement)
    ModElement.name = "ModElement";
  $desc = $collectedClasses.ModElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ModElement.prototype = $desc;
  function MouseEvent() {
  }
  MouseEvent.builtin$cls = "MouseEvent";
  if (!"name" in MouseEvent)
    MouseEvent.name = "MouseEvent";
  $desc = $collectedClasses.MouseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MouseEvent.prototype = $desc;
  function MutationObserver() {
  }
  MutationObserver.builtin$cls = "MutationObserver";
  if (!"name" in MutationObserver)
    MutationObserver.name = "MutationObserver";
  $desc = $collectedClasses.MutationObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MutationObserver.prototype = $desc;
  function MutationRecord() {
  }
  MutationRecord.builtin$cls = "MutationRecord";
  if (!"name" in MutationRecord)
    MutationRecord.name = "MutationRecord";
  $desc = $collectedClasses.MutationRecord;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MutationRecord.prototype = $desc;
  MutationRecord.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  MutationRecord.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function Navigator() {
  }
  Navigator.builtin$cls = "Navigator";
  if (!"name" in Navigator)
    Navigator.name = "Navigator";
  $desc = $collectedClasses.Navigator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Navigator.prototype = $desc;
  function NavigatorUserMediaError() {
  }
  NavigatorUserMediaError.builtin$cls = "NavigatorUserMediaError";
  if (!"name" in NavigatorUserMediaError)
    NavigatorUserMediaError.name = "NavigatorUserMediaError";
  $desc = $collectedClasses.NavigatorUserMediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NavigatorUserMediaError.prototype = $desc;
  NavigatorUserMediaError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  NavigatorUserMediaError.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function Node() {
  }
  Node.builtin$cls = "Node";
  if (!"name" in Node)
    Node.name = "Node";
  $desc = $collectedClasses.Node;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Node.prototype = $desc;
  Node.prototype.get$baseUri = function(receiver) {
    return receiver.baseURI;
  };
  Node.prototype.get$firstChild = function(receiver) {
    return receiver.firstChild;
  };
  Node.prototype.get$lastChild = function(receiver) {
    return receiver.lastChild;
  };
  Node.prototype.get$nextNode = function(receiver) {
    return receiver.nextSibling;
  };
  Node.prototype.get$ownerDocument = function(receiver) {
    return receiver.ownerDocument;
  };
  Node.prototype.get$parent = function(receiver) {
    return receiver.parentElement;
  };
  Node.prototype.get$parentNode = function(receiver) {
    return receiver.parentNode;
  };
  Node.prototype.get$text = function(receiver) {
    return receiver.textContent;
  };
  Node.prototype.set$text = function(receiver, v) {
    return receiver.textContent = v;
  };
  function NodeList() {
  }
  NodeList.builtin$cls = "NodeList";
  if (!"name" in NodeList)
    NodeList.name = "NodeList";
  $desc = $collectedClasses.NodeList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeList.prototype = $desc;
  function OListElement() {
  }
  OListElement.builtin$cls = "OListElement";
  if (!"name" in OListElement)
    OListElement.name = "OListElement";
  $desc = $collectedClasses.OListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OListElement.prototype = $desc;
  OListElement.prototype.get$start = function(receiver) {
    return receiver.start;
  };
  OListElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function ObjectElement() {
  }
  ObjectElement.builtin$cls = "ObjectElement";
  if (!"name" in ObjectElement)
    ObjectElement.name = "ObjectElement";
  $desc = $collectedClasses.ObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObjectElement.prototype = $desc;
  ObjectElement.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  ObjectElement.prototype.set$data = function(receiver, v) {
    return receiver.data = v;
  };
  ObjectElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ObjectElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function OptGroupElement() {
  }
  OptGroupElement.builtin$cls = "OptGroupElement";
  if (!"name" in OptGroupElement)
    OptGroupElement.name = "OptGroupElement";
  $desc = $collectedClasses.OptGroupElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptGroupElement.prototype = $desc;
  OptGroupElement.prototype.get$label = function(receiver) {
    return receiver.label;
  };
  function OptionElement() {
  }
  OptionElement.builtin$cls = "OptionElement";
  if (!"name" in OptionElement)
    OptionElement.name = "OptionElement";
  $desc = $collectedClasses.OptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptionElement.prototype = $desc;
  OptionElement.prototype.get$index = function(receiver) {
    return receiver.index;
  };
  OptionElement.prototype.get$label = function(receiver) {
    return receiver.label;
  };
  OptionElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  OptionElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function OutputElement() {
  }
  OutputElement.builtin$cls = "OutputElement";
  if (!"name" in OutputElement)
    OutputElement.name = "OutputElement";
  $desc = $collectedClasses.OutputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OutputElement.prototype = $desc;
  OutputElement.prototype.get$defaultValue = function(receiver) {
    return receiver.defaultValue;
  };
  OutputElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  OutputElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  OutputElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  OutputElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function OverflowEvent() {
  }
  OverflowEvent.builtin$cls = "OverflowEvent";
  if (!"name" in OverflowEvent)
    OverflowEvent.name = "OverflowEvent";
  $desc = $collectedClasses.OverflowEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OverflowEvent.prototype = $desc;
  function PageTransitionEvent() {
  }
  PageTransitionEvent.builtin$cls = "PageTransitionEvent";
  if (!"name" in PageTransitionEvent)
    PageTransitionEvent.name = "PageTransitionEvent";
  $desc = $collectedClasses.PageTransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PageTransitionEvent.prototype = $desc;
  function ParagraphElement() {
  }
  ParagraphElement.builtin$cls = "ParagraphElement";
  if (!"name" in ParagraphElement)
    ParagraphElement.name = "ParagraphElement";
  $desc = $collectedClasses.ParagraphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParagraphElement.prototype = $desc;
  function ParamElement() {
  }
  ParamElement.builtin$cls = "ParamElement";
  if (!"name" in ParamElement)
    ParamElement.name = "ParamElement";
  $desc = $collectedClasses.ParamElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParamElement.prototype = $desc;
  ParamElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ParamElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  ParamElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function PopStateEvent() {
  }
  PopStateEvent.builtin$cls = "PopStateEvent";
  if (!"name" in PopStateEvent)
    PopStateEvent.name = "PopStateEvent";
  $desc = $collectedClasses.PopStateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PopStateEvent.prototype = $desc;
  function PositionError() {
  }
  PositionError.builtin$cls = "PositionError";
  if (!"name" in PositionError)
    PositionError.name = "PositionError";
  $desc = $collectedClasses.PositionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PositionError.prototype = $desc;
  PositionError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function PreElement() {
  }
  PreElement.builtin$cls = "PreElement";
  if (!"name" in PreElement)
    PreElement.name = "PreElement";
  $desc = $collectedClasses.PreElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PreElement.prototype = $desc;
  function ProcessingInstruction() {
  }
  ProcessingInstruction.builtin$cls = "ProcessingInstruction";
  if (!"name" in ProcessingInstruction)
    ProcessingInstruction.name = "ProcessingInstruction";
  $desc = $collectedClasses.ProcessingInstruction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProcessingInstruction.prototype = $desc;
  ProcessingInstruction.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  function ProgressElement() {
  }
  ProgressElement.builtin$cls = "ProgressElement";
  if (!"name" in ProgressElement)
    ProgressElement.name = "ProgressElement";
  $desc = $collectedClasses.ProgressElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressElement.prototype = $desc;
  ProgressElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  ProgressElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function ProgressEvent() {
  }
  ProgressEvent.builtin$cls = "ProgressEvent";
  if (!"name" in ProgressEvent)
    ProgressEvent.name = "ProgressEvent";
  $desc = $collectedClasses.ProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressEvent.prototype = $desc;
  function QuoteElement() {
  }
  QuoteElement.builtin$cls = "QuoteElement";
  if (!"name" in QuoteElement)
    QuoteElement.name = "QuoteElement";
  $desc = $collectedClasses.QuoteElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  QuoteElement.prototype = $desc;
  function Range() {
  }
  Range.builtin$cls = "Range";
  if (!"name" in Range)
    Range.name = "Range";
  $desc = $collectedClasses.Range;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Range.prototype = $desc;
  function ResourceProgressEvent() {
  }
  ResourceProgressEvent.builtin$cls = "ResourceProgressEvent";
  if (!"name" in ResourceProgressEvent)
    ResourceProgressEvent.name = "ResourceProgressEvent";
  $desc = $collectedClasses.ResourceProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ResourceProgressEvent.prototype = $desc;
  function RtcDataChannelEvent() {
  }
  RtcDataChannelEvent.builtin$cls = "RtcDataChannelEvent";
  if (!"name" in RtcDataChannelEvent)
    RtcDataChannelEvent.name = "RtcDataChannelEvent";
  $desc = $collectedClasses.RtcDataChannelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDataChannelEvent.prototype = $desc;
  function RtcDtmfToneChangeEvent() {
  }
  RtcDtmfToneChangeEvent.builtin$cls = "RtcDtmfToneChangeEvent";
  if (!"name" in RtcDtmfToneChangeEvent)
    RtcDtmfToneChangeEvent.name = "RtcDtmfToneChangeEvent";
  $desc = $collectedClasses.RtcDtmfToneChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDtmfToneChangeEvent.prototype = $desc;
  function RtcIceCandidateEvent() {
  }
  RtcIceCandidateEvent.builtin$cls = "RtcIceCandidateEvent";
  if (!"name" in RtcIceCandidateEvent)
    RtcIceCandidateEvent.name = "RtcIceCandidateEvent";
  $desc = $collectedClasses.RtcIceCandidateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcIceCandidateEvent.prototype = $desc;
  function ScriptElement() {
  }
  ScriptElement.builtin$cls = "ScriptElement";
  if (!"name" in ScriptElement)
    ScriptElement.name = "ScriptElement";
  $desc = $collectedClasses.ScriptElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement.prototype = $desc;
  ScriptElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  ScriptElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  ScriptElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function SecurityPolicyViolationEvent() {
  }
  SecurityPolicyViolationEvent.builtin$cls = "SecurityPolicyViolationEvent";
  if (!"name" in SecurityPolicyViolationEvent)
    SecurityPolicyViolationEvent.name = "SecurityPolicyViolationEvent";
  $desc = $collectedClasses.SecurityPolicyViolationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SecurityPolicyViolationEvent.prototype = $desc;
  function SelectElement() {
  }
  SelectElement.builtin$cls = "SelectElement";
  if (!"name" in SelectElement)
    SelectElement.name = "SelectElement";
  $desc = $collectedClasses.SelectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SelectElement.prototype = $desc;
  SelectElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  SelectElement.prototype.set$length = function(receiver, v) {
    return receiver.length = v;
  };
  SelectElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  SelectElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  SelectElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  SelectElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function ShadowElement() {
  }
  ShadowElement.builtin$cls = "ShadowElement";
  if (!"name" in ShadowElement)
    ShadowElement.name = "ShadowElement";
  $desc = $collectedClasses.ShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowElement.prototype = $desc;
  function ShadowRoot() {
  }
  ShadowRoot.builtin$cls = "ShadowRoot";
  if (!"name" in ShadowRoot)
    ShadowRoot.name = "ShadowRoot";
  $desc = $collectedClasses.ShadowRoot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowRoot.prototype = $desc;
  function SourceElement() {
  }
  SourceElement.builtin$cls = "SourceElement";
  if (!"name" in SourceElement)
    SourceElement.name = "SourceElement";
  $desc = $collectedClasses.SourceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SourceElement.prototype = $desc;
  SourceElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  SourceElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  SourceElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function SpanElement() {
  }
  SpanElement.builtin$cls = "SpanElement";
  if (!"name" in SpanElement)
    SpanElement.name = "SpanElement";
  $desc = $collectedClasses.SpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpanElement.prototype = $desc;
  function SpeechInputEvent() {
  }
  SpeechInputEvent.builtin$cls = "SpeechInputEvent";
  if (!"name" in SpeechInputEvent)
    SpeechInputEvent.name = "SpeechInputEvent";
  $desc = $collectedClasses.SpeechInputEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechInputEvent.prototype = $desc;
  function SpeechRecognitionError() {
  }
  SpeechRecognitionError.builtin$cls = "SpeechRecognitionError";
  if (!"name" in SpeechRecognitionError)
    SpeechRecognitionError.name = "SpeechRecognitionError";
  $desc = $collectedClasses.SpeechRecognitionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionError.prototype = $desc;
  SpeechRecognitionError.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  SpeechRecognitionError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function SpeechRecognitionEvent() {
  }
  SpeechRecognitionEvent.builtin$cls = "SpeechRecognitionEvent";
  if (!"name" in SpeechRecognitionEvent)
    SpeechRecognitionEvent.name = "SpeechRecognitionEvent";
  $desc = $collectedClasses.SpeechRecognitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionEvent.prototype = $desc;
  function SpeechSynthesisEvent() {
  }
  SpeechSynthesisEvent.builtin$cls = "SpeechSynthesisEvent";
  if (!"name" in SpeechSynthesisEvent)
    SpeechSynthesisEvent.name = "SpeechSynthesisEvent";
  $desc = $collectedClasses.SpeechSynthesisEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechSynthesisEvent.prototype = $desc;
  SpeechSynthesisEvent.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function StorageEvent() {
  }
  StorageEvent.builtin$cls = "StorageEvent";
  if (!"name" in StorageEvent)
    StorageEvent.name = "StorageEvent";
  $desc = $collectedClasses.StorageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StorageEvent.prototype = $desc;
  StorageEvent.prototype.get$key = function(receiver) {
    return receiver.key;
  };
  function StyleElement() {
  }
  StyleElement.builtin$cls = "StyleElement";
  if (!"name" in StyleElement)
    StyleElement.name = "StyleElement";
  $desc = $collectedClasses.StyleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement.prototype = $desc;
  StyleElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function TableCaptionElement() {
  }
  TableCaptionElement.builtin$cls = "TableCaptionElement";
  if (!"name" in TableCaptionElement)
    TableCaptionElement.name = "TableCaptionElement";
  $desc = $collectedClasses.TableCaptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCaptionElement.prototype = $desc;
  function TableCellElement() {
  }
  TableCellElement.builtin$cls = "TableCellElement";
  if (!"name" in TableCellElement)
    TableCellElement.name = "TableCellElement";
  $desc = $collectedClasses.TableCellElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCellElement.prototype = $desc;
  function TableColElement() {
  }
  TableColElement.builtin$cls = "TableColElement";
  if (!"name" in TableColElement)
    TableColElement.name = "TableColElement";
  $desc = $collectedClasses.TableColElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableColElement.prototype = $desc;
  TableColElement.prototype.get$span = function(receiver) {
    return receiver.span;
  };
  function TableElement() {
  }
  TableElement.builtin$cls = "TableElement";
  if (!"name" in TableElement)
    TableElement.name = "TableElement";
  $desc = $collectedClasses.TableElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableElement.prototype = $desc;
  function TableRowElement() {
  }
  TableRowElement.builtin$cls = "TableRowElement";
  if (!"name" in TableRowElement)
    TableRowElement.name = "TableRowElement";
  $desc = $collectedClasses.TableRowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableRowElement.prototype = $desc;
  function TableSectionElement() {
  }
  TableSectionElement.builtin$cls = "TableSectionElement";
  if (!"name" in TableSectionElement)
    TableSectionElement.name = "TableSectionElement";
  $desc = $collectedClasses.TableSectionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableSectionElement.prototype = $desc;
  function TemplateElement() {
  }
  TemplateElement.builtin$cls = "TemplateElement";
  if (!"name" in TemplateElement)
    TemplateElement.name = "TemplateElement";
  $desc = $collectedClasses.TemplateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateElement.prototype = $desc;
  TemplateElement.prototype.get$content = function(receiver) {
    return receiver.content;
  };
  function Text() {
  }
  Text.builtin$cls = "Text";
  if (!"name" in Text)
    Text.name = "Text";
  $desc = $collectedClasses.Text;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Text.prototype = $desc;
  function TextAreaElement() {
  }
  TextAreaElement.builtin$cls = "TextAreaElement";
  if (!"name" in TextAreaElement)
    TextAreaElement.name = "TextAreaElement";
  $desc = $collectedClasses.TextAreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextAreaElement.prototype = $desc;
  TextAreaElement.prototype.get$defaultValue = function(receiver) {
    return receiver.defaultValue;
  };
  TextAreaElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  TextAreaElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  TextAreaElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  TextAreaElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function TextEvent() {
  }
  TextEvent.builtin$cls = "TextEvent";
  if (!"name" in TextEvent)
    TextEvent.name = "TextEvent";
  $desc = $collectedClasses.TextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextEvent.prototype = $desc;
  TextEvent.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  function TitleElement() {
  }
  TitleElement.builtin$cls = "TitleElement";
  if (!"name" in TitleElement)
    TitleElement.name = "TitleElement";
  $desc = $collectedClasses.TitleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement.prototype = $desc;
  function TouchEvent() {
  }
  TouchEvent.builtin$cls = "TouchEvent";
  if (!"name" in TouchEvent)
    TouchEvent.name = "TouchEvent";
  $desc = $collectedClasses.TouchEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TouchEvent.prototype = $desc;
  function TrackElement() {
  }
  TrackElement.builtin$cls = "TrackElement";
  if (!"name" in TrackElement)
    TrackElement.name = "TrackElement";
  $desc = $collectedClasses.TrackElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackElement.prototype = $desc;
  TrackElement.prototype.get$defaultValue = function(receiver) {
    return receiver.default;
  };
  TrackElement.prototype.get$kind = function(receiver) {
    return receiver.kind;
  };
  TrackElement.prototype.get$label = function(receiver) {
    return receiver.label;
  };
  TrackElement.prototype.get$src = function(receiver) {
    return receiver.src;
  };
  TrackElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  function TrackEvent() {
  }
  TrackEvent.builtin$cls = "TrackEvent";
  if (!"name" in TrackEvent)
    TrackEvent.name = "TrackEvent";
  $desc = $collectedClasses.TrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackEvent.prototype = $desc;
  function TransitionEvent() {
  }
  TransitionEvent.builtin$cls = "TransitionEvent";
  if (!"name" in TransitionEvent)
    TransitionEvent.name = "TransitionEvent";
  $desc = $collectedClasses.TransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TransitionEvent.prototype = $desc;
  function UIEvent() {
  }
  UIEvent.builtin$cls = "UIEvent";
  if (!"name" in UIEvent)
    UIEvent.name = "UIEvent";
  $desc = $collectedClasses.UIEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UIEvent.prototype = $desc;
  function UListElement() {
  }
  UListElement.builtin$cls = "UListElement";
  if (!"name" in UListElement)
    UListElement.name = "UListElement";
  $desc = $collectedClasses.UListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UListElement.prototype = $desc;
  function UnknownElement() {
  }
  UnknownElement.builtin$cls = "UnknownElement";
  if (!"name" in UnknownElement)
    UnknownElement.name = "UnknownElement";
  $desc = $collectedClasses.UnknownElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownElement.prototype = $desc;
  function VideoElement() {
  }
  VideoElement.builtin$cls = "VideoElement";
  if (!"name" in VideoElement)
    VideoElement.name = "VideoElement";
  $desc = $collectedClasses.VideoElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VideoElement.prototype = $desc;
  function WheelEvent() {
  }
  WheelEvent.builtin$cls = "WheelEvent";
  if (!"name" in WheelEvent)
    WheelEvent.name = "WheelEvent";
  $desc = $collectedClasses.WheelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WheelEvent.prototype = $desc;
  function Window() {
  }
  Window.builtin$cls = "Window";
  if (!"name" in Window)
    Window.name = "Window";
  $desc = $collectedClasses.Window;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Window.prototype = $desc;
  Window.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function XmlDocument() {
  }
  XmlDocument.builtin$cls = "XmlDocument";
  if (!"name" in XmlDocument)
    XmlDocument.name = "XmlDocument";
  $desc = $collectedClasses.XmlDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  XmlDocument.prototype = $desc;
  function _Attr() {
  }
  _Attr.builtin$cls = "_Attr";
  if (!"name" in _Attr)
    _Attr.name = "_Attr";
  $desc = $collectedClasses._Attr;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Attr.prototype = $desc;
  _Attr.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  _Attr.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  _Attr.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function _ClientRect() {
  }
  _ClientRect.builtin$cls = "_ClientRect";
  if (!"name" in _ClientRect)
    _ClientRect.name = "_ClientRect";
  $desc = $collectedClasses._ClientRect;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ClientRect.prototype = $desc;
  _ClientRect.prototype.get$bottom = function(receiver) {
    return receiver.bottom;
  };
  _ClientRect.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  _ClientRect.prototype.get$left = function(receiver) {
    return receiver.left;
  };
  _ClientRect.prototype.get$right = function(receiver) {
    return receiver.right;
  };
  _ClientRect.prototype.get$top = function(receiver) {
    return receiver.top;
  };
  _ClientRect.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function _DocumentType() {
  }
  _DocumentType.builtin$cls = "_DocumentType";
  if (!"name" in _DocumentType)
    _DocumentType.name = "_DocumentType";
  $desc = $collectedClasses._DocumentType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DocumentType.prototype = $desc;
  function _HTMLAppletElement() {
  }
  _HTMLAppletElement.builtin$cls = "_HTMLAppletElement";
  if (!"name" in _HTMLAppletElement)
    _HTMLAppletElement.name = "_HTMLAppletElement";
  $desc = $collectedClasses._HTMLAppletElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLAppletElement.prototype = $desc;
  function _HTMLDirectoryElement() {
  }
  _HTMLDirectoryElement.builtin$cls = "_HTMLDirectoryElement";
  if (!"name" in _HTMLDirectoryElement)
    _HTMLDirectoryElement.name = "_HTMLDirectoryElement";
  $desc = $collectedClasses._HTMLDirectoryElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLDirectoryElement.prototype = $desc;
  function _HTMLFontElement() {
  }
  _HTMLFontElement.builtin$cls = "_HTMLFontElement";
  if (!"name" in _HTMLFontElement)
    _HTMLFontElement.name = "_HTMLFontElement";
  $desc = $collectedClasses._HTMLFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFontElement.prototype = $desc;
  function _HTMLFrameElement() {
  }
  _HTMLFrameElement.builtin$cls = "_HTMLFrameElement";
  if (!"name" in _HTMLFrameElement)
    _HTMLFrameElement.name = "_HTMLFrameElement";
  $desc = $collectedClasses._HTMLFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameElement.prototype = $desc;
  function _HTMLFrameSetElement() {
  }
  _HTMLFrameSetElement.builtin$cls = "_HTMLFrameSetElement";
  if (!"name" in _HTMLFrameSetElement)
    _HTMLFrameSetElement.name = "_HTMLFrameSetElement";
  $desc = $collectedClasses._HTMLFrameSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameSetElement.prototype = $desc;
  function _HTMLMarqueeElement() {
  }
  _HTMLMarqueeElement.builtin$cls = "_HTMLMarqueeElement";
  if (!"name" in _HTMLMarqueeElement)
    _HTMLMarqueeElement.name = "_HTMLMarqueeElement";
  $desc = $collectedClasses._HTMLMarqueeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLMarqueeElement.prototype = $desc;
  function _MutationEvent() {
  }
  _MutationEvent.builtin$cls = "_MutationEvent";
  if (!"name" in _MutationEvent)
    _MutationEvent.name = "_MutationEvent";
  $desc = $collectedClasses._MutationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MutationEvent.prototype = $desc;
  function _NamedNodeMap() {
  }
  _NamedNodeMap.builtin$cls = "_NamedNodeMap";
  if (!"name" in _NamedNodeMap)
    _NamedNodeMap.name = "_NamedNodeMap";
  $desc = $collectedClasses._NamedNodeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NamedNodeMap.prototype = $desc;
  function _Notation() {
  }
  _Notation.builtin$cls = "_Notation";
  if (!"name" in _Notation)
    _Notation.name = "_Notation";
  $desc = $collectedClasses._Notation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Notation.prototype = $desc;
  function _XMLHttpRequestProgressEvent() {
  }
  _XMLHttpRequestProgressEvent.builtin$cls = "_XMLHttpRequestProgressEvent";
  if (!"name" in _XMLHttpRequestProgressEvent)
    _XMLHttpRequestProgressEvent.name = "_XMLHttpRequestProgressEvent";
  $desc = $collectedClasses._XMLHttpRequestProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _XMLHttpRequestProgressEvent.prototype = $desc;
  function KeyRange() {
  }
  KeyRange.builtin$cls = "KeyRange";
  if (!"name" in KeyRange)
    KeyRange.name = "KeyRange";
  $desc = $collectedClasses.KeyRange;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeyRange.prototype = $desc;
  function VersionChangeEvent() {
  }
  VersionChangeEvent.builtin$cls = "VersionChangeEvent";
  if (!"name" in VersionChangeEvent)
    VersionChangeEvent.name = "VersionChangeEvent";
  $desc = $collectedClasses.VersionChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VersionChangeEvent.prototype = $desc;
  function AElement() {
  }
  AElement.builtin$cls = "AElement";
  if (!"name" in AElement)
    AElement.name = "AElement";
  $desc = $collectedClasses.AElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AElement.prototype = $desc;
  AElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  AElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function AltGlyphElement() {
  }
  AltGlyphElement.builtin$cls = "AltGlyphElement";
  if (!"name" in AltGlyphElement)
    AltGlyphElement.name = "AltGlyphElement";
  $desc = $collectedClasses.AltGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AltGlyphElement.prototype = $desc;
  AltGlyphElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function AnimateElement() {
  }
  AnimateElement.builtin$cls = "AnimateElement";
  if (!"name" in AnimateElement)
    AnimateElement.name = "AnimateElement";
  $desc = $collectedClasses.AnimateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateElement.prototype = $desc;
  function AnimateMotionElement() {
  }
  AnimateMotionElement.builtin$cls = "AnimateMotionElement";
  if (!"name" in AnimateMotionElement)
    AnimateMotionElement.name = "AnimateMotionElement";
  $desc = $collectedClasses.AnimateMotionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateMotionElement.prototype = $desc;
  function AnimateTransformElement() {
  }
  AnimateTransformElement.builtin$cls = "AnimateTransformElement";
  if (!"name" in AnimateTransformElement)
    AnimateTransformElement.name = "AnimateTransformElement";
  $desc = $collectedClasses.AnimateTransformElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateTransformElement.prototype = $desc;
  function AnimatedEnumeration() {
  }
  AnimatedEnumeration.builtin$cls = "AnimatedEnumeration";
  if (!"name" in AnimatedEnumeration)
    AnimatedEnumeration.name = "AnimatedEnumeration";
  $desc = $collectedClasses.AnimatedEnumeration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedEnumeration.prototype = $desc;
  function AnimatedLength() {
  }
  AnimatedLength.builtin$cls = "AnimatedLength";
  if (!"name" in AnimatedLength)
    AnimatedLength.name = "AnimatedLength";
  $desc = $collectedClasses.AnimatedLength;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLength.prototype = $desc;
  function AnimatedLengthList() {
  }
  AnimatedLengthList.builtin$cls = "AnimatedLengthList";
  if (!"name" in AnimatedLengthList)
    AnimatedLengthList.name = "AnimatedLengthList";
  $desc = $collectedClasses.AnimatedLengthList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLengthList.prototype = $desc;
  function AnimatedNumber() {
  }
  AnimatedNumber.builtin$cls = "AnimatedNumber";
  if (!"name" in AnimatedNumber)
    AnimatedNumber.name = "AnimatedNumber";
  $desc = $collectedClasses.AnimatedNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumber.prototype = $desc;
  function AnimatedNumberList() {
  }
  AnimatedNumberList.builtin$cls = "AnimatedNumberList";
  if (!"name" in AnimatedNumberList)
    AnimatedNumberList.name = "AnimatedNumberList";
  $desc = $collectedClasses.AnimatedNumberList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumberList.prototype = $desc;
  function AnimatedString() {
  }
  AnimatedString.builtin$cls = "AnimatedString";
  if (!"name" in AnimatedString)
    AnimatedString.name = "AnimatedString";
  $desc = $collectedClasses.AnimatedString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedString.prototype = $desc;
  function AnimationElement() {
  }
  AnimationElement.builtin$cls = "AnimationElement";
  if (!"name" in AnimationElement)
    AnimationElement.name = "AnimationElement";
  $desc = $collectedClasses.AnimationElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationElement.prototype = $desc;
  function CircleElement() {
  }
  CircleElement.builtin$cls = "CircleElement";
  if (!"name" in CircleElement)
    CircleElement.name = "CircleElement";
  $desc = $collectedClasses.CircleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CircleElement.prototype = $desc;
  function ClipPathElement() {
  }
  ClipPathElement.builtin$cls = "ClipPathElement";
  if (!"name" in ClipPathElement)
    ClipPathElement.name = "ClipPathElement";
  $desc = $collectedClasses.ClipPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClipPathElement.prototype = $desc;
  function DefsElement() {
  }
  DefsElement.builtin$cls = "DefsElement";
  if (!"name" in DefsElement)
    DefsElement.name = "DefsElement";
  $desc = $collectedClasses.DefsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DefsElement.prototype = $desc;
  function DescElement() {
  }
  DescElement.builtin$cls = "DescElement";
  if (!"name" in DescElement)
    DescElement.name = "DescElement";
  $desc = $collectedClasses.DescElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DescElement.prototype = $desc;
  function DiscardElement() {
  }
  DiscardElement.builtin$cls = "DiscardElement";
  if (!"name" in DiscardElement)
    DiscardElement.name = "DiscardElement";
  $desc = $collectedClasses.DiscardElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DiscardElement.prototype = $desc;
  function EllipseElement() {
  }
  EllipseElement.builtin$cls = "EllipseElement";
  if (!"name" in EllipseElement)
    EllipseElement.name = "EllipseElement";
  $desc = $collectedClasses.EllipseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EllipseElement.prototype = $desc;
  function FEBlendElement() {
  }
  FEBlendElement.builtin$cls = "FEBlendElement";
  if (!"name" in FEBlendElement)
    FEBlendElement.name = "FEBlendElement";
  $desc = $collectedClasses.FEBlendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEBlendElement.prototype = $desc;
  FEBlendElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEBlendElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEColorMatrixElement() {
  }
  FEColorMatrixElement.builtin$cls = "FEColorMatrixElement";
  if (!"name" in FEColorMatrixElement)
    FEColorMatrixElement.name = "FEColorMatrixElement";
  $desc = $collectedClasses.FEColorMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEColorMatrixElement.prototype = $desc;
  FEColorMatrixElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  FEColorMatrixElement.prototype.get$values = function(receiver) {
    return receiver.values;
  };
  FEColorMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEColorMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEComponentTransferElement() {
  }
  FEComponentTransferElement.builtin$cls = "FEComponentTransferElement";
  if (!"name" in FEComponentTransferElement)
    FEComponentTransferElement.name = "FEComponentTransferElement";
  $desc = $collectedClasses.FEComponentTransferElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEComponentTransferElement.prototype = $desc;
  FEComponentTransferElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEComponentTransferElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FECompositeElement() {
  }
  FECompositeElement.builtin$cls = "FECompositeElement";
  if (!"name" in FECompositeElement)
    FECompositeElement.name = "FECompositeElement";
  $desc = $collectedClasses.FECompositeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FECompositeElement.prototype = $desc;
  FECompositeElement.prototype.get$operator = function(receiver) {
    return receiver.operator;
  };
  FECompositeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FECompositeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEConvolveMatrixElement() {
  }
  FEConvolveMatrixElement.builtin$cls = "FEConvolveMatrixElement";
  if (!"name" in FEConvolveMatrixElement)
    FEConvolveMatrixElement.name = "FEConvolveMatrixElement";
  $desc = $collectedClasses.FEConvolveMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEConvolveMatrixElement.prototype = $desc;
  FEConvolveMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEConvolveMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDiffuseLightingElement() {
  }
  FEDiffuseLightingElement.builtin$cls = "FEDiffuseLightingElement";
  if (!"name" in FEDiffuseLightingElement)
    FEDiffuseLightingElement.name = "FEDiffuseLightingElement";
  $desc = $collectedClasses.FEDiffuseLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDiffuseLightingElement.prototype = $desc;
  FEDiffuseLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDiffuseLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDisplacementMapElement() {
  }
  FEDisplacementMapElement.builtin$cls = "FEDisplacementMapElement";
  if (!"name" in FEDisplacementMapElement)
    FEDisplacementMapElement.name = "FEDisplacementMapElement";
  $desc = $collectedClasses.FEDisplacementMapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDisplacementMapElement.prototype = $desc;
  FEDisplacementMapElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDisplacementMapElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDistantLightElement() {
  }
  FEDistantLightElement.builtin$cls = "FEDistantLightElement";
  if (!"name" in FEDistantLightElement)
    FEDistantLightElement.name = "FEDistantLightElement";
  $desc = $collectedClasses.FEDistantLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDistantLightElement.prototype = $desc;
  function FEFloodElement() {
  }
  FEFloodElement.builtin$cls = "FEFloodElement";
  if (!"name" in FEFloodElement)
    FEFloodElement.name = "FEFloodElement";
  $desc = $collectedClasses.FEFloodElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFloodElement.prototype = $desc;
  FEFloodElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEFloodElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEFuncAElement() {
  }
  FEFuncAElement.builtin$cls = "FEFuncAElement";
  if (!"name" in FEFuncAElement)
    FEFuncAElement.name = "FEFuncAElement";
  $desc = $collectedClasses.FEFuncAElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncAElement.prototype = $desc;
  function FEFuncBElement() {
  }
  FEFuncBElement.builtin$cls = "FEFuncBElement";
  if (!"name" in FEFuncBElement)
    FEFuncBElement.name = "FEFuncBElement";
  $desc = $collectedClasses.FEFuncBElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncBElement.prototype = $desc;
  function FEFuncGElement() {
  }
  FEFuncGElement.builtin$cls = "FEFuncGElement";
  if (!"name" in FEFuncGElement)
    FEFuncGElement.name = "FEFuncGElement";
  $desc = $collectedClasses.FEFuncGElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncGElement.prototype = $desc;
  function FEFuncRElement() {
  }
  FEFuncRElement.builtin$cls = "FEFuncRElement";
  if (!"name" in FEFuncRElement)
    FEFuncRElement.name = "FEFuncRElement";
  $desc = $collectedClasses.FEFuncRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncRElement.prototype = $desc;
  function FEGaussianBlurElement() {
  }
  FEGaussianBlurElement.builtin$cls = "FEGaussianBlurElement";
  if (!"name" in FEGaussianBlurElement)
    FEGaussianBlurElement.name = "FEGaussianBlurElement";
  $desc = $collectedClasses.FEGaussianBlurElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEGaussianBlurElement.prototype = $desc;
  FEGaussianBlurElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEGaussianBlurElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEImageElement() {
  }
  FEImageElement.builtin$cls = "FEImageElement";
  if (!"name" in FEImageElement)
    FEImageElement.name = "FEImageElement";
  $desc = $collectedClasses.FEImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEImageElement.prototype = $desc;
  FEImageElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEImageElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  FEImageElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function FEMergeElement() {
  }
  FEMergeElement.builtin$cls = "FEMergeElement";
  if (!"name" in FEMergeElement)
    FEMergeElement.name = "FEMergeElement";
  $desc = $collectedClasses.FEMergeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeElement.prototype = $desc;
  FEMergeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMergeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEMergeNodeElement() {
  }
  FEMergeNodeElement.builtin$cls = "FEMergeNodeElement";
  if (!"name" in FEMergeNodeElement)
    FEMergeNodeElement.name = "FEMergeNodeElement";
  $desc = $collectedClasses.FEMergeNodeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeNodeElement.prototype = $desc;
  function FEMorphologyElement() {
  }
  FEMorphologyElement.builtin$cls = "FEMorphologyElement";
  if (!"name" in FEMorphologyElement)
    FEMorphologyElement.name = "FEMorphologyElement";
  $desc = $collectedClasses.FEMorphologyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMorphologyElement.prototype = $desc;
  FEMorphologyElement.prototype.get$operator = function(receiver) {
    return receiver.operator;
  };
  FEMorphologyElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMorphologyElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEOffsetElement() {
  }
  FEOffsetElement.builtin$cls = "FEOffsetElement";
  if (!"name" in FEOffsetElement)
    FEOffsetElement.name = "FEOffsetElement";
  $desc = $collectedClasses.FEOffsetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEOffsetElement.prototype = $desc;
  FEOffsetElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEOffsetElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEPointLightElement() {
  }
  FEPointLightElement.builtin$cls = "FEPointLightElement";
  if (!"name" in FEPointLightElement)
    FEPointLightElement.name = "FEPointLightElement";
  $desc = $collectedClasses.FEPointLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEPointLightElement.prototype = $desc;
  FEPointLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEPointLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  FEPointLightElement.prototype.get$z = function(receiver) {
    return receiver.z;
  };
  function FESpecularLightingElement() {
  }
  FESpecularLightingElement.builtin$cls = "FESpecularLightingElement";
  if (!"name" in FESpecularLightingElement)
    FESpecularLightingElement.name = "FESpecularLightingElement";
  $desc = $collectedClasses.FESpecularLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpecularLightingElement.prototype = $desc;
  FESpecularLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpecularLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FESpotLightElement() {
  }
  FESpotLightElement.builtin$cls = "FESpotLightElement";
  if (!"name" in FESpotLightElement)
    FESpotLightElement.name = "FESpotLightElement";
  $desc = $collectedClasses.FESpotLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpotLightElement.prototype = $desc;
  FESpotLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpotLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  FESpotLightElement.prototype.get$z = function(receiver) {
    return receiver.z;
  };
  function FETileElement() {
  }
  FETileElement.builtin$cls = "FETileElement";
  if (!"name" in FETileElement)
    FETileElement.name = "FETileElement";
  $desc = $collectedClasses.FETileElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETileElement.prototype = $desc;
  FETileElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETileElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FETurbulenceElement() {
  }
  FETurbulenceElement.builtin$cls = "FETurbulenceElement";
  if (!"name" in FETurbulenceElement)
    FETurbulenceElement.name = "FETurbulenceElement";
  $desc = $collectedClasses.FETurbulenceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETurbulenceElement.prototype = $desc;
  FETurbulenceElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  FETurbulenceElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETurbulenceElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FilterElement() {
  }
  FilterElement.builtin$cls = "FilterElement";
  if (!"name" in FilterElement)
    FilterElement.name = "FilterElement";
  $desc = $collectedClasses.FilterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilterElement.prototype = $desc;
  FilterElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FilterElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  FilterElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function ForeignObjectElement() {
  }
  ForeignObjectElement.builtin$cls = "ForeignObjectElement";
  if (!"name" in ForeignObjectElement)
    ForeignObjectElement.name = "ForeignObjectElement";
  $desc = $collectedClasses.ForeignObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ForeignObjectElement.prototype = $desc;
  ForeignObjectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ForeignObjectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function GElement() {
  }
  GElement.builtin$cls = "GElement";
  if (!"name" in GElement)
    GElement.name = "GElement";
  $desc = $collectedClasses.GElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GElement.prototype = $desc;
  function GeometryElement() {
  }
  GeometryElement.builtin$cls = "GeometryElement";
  if (!"name" in GeometryElement)
    GeometryElement.name = "GeometryElement";
  $desc = $collectedClasses.GeometryElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GeometryElement.prototype = $desc;
  function GraphicsElement() {
  }
  GraphicsElement.builtin$cls = "GraphicsElement";
  if (!"name" in GraphicsElement)
    GraphicsElement.name = "GraphicsElement";
  $desc = $collectedClasses.GraphicsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GraphicsElement.prototype = $desc;
  function ImageElement0() {
  }
  ImageElement0.builtin$cls = "ImageElement0";
  if (!"name" in ImageElement0)
    ImageElement0.name = "ImageElement0";
  $desc = $collectedClasses.ImageElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement0.prototype = $desc;
  ImageElement0.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ImageElement0.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  ImageElement0.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function LineElement() {
  }
  LineElement.builtin$cls = "LineElement";
  if (!"name" in LineElement)
    LineElement.name = "LineElement";
  $desc = $collectedClasses.LineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LineElement.prototype = $desc;
  function LinearGradientElement() {
  }
  LinearGradientElement.builtin$cls = "LinearGradientElement";
  if (!"name" in LinearGradientElement)
    LinearGradientElement.name = "LinearGradientElement";
  $desc = $collectedClasses.LinearGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinearGradientElement.prototype = $desc;
  function MarkerElement() {
  }
  MarkerElement.builtin$cls = "MarkerElement";
  if (!"name" in MarkerElement)
    MarkerElement.name = "MarkerElement";
  $desc = $collectedClasses.MarkerElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MarkerElement.prototype = $desc;
  function MaskElement() {
  }
  MaskElement.builtin$cls = "MaskElement";
  if (!"name" in MaskElement)
    MaskElement.name = "MaskElement";
  $desc = $collectedClasses.MaskElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MaskElement.prototype = $desc;
  MaskElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  MaskElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function MetadataElement() {
  }
  MetadataElement.builtin$cls = "MetadataElement";
  if (!"name" in MetadataElement)
    MetadataElement.name = "MetadataElement";
  $desc = $collectedClasses.MetadataElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetadataElement.prototype = $desc;
  function PathElement() {
  }
  PathElement.builtin$cls = "PathElement";
  if (!"name" in PathElement)
    PathElement.name = "PathElement";
  $desc = $collectedClasses.PathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathElement.prototype = $desc;
  function PatternElement() {
  }
  PatternElement.builtin$cls = "PatternElement";
  if (!"name" in PatternElement)
    PatternElement.name = "PatternElement";
  $desc = $collectedClasses.PatternElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PatternElement.prototype = $desc;
  PatternElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PatternElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  PatternElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function PolygonElement() {
  }
  PolygonElement.builtin$cls = "PolygonElement";
  if (!"name" in PolygonElement)
    PolygonElement.name = "PolygonElement";
  $desc = $collectedClasses.PolygonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolygonElement.prototype = $desc;
  function PolylineElement() {
  }
  PolylineElement.builtin$cls = "PolylineElement";
  if (!"name" in PolylineElement)
    PolylineElement.name = "PolylineElement";
  $desc = $collectedClasses.PolylineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolylineElement.prototype = $desc;
  function RadialGradientElement() {
  }
  RadialGradientElement.builtin$cls = "RadialGradientElement";
  if (!"name" in RadialGradientElement)
    RadialGradientElement.name = "RadialGradientElement";
  $desc = $collectedClasses.RadialGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RadialGradientElement.prototype = $desc;
  function RectElement() {
  }
  RectElement.builtin$cls = "RectElement";
  if (!"name" in RectElement)
    RectElement.name = "RectElement";
  $desc = $collectedClasses.RectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RectElement.prototype = $desc;
  RectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  RectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ScriptElement0() {
  }
  ScriptElement0.builtin$cls = "ScriptElement0";
  if (!"name" in ScriptElement0)
    ScriptElement0.name = "ScriptElement0";
  $desc = $collectedClasses.ScriptElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement0.prototype = $desc;
  ScriptElement0.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  ScriptElement0.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function SetElement() {
  }
  SetElement.builtin$cls = "SetElement";
  if (!"name" in SetElement)
    SetElement.name = "SetElement";
  $desc = $collectedClasses.SetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SetElement.prototype = $desc;
  function StopElement() {
  }
  StopElement.builtin$cls = "StopElement";
  if (!"name" in StopElement)
    StopElement.name = "StopElement";
  $desc = $collectedClasses.StopElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StopElement.prototype = $desc;
  function StyleElement0() {
  }
  StyleElement0.builtin$cls = "StyleElement0";
  if (!"name" in StyleElement0)
    StyleElement0.name = "StyleElement0";
  $desc = $collectedClasses.StyleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement0.prototype = $desc;
  StyleElement0.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function SvgElement() {
  }
  SvgElement.builtin$cls = "SvgElement";
  if (!"name" in SvgElement)
    SvgElement.name = "SvgElement";
  $desc = $collectedClasses.SvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgElement.prototype = $desc;
  function SvgSvgElement() {
  }
  SvgSvgElement.builtin$cls = "SvgSvgElement";
  if (!"name" in SvgSvgElement)
    SvgSvgElement.name = "SvgSvgElement";
  $desc = $collectedClasses.SvgSvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgSvgElement.prototype = $desc;
  SvgSvgElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  SvgSvgElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function SwitchElement() {
  }
  SwitchElement.builtin$cls = "SwitchElement";
  if (!"name" in SwitchElement)
    SwitchElement.name = "SwitchElement";
  $desc = $collectedClasses.SwitchElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SwitchElement.prototype = $desc;
  function SymbolElement() {
  }
  SymbolElement.builtin$cls = "SymbolElement";
  if (!"name" in SymbolElement)
    SymbolElement.name = "SymbolElement";
  $desc = $collectedClasses.SymbolElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SymbolElement.prototype = $desc;
  function TSpanElement() {
  }
  TSpanElement.builtin$cls = "TSpanElement";
  if (!"name" in TSpanElement)
    TSpanElement.name = "TSpanElement";
  $desc = $collectedClasses.TSpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TSpanElement.prototype = $desc;
  function TextContentElement() {
  }
  TextContentElement.builtin$cls = "TextContentElement";
  if (!"name" in TextContentElement)
    TextContentElement.name = "TextContentElement";
  $desc = $collectedClasses.TextContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextContentElement.prototype = $desc;
  function TextElement() {
  }
  TextElement.builtin$cls = "TextElement";
  if (!"name" in TextElement)
    TextElement.name = "TextElement";
  $desc = $collectedClasses.TextElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextElement.prototype = $desc;
  function TextPathElement() {
  }
  TextPathElement.builtin$cls = "TextPathElement";
  if (!"name" in TextPathElement)
    TextPathElement.name = "TextPathElement";
  $desc = $collectedClasses.TextPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPathElement.prototype = $desc;
  TextPathElement.prototype.get$method = function(receiver) {
    return receiver.method;
  };
  TextPathElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function TextPositioningElement() {
  }
  TextPositioningElement.builtin$cls = "TextPositioningElement";
  if (!"name" in TextPositioningElement)
    TextPositioningElement.name = "TextPositioningElement";
  $desc = $collectedClasses.TextPositioningElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPositioningElement.prototype = $desc;
  TextPositioningElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  TextPositioningElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function TitleElement0() {
  }
  TitleElement0.builtin$cls = "TitleElement0";
  if (!"name" in TitleElement0)
    TitleElement0.name = "TitleElement0";
  $desc = $collectedClasses.TitleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement0.prototype = $desc;
  function UseElement() {
  }
  UseElement.builtin$cls = "UseElement";
  if (!"name" in UseElement)
    UseElement.name = "UseElement";
  $desc = $collectedClasses.UseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UseElement.prototype = $desc;
  UseElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  UseElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  UseElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function ViewElement() {
  }
  ViewElement.builtin$cls = "ViewElement";
  if (!"name" in ViewElement)
    ViewElement.name = "ViewElement";
  $desc = $collectedClasses.ViewElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ViewElement.prototype = $desc;
  function ZoomEvent() {
  }
  ZoomEvent.builtin$cls = "ZoomEvent";
  if (!"name" in ZoomEvent)
    ZoomEvent.name = "ZoomEvent";
  $desc = $collectedClasses.ZoomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ZoomEvent.prototype = $desc;
  function _GradientElement() {
  }
  _GradientElement.builtin$cls = "_GradientElement";
  if (!"name" in _GradientElement)
    _GradientElement.name = "_GradientElement";
  $desc = $collectedClasses._GradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GradientElement.prototype = $desc;
  _GradientElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function _SVGAltGlyphDefElement() {
  }
  _SVGAltGlyphDefElement.builtin$cls = "_SVGAltGlyphDefElement";
  if (!"name" in _SVGAltGlyphDefElement)
    _SVGAltGlyphDefElement.name = "_SVGAltGlyphDefElement";
  $desc = $collectedClasses._SVGAltGlyphDefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphDefElement.prototype = $desc;
  function _SVGAltGlyphItemElement() {
  }
  _SVGAltGlyphItemElement.builtin$cls = "_SVGAltGlyphItemElement";
  if (!"name" in _SVGAltGlyphItemElement)
    _SVGAltGlyphItemElement.name = "_SVGAltGlyphItemElement";
  $desc = $collectedClasses._SVGAltGlyphItemElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphItemElement.prototype = $desc;
  function _SVGComponentTransferFunctionElement() {
  }
  _SVGComponentTransferFunctionElement.builtin$cls = "_SVGComponentTransferFunctionElement";
  if (!"name" in _SVGComponentTransferFunctionElement)
    _SVGComponentTransferFunctionElement.name = "_SVGComponentTransferFunctionElement";
  $desc = $collectedClasses._SVGComponentTransferFunctionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGComponentTransferFunctionElement.prototype = $desc;
  function _SVGCursorElement() {
  }
  _SVGCursorElement.builtin$cls = "_SVGCursorElement";
  if (!"name" in _SVGCursorElement)
    _SVGCursorElement.name = "_SVGCursorElement";
  $desc = $collectedClasses._SVGCursorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGCursorElement.prototype = $desc;
  function _SVGFEDropShadowElement() {
  }
  _SVGFEDropShadowElement.builtin$cls = "_SVGFEDropShadowElement";
  if (!"name" in _SVGFEDropShadowElement)
    _SVGFEDropShadowElement.name = "_SVGFEDropShadowElement";
  $desc = $collectedClasses._SVGFEDropShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFEDropShadowElement.prototype = $desc;
  function _SVGFontElement() {
  }
  _SVGFontElement.builtin$cls = "_SVGFontElement";
  if (!"name" in _SVGFontElement)
    _SVGFontElement.name = "_SVGFontElement";
  $desc = $collectedClasses._SVGFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontElement.prototype = $desc;
  function _SVGFontFaceElement() {
  }
  _SVGFontFaceElement.builtin$cls = "_SVGFontFaceElement";
  if (!"name" in _SVGFontFaceElement)
    _SVGFontFaceElement.name = "_SVGFontFaceElement";
  $desc = $collectedClasses._SVGFontFaceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceElement.prototype = $desc;
  function _SVGFontFaceFormatElement() {
  }
  _SVGFontFaceFormatElement.builtin$cls = "_SVGFontFaceFormatElement";
  if (!"name" in _SVGFontFaceFormatElement)
    _SVGFontFaceFormatElement.name = "_SVGFontFaceFormatElement";
  $desc = $collectedClasses._SVGFontFaceFormatElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceFormatElement.prototype = $desc;
  function _SVGFontFaceNameElement() {
  }
  _SVGFontFaceNameElement.builtin$cls = "_SVGFontFaceNameElement";
  if (!"name" in _SVGFontFaceNameElement)
    _SVGFontFaceNameElement.name = "_SVGFontFaceNameElement";
  $desc = $collectedClasses._SVGFontFaceNameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceNameElement.prototype = $desc;
  function _SVGFontFaceSrcElement() {
  }
  _SVGFontFaceSrcElement.builtin$cls = "_SVGFontFaceSrcElement";
  if (!"name" in _SVGFontFaceSrcElement)
    _SVGFontFaceSrcElement.name = "_SVGFontFaceSrcElement";
  $desc = $collectedClasses._SVGFontFaceSrcElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceSrcElement.prototype = $desc;
  function _SVGFontFaceUriElement() {
  }
  _SVGFontFaceUriElement.builtin$cls = "_SVGFontFaceUriElement";
  if (!"name" in _SVGFontFaceUriElement)
    _SVGFontFaceUriElement.name = "_SVGFontFaceUriElement";
  $desc = $collectedClasses._SVGFontFaceUriElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceUriElement.prototype = $desc;
  function _SVGGlyphElement() {
  }
  _SVGGlyphElement.builtin$cls = "_SVGGlyphElement";
  if (!"name" in _SVGGlyphElement)
    _SVGGlyphElement.name = "_SVGGlyphElement";
  $desc = $collectedClasses._SVGGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphElement.prototype = $desc;
  function _SVGGlyphRefElement() {
  }
  _SVGGlyphRefElement.builtin$cls = "_SVGGlyphRefElement";
  if (!"name" in _SVGGlyphRefElement)
    _SVGGlyphRefElement.name = "_SVGGlyphRefElement";
  $desc = $collectedClasses._SVGGlyphRefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphRefElement.prototype = $desc;
  function _SVGHKernElement() {
  }
  _SVGHKernElement.builtin$cls = "_SVGHKernElement";
  if (!"name" in _SVGHKernElement)
    _SVGHKernElement.name = "_SVGHKernElement";
  $desc = $collectedClasses._SVGHKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGHKernElement.prototype = $desc;
  function _SVGMPathElement() {
  }
  _SVGMPathElement.builtin$cls = "_SVGMPathElement";
  if (!"name" in _SVGMPathElement)
    _SVGMPathElement.name = "_SVGMPathElement";
  $desc = $collectedClasses._SVGMPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMPathElement.prototype = $desc;
  function _SVGMissingGlyphElement() {
  }
  _SVGMissingGlyphElement.builtin$cls = "_SVGMissingGlyphElement";
  if (!"name" in _SVGMissingGlyphElement)
    _SVGMissingGlyphElement.name = "_SVGMissingGlyphElement";
  $desc = $collectedClasses._SVGMissingGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMissingGlyphElement.prototype = $desc;
  function _SVGVKernElement() {
  }
  _SVGVKernElement.builtin$cls = "_SVGVKernElement";
  if (!"name" in _SVGVKernElement)
    _SVGVKernElement.name = "_SVGVKernElement";
  $desc = $collectedClasses._SVGVKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGVKernElement.prototype = $desc;
  function AudioProcessingEvent() {
  }
  AudioProcessingEvent.builtin$cls = "AudioProcessingEvent";
  if (!"name" in AudioProcessingEvent)
    AudioProcessingEvent.name = "AudioProcessingEvent";
  $desc = $collectedClasses.AudioProcessingEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioProcessingEvent.prototype = $desc;
  function OfflineAudioCompletionEvent() {
  }
  OfflineAudioCompletionEvent.builtin$cls = "OfflineAudioCompletionEvent";
  if (!"name" in OfflineAudioCompletionEvent)
    OfflineAudioCompletionEvent.name = "OfflineAudioCompletionEvent";
  $desc = $collectedClasses.OfflineAudioCompletionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OfflineAudioCompletionEvent.prototype = $desc;
  function ContextEvent() {
  }
  ContextEvent.builtin$cls = "ContextEvent";
  if (!"name" in ContextEvent)
    ContextEvent.name = "ContextEvent";
  $desc = $collectedClasses.ContextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContextEvent.prototype = $desc;
  function SqlError() {
  }
  SqlError.builtin$cls = "SqlError";
  if (!"name" in SqlError)
    SqlError.name = "SqlError";
  $desc = $collectedClasses.SqlError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SqlError.prototype = $desc;
  SqlError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function NativeByteBuffer() {
  }
  NativeByteBuffer.builtin$cls = "NativeByteBuffer";
  if (!"name" in NativeByteBuffer)
    NativeByteBuffer.name = "NativeByteBuffer";
  $desc = $collectedClasses.NativeByteBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeByteBuffer.prototype = $desc;
  function NativeTypedData() {
  }
  NativeTypedData.builtin$cls = "NativeTypedData";
  if (!"name" in NativeTypedData)
    NativeTypedData.name = "NativeTypedData";
  $desc = $collectedClasses.NativeTypedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedData.prototype = $desc;
  function NativeByteData() {
  }
  NativeByteData.builtin$cls = "NativeByteData";
  if (!"name" in NativeByteData)
    NativeByteData.name = "NativeByteData";
  $desc = $collectedClasses.NativeByteData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeByteData.prototype = $desc;
  function NativeFloat32List() {
  }
  NativeFloat32List.builtin$cls = "NativeFloat32List";
  if (!"name" in NativeFloat32List)
    NativeFloat32List.name = "NativeFloat32List";
  $desc = $collectedClasses.NativeFloat32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeFloat32List.prototype = $desc;
  function NativeFloat64List() {
  }
  NativeFloat64List.builtin$cls = "NativeFloat64List";
  if (!"name" in NativeFloat64List)
    NativeFloat64List.name = "NativeFloat64List";
  $desc = $collectedClasses.NativeFloat64List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeFloat64List.prototype = $desc;
  function NativeInt16List() {
  }
  NativeInt16List.builtin$cls = "NativeInt16List";
  if (!"name" in NativeInt16List)
    NativeInt16List.name = "NativeInt16List";
  $desc = $collectedClasses.NativeInt16List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeInt16List.prototype = $desc;
  function NativeInt32List() {
  }
  NativeInt32List.builtin$cls = "NativeInt32List";
  if (!"name" in NativeInt32List)
    NativeInt32List.name = "NativeInt32List";
  $desc = $collectedClasses.NativeInt32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeInt32List.prototype = $desc;
  function NativeInt8List() {
  }
  NativeInt8List.builtin$cls = "NativeInt8List";
  if (!"name" in NativeInt8List)
    NativeInt8List.name = "NativeInt8List";
  $desc = $collectedClasses.NativeInt8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeInt8List.prototype = $desc;
  function NativeUint16List() {
  }
  NativeUint16List.builtin$cls = "NativeUint16List";
  if (!"name" in NativeUint16List)
    NativeUint16List.name = "NativeUint16List";
  $desc = $collectedClasses.NativeUint16List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeUint16List.prototype = $desc;
  function NativeUint32List() {
  }
  NativeUint32List.builtin$cls = "NativeUint32List";
  if (!"name" in NativeUint32List)
    NativeUint32List.name = "NativeUint32List";
  $desc = $collectedClasses.NativeUint32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeUint32List.prototype = $desc;
  function NativeUint8ClampedList() {
  }
  NativeUint8ClampedList.builtin$cls = "NativeUint8ClampedList";
  if (!"name" in NativeUint8ClampedList)
    NativeUint8ClampedList.name = "NativeUint8ClampedList";
  $desc = $collectedClasses.NativeUint8ClampedList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeUint8ClampedList.prototype = $desc;
  function NativeUint8List() {
  }
  NativeUint8List.builtin$cls = "NativeUint8List";
  if (!"name" in NativeUint8List)
    NativeUint8List.name = "NativeUint8List";
  $desc = $collectedClasses.NativeUint8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeUint8List.prototype = $desc;
  function JS_CONST(code) {
    this.code = code;
  }
  JS_CONST.builtin$cls = "JS_CONST";
  if (!"name" in JS_CONST)
    JS_CONST.name = "JS_CONST";
  $desc = $collectedClasses.JS_CONST;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JS_CONST.prototype = $desc;
  function Interceptor() {
  }
  Interceptor.builtin$cls = "Interceptor";
  if (!"name" in Interceptor)
    Interceptor.name = "Interceptor";
  $desc = $collectedClasses.Interceptor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor.prototype = $desc;
  function JSBool() {
  }
  JSBool.builtin$cls = "JSBool";
  if (!"name" in JSBool)
    JSBool.name = "JSBool";
  $desc = $collectedClasses.JSBool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSBool.prototype = $desc;
  function JSNull() {
  }
  JSNull.builtin$cls = "JSNull";
  if (!"name" in JSNull)
    JSNull.name = "JSNull";
  $desc = $collectedClasses.JSNull;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNull.prototype = $desc;
  function JavaScriptObject() {
  }
  JavaScriptObject.builtin$cls = "JavaScriptObject";
  if (!"name" in JavaScriptObject)
    JavaScriptObject.name = "JavaScriptObject";
  $desc = $collectedClasses.JavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JavaScriptObject.prototype = $desc;
  function PlainJavaScriptObject() {
  }
  PlainJavaScriptObject.builtin$cls = "PlainJavaScriptObject";
  if (!"name" in PlainJavaScriptObject)
    PlainJavaScriptObject.name = "PlainJavaScriptObject";
  $desc = $collectedClasses.PlainJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PlainJavaScriptObject.prototype = $desc;
  function UnknownJavaScriptObject() {
  }
  UnknownJavaScriptObject.builtin$cls = "UnknownJavaScriptObject";
  if (!"name" in UnknownJavaScriptObject)
    UnknownJavaScriptObject.name = "UnknownJavaScriptObject";
  $desc = $collectedClasses.UnknownJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJavaScriptObject.prototype = $desc;
  function JSArray() {
  }
  JSArray.builtin$cls = "JSArray";
  if (!"name" in JSArray)
    JSArray.name = "JSArray";
  $desc = $collectedClasses.JSArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSArray.prototype = $desc;
  function JSMutableArray() {
  }
  JSMutableArray.builtin$cls = "JSMutableArray";
  if (!"name" in JSMutableArray)
    JSMutableArray.name = "JSMutableArray";
  $desc = $collectedClasses.JSMutableArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSMutableArray.prototype = $desc;
  function JSFixedArray() {
  }
  JSFixedArray.builtin$cls = "JSFixedArray";
  if (!"name" in JSFixedArray)
    JSFixedArray.name = "JSFixedArray";
  $desc = $collectedClasses.JSFixedArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSFixedArray.prototype = $desc;
  function JSExtendableArray() {
  }
  JSExtendableArray.builtin$cls = "JSExtendableArray";
  if (!"name" in JSExtendableArray)
    JSExtendableArray.name = "JSExtendableArray";
  $desc = $collectedClasses.JSExtendableArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSExtendableArray.prototype = $desc;
  function JSNumber() {
  }
  JSNumber.builtin$cls = "JSNumber";
  if (!"name" in JSNumber)
    JSNumber.name = "JSNumber";
  $desc = $collectedClasses.JSNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNumber.prototype = $desc;
  function JSInt() {
  }
  JSInt.builtin$cls = "JSInt";
  if (!"name" in JSInt)
    JSInt.name = "JSInt";
  $desc = $collectedClasses.JSInt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSInt.prototype = $desc;
  function JSDouble() {
  }
  JSDouble.builtin$cls = "JSDouble";
  if (!"name" in JSDouble)
    JSDouble.name = "JSDouble";
  $desc = $collectedClasses.JSDouble;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSDouble.prototype = $desc;
  function JSPositiveInt() {
  }
  JSPositiveInt.builtin$cls = "JSPositiveInt";
  if (!"name" in JSPositiveInt)
    JSPositiveInt.name = "JSPositiveInt";
  $desc = $collectedClasses.JSPositiveInt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSPositiveInt.prototype = $desc;
  function JSUInt32() {
  }
  JSUInt32.builtin$cls = "JSUInt32";
  if (!"name" in JSUInt32)
    JSUInt32.name = "JSUInt32";
  $desc = $collectedClasses.JSUInt32;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSUInt32.prototype = $desc;
  function JSUInt31() {
  }
  JSUInt31.builtin$cls = "JSUInt31";
  if (!"name" in JSUInt31)
    JSUInt31.name = "JSUInt31";
  $desc = $collectedClasses.JSUInt31;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSUInt31.prototype = $desc;
  function JSString() {
  }
  JSString.builtin$cls = "JSString";
  if (!"name" in JSString)
    JSString.name = "JSString";
  $desc = $collectedClasses.JSString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSString.prototype = $desc;
  function _CodeUnits(__interceptors$_string) {
    this.__interceptors$_string = __interceptors$_string;
  }
  _CodeUnits.builtin$cls = "_CodeUnits";
  if (!"name" in _CodeUnits)
    _CodeUnits.name = "_CodeUnits";
  $desc = $collectedClasses._CodeUnits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CodeUnits.prototype = $desc;
  function startRootIsolate_closure(box_0, entry_1) {
    this.box_0 = box_0;
    this.entry_1 = entry_1;
  }
  startRootIsolate_closure.builtin$cls = "startRootIsolate_closure";
  if (!"name" in startRootIsolate_closure)
    startRootIsolate_closure.name = "startRootIsolate_closure";
  $desc = $collectedClasses.startRootIsolate_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure.prototype = $desc;
  function startRootIsolate_closure0(box_0, entry_2) {
    this.box_0 = box_0;
    this.entry_2 = entry_2;
  }
  startRootIsolate_closure0.builtin$cls = "startRootIsolate_closure0";
  if (!"name" in startRootIsolate_closure0)
    startRootIsolate_closure0.name = "startRootIsolate_closure0";
  $desc = $collectedClasses.startRootIsolate_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure0.prototype = $desc;
  function _Manager(nextIsolateId, currentManagerId, nextManagerId, currentContext, rootContext, topEventLoop, fromCommandLine, isWorker, supportsWorkers, isolates, mainManager, managers, entry) {
    this.nextIsolateId = nextIsolateId;
    this.currentManagerId = currentManagerId;
    this.nextManagerId = nextManagerId;
    this.currentContext = currentContext;
    this.rootContext = rootContext;
    this.topEventLoop = topEventLoop;
    this.fromCommandLine = fromCommandLine;
    this.isWorker = isWorker;
    this.supportsWorkers = supportsWorkers;
    this.isolates = isolates;
    this.mainManager = mainManager;
    this.managers = managers;
    this.entry = entry;
  }
  _Manager.builtin$cls = "_Manager";
  if (!"name" in _Manager)
    _Manager.name = "_Manager";
  $desc = $collectedClasses._Manager;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Manager.prototype = $desc;
  function _IsolateContext(id, ports, weakPorts, isolateStatics, controlPort, pauseCapability, terminateCapability, initialized, isPaused, delayedEvents, pauseTokens, doneHandlers, _scheduledControlEvents, _isExecutingEvent, errorsAreFatal, errorPorts) {
    this.id = id;
    this.ports = ports;
    this.weakPorts = weakPorts;
    this.isolateStatics = isolateStatics;
    this.controlPort = controlPort;
    this.pauseCapability = pauseCapability;
    this.terminateCapability = terminateCapability;
    this.initialized = initialized;
    this.isPaused = isPaused;
    this.delayedEvents = delayedEvents;
    this.pauseTokens = pauseTokens;
    this.doneHandlers = doneHandlers;
    this._scheduledControlEvents = _scheduledControlEvents;
    this._isExecutingEvent = _isExecutingEvent;
    this.errorsAreFatal = errorsAreFatal;
    this.errorPorts = errorPorts;
  }
  _IsolateContext.builtin$cls = "_IsolateContext";
  if (!"name" in _IsolateContext)
    _IsolateContext.name = "_IsolateContext";
  $desc = $collectedClasses._IsolateContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateContext.prototype = $desc;
  _IsolateContext.prototype.get$id = function(receiver) {
    return this.id;
  };
  _IsolateContext.prototype.get$isolateStatics = function() {
    return this.isolateStatics;
  };
  _IsolateContext.prototype.get$controlPort = function() {
    return this.controlPort;
  };
  _IsolateContext.prototype.set$initialized = function(v) {
    return this.initialized = v;
  };
  _IsolateContext.prototype.get$isPaused = function() {
    return this.isPaused;
  };
  _IsolateContext.prototype.get$delayedEvents = function() {
    return this.delayedEvents;
  };
  function _IsolateContext_handlePing_respond(responsePort_0) {
    this.responsePort_0 = responsePort_0;
  }
  _IsolateContext_handlePing_respond.builtin$cls = "_IsolateContext_handlePing_respond";
  if (!"name" in _IsolateContext_handlePing_respond)
    _IsolateContext_handlePing_respond.name = "_IsolateContext_handlePing_respond";
  $desc = $collectedClasses._IsolateContext_handlePing_respond;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateContext_handlePing_respond.prototype = $desc;
  function _EventLoop(events, _activeJsAsyncCount) {
    this.events = events;
    this._activeJsAsyncCount = _activeJsAsyncCount;
  }
  _EventLoop.builtin$cls = "_EventLoop";
  if (!"name" in _EventLoop)
    _EventLoop.name = "_EventLoop";
  $desc = $collectedClasses._EventLoop;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop.prototype = $desc;
  function _EventLoop__runHelper_next(this_0) {
    this.this_0 = this_0;
  }
  _EventLoop__runHelper_next.builtin$cls = "_EventLoop__runHelper_next";
  if (!"name" in _EventLoop__runHelper_next)
    _EventLoop__runHelper_next.name = "_EventLoop__runHelper_next";
  $desc = $collectedClasses._EventLoop__runHelper_next;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop__runHelper_next.prototype = $desc;
  function _IsolateEvent(isolate, fn, message) {
    this.isolate = isolate;
    this.fn = fn;
    this.message = message;
  }
  _IsolateEvent.builtin$cls = "_IsolateEvent";
  if (!"name" in _IsolateEvent)
    _IsolateEvent.name = "_IsolateEvent";
  $desc = $collectedClasses._IsolateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateEvent.prototype = $desc;
  _IsolateEvent.prototype.get$message = function(receiver) {
    return this.message;
  };
  _IsolateEvent.prototype.set$message = function(receiver, v) {
    return this.message = v;
  };
  function _MainManagerStub() {
  }
  _MainManagerStub.builtin$cls = "_MainManagerStub";
  if (!"name" in _MainManagerStub)
    _MainManagerStub.name = "_MainManagerStub";
  $desc = $collectedClasses._MainManagerStub;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MainManagerStub.prototype = $desc;
  function IsolateNatives__processWorkerMessage_closure(entryPoint_0, args_1, message_2, isSpawnUri_3, startPaused_4, replyTo_5) {
    this.entryPoint_0 = entryPoint_0;
    this.args_1 = args_1;
    this.message_2 = message_2;
    this.isSpawnUri_3 = isSpawnUri_3;
    this.startPaused_4 = startPaused_4;
    this.replyTo_5 = replyTo_5;
  }
  IsolateNatives__processWorkerMessage_closure.builtin$cls = "IsolateNatives__processWorkerMessage_closure";
  if (!"name" in IsolateNatives__processWorkerMessage_closure)
    IsolateNatives__processWorkerMessage_closure.name = "IsolateNatives__processWorkerMessage_closure";
  $desc = $collectedClasses.IsolateNatives__processWorkerMessage_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IsolateNatives__processWorkerMessage_closure.prototype = $desc;
  function IsolateNatives__startIsolate_runStartFunction(topLevel_0, args_1, message_2, isSpawnUri_3, context_4) {
    this.topLevel_0 = topLevel_0;
    this.args_1 = args_1;
    this.message_2 = message_2;
    this.isSpawnUri_3 = isSpawnUri_3;
    this.context_4 = context_4;
  }
  IsolateNatives__startIsolate_runStartFunction.builtin$cls = "IsolateNatives__startIsolate_runStartFunction";
  if (!"name" in IsolateNatives__startIsolate_runStartFunction)
    IsolateNatives__startIsolate_runStartFunction.name = "IsolateNatives__startIsolate_runStartFunction";
  $desc = $collectedClasses.IsolateNatives__startIsolate_runStartFunction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IsolateNatives__startIsolate_runStartFunction.prototype = $desc;
  function _BaseSendPort() {
  }
  _BaseSendPort.builtin$cls = "_BaseSendPort";
  if (!"name" in _BaseSendPort)
    _BaseSendPort.name = "_BaseSendPort";
  $desc = $collectedClasses._BaseSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseSendPort.prototype = $desc;
  function _NativeJsSendPort(_receivePort, _isolateId) {
    this._receivePort = _receivePort;
    this._isolateId = _isolateId;
  }
  _NativeJsSendPort.builtin$cls = "_NativeJsSendPort";
  if (!"name" in _NativeJsSendPort)
    _NativeJsSendPort.name = "_NativeJsSendPort";
  $desc = $collectedClasses._NativeJsSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort.prototype = $desc;
  function _NativeJsSendPort_send_closure(box_0, this_1, shouldSerialize_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.shouldSerialize_2 = shouldSerialize_2;
  }
  _NativeJsSendPort_send_closure.builtin$cls = "_NativeJsSendPort_send_closure";
  if (!"name" in _NativeJsSendPort_send_closure)
    _NativeJsSendPort_send_closure.name = "_NativeJsSendPort_send_closure";
  $desc = $collectedClasses._NativeJsSendPort_send_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort_send_closure.prototype = $desc;
  function _WorkerSendPort(_workerId, _receivePortId, _isolateId) {
    this._workerId = _workerId;
    this._receivePortId = _receivePortId;
    this._isolateId = _isolateId;
  }
  _WorkerSendPort.builtin$cls = "_WorkerSendPort";
  if (!"name" in _WorkerSendPort)
    _WorkerSendPort.name = "_WorkerSendPort";
  $desc = $collectedClasses._WorkerSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WorkerSendPort.prototype = $desc;
  function RawReceivePortImpl(__isolate_helper$_id, _handler, _isClosed) {
    this.__isolate_helper$_id = __isolate_helper$_id;
    this._handler = _handler;
    this._isClosed = _isClosed;
  }
  RawReceivePortImpl.builtin$cls = "RawReceivePortImpl";
  if (!"name" in RawReceivePortImpl)
    RawReceivePortImpl.name = "RawReceivePortImpl";
  $desc = $collectedClasses.RawReceivePortImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RawReceivePortImpl.prototype = $desc;
  RawReceivePortImpl.prototype.get$__isolate_helper$_id = function() {
    return this.__isolate_helper$_id;
  };
  RawReceivePortImpl.prototype.get$_isClosed = function() {
    return this._isClosed;
  };
  function _JsSerializer(_nextFreeRefId, _visited) {
    this._nextFreeRefId = _nextFreeRefId;
    this._visited = _visited;
  }
  _JsSerializer.builtin$cls = "_JsSerializer";
  if (!"name" in _JsSerializer)
    _JsSerializer.name = "_JsSerializer";
  $desc = $collectedClasses._JsSerializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsSerializer.prototype = $desc;
  function _JsCopier(_visited) {
    this._visited = _visited;
  }
  _JsCopier.builtin$cls = "_JsCopier";
  if (!"name" in _JsCopier)
    _JsCopier.name = "_JsCopier";
  $desc = $collectedClasses._JsCopier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsCopier.prototype = $desc;
  function _JsDeserializer(_deserialized) {
    this._deserialized = _deserialized;
  }
  _JsDeserializer.builtin$cls = "_JsDeserializer";
  if (!"name" in _JsDeserializer)
    _JsDeserializer.name = "_JsDeserializer";
  $desc = $collectedClasses._JsDeserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsDeserializer.prototype = $desc;
  function _JsVisitedMap(tagged) {
    this.tagged = tagged;
  }
  _JsVisitedMap.builtin$cls = "_JsVisitedMap";
  if (!"name" in _JsVisitedMap)
    _JsVisitedMap.name = "_JsVisitedMap";
  $desc = $collectedClasses._JsVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsVisitedMap.prototype = $desc;
  function _MessageTraverserVisitedMap() {
  }
  _MessageTraverserVisitedMap.builtin$cls = "_MessageTraverserVisitedMap";
  if (!"name" in _MessageTraverserVisitedMap)
    _MessageTraverserVisitedMap.name = "_MessageTraverserVisitedMap";
  $desc = $collectedClasses._MessageTraverserVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverserVisitedMap.prototype = $desc;
  function _MessageTraverser() {
  }
  _MessageTraverser.builtin$cls = "_MessageTraverser";
  if (!"name" in _MessageTraverser)
    _MessageTraverser.name = "_MessageTraverser";
  $desc = $collectedClasses._MessageTraverser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverser.prototype = $desc;
  function _Copier() {
  }
  _Copier.builtin$cls = "_Copier";
  if (!"name" in _Copier)
    _Copier.name = "_Copier";
  $desc = $collectedClasses._Copier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier.prototype = $desc;
  function _Copier_visitMap_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  _Copier_visitMap_closure.builtin$cls = "_Copier_visitMap_closure";
  if (!"name" in _Copier_visitMap_closure)
    _Copier_visitMap_closure.name = "_Copier_visitMap_closure";
  $desc = $collectedClasses._Copier_visitMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier_visitMap_closure.prototype = $desc;
  function _Serializer() {
  }
  _Serializer.builtin$cls = "_Serializer";
  if (!"name" in _Serializer)
    _Serializer.name = "_Serializer";
  $desc = $collectedClasses._Serializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Serializer.prototype = $desc;
  function _Deserializer() {
  }
  _Deserializer.builtin$cls = "_Deserializer";
  if (!"name" in _Deserializer)
    _Deserializer.name = "_Deserializer";
  $desc = $collectedClasses._Deserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Deserializer.prototype = $desc;
  function TimerImpl(_once, _inEventLoop, _handle) {
    this._once = _once;
    this._inEventLoop = _inEventLoop;
    this._handle = _handle;
  }
  TimerImpl.builtin$cls = "TimerImpl";
  if (!"name" in TimerImpl)
    TimerImpl.name = "TimerImpl";
  $desc = $collectedClasses.TimerImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl.prototype = $desc;
  function TimerImpl_internalCallback(this_0, callback_1) {
    this.this_0 = this_0;
    this.callback_1 = callback_1;
  }
  TimerImpl_internalCallback.builtin$cls = "TimerImpl_internalCallback";
  if (!"name" in TimerImpl_internalCallback)
    TimerImpl_internalCallback.name = "TimerImpl_internalCallback";
  $desc = $collectedClasses.TimerImpl_internalCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback.prototype = $desc;
  function TimerImpl_internalCallback0(this_2, callback_3) {
    this.this_2 = this_2;
    this.callback_3 = callback_3;
  }
  TimerImpl_internalCallback0.builtin$cls = "TimerImpl_internalCallback0";
  if (!"name" in TimerImpl_internalCallback0)
    TimerImpl_internalCallback0.name = "TimerImpl_internalCallback0";
  $desc = $collectedClasses.TimerImpl_internalCallback0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback0.prototype = $desc;
  function TimerImpl$periodic_closure(this_0, callback_1) {
    this.this_0 = this_0;
    this.callback_1 = callback_1;
  }
  TimerImpl$periodic_closure.builtin$cls = "TimerImpl$periodic_closure";
  if (!"name" in TimerImpl$periodic_closure)
    TimerImpl$periodic_closure.name = "TimerImpl$periodic_closure";
  $desc = $collectedClasses.TimerImpl$periodic_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl$periodic_closure.prototype = $desc;
  function CapabilityImpl(__isolate_helper$_id) {
    this.__isolate_helper$_id = __isolate_helper$_id;
  }
  CapabilityImpl.builtin$cls = "CapabilityImpl";
  if (!"name" in CapabilityImpl)
    CapabilityImpl.name = "CapabilityImpl";
  $desc = $collectedClasses.CapabilityImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CapabilityImpl.prototype = $desc;
  CapabilityImpl.prototype.get$__isolate_helper$_id = function() {
    return this.__isolate_helper$_id;
  };
  function NoSideEffects() {
  }
  NoSideEffects.builtin$cls = "NoSideEffects";
  if (!"name" in NoSideEffects)
    NoSideEffects.name = "NoSideEffects";
  $desc = $collectedClasses.NoSideEffects;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoSideEffects.prototype = $desc;
  function NoThrows() {
  }
  NoThrows.builtin$cls = "NoThrows";
  if (!"name" in NoThrows)
    NoThrows.name = "NoThrows";
  $desc = $collectedClasses.NoThrows;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoThrows.prototype = $desc;
  function NoInline() {
  }
  NoInline.builtin$cls = "NoInline";
  if (!"name" in NoInline)
    NoInline.name = "NoInline";
  $desc = $collectedClasses.NoInline;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoInline.prototype = $desc;
  function Native(name) {
    this.name = name;
  }
  Native.builtin$cls = "Native";
  if (!"name" in Native)
    Native.name = "Native";
  $desc = $collectedClasses.Native;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Native.prototype = $desc;
  Native.prototype.get$name = function(receiver) {
    return this.name;
  };
  function ConstantMap() {
  }
  ConstantMap.builtin$cls = "ConstantMap";
  if (!"name" in ConstantMap)
    ConstantMap.name = "ConstantMap";
  $desc = $collectedClasses.ConstantMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConstantMap.prototype = $desc;
  function ConstantStringMap(length, __js_helper$_jsObject, __js_helper$_keys) {
    this.length = length;
    this.__js_helper$_jsObject = __js_helper$_jsObject;
    this.__js_helper$_keys = __js_helper$_keys;
  }
  ConstantStringMap.builtin$cls = "ConstantStringMap";
  if (!"name" in ConstantStringMap)
    ConstantStringMap.name = "ConstantStringMap";
  $desc = $collectedClasses.ConstantStringMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConstantStringMap.prototype = $desc;
  ConstantStringMap.prototype.get$length = function(receiver) {
    return this.length;
  };
  function ConstantStringMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  ConstantStringMap_values_closure.builtin$cls = "ConstantStringMap_values_closure";
  if (!"name" in ConstantStringMap_values_closure)
    ConstantStringMap_values_closure.name = "ConstantStringMap_values_closure";
  $desc = $collectedClasses.ConstantStringMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConstantStringMap_values_closure.prototype = $desc;
  function _ConstantMapKeyIterable(__js_helper$_map) {
    this.__js_helper$_map = __js_helper$_map;
  }
  _ConstantMapKeyIterable.builtin$cls = "_ConstantMapKeyIterable";
  if (!"name" in _ConstantMapKeyIterable)
    _ConstantMapKeyIterable.name = "_ConstantMapKeyIterable";
  $desc = $collectedClasses._ConstantMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ConstantMapKeyIterable.prototype = $desc;
  function _Patch() {
  }
  _Patch.builtin$cls = "_Patch";
  if (!"name" in _Patch)
    _Patch.name = "_Patch";
  $desc = $collectedClasses._Patch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Patch.prototype = $desc;
  function JSInvocationMirror(__js_helper$_memberName, _internalName, _kind, _arguments, _namedArgumentNames, _namedIndices) {
    this.__js_helper$_memberName = __js_helper$_memberName;
    this._internalName = _internalName;
    this._kind = _kind;
    this._arguments = _arguments;
    this._namedArgumentNames = _namedArgumentNames;
    this._namedIndices = _namedIndices;
  }
  JSInvocationMirror.builtin$cls = "JSInvocationMirror";
  if (!"name" in JSInvocationMirror)
    JSInvocationMirror.name = "JSInvocationMirror";
  $desc = $collectedClasses.JSInvocationMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSInvocationMirror.prototype = $desc;
  function CachedInvocation(mangledName, jsFunction, isIntercepted, cachedInterceptor) {
    this.mangledName = mangledName;
    this.jsFunction = jsFunction;
    this.isIntercepted = isIntercepted;
    this.cachedInterceptor = cachedInterceptor;
  }
  CachedInvocation.builtin$cls = "CachedInvocation";
  if (!"name" in CachedInvocation)
    CachedInvocation.name = "CachedInvocation";
  $desc = $collectedClasses.CachedInvocation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CachedInvocation.prototype = $desc;
  CachedInvocation.prototype.get$mangledName = function() {
    return this.mangledName;
  };
  CachedInvocation.prototype.get$jsFunction = function() {
    return this.jsFunction;
  };
  CachedInvocation.prototype.get$isIntercepted = function() {
    return this.isIntercepted;
  };
  function CachedCatchAllInvocation(info, mangledName, jsFunction, isIntercepted, cachedInterceptor) {
    this.info = info;
    this.mangledName = mangledName;
    this.jsFunction = jsFunction;
    this.isIntercepted = isIntercepted;
    this.cachedInterceptor = cachedInterceptor;
  }
  CachedCatchAllInvocation.builtin$cls = "CachedCatchAllInvocation";
  if (!"name" in CachedCatchAllInvocation)
    CachedCatchAllInvocation.name = "CachedCatchAllInvocation";
  $desc = $collectedClasses.CachedCatchAllInvocation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CachedCatchAllInvocation.prototype = $desc;
  function CachedNoSuchMethodInvocation(interceptor) {
    this.interceptor = interceptor;
  }
  CachedNoSuchMethodInvocation.builtin$cls = "CachedNoSuchMethodInvocation";
  if (!"name" in CachedNoSuchMethodInvocation)
    CachedNoSuchMethodInvocation.name = "CachedNoSuchMethodInvocation";
  $desc = $collectedClasses.CachedNoSuchMethodInvocation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CachedNoSuchMethodInvocation.prototype = $desc;
  function ReflectionInfo(jsFunction, data, isAccessor, requiredParameterCount, optionalParameterCount, areOptionalParametersNamed, functionType, cachedSortedIndices) {
    this.jsFunction = jsFunction;
    this.data = data;
    this.isAccessor = isAccessor;
    this.requiredParameterCount = requiredParameterCount;
    this.optionalParameterCount = optionalParameterCount;
    this.areOptionalParametersNamed = areOptionalParametersNamed;
    this.functionType = functionType;
    this.cachedSortedIndices = cachedSortedIndices;
  }
  ReflectionInfo.builtin$cls = "ReflectionInfo";
  if (!"name" in ReflectionInfo)
    ReflectionInfo.name = "ReflectionInfo";
  $desc = $collectedClasses.ReflectionInfo;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReflectionInfo.prototype = $desc;
  ReflectionInfo.prototype.get$jsFunction = function() {
    return this.jsFunction;
  };
  ReflectionInfo.prototype.get$data = function(receiver) {
    return this.data;
  };
  function ReflectionInfo_sortedIndex_closure(box_0, this_1, positions_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.positions_2 = positions_2;
  }
  ReflectionInfo_sortedIndex_closure.builtin$cls = "ReflectionInfo_sortedIndex_closure";
  if (!"name" in ReflectionInfo_sortedIndex_closure)
    ReflectionInfo_sortedIndex_closure.name = "ReflectionInfo_sortedIndex_closure";
  $desc = $collectedClasses.ReflectionInfo_sortedIndex_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReflectionInfo_sortedIndex_closure.prototype = $desc;
  function Primitives_functionNoSuchMethod_closure(box_0, arguments_1, namedArgumentList_2) {
    this.box_0 = box_0;
    this.arguments_1 = arguments_1;
    this.namedArgumentList_2 = namedArgumentList_2;
  }
  Primitives_functionNoSuchMethod_closure.builtin$cls = "Primitives_functionNoSuchMethod_closure";
  if (!"name" in Primitives_functionNoSuchMethod_closure)
    Primitives_functionNoSuchMethod_closure.name = "Primitives_functionNoSuchMethod_closure";
  $desc = $collectedClasses.Primitives_functionNoSuchMethod_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Primitives_functionNoSuchMethod_closure.prototype = $desc;
  function Primitives_applyFunction_closure(box_0, defaultArguments_1) {
    this.box_0 = box_0;
    this.defaultArguments_1 = defaultArguments_1;
  }
  Primitives_applyFunction_closure.builtin$cls = "Primitives_applyFunction_closure";
  if (!"name" in Primitives_applyFunction_closure)
    Primitives_applyFunction_closure.name = "Primitives_applyFunction_closure";
  $desc = $collectedClasses.Primitives_applyFunction_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Primitives_applyFunction_closure.prototype = $desc;
  function TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver) {
    this._pattern = _pattern;
    this._arguments = _arguments;
    this._argumentsExpr = _argumentsExpr;
    this._expr = _expr;
    this._method = _method;
    this._receiver = _receiver;
  }
  TypeErrorDecoder.builtin$cls = "TypeErrorDecoder";
  if (!"name" in TypeErrorDecoder)
    TypeErrorDecoder.name = "TypeErrorDecoder";
  $desc = $collectedClasses.TypeErrorDecoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeErrorDecoder.prototype = $desc;
  function NullError(_message, _method) {
    this._message = _message;
    this._method = _method;
  }
  NullError.builtin$cls = "NullError";
  if (!"name" in NullError)
    NullError.name = "NullError";
  $desc = $collectedClasses.NullError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullError.prototype = $desc;
  function JsNoSuchMethodError(_message, _method, _receiver) {
    this._message = _message;
    this._method = _method;
    this._receiver = _receiver;
  }
  JsNoSuchMethodError.builtin$cls = "JsNoSuchMethodError";
  if (!"name" in JsNoSuchMethodError)
    JsNoSuchMethodError.name = "JsNoSuchMethodError";
  $desc = $collectedClasses.JsNoSuchMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsNoSuchMethodError.prototype = $desc;
  function UnknownJsTypeError(_message) {
    this._message = _message;
  }
  UnknownJsTypeError.builtin$cls = "UnknownJsTypeError";
  if (!"name" in UnknownJsTypeError)
    UnknownJsTypeError.name = "UnknownJsTypeError";
  $desc = $collectedClasses.UnknownJsTypeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJsTypeError.prototype = $desc;
  function unwrapException_saveStackTrace(ex_0) {
    this.ex_0 = ex_0;
  }
  unwrapException_saveStackTrace.builtin$cls = "unwrapException_saveStackTrace";
  if (!"name" in unwrapException_saveStackTrace)
    unwrapException_saveStackTrace.name = "unwrapException_saveStackTrace";
  $desc = $collectedClasses.unwrapException_saveStackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  unwrapException_saveStackTrace.prototype = $desc;
  function _StackTrace(_exception, _trace) {
    this._exception = _exception;
    this._trace = _trace;
  }
  _StackTrace.builtin$cls = "_StackTrace";
  if (!"name" in _StackTrace)
    _StackTrace.name = "_StackTrace";
  $desc = $collectedClasses._StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StackTrace.prototype = $desc;
  function invokeClosure_closure(closure_0) {
    this.closure_0 = closure_0;
  }
  invokeClosure_closure.builtin$cls = "invokeClosure_closure";
  if (!"name" in invokeClosure_closure)
    invokeClosure_closure.name = "invokeClosure_closure";
  $desc = $collectedClasses.invokeClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure.prototype = $desc;
  function invokeClosure_closure0(closure_1, arg1_2) {
    this.closure_1 = closure_1;
    this.arg1_2 = arg1_2;
  }
  invokeClosure_closure0.builtin$cls = "invokeClosure_closure0";
  if (!"name" in invokeClosure_closure0)
    invokeClosure_closure0.name = "invokeClosure_closure0";
  $desc = $collectedClasses.invokeClosure_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure0.prototype = $desc;
  function invokeClosure_closure1(closure_3, arg1_4, arg2_5) {
    this.closure_3 = closure_3;
    this.arg1_4 = arg1_4;
    this.arg2_5 = arg2_5;
  }
  invokeClosure_closure1.builtin$cls = "invokeClosure_closure1";
  if (!"name" in invokeClosure_closure1)
    invokeClosure_closure1.name = "invokeClosure_closure1";
  $desc = $collectedClasses.invokeClosure_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure1.prototype = $desc;
  function invokeClosure_closure2(closure_6, arg1_7, arg2_8, arg3_9) {
    this.closure_6 = closure_6;
    this.arg1_7 = arg1_7;
    this.arg2_8 = arg2_8;
    this.arg3_9 = arg3_9;
  }
  invokeClosure_closure2.builtin$cls = "invokeClosure_closure2";
  if (!"name" in invokeClosure_closure2)
    invokeClosure_closure2.name = "invokeClosure_closure2";
  $desc = $collectedClasses.invokeClosure_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure2.prototype = $desc;
  function invokeClosure_closure3(closure_10, arg1_11, arg2_12, arg3_13, arg4_14) {
    this.closure_10 = closure_10;
    this.arg1_11 = arg1_11;
    this.arg2_12 = arg2_12;
    this.arg3_13 = arg3_13;
    this.arg4_14 = arg4_14;
  }
  invokeClosure_closure3.builtin$cls = "invokeClosure_closure3";
  if (!"name" in invokeClosure_closure3)
    invokeClosure_closure3.name = "invokeClosure_closure3";
  $desc = $collectedClasses.invokeClosure_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure3.prototype = $desc;
  function Closure() {
  }
  Closure.builtin$cls = "Closure";
  if (!"name" in Closure)
    Closure.name = "Closure";
  $desc = $collectedClasses.Closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure.prototype = $desc;
  function TearOffClosure() {
  }
  TearOffClosure.builtin$cls = "TearOffClosure";
  if (!"name" in TearOffClosure)
    TearOffClosure.name = "TearOffClosure";
  $desc = $collectedClasses.TearOffClosure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TearOffClosure.prototype = $desc;
  function BoundClosure(_self, _target, _receiver, __js_helper$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure.builtin$cls = "BoundClosure";
  if (!"name" in BoundClosure)
    BoundClosure.name = "BoundClosure";
  $desc = $collectedClasses.BoundClosure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure.prototype = $desc;
  BoundClosure.prototype.get$_self = function(receiver) {
    return this._self;
  };
  BoundClosure.prototype.get$_target = function() {
    return this._target;
  };
  BoundClosure.prototype.get$__js_helper$_name = function(receiver) {
    return this.__js_helper$_name;
  };
  function Creates(types) {
    this.types = types;
  }
  Creates.builtin$cls = "Creates";
  if (!"name" in Creates)
    Creates.name = "Creates";
  $desc = $collectedClasses.Creates;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Creates.prototype = $desc;
  function Returns(types) {
    this.types = types;
  }
  Returns.builtin$cls = "Returns";
  if (!"name" in Returns)
    Returns.name = "Returns";
  $desc = $collectedClasses.Returns;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Returns.prototype = $desc;
  function JSName(name) {
    this.name = name;
  }
  JSName.builtin$cls = "JSName";
  if (!"name" in JSName)
    JSName.name = "JSName";
  $desc = $collectedClasses.JSName;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSName.prototype = $desc;
  JSName.prototype.get$name = function(receiver) {
    return this.name;
  };
  function CastErrorImplementation(message) {
    this.message = message;
  }
  CastErrorImplementation.builtin$cls = "CastErrorImplementation";
  if (!"name" in CastErrorImplementation)
    CastErrorImplementation.name = "CastErrorImplementation";
  $desc = $collectedClasses.CastErrorImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CastErrorImplementation.prototype = $desc;
  CastErrorImplementation.prototype.get$message = function(receiver) {
    return this.message;
  };
  function RuntimeError(message) {
    this.message = message;
  }
  RuntimeError.builtin$cls = "RuntimeError";
  if (!"name" in RuntimeError)
    RuntimeError.name = "RuntimeError";
  $desc = $collectedClasses.RuntimeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeError.prototype = $desc;
  RuntimeError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function RuntimeType() {
  }
  RuntimeType.builtin$cls = "RuntimeType";
  if (!"name" in RuntimeType)
    RuntimeType.name = "RuntimeType";
  $desc = $collectedClasses.RuntimeType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeType.prototype = $desc;
  function RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, namedParameters) {
    this.returnType = returnType;
    this.parameterTypes = parameterTypes;
    this.optionalParameterTypes = optionalParameterTypes;
    this.namedParameters = namedParameters;
  }
  RuntimeFunctionType.builtin$cls = "RuntimeFunctionType";
  if (!"name" in RuntimeFunctionType)
    RuntimeFunctionType.name = "RuntimeFunctionType";
  $desc = $collectedClasses.RuntimeFunctionType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeFunctionType.prototype = $desc;
  function DynamicRuntimeType() {
  }
  DynamicRuntimeType.builtin$cls = "DynamicRuntimeType";
  if (!"name" in DynamicRuntimeType)
    DynamicRuntimeType.name = "DynamicRuntimeType";
  $desc = $collectedClasses.DynamicRuntimeType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DynamicRuntimeType.prototype = $desc;
  function RuntimeTypePlain(name) {
    this.name = name;
  }
  RuntimeTypePlain.builtin$cls = "RuntimeTypePlain";
  if (!"name" in RuntimeTypePlain)
    RuntimeTypePlain.name = "RuntimeTypePlain";
  $desc = $collectedClasses.RuntimeTypePlain;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeTypePlain.prototype = $desc;
  RuntimeTypePlain.prototype.get$name = function(receiver) {
    return this.name;
  };
  function RuntimeTypeGeneric(name, arguments, rti) {
    this.name = name;
    this.arguments = arguments;
    this.rti = rti;
  }
  RuntimeTypeGeneric.builtin$cls = "RuntimeTypeGeneric";
  if (!"name" in RuntimeTypeGeneric)
    RuntimeTypeGeneric.name = "RuntimeTypeGeneric";
  $desc = $collectedClasses.RuntimeTypeGeneric;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeTypeGeneric.prototype = $desc;
  RuntimeTypeGeneric.prototype.get$name = function(receiver) {
    return this.name;
  };
  RuntimeTypeGeneric.prototype.get$arguments = function() {
    return this.arguments;
  };
  function UnimplementedNoSuchMethodError(_message) {
    this._message = _message;
  }
  UnimplementedNoSuchMethodError.builtin$cls = "UnimplementedNoSuchMethodError";
  if (!"name" in UnimplementedNoSuchMethodError)
    UnimplementedNoSuchMethodError.name = "UnimplementedNoSuchMethodError";
  $desc = $collectedClasses.UnimplementedNoSuchMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnimplementedNoSuchMethodError.prototype = $desc;
  function TypeImpl(_typeName, _unmangledName) {
    this._typeName = _typeName;
    this._unmangledName = _unmangledName;
  }
  TypeImpl.builtin$cls = "TypeImpl";
  if (!"name" in TypeImpl)
    TypeImpl.name = "TypeImpl";
  $desc = $collectedClasses.TypeImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeImpl.prototype = $desc;
  TypeImpl.prototype.get$_typeName = function() {
    return this._typeName;
  };
  function initHooks_closure(getTag_0) {
    this.getTag_0 = getTag_0;
  }
  initHooks_closure.builtin$cls = "initHooks_closure";
  if (!"name" in initHooks_closure)
    initHooks_closure.name = "initHooks_closure";
  $desc = $collectedClasses.initHooks_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure.prototype = $desc;
  function initHooks_closure0(getUnknownTag_1) {
    this.getUnknownTag_1 = getUnknownTag_1;
  }
  initHooks_closure0.builtin$cls = "initHooks_closure0";
  if (!"name" in initHooks_closure0)
    initHooks_closure0.name = "initHooks_closure0";
  $desc = $collectedClasses.initHooks_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure0.prototype = $desc;
  function initHooks_closure1(prototypeForTag_2) {
    this.prototypeForTag_2 = prototypeForTag_2;
  }
  initHooks_closure1.builtin$cls = "initHooks_closure1";
  if (!"name" in initHooks_closure1)
    initHooks_closure1.name = "initHooks_closure1";
  $desc = $collectedClasses.initHooks_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure1.prototype = $desc;
  function JSSyntaxRegExp(pattern, _nativeRegExp, _nativeGlobalRegExp, _nativeAnchoredRegExp) {
    this.pattern = pattern;
    this._nativeRegExp = _nativeRegExp;
    this._nativeGlobalRegExp = _nativeGlobalRegExp;
    this._nativeAnchoredRegExp = _nativeAnchoredRegExp;
  }
  JSSyntaxRegExp.builtin$cls = "JSSyntaxRegExp";
  if (!"name" in JSSyntaxRegExp)
    JSSyntaxRegExp.name = "JSSyntaxRegExp";
  $desc = $collectedClasses.JSSyntaxRegExp;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSSyntaxRegExp.prototype = $desc;
  JSSyntaxRegExp.prototype.get$pattern = function(receiver) {
    return this.pattern;
  };
  function _MatchImplementation(pattern, _match) {
    this.pattern = pattern;
    this._match = _match;
  }
  _MatchImplementation.builtin$cls = "_MatchImplementation";
  if (!"name" in _MatchImplementation)
    _MatchImplementation.name = "_MatchImplementation";
  $desc = $collectedClasses._MatchImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MatchImplementation.prototype = $desc;
  _MatchImplementation.prototype.get$pattern = function(receiver) {
    return this.pattern;
  };
  function _AllMatchesIterable(_re, _string, __js_helper$_start) {
    this._re = _re;
    this._string = _string;
    this.__js_helper$_start = __js_helper$_start;
  }
  _AllMatchesIterable.builtin$cls = "_AllMatchesIterable";
  if (!"name" in _AllMatchesIterable)
    _AllMatchesIterable.name = "_AllMatchesIterable";
  $desc = $collectedClasses._AllMatchesIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AllMatchesIterable.prototype = $desc;
  function _AllMatchesIterator(_regExp, _string, _nextIndex, __js_helper$_current) {
    this._regExp = _regExp;
    this._string = _string;
    this._nextIndex = _nextIndex;
    this.__js_helper$_current = __js_helper$_current;
  }
  _AllMatchesIterator.builtin$cls = "_AllMatchesIterator";
  if (!"name" in _AllMatchesIterator)
    _AllMatchesIterator.name = "_AllMatchesIterator";
  $desc = $collectedClasses._AllMatchesIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AllMatchesIterator.prototype = $desc;
  function StringMatch(start, input, pattern) {
    this.start = start;
    this.input = input;
    this.pattern = pattern;
  }
  StringMatch.builtin$cls = "StringMatch";
  if (!"name" in StringMatch)
    StringMatch.name = "StringMatch";
  $desc = $collectedClasses.StringMatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringMatch.prototype = $desc;
  StringMatch.prototype.get$start = function(receiver) {
    return this.start;
  };
  StringMatch.prototype.get$pattern = function(receiver) {
    return this.pattern;
  };
  function main_closure() {
  }
  main_closure.builtin$cls = "main_closure";
  if (!"name" in main_closure)
    main_closure.name = "main_closure";
  $desc = $collectedClasses.main_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure.prototype = $desc;
  function main_closure0() {
  }
  main_closure0.builtin$cls = "main_closure0";
  if (!"name" in main_closure0)
    main_closure0.name = "main_closure0";
  $desc = $collectedClasses.main_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure0.prototype = $desc;
  function main_closure1() {
  }
  main_closure1.builtin$cls = "main_closure1";
  if (!"name" in main_closure1)
    main_closure1.name = "main_closure1";
  $desc = $collectedClasses.main_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure1.prototype = $desc;
  function main_closure2() {
  }
  main_closure2.builtin$cls = "main_closure2";
  if (!"name" in main_closure2)
    main_closure2.name = "main_closure2";
  $desc = $collectedClasses.main_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure2.prototype = $desc;
  function main_closure3() {
  }
  main_closure3.builtin$cls = "main_closure3";
  if (!"name" in main_closure3)
    main_closure3.name = "main_closure3";
  $desc = $collectedClasses.main_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure3.prototype = $desc;
  function main_closure4() {
  }
  main_closure4.builtin$cls = "main_closure4";
  if (!"name" in main_closure4)
    main_closure4.name = "main_closure4";
  $desc = $collectedClasses.main_closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure4.prototype = $desc;
  function main_closure5() {
  }
  main_closure5.builtin$cls = "main_closure5";
  if (!"name" in main_closure5)
    main_closure5.name = "main_closure5";
  $desc = $collectedClasses.main_closure5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure5.prototype = $desc;
  function main_closure6() {
  }
  main_closure6.builtin$cls = "main_closure6";
  if (!"name" in main_closure6)
    main_closure6.name = "main_closure6";
  $desc = $collectedClasses.main_closure6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure6.prototype = $desc;
  function main_closure7() {
  }
  main_closure7.builtin$cls = "main_closure7";
  if (!"name" in main_closure7)
    main_closure7.name = "main_closure7";
  $desc = $collectedClasses.main_closure7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure7.prototype = $desc;
  function main_closure8() {
  }
  main_closure8.builtin$cls = "main_closure8";
  if (!"name" in main_closure8)
    main_closure8.name = "main_closure8";
  $desc = $collectedClasses.main_closure8;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure8.prototype = $desc;
  function main_closure9() {
  }
  main_closure9.builtin$cls = "main_closure9";
  if (!"name" in main_closure9)
    main_closure9.name = "main_closure9";
  $desc = $collectedClasses.main_closure9;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure9.prototype = $desc;
  function main_closure10() {
  }
  main_closure10.builtin$cls = "main_closure10";
  if (!"name" in main_closure10)
    main_closure10.name = "main_closure10";
  $desc = $collectedClasses.main_closure10;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure10.prototype = $desc;
  function main_closure11() {
  }
  main_closure11.builtin$cls = "main_closure11";
  if (!"name" in main_closure11)
    main_closure11.name = "main_closure11";
  $desc = $collectedClasses.main_closure11;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure11.prototype = $desc;
  function main_closure12() {
  }
  main_closure12.builtin$cls = "main_closure12";
  if (!"name" in main_closure12)
    main_closure12.name = "main_closure12";
  $desc = $collectedClasses.main_closure12;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure12.prototype = $desc;
  function main_closure13() {
  }
  main_closure13.builtin$cls = "main_closure13";
  if (!"name" in main_closure13)
    main_closure13.name = "main_closure13";
  $desc = $collectedClasses.main_closure13;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure13.prototype = $desc;
  function main_closure14() {
  }
  main_closure14.builtin$cls = "main_closure14";
  if (!"name" in main_closure14)
    main_closure14.name = "main_closure14";
  $desc = $collectedClasses.main_closure14;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure14.prototype = $desc;
  function main_closure15() {
  }
  main_closure15.builtin$cls = "main_closure15";
  if (!"name" in main_closure15)
    main_closure15.name = "main_closure15";
  $desc = $collectedClasses.main_closure15;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure15.prototype = $desc;
  function main_closure16() {
  }
  main_closure16.builtin$cls = "main_closure16";
  if (!"name" in main_closure16)
    main_closure16.name = "main_closure16";
  $desc = $collectedClasses.main_closure16;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure16.prototype = $desc;
  function main_closure17() {
  }
  main_closure17.builtin$cls = "main_closure17";
  if (!"name" in main_closure17)
    main_closure17.name = "main_closure17";
  $desc = $collectedClasses.main_closure17;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure17.prototype = $desc;
  function BsonObject() {
  }
  BsonObject.builtin$cls = "BsonObject";
  if (!"name" in BsonObject)
    BsonObject.name = "BsonObject";
  $desc = $collectedClasses.BsonObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BsonObject.prototype = $desc;
  function BsonBinary(byteArray, byteList, offset, subType, _hexString) {
    this.byteArray = byteArray;
    this.byteList = byteList;
    this.offset = offset;
    this.subType = subType;
    this._hexString = _hexString;
  }
  BsonBinary.builtin$cls = "BsonBinary";
  if (!"name" in BsonBinary)
    BsonBinary.name = "BsonBinary";
  $desc = $collectedClasses.BsonBinary;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BsonBinary.prototype = $desc;
  BsonBinary.prototype.get$offset = function(receiver) {
    return this.offset;
  };
  function ObjectId(id) {
    this.id = id;
  }
  ObjectId.builtin$cls = "ObjectId";
  if (!"name" in ObjectId)
    ObjectId.name = "ObjectId";
  $desc = $collectedClasses.ObjectId;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObjectId.prototype = $desc;
  ObjectId.prototype.get$id = function(receiver) {
    return this.id;
  };
  function ObjectId_createId_getOctet() {
  }
  ObjectId_createId_getOctet.builtin$cls = "ObjectId_createId_getOctet";
  if (!"name" in ObjectId_createId_getOctet)
    ObjectId_createId_getOctet.name = "ObjectId_createId_getOctet";
  $desc = $collectedClasses.ObjectId_createId_getOctet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObjectId_createId_getOctet.prototype = $desc;
  function Timestamp(seconds, increment) {
    this.seconds = seconds;
    this.increment = increment;
  }
  Timestamp.builtin$cls = "Timestamp";
  if (!"name" in Timestamp)
    Timestamp.name = "Timestamp";
  $desc = $collectedClasses.Timestamp;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Timestamp.prototype = $desc;
  function MessageId($package, id) {
    this.$package = $package;
    this.id = id;
  }
  MessageId.builtin$cls = "MessageId";
  if (!"name" in MessageId)
    MessageId.name = "MessageId";
  $desc = $collectedClasses.MessageId;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MessageId.prototype = $desc;
  MessageId.prototype.get$$package = function() {
    return this.$package;
  };
  MessageId.prototype.get$id = function(receiver) {
    return this.id;
  };
  function Message(id, snippet) {
    this.id = id;
    this.snippet = snippet;
  }
  Message.builtin$cls = "Message";
  if (!"name" in Message)
    Message.name = "Message";
  $desc = $collectedClasses.Message;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Message.prototype = $desc;
  Message.prototype.get$id = function(receiver) {
    return this.id;
  };
  Message.prototype.get$snippet = function() {
    return this.snippet;
  };
  function BuildLogEntry(message, level, span) {
    this.message = message;
    this.level = level;
    this.span = span;
  }
  BuildLogEntry.builtin$cls = "BuildLogEntry";
  if (!"name" in BuildLogEntry)
    BuildLogEntry.name = "BuildLogEntry";
  $desc = $collectedClasses.BuildLogEntry;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BuildLogEntry.prototype = $desc;
  BuildLogEntry.prototype.get$message = function(receiver) {
    return this.message;
  };
  BuildLogEntry.prototype.get$level = function() {
    return this.level;
  };
  BuildLogEntry.prototype.get$span = function(receiver) {
    return this.span;
  };
  function LogEntryTable(entries) {
    this.entries = entries;
  }
  LogEntryTable.builtin$cls = "LogEntryTable";
  if (!"name" in LogEntryTable)
    LogEntryTable.name = "LogEntryTable";
  $desc = $collectedClasses.LogEntryTable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogEntryTable.prototype = $desc;
  LogEntryTable.prototype.get$entries = function(receiver) {
    return this.entries;
  };
  function LogEntryTable_LogEntryTable$fromJson_closure() {
  }
  LogEntryTable_LogEntryTable$fromJson_closure.builtin$cls = "LogEntryTable_LogEntryTable$fromJson_closure";
  if (!"name" in LogEntryTable_LogEntryTable$fromJson_closure)
    LogEntryTable_LogEntryTable$fromJson_closure.name = "LogEntryTable_LogEntryTable$fromJson_closure";
  $desc = $collectedClasses.LogEntryTable_LogEntryTable$fromJson_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogEntryTable_LogEntryTable$fromJson_closure.prototype = $desc;
  function LogEntryTable_toJson_closure(res_0) {
    this.res_0 = res_0;
  }
  LogEntryTable_toJson_closure.builtin$cls = "LogEntryTable_toJson_closure";
  if (!"name" in LogEntryTable_toJson_closure)
    LogEntryTable_toJson_closure.name = "LogEntryTable_toJson_closure";
  $desc = $collectedClasses.LogEntryTable_toJson_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogEntryTable_toJson_closure.prototype = $desc;
  function LogEntryTable_toJson__closure() {
  }
  LogEntryTable_toJson__closure.builtin$cls = "LogEntryTable_toJson__closure";
  if (!"name" in LogEntryTable_toJson__closure)
    LogEntryTable_toJson__closure.name = "LogEntryTable_toJson__closure";
  $desc = $collectedClasses.LogEntryTable_toJson__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogEntryTable_toJson__closure.prototype = $desc;
  function LogEntryTable_add_closure() {
  }
  LogEntryTable_add_closure.builtin$cls = "LogEntryTable_add_closure";
  if (!"name" in LogEntryTable_add_closure)
    LogEntryTable_add_closure.name = "LogEntryTable_add_closure";
  $desc = $collectedClasses.LogEntryTable_add_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogEntryTable_add_closure.prototype = $desc;
  function LogEntryTable_addAll_closure() {
  }
  LogEntryTable_addAll_closure.builtin$cls = "LogEntryTable_addAll_closure";
  if (!"name" in LogEntryTable_addAll_closure)
    LogEntryTable_addAll_closure.name = "LogEntryTable_addAll_closure";
  $desc = $collectedClasses.LogEntryTable_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogEntryTable_addAll_closure.prototype = $desc;
  function CoreIcon(common$DomProxyMixin$_proxy) {
    this.common$DomProxyMixin$_proxy = common$DomProxyMixin$_proxy;
  }
  CoreIcon.builtin$cls = "CoreIcon";
  if (!"name" in CoreIcon)
    CoreIcon.name = "CoreIcon";
  $desc = $collectedClasses.CoreIcon;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CoreIcon.prototype = $desc;
  function HtmlElement_DomProxyMixin() {
  }
  HtmlElement_DomProxyMixin.builtin$cls = "HtmlElement_DomProxyMixin";
  if (!"name" in HtmlElement_DomProxyMixin)
    HtmlElement_DomProxyMixin.name = "HtmlElement_DomProxyMixin";
  $desc = $collectedClasses.HtmlElement_DomProxyMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement_DomProxyMixin.prototype = $desc;
  function CoreIconset(common$DomProxyMixin$_proxy) {
    this.common$DomProxyMixin$_proxy = common$DomProxyMixin$_proxy;
  }
  CoreIconset.builtin$cls = "CoreIconset";
  if (!"name" in CoreIconset)
    CoreIconset.name = "CoreIconset";
  $desc = $collectedClasses.CoreIconset;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CoreIconset.prototype = $desc;
  function CoreMeta(common$DomProxyMixin$_proxy) {
    this.common$DomProxyMixin$_proxy = common$DomProxyMixin$_proxy;
  }
  CoreMeta.builtin$cls = "CoreMeta";
  if (!"name" in CoreMeta)
    CoreMeta.name = "CoreMeta";
  $desc = $collectedClasses.CoreMeta;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CoreMeta.prototype = $desc;
  function HtmlElement_DomProxyMixin0() {
  }
  HtmlElement_DomProxyMixin0.builtin$cls = "HtmlElement_DomProxyMixin0";
  if (!"name" in HtmlElement_DomProxyMixin0)
    HtmlElement_DomProxyMixin0.name = "HtmlElement_DomProxyMixin0";
  $desc = $collectedClasses.HtmlElement_DomProxyMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement_DomProxyMixin0.prototype = $desc;
  function PaperButton(common$DomProxyMixin$_proxy) {
    this.common$DomProxyMixin$_proxy = common$DomProxyMixin$_proxy;
  }
  PaperButton.builtin$cls = "PaperButton";
  if (!"name" in PaperButton)
    PaperButton.name = "PaperButton";
  $desc = $collectedClasses.PaperButton;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PaperButton.prototype = $desc;
  function PaperFocusable(common$DomProxyMixin$_proxy) {
    this.common$DomProxyMixin$_proxy = common$DomProxyMixin$_proxy;
  }
  PaperFocusable.builtin$cls = "PaperFocusable";
  if (!"name" in PaperFocusable)
    PaperFocusable.name = "PaperFocusable";
  $desc = $collectedClasses.PaperFocusable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PaperFocusable.prototype = $desc;
  function HtmlElement_DomProxyMixin1() {
  }
  HtmlElement_DomProxyMixin1.builtin$cls = "HtmlElement_DomProxyMixin1";
  if (!"name" in HtmlElement_DomProxyMixin1)
    HtmlElement_DomProxyMixin1.name = "HtmlElement_DomProxyMixin1";
  $desc = $collectedClasses.HtmlElement_DomProxyMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement_DomProxyMixin1.prototype = $desc;
  function PaperRipple(common$DomProxyMixin$_proxy) {
    this.common$DomProxyMixin$_proxy = common$DomProxyMixin$_proxy;
  }
  PaperRipple.builtin$cls = "PaperRipple";
  if (!"name" in PaperRipple)
    PaperRipple.name = "PaperRipple";
  $desc = $collectedClasses.PaperRipple;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PaperRipple.prototype = $desc;
  function HtmlElement_DomProxyMixin2() {
  }
  HtmlElement_DomProxyMixin2.builtin$cls = "HtmlElement_DomProxyMixin2";
  if (!"name" in HtmlElement_DomProxyMixin2)
    HtmlElement_DomProxyMixin2.name = "HtmlElement_DomProxyMixin2";
  $desc = $collectedClasses.HtmlElement_DomProxyMixin2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement_DomProxyMixin2.prototype = $desc;
  function PaperShadow(common$DomProxyMixin$_proxy) {
    this.common$DomProxyMixin$_proxy = common$DomProxyMixin$_proxy;
  }
  PaperShadow.builtin$cls = "PaperShadow";
  if (!"name" in PaperShadow)
    PaperShadow.name = "PaperShadow";
  $desc = $collectedClasses.PaperShadow;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PaperShadow.prototype = $desc;
  function HtmlElement_DomProxyMixin3() {
  }
  HtmlElement_DomProxyMixin3.builtin$cls = "HtmlElement_DomProxyMixin3";
  if (!"name" in HtmlElement_DomProxyMixin3)
    HtmlElement_DomProxyMixin3.name = "HtmlElement_DomProxyMixin3";
  $desc = $collectedClasses.HtmlElement_DomProxyMixin3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement_DomProxyMixin3.prototype = $desc;
  function DomProxyMixin() {
  }
  DomProxyMixin.builtin$cls = "DomProxyMixin";
  if (!"name" in DomProxyMixin)
    DomProxyMixin.name = "DomProxyMixin";
  $desc = $collectedClasses.DomProxyMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomProxyMixin.prototype = $desc;
  function ListIterable() {
  }
  ListIterable.builtin$cls = "ListIterable";
  if (!"name" in ListIterable)
    ListIterable.name = "ListIterable";
  $desc = $collectedClasses.ListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterable.prototype = $desc;
  function SubListIterable(_iterable, _start, _endOrLength) {
    this._iterable = _iterable;
    this._start = _start;
    this._endOrLength = _endOrLength;
  }
  SubListIterable.builtin$cls = "SubListIterable";
  if (!"name" in SubListIterable)
    SubListIterable.name = "SubListIterable";
  $desc = $collectedClasses.SubListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SubListIterable.prototype = $desc;
  function ListIterator(_iterable, _length, _index, _current) {
    this._iterable = _iterable;
    this._length = _length;
    this._index = _index;
    this._current = _current;
  }
  ListIterator.builtin$cls = "ListIterator";
  if (!"name" in ListIterator)
    ListIterator.name = "ListIterator";
  $desc = $collectedClasses.ListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterator.prototype = $desc;
  function MappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  MappedIterable.builtin$cls = "MappedIterable";
  if (!"name" in MappedIterable)
    MappedIterable.name = "MappedIterable";
  $desc = $collectedClasses.MappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterable.prototype = $desc;
  function EfficientLengthMappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  EfficientLengthMappedIterable.builtin$cls = "EfficientLengthMappedIterable";
  if (!"name" in EfficientLengthMappedIterable)
    EfficientLengthMappedIterable.name = "EfficientLengthMappedIterable";
  $desc = $collectedClasses.EfficientLengthMappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EfficientLengthMappedIterable.prototype = $desc;
  function MappedIterator(_current, _iterator, _f) {
    this._current = _current;
    this._iterator = _iterator;
    this._f = _f;
  }
  MappedIterator.builtin$cls = "MappedIterator";
  if (!"name" in MappedIterator)
    MappedIterator.name = "MappedIterator";
  $desc = $collectedClasses.MappedIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterator.prototype = $desc;
  function MappedListIterable(__internal$_source, _f) {
    this.__internal$_source = __internal$_source;
    this._f = _f;
  }
  MappedListIterable.builtin$cls = "MappedListIterable";
  if (!"name" in MappedListIterable)
    MappedListIterable.name = "MappedListIterable";
  $desc = $collectedClasses.MappedListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedListIterable.prototype = $desc;
  function WhereIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  WhereIterable.builtin$cls = "WhereIterable";
  if (!"name" in WhereIterable)
    WhereIterable.name = "WhereIterable";
  $desc = $collectedClasses.WhereIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WhereIterable.prototype = $desc;
  function WhereIterator(_iterator, _f) {
    this._iterator = _iterator;
    this._f = _f;
  }
  WhereIterator.builtin$cls = "WhereIterator";
  if (!"name" in WhereIterator)
    WhereIterator.name = "WhereIterator";
  $desc = $collectedClasses.WhereIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WhereIterator.prototype = $desc;
  function SkipIterable(_iterable, _skipCount) {
    this._iterable = _iterable;
    this._skipCount = _skipCount;
  }
  SkipIterable.builtin$cls = "SkipIterable";
  if (!"name" in SkipIterable)
    SkipIterable.name = "SkipIterable";
  $desc = $collectedClasses.SkipIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SkipIterable.prototype = $desc;
  function EfficientLengthSkipIterable(_iterable, _skipCount) {
    this._iterable = _iterable;
    this._skipCount = _skipCount;
  }
  EfficientLengthSkipIterable.builtin$cls = "EfficientLengthSkipIterable";
  if (!"name" in EfficientLengthSkipIterable)
    EfficientLengthSkipIterable.name = "EfficientLengthSkipIterable";
  $desc = $collectedClasses.EfficientLengthSkipIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EfficientLengthSkipIterable.prototype = $desc;
  function SkipIterator(_iterator, _skipCount) {
    this._iterator = _iterator;
    this._skipCount = _skipCount;
  }
  SkipIterator.builtin$cls = "SkipIterator";
  if (!"name" in SkipIterator)
    SkipIterator.name = "SkipIterator";
  $desc = $collectedClasses.SkipIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SkipIterator.prototype = $desc;
  function EmptyIterable() {
  }
  EmptyIterable.builtin$cls = "EmptyIterable";
  if (!"name" in EmptyIterable)
    EmptyIterable.name = "EmptyIterable";
  $desc = $collectedClasses.EmptyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmptyIterable.prototype = $desc;
  function EmptyIterator() {
  }
  EmptyIterator.builtin$cls = "EmptyIterator";
  if (!"name" in EmptyIterator)
    EmptyIterator.name = "EmptyIterator";
  $desc = $collectedClasses.EmptyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmptyIterator.prototype = $desc;
  function IterableMixinWorkaround() {
  }
  IterableMixinWorkaround.builtin$cls = "IterableMixinWorkaround";
  if (!"name" in IterableMixinWorkaround)
    IterableMixinWorkaround.name = "IterableMixinWorkaround";
  $desc = $collectedClasses.IterableMixinWorkaround;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IterableMixinWorkaround.prototype = $desc;
  function FixedLengthListMixin() {
  }
  FixedLengthListMixin.builtin$cls = "FixedLengthListMixin";
  if (!"name" in FixedLengthListMixin)
    FixedLengthListMixin.name = "FixedLengthListMixin";
  $desc = $collectedClasses.FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedLengthListMixin.prototype = $desc;
  function UnmodifiableListMixin() {
  }
  UnmodifiableListMixin.builtin$cls = "UnmodifiableListMixin";
  if (!"name" in UnmodifiableListMixin)
    UnmodifiableListMixin.name = "UnmodifiableListMixin";
  $desc = $collectedClasses.UnmodifiableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableListMixin.prototype = $desc;
  function UnmodifiableListBase() {
  }
  UnmodifiableListBase.builtin$cls = "UnmodifiableListBase";
  if (!"name" in UnmodifiableListBase)
    UnmodifiableListBase.name = "UnmodifiableListBase";
  $desc = $collectedClasses.UnmodifiableListBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableListBase.prototype = $desc;
  function ReversedListIterable(__internal$_source) {
    this.__internal$_source = __internal$_source;
  }
  ReversedListIterable.builtin$cls = "ReversedListIterable";
  if (!"name" in ReversedListIterable)
    ReversedListIterable.name = "ReversedListIterable";
  $desc = $collectedClasses.ReversedListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReversedListIterable.prototype = $desc;
  function Symbol(_name) {
    this._name = _name;
  }
  Symbol.builtin$cls = "Symbol";
  if (!"name" in Symbol)
    Symbol.name = "Symbol";
  $desc = $collectedClasses.Symbol;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Symbol.prototype = $desc;
  Symbol.prototype.get$_name = function(receiver) {
    return this._name;
  };
  function JsMirrorSystem(_cachedLibraries, isolate) {
    this._cachedLibraries = _cachedLibraries;
    this.isolate = isolate;
  }
  JsMirrorSystem.builtin$cls = "JsMirrorSystem";
  if (!"name" in JsMirrorSystem)
    JsMirrorSystem.name = "JsMirrorSystem";
  $desc = $collectedClasses.JsMirrorSystem;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsMirrorSystem.prototype = $desc;
  function JsMirrorSystem_computeLibrariesByName_closure() {
  }
  JsMirrorSystem_computeLibrariesByName_closure.builtin$cls = "JsMirrorSystem_computeLibrariesByName_closure";
  if (!"name" in JsMirrorSystem_computeLibrariesByName_closure)
    JsMirrorSystem_computeLibrariesByName_closure.name = "JsMirrorSystem_computeLibrariesByName_closure";
  $desc = $collectedClasses.JsMirrorSystem_computeLibrariesByName_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsMirrorSystem_computeLibrariesByName_closure.prototype = $desc;
  function JsMirror() {
  }
  JsMirror.builtin$cls = "JsMirror";
  if (!"name" in JsMirror)
    JsMirror.name = "JsMirror";
  $desc = $collectedClasses.JsMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsMirror.prototype = $desc;
  function JsIsolateMirror(_isolateContext) {
    this._isolateContext = _isolateContext;
  }
  JsIsolateMirror.builtin$cls = "JsIsolateMirror";
  if (!"name" in JsIsolateMirror)
    JsIsolateMirror.name = "JsIsolateMirror";
  $desc = $collectedClasses.JsIsolateMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsIsolateMirror.prototype = $desc;
  function JsDeclarationMirror(simpleName) {
    this.simpleName = simpleName;
  }
  JsDeclarationMirror.builtin$cls = "JsDeclarationMirror";
  if (!"name" in JsDeclarationMirror)
    JsDeclarationMirror.name = "JsDeclarationMirror";
  $desc = $collectedClasses.JsDeclarationMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsDeclarationMirror.prototype = $desc;
  JsDeclarationMirror.prototype.get$simpleName = function() {
    return this.simpleName;
  };
  function JsTypeVariableMirror(owner, _typeVariable, _metadataIndex, _cachedUpperBound, simpleName) {
    this.owner = owner;
    this._typeVariable = _typeVariable;
    this._metadataIndex = _metadataIndex;
    this._cachedUpperBound = _cachedUpperBound;
    this.simpleName = simpleName;
  }
  JsTypeVariableMirror.builtin$cls = "JsTypeVariableMirror";
  if (!"name" in JsTypeVariableMirror)
    JsTypeVariableMirror.name = "JsTypeVariableMirror";
  $desc = $collectedClasses.JsTypeVariableMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeVariableMirror.prototype = $desc;
  JsTypeVariableMirror.prototype.get$owner = function() {
    return this.owner;
  };
  function JsTypeMirror(simpleName) {
    this.simpleName = simpleName;
  }
  JsTypeMirror.builtin$cls = "JsTypeMirror";
  if (!"name" in JsTypeMirror)
    JsTypeMirror.name = "JsTypeMirror";
  $desc = $collectedClasses.JsTypeMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeMirror.prototype = $desc;
  function JsLibraryMirror(_uri, _classes, _functions, _metadata, _compactFieldSpecification, _isRoot, _globalObject, _cachedFunctionMirrors, _cachedFields, _cachedClasses, _cachedFunctions, _cachedGetters, _cachedSetters, _cachedVariables, _cachedMembers, _cachedDeclarations, _cachedMetadata, simpleName) {
    this._uri = _uri;
    this._classes = _classes;
    this._functions = _functions;
    this._metadata = _metadata;
    this._compactFieldSpecification = _compactFieldSpecification;
    this._isRoot = _isRoot;
    this._globalObject = _globalObject;
    this._cachedFunctionMirrors = _cachedFunctionMirrors;
    this._cachedFields = _cachedFields;
    this._cachedClasses = _cachedClasses;
    this._cachedFunctions = _cachedFunctions;
    this._cachedGetters = _cachedGetters;
    this._cachedSetters = _cachedSetters;
    this._cachedVariables = _cachedVariables;
    this._cachedMembers = _cachedMembers;
    this._cachedDeclarations = _cachedDeclarations;
    this._cachedMetadata = _cachedMetadata;
    this.simpleName = simpleName;
  }
  JsLibraryMirror.builtin$cls = "JsLibraryMirror";
  if (!"name" in JsLibraryMirror)
    JsLibraryMirror.name = "JsLibraryMirror";
  $desc = $collectedClasses.JsLibraryMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsLibraryMirror.prototype = $desc;
  function JsDeclarationMirror_JsObjectMirror() {
  }
  JsDeclarationMirror_JsObjectMirror.builtin$cls = "JsDeclarationMirror_JsObjectMirror";
  if (!"name" in JsDeclarationMirror_JsObjectMirror)
    JsDeclarationMirror_JsObjectMirror.name = "JsDeclarationMirror_JsObjectMirror";
  $desc = $collectedClasses.JsDeclarationMirror_JsObjectMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsDeclarationMirror_JsObjectMirror.prototype = $desc;
  function JsLibraryMirror___members_addToResult(result_0) {
    this.result_0 = result_0;
  }
  JsLibraryMirror___members_addToResult.builtin$cls = "JsLibraryMirror___members_addToResult";
  if (!"name" in JsLibraryMirror___members_addToResult)
    JsLibraryMirror___members_addToResult.name = "JsLibraryMirror___members_addToResult";
  $desc = $collectedClasses.JsLibraryMirror___members_addToResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsLibraryMirror___members_addToResult.prototype = $desc;
  function JsLibraryMirror_declarations_addToResult(result_0) {
    this.result_0 = result_0;
  }
  JsLibraryMirror_declarations_addToResult.builtin$cls = "JsLibraryMirror_declarations_addToResult";
  if (!"name" in JsLibraryMirror_declarations_addToResult)
    JsLibraryMirror_declarations_addToResult.name = "JsLibraryMirror_declarations_addToResult";
  $desc = $collectedClasses.JsLibraryMirror_declarations_addToResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsLibraryMirror_declarations_addToResult.prototype = $desc;
  function filterMembers_closure(method_0) {
    this.method_0 = method_0;
  }
  filterMembers_closure.builtin$cls = "filterMembers_closure";
  if (!"name" in filterMembers_closure)
    filterMembers_closure.name = "filterMembers_closure";
  $desc = $collectedClasses.filterMembers_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  filterMembers_closure.prototype = $desc;
  function JsMixinApplication(superclass, mixin, _cachedSimpleName, _cachedInstanceMembers, simpleName) {
    this.superclass = superclass;
    this.mixin = mixin;
    this._cachedSimpleName = _cachedSimpleName;
    this._cachedInstanceMembers = _cachedInstanceMembers;
    this.simpleName = simpleName;
  }
  JsMixinApplication.builtin$cls = "JsMixinApplication";
  if (!"name" in JsMixinApplication)
    JsMixinApplication.name = "JsMixinApplication";
  $desc = $collectedClasses.JsMixinApplication;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsMixinApplication.prototype = $desc;
  function JsTypeMirror_JsObjectMirror() {
  }
  JsTypeMirror_JsObjectMirror.builtin$cls = "JsTypeMirror_JsObjectMirror";
  if (!"name" in JsTypeMirror_JsObjectMirror)
    JsTypeMirror_JsObjectMirror.name = "JsTypeMirror_JsObjectMirror";
  $desc = $collectedClasses.JsTypeMirror_JsObjectMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeMirror_JsObjectMirror.prototype = $desc;
  function JsObjectMirror() {
  }
  JsObjectMirror.builtin$cls = "JsObjectMirror";
  if (!"name" in JsObjectMirror)
    JsObjectMirror.name = "JsObjectMirror";
  $desc = $collectedClasses.JsObjectMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsObjectMirror.prototype = $desc;
  function JsInstanceMirror(reflectee, _getterCache) {
    this.reflectee = reflectee;
    this._getterCache = _getterCache;
  }
  JsInstanceMirror.builtin$cls = "JsInstanceMirror";
  if (!"name" in JsInstanceMirror)
    JsInstanceMirror.name = "JsInstanceMirror";
  $desc = $collectedClasses.JsInstanceMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsInstanceMirror.prototype = $desc;
  JsInstanceMirror.prototype.get$reflectee = function() {
    return this.reflectee;
  };
  function JsInstanceMirror__invokeMethodWithNamedArguments_closure(defaultArguments_0) {
    this.defaultArguments_0 = defaultArguments_0;
  }
  JsInstanceMirror__invokeMethodWithNamedArguments_closure.builtin$cls = "JsInstanceMirror__invokeMethodWithNamedArguments_closure";
  if (!"name" in JsInstanceMirror__invokeMethodWithNamedArguments_closure)
    JsInstanceMirror__invokeMethodWithNamedArguments_closure.name = "JsInstanceMirror__invokeMethodWithNamedArguments_closure";
  $desc = $collectedClasses.JsInstanceMirror__invokeMethodWithNamedArguments_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsInstanceMirror__invokeMethodWithNamedArguments_closure.prototype = $desc;
  function JsTypeBoundClassMirror(_class, _typeArguments, _cachedTypeArguments, _cachedDeclarations, _cachedMembers, _cachedConstructors, _cachedVariables, _cachedGetters, _cachedSetters, _cachedMethodsMap, _cachedMethods, _superclass, _cachedSuperinterfaces, _cachedInstanceMembers, _cachedStaticMembers, simpleName) {
    this._class = _class;
    this._typeArguments = _typeArguments;
    this._cachedTypeArguments = _cachedTypeArguments;
    this._cachedDeclarations = _cachedDeclarations;
    this._cachedMembers = _cachedMembers;
    this._cachedConstructors = _cachedConstructors;
    this._cachedVariables = _cachedVariables;
    this._cachedGetters = _cachedGetters;
    this._cachedSetters = _cachedSetters;
    this._cachedMethodsMap = _cachedMethodsMap;
    this._cachedMethods = _cachedMethods;
    this._superclass = _superclass;
    this._cachedSuperinterfaces = _cachedSuperinterfaces;
    this._cachedInstanceMembers = _cachedInstanceMembers;
    this._cachedStaticMembers = _cachedStaticMembers;
    this.simpleName = simpleName;
  }
  JsTypeBoundClassMirror.builtin$cls = "JsTypeBoundClassMirror";
  if (!"name" in JsTypeBoundClassMirror)
    JsTypeBoundClassMirror.name = "JsTypeBoundClassMirror";
  $desc = $collectedClasses.JsTypeBoundClassMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeBoundClassMirror.prototype = $desc;
  function JsTypeBoundClassMirror_typeArguments_addTypeArgument(result_0) {
    this.result_0 = result_0;
  }
  JsTypeBoundClassMirror_typeArguments_addTypeArgument.builtin$cls = "JsTypeBoundClassMirror_typeArguments_addTypeArgument";
  if (!"name" in JsTypeBoundClassMirror_typeArguments_addTypeArgument)
    JsTypeBoundClassMirror_typeArguments_addTypeArgument.name = "JsTypeBoundClassMirror_typeArguments_addTypeArgument";
  $desc = $collectedClasses.JsTypeBoundClassMirror_typeArguments_addTypeArgument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeBoundClassMirror_typeArguments_addTypeArgument.prototype = $desc;
  function JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure() {
  }
  JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure.builtin$cls = "JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure";
  if (!"name" in JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure)
    JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure.name = "JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure";
  $desc = $collectedClasses.JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure.prototype = $desc;
  function JsTypeBoundClassMirror_typeArguments_closure(addTypeArgument_1) {
    this.addTypeArgument_1 = addTypeArgument_1;
  }
  JsTypeBoundClassMirror_typeArguments_closure.builtin$cls = "JsTypeBoundClassMirror_typeArguments_closure";
  if (!"name" in JsTypeBoundClassMirror_typeArguments_closure)
    JsTypeBoundClassMirror_typeArguments_closure.name = "JsTypeBoundClassMirror_typeArguments_closure";
  $desc = $collectedClasses.JsTypeBoundClassMirror_typeArguments_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeBoundClassMirror_typeArguments_closure.prototype = $desc;
  function JsTypeBoundClassMirror_declarations_closure(result_0) {
    this.result_0 = result_0;
  }
  JsTypeBoundClassMirror_declarations_closure.builtin$cls = "JsTypeBoundClassMirror_declarations_closure";
  if (!"name" in JsTypeBoundClassMirror_declarations_closure)
    JsTypeBoundClassMirror_declarations_closure.name = "JsTypeBoundClassMirror_declarations_closure";
  $desc = $collectedClasses.JsTypeBoundClassMirror_declarations_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeBoundClassMirror_declarations_closure.prototype = $desc;
  function JsClassMirror(_mangledName, _jsConstructor, _fieldsDescriptor, _fieldsMetadata, _jsConstructorCache, _metadata, _superclass, _cachedMethods, _cachedFields, _cachedConstructors, _cachedMethodsMap, _cachedGetters, _cachedSetters, _cachedVariables, _cachedMembers, _cachedDeclarations, _cachedMetadata, _cachedSuperinterfaces, _cachedTypeVariables, _cachedInstanceMembers, _cachedStaticMembers, _owner, simpleName) {
    this._mangledName = _mangledName;
    this._jsConstructor = _jsConstructor;
    this._fieldsDescriptor = _fieldsDescriptor;
    this._fieldsMetadata = _fieldsMetadata;
    this._jsConstructorCache = _jsConstructorCache;
    this._metadata = _metadata;
    this._superclass = _superclass;
    this._cachedMethods = _cachedMethods;
    this._cachedFields = _cachedFields;
    this._cachedConstructors = _cachedConstructors;
    this._cachedMethodsMap = _cachedMethodsMap;
    this._cachedGetters = _cachedGetters;
    this._cachedSetters = _cachedSetters;
    this._cachedVariables = _cachedVariables;
    this._cachedMembers = _cachedMembers;
    this._cachedDeclarations = _cachedDeclarations;
    this._cachedMetadata = _cachedMetadata;
    this._cachedSuperinterfaces = _cachedSuperinterfaces;
    this._cachedTypeVariables = _cachedTypeVariables;
    this._cachedInstanceMembers = _cachedInstanceMembers;
    this._cachedStaticMembers = _cachedStaticMembers;
    this._owner = _owner;
    this.simpleName = simpleName;
  }
  JsClassMirror.builtin$cls = "JsClassMirror";
  if (!"name" in JsClassMirror)
    JsClassMirror.name = "JsClassMirror";
  $desc = $collectedClasses.JsClassMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsClassMirror.prototype = $desc;
  JsClassMirror.prototype.get$_mangledName = function() {
    return this._mangledName;
  };
  JsClassMirror.prototype.get$_jsConstructor = function() {
    return this._jsConstructor;
  };
  function JsTypeMirror_JsObjectMirror0() {
  }
  JsTypeMirror_JsObjectMirror0.builtin$cls = "JsTypeMirror_JsObjectMirror0";
  if (!"name" in JsTypeMirror_JsObjectMirror0)
    JsTypeMirror_JsObjectMirror0.name = "JsTypeMirror_JsObjectMirror0";
  $desc = $collectedClasses.JsTypeMirror_JsObjectMirror0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypeMirror_JsObjectMirror0.prototype = $desc;
  function JsClassMirror_declarations_addToResult(result_0) {
    this.result_0 = result_0;
  }
  JsClassMirror_declarations_addToResult.builtin$cls = "JsClassMirror_declarations_addToResult";
  if (!"name" in JsClassMirror_declarations_addToResult)
    JsClassMirror_declarations_addToResult.name = "JsClassMirror_declarations_addToResult";
  $desc = $collectedClasses.JsClassMirror_declarations_addToResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsClassMirror_declarations_addToResult.prototype = $desc;
  function JsClassMirror_declarations_closure(result_1) {
    this.result_1 = result_1;
  }
  JsClassMirror_declarations_closure.builtin$cls = "JsClassMirror_declarations_closure";
  if (!"name" in JsClassMirror_declarations_closure)
    JsClassMirror_declarations_closure.name = "JsClassMirror_declarations_closure";
  $desc = $collectedClasses.JsClassMirror_declarations_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsClassMirror_declarations_closure.prototype = $desc;
  function JsVariableMirror(_jsName, isFinal, isStatic, _metadataFunction, _owner, __js_mirrors$_type, _metadata, simpleName) {
    this._jsName = _jsName;
    this.isFinal = isFinal;
    this.isStatic = isStatic;
    this._metadataFunction = _metadataFunction;
    this._owner = _owner;
    this.__js_mirrors$_type = __js_mirrors$_type;
    this._metadata = _metadata;
    this.simpleName = simpleName;
  }
  JsVariableMirror.builtin$cls = "JsVariableMirror";
  if (!"name" in JsVariableMirror)
    JsVariableMirror.name = "JsVariableMirror";
  $desc = $collectedClasses.JsVariableMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsVariableMirror.prototype = $desc;
  JsVariableMirror.prototype.get$_jsName = function() {
    return this._jsName;
  };
  JsVariableMirror.prototype.get$isFinal = function() {
    return this.isFinal;
  };
  JsVariableMirror.prototype.get$isStatic = function() {
    return this.isStatic;
  };
  JsVariableMirror.prototype.get$__js_mirrors$_type = function() {
    return this.__js_mirrors$_type;
  };
  function JsClosureMirror(reflectee, _getterCache) {
    this.reflectee = reflectee;
    this._getterCache = _getterCache;
  }
  JsClosureMirror.builtin$cls = "JsClosureMirror";
  if (!"name" in JsClosureMirror)
    JsClosureMirror.name = "JsClosureMirror";
  $desc = $collectedClasses.JsClosureMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsClosureMirror.prototype = $desc;
  function JsMethodMirror(_jsFunction, _requiredParameterCount, _optionalParameterCount, isGetter, isSetter, isStatic, isConstructor, isOperator, _owner, _metadata, _returnType, _parameters, simpleName) {
    this._jsFunction = _jsFunction;
    this._requiredParameterCount = _requiredParameterCount;
    this._optionalParameterCount = _optionalParameterCount;
    this.isGetter = isGetter;
    this.isSetter = isSetter;
    this.isStatic = isStatic;
    this.isConstructor = isConstructor;
    this.isOperator = isOperator;
    this._owner = _owner;
    this._metadata = _metadata;
    this._returnType = _returnType;
    this._parameters = _parameters;
    this.simpleName = simpleName;
  }
  JsMethodMirror.builtin$cls = "JsMethodMirror";
  if (!"name" in JsMethodMirror)
    JsMethodMirror.name = "JsMethodMirror";
  $desc = $collectedClasses.JsMethodMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsMethodMirror.prototype = $desc;
  JsMethodMirror.prototype.get$_jsFunction = function() {
    return this._jsFunction;
  };
  JsMethodMirror.prototype.get$isGetter = function() {
    return this.isGetter;
  };
  JsMethodMirror.prototype.get$isSetter = function() {
    return this.isSetter;
  };
  JsMethodMirror.prototype.get$isStatic = function() {
    return this.isStatic;
  };
  JsMethodMirror.prototype.get$isConstructor = function() {
    return this.isConstructor;
  };
  function JsParameterMirror(owner, __js_mirrors$_type, isOptional, isNamed, _defaultValue, metadataList, simpleName) {
    this.owner = owner;
    this.__js_mirrors$_type = __js_mirrors$_type;
    this.isOptional = isOptional;
    this.isNamed = isNamed;
    this._defaultValue = _defaultValue;
    this.metadataList = metadataList;
    this.simpleName = simpleName;
  }
  JsParameterMirror.builtin$cls = "JsParameterMirror";
  if (!"name" in JsParameterMirror)
    JsParameterMirror.name = "JsParameterMirror";
  $desc = $collectedClasses.JsParameterMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsParameterMirror.prototype = $desc;
  JsParameterMirror.prototype.get$owner = function() {
    return this.owner;
  };
  JsParameterMirror.prototype.get$__js_mirrors$_type = function() {
    return this.__js_mirrors$_type;
  };
  function JsTypedefMirror(_mangledName, referent, simpleName) {
    this._mangledName = _mangledName;
    this.referent = referent;
    this.simpleName = simpleName;
  }
  JsTypedefMirror.builtin$cls = "JsTypedefMirror";
  if (!"name" in JsTypedefMirror)
    JsTypedefMirror.name = "JsTypedefMirror";
  $desc = $collectedClasses.JsTypedefMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsTypedefMirror.prototype = $desc;
  JsTypedefMirror.prototype.get$_mangledName = function() {
    return this._mangledName;
  };
  function BrokenClassMirror() {
  }
  BrokenClassMirror.builtin$cls = "BrokenClassMirror";
  if (!"name" in BrokenClassMirror)
    BrokenClassMirror.name = "BrokenClassMirror";
  $desc = $collectedClasses.BrokenClassMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BrokenClassMirror.prototype = $desc;
  function JsFunctionTypeMirror(_typeData, _cachedToString, _cachedReturnType, _cachedParameters, owner) {
    this._typeData = _typeData;
    this._cachedToString = _cachedToString;
    this._cachedReturnType = _cachedReturnType;
    this._cachedParameters = _cachedParameters;
    this.owner = owner;
  }
  JsFunctionTypeMirror.builtin$cls = "JsFunctionTypeMirror";
  if (!"name" in JsFunctionTypeMirror)
    JsFunctionTypeMirror.name = "JsFunctionTypeMirror";
  $desc = $collectedClasses.JsFunctionTypeMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsFunctionTypeMirror.prototype = $desc;
  JsFunctionTypeMirror.prototype.get$owner = function() {
    return this.owner;
  };
  function typeMirrorFromRuntimeTypeRepresentation_getTypeArgument(box_0) {
    this.box_0 = box_0;
  }
  typeMirrorFromRuntimeTypeRepresentation_getTypeArgument.builtin$cls = "typeMirrorFromRuntimeTypeRepresentation_getTypeArgument";
  if (!"name" in typeMirrorFromRuntimeTypeRepresentation_getTypeArgument)
    typeMirrorFromRuntimeTypeRepresentation_getTypeArgument.name = "typeMirrorFromRuntimeTypeRepresentation_getTypeArgument";
  $desc = $collectedClasses.typeMirrorFromRuntimeTypeRepresentation_getTypeArgument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  typeMirrorFromRuntimeTypeRepresentation_getTypeArgument.prototype = $desc;
  function typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable(getTypeArgument_1) {
    this.getTypeArgument_1 = getTypeArgument_1;
  }
  typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable.builtin$cls = "typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable";
  if (!"name" in typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable)
    typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable.name = "typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable";
  $desc = $collectedClasses.typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable.prototype = $desc;
  function extractMetadata_closure() {
  }
  extractMetadata_closure.builtin$cls = "extractMetadata_closure";
  if (!"name" in extractMetadata_closure)
    extractMetadata_closure.name = "extractMetadata_closure";
  $desc = $collectedClasses.extractMetadata_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  extractMetadata_closure.prototype = $desc;
  function NoSuchStaticMethodError(_cls, __js_mirrors$_name, _positionalArguments, __js_mirrors$_namedArguments, __js_mirrors$_kind) {
    this._cls = _cls;
    this.__js_mirrors$_name = __js_mirrors$_name;
    this._positionalArguments = _positionalArguments;
    this.__js_mirrors$_namedArguments = __js_mirrors$_namedArguments;
    this.__js_mirrors$_kind = __js_mirrors$_kind;
  }
  NoSuchStaticMethodError.builtin$cls = "NoSuchStaticMethodError";
  if (!"name" in NoSuchStaticMethodError)
    NoSuchStaticMethodError.name = "NoSuchStaticMethodError";
  $desc = $collectedClasses.NoSuchStaticMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoSuchStaticMethodError.prototype = $desc;
  function computeReflectiveNames_closure(result_0) {
    this.result_0 = result_0;
  }
  computeReflectiveNames_closure.builtin$cls = "computeReflectiveNames_closure";
  if (!"name" in computeReflectiveNames_closure)
    computeReflectiveNames_closure.name = "computeReflectiveNames_closure";
  $desc = $collectedClasses.computeReflectiveNames_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  computeReflectiveNames_closure.prototype = $desc;
  function _AsyncRun__initializeScheduleImmediate_internalCallback(box_0) {
    this.box_0 = box_0;
  }
  _AsyncRun__initializeScheduleImmediate_internalCallback.builtin$cls = "_AsyncRun__initializeScheduleImmediate_internalCallback";
  if (!"name" in _AsyncRun__initializeScheduleImmediate_internalCallback)
    _AsyncRun__initializeScheduleImmediate_internalCallback.name = "_AsyncRun__initializeScheduleImmediate_internalCallback";
  $desc = $collectedClasses._AsyncRun__initializeScheduleImmediate_internalCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncRun__initializeScheduleImmediate_internalCallback.prototype = $desc;
  function _AsyncRun__initializeScheduleImmediate_closure(box_0, div_1, span_2) {
    this.box_0 = box_0;
    this.div_1 = div_1;
    this.span_2 = span_2;
  }
  _AsyncRun__initializeScheduleImmediate_closure.builtin$cls = "_AsyncRun__initializeScheduleImmediate_closure";
  if (!"name" in _AsyncRun__initializeScheduleImmediate_closure)
    _AsyncRun__initializeScheduleImmediate_closure.name = "_AsyncRun__initializeScheduleImmediate_closure";
  $desc = $collectedClasses._AsyncRun__initializeScheduleImmediate_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncRun__initializeScheduleImmediate_closure.prototype = $desc;
  function _AsyncRun__scheduleImmediateJsOverride_internalCallback(callback_0) {
    this.callback_0 = callback_0;
  }
  _AsyncRun__scheduleImmediateJsOverride_internalCallback.builtin$cls = "_AsyncRun__scheduleImmediateJsOverride_internalCallback";
  if (!"name" in _AsyncRun__scheduleImmediateJsOverride_internalCallback)
    _AsyncRun__scheduleImmediateJsOverride_internalCallback.name = "_AsyncRun__scheduleImmediateJsOverride_internalCallback";
  $desc = $collectedClasses._AsyncRun__scheduleImmediateJsOverride_internalCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = $desc;
  function _AsyncError(error, stackTrace) {
    this.error = error;
    this.stackTrace = stackTrace;
  }
  _AsyncError.builtin$cls = "_AsyncError";
  if (!"name" in _AsyncError)
    _AsyncError.name = "_AsyncError";
  $desc = $collectedClasses._AsyncError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncError.prototype = $desc;
  _AsyncError.prototype.get$error = function(receiver) {
    return this.error;
  };
  _AsyncError.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function _UncaughtAsyncError(error, stackTrace) {
    this.error = error;
    this.stackTrace = stackTrace;
  }
  _UncaughtAsyncError.builtin$cls = "_UncaughtAsyncError";
  if (!"name" in _UncaughtAsyncError)
    _UncaughtAsyncError.name = "_UncaughtAsyncError";
  $desc = $collectedClasses._UncaughtAsyncError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _UncaughtAsyncError.prototype = $desc;
  function _BroadcastStream(_async$_controller) {
    this._async$_controller = _async$_controller;
  }
  _BroadcastStream.builtin$cls = "_BroadcastStream";
  if (!"name" in _BroadcastStream)
    _BroadcastStream.name = "_BroadcastStream";
  $desc = $collectedClasses._BroadcastStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastStream.prototype = $desc;
  function _BroadcastSubscription(_eventState, _next, _async$_previous, _async$_controller, _onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._eventState = _eventState;
    this._next = _next;
    this._async$_previous = _async$_previous;
    this._async$_controller = _async$_controller;
    this._onData = _onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _BroadcastSubscription.builtin$cls = "_BroadcastSubscription";
  if (!"name" in _BroadcastSubscription)
    _BroadcastSubscription.name = "_BroadcastSubscription";
  $desc = $collectedClasses._BroadcastSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastSubscription.prototype = $desc;
  _BroadcastSubscription.prototype.get$_eventState = function() {
    return this._eventState;
  };
  _BroadcastSubscription.prototype.set$_eventState = function(v) {
    return this._eventState = v;
  };
  _BroadcastSubscription.prototype.get$_next = function() {
    return this._next;
  };
  _BroadcastSubscription.prototype.set$_next = function(v) {
    return this._next = v;
  };
  _BroadcastSubscription.prototype.get$_async$_previous = function() {
    return this._async$_previous;
  };
  _BroadcastSubscription.prototype.set$_async$_previous = function(v) {
    return this._async$_previous = v;
  };
  function _BroadcastStreamController(_next, _async$_previous) {
    this._next = _next;
    this._async$_previous = _async$_previous;
  }
  _BroadcastStreamController.builtin$cls = "_BroadcastStreamController";
  if (!"name" in _BroadcastStreamController)
    _BroadcastStreamController.name = "_BroadcastStreamController";
  $desc = $collectedClasses._BroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastStreamController.prototype = $desc;
  _BroadcastStreamController.prototype.get$_next = function() {
    return this._next;
  };
  _BroadcastStreamController.prototype.set$_next = function(v) {
    return this._next = v;
  };
  _BroadcastStreamController.prototype.get$_async$_previous = function() {
    return this._async$_previous;
  };
  _BroadcastStreamController.prototype.set$_async$_previous = function(v) {
    return this._async$_previous = v;
  };
  function _SyncBroadcastStreamController(_onListen, _onCancel, _state, _next, _async$_previous, _addStreamState, _doneFuture) {
    this._onListen = _onListen;
    this._onCancel = _onCancel;
    this._state = _state;
    this._next = _next;
    this._async$_previous = _async$_previous;
    this._addStreamState = _addStreamState;
    this._doneFuture = _doneFuture;
  }
  _SyncBroadcastStreamController.builtin$cls = "_SyncBroadcastStreamController";
  if (!"name" in _SyncBroadcastStreamController)
    _SyncBroadcastStreamController.name = "_SyncBroadcastStreamController";
  $desc = $collectedClasses._SyncBroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController.prototype = $desc;
  function _SyncBroadcastStreamController__sendData_closure(this_0, data_1) {
    this.this_0 = this_0;
    this.data_1 = data_1;
  }
  _SyncBroadcastStreamController__sendData_closure.builtin$cls = "_SyncBroadcastStreamController__sendData_closure";
  if (!"name" in _SyncBroadcastStreamController__sendData_closure)
    _SyncBroadcastStreamController__sendData_closure.name = "_SyncBroadcastStreamController__sendData_closure";
  $desc = $collectedClasses._SyncBroadcastStreamController__sendData_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController__sendData_closure.prototype = $desc;
  function _SyncBroadcastStreamController__sendError_closure(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _SyncBroadcastStreamController__sendError_closure.builtin$cls = "_SyncBroadcastStreamController__sendError_closure";
  if (!"name" in _SyncBroadcastStreamController__sendError_closure)
    _SyncBroadcastStreamController__sendError_closure.name = "_SyncBroadcastStreamController__sendError_closure";
  $desc = $collectedClasses._SyncBroadcastStreamController__sendError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController__sendError_closure.prototype = $desc;
  function _SyncBroadcastStreamController__sendDone_closure(this_0) {
    this.this_0 = this_0;
  }
  _SyncBroadcastStreamController__sendDone_closure.builtin$cls = "_SyncBroadcastStreamController__sendDone_closure";
  if (!"name" in _SyncBroadcastStreamController__sendDone_closure)
    _SyncBroadcastStreamController__sendDone_closure.name = "_SyncBroadcastStreamController__sendDone_closure";
  $desc = $collectedClasses._SyncBroadcastStreamController__sendDone_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController__sendDone_closure.prototype = $desc;
  function _AsyncBroadcastStreamController(_onListen, _onCancel, _state, _next, _async$_previous, _addStreamState, _doneFuture) {
    this._onListen = _onListen;
    this._onCancel = _onCancel;
    this._state = _state;
    this._next = _next;
    this._async$_previous = _async$_previous;
    this._addStreamState = _addStreamState;
    this._doneFuture = _doneFuture;
  }
  _AsyncBroadcastStreamController.builtin$cls = "_AsyncBroadcastStreamController";
  if (!"name" in _AsyncBroadcastStreamController)
    _AsyncBroadcastStreamController.name = "_AsyncBroadcastStreamController";
  $desc = $collectedClasses._AsyncBroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncBroadcastStreamController.prototype = $desc;
  function Future() {
  }
  Future.builtin$cls = "Future";
  if (!"name" in Future)
    Future.name = "Future";
  $desc = $collectedClasses.Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future.prototype = $desc;
  function Future_Future$delayed_closure(computation_0) {
    this.computation_0 = computation_0;
  }
  Future_Future$delayed_closure.builtin$cls = "Future_Future$delayed_closure";
  if (!"name" in Future_Future$delayed_closure)
    Future_Future$delayed_closure.name = "Future_Future$delayed_closure";
  $desc = $collectedClasses.Future_Future$delayed_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_Future$delayed_closure.prototype = $desc;
  function _Completer() {
  }
  _Completer.builtin$cls = "_Completer";
  if (!"name" in _Completer)
    _Completer.name = "_Completer";
  $desc = $collectedClasses._Completer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Completer.prototype = $desc;
  function _AsyncCompleter(future) {
    this.future = future;
  }
  _AsyncCompleter.builtin$cls = "_AsyncCompleter";
  if (!"name" in _AsyncCompleter)
    _AsyncCompleter.name = "_AsyncCompleter";
  $desc = $collectedClasses._AsyncCompleter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncCompleter.prototype = $desc;
  function _SyncCompleter(future) {
    this.future = future;
  }
  _SyncCompleter.builtin$cls = "_SyncCompleter";
  if (!"name" in _SyncCompleter)
    _SyncCompleter.name = "_SyncCompleter";
  $desc = $collectedClasses._SyncCompleter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncCompleter.prototype = $desc;
  function _Future(_state, _zone, _resultOrListeners, _nextListener, _onValueCallback, _errorTestCallback, _onErrorCallback, _whenCompleteActionCallback) {
    this._state = _state;
    this._zone = _zone;
    this._resultOrListeners = _resultOrListeners;
    this._nextListener = _nextListener;
    this._onValueCallback = _onValueCallback;
    this._errorTestCallback = _errorTestCallback;
    this._onErrorCallback = _onErrorCallback;
    this._whenCompleteActionCallback = _whenCompleteActionCallback;
  }
  _Future.builtin$cls = "_Future";
  if (!"name" in _Future)
    _Future.name = "_Future";
  $desc = $collectedClasses._Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future.prototype = $desc;
  _Future.prototype.get$_zone = function() {
    return this._zone;
  };
  _Future.prototype.get$_nextListener = function() {
    return this._nextListener;
  };
  _Future.prototype.set$_nextListener = function(v) {
    return this._nextListener = v;
  };
  _Future.prototype.set$_onValueCallback = function(v) {
    return this._onValueCallback = v;
  };
  _Future.prototype.set$_errorTestCallback = function(v) {
    return this._errorTestCallback = v;
  };
  _Future.prototype.set$_onErrorCallback = function(v) {
    return this._onErrorCallback = v;
  };
  _Future.prototype.set$_whenCompleteActionCallback = function(v) {
    return this._whenCompleteActionCallback = v;
  };
  function _Future__addListener_closure(this_0, listener_1) {
    this.this_0 = this_0;
    this.listener_1 = listener_1;
  }
  _Future__addListener_closure.builtin$cls = "_Future__addListener_closure";
  if (!"name" in _Future__addListener_closure)
    _Future__addListener_closure.name = "_Future__addListener_closure";
  $desc = $collectedClasses._Future__addListener_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__addListener_closure.prototype = $desc;
  function _Future__chainForeignFuture_closure(target_0) {
    this.target_0 = target_0;
  }
  _Future__chainForeignFuture_closure.builtin$cls = "_Future__chainForeignFuture_closure";
  if (!"name" in _Future__chainForeignFuture_closure)
    _Future__chainForeignFuture_closure.name = "_Future__chainForeignFuture_closure";
  $desc = $collectedClasses._Future__chainForeignFuture_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainForeignFuture_closure.prototype = $desc;
  function _Future__chainForeignFuture_closure0(target_1) {
    this.target_1 = target_1;
  }
  _Future__chainForeignFuture_closure0.builtin$cls = "_Future__chainForeignFuture_closure0";
  if (!"name" in _Future__chainForeignFuture_closure0)
    _Future__chainForeignFuture_closure0.name = "_Future__chainForeignFuture_closure0";
  $desc = $collectedClasses._Future__chainForeignFuture_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainForeignFuture_closure0.prototype = $desc;
  function _Future__asyncComplete_closure(this_0, coreFuture_1) {
    this.this_0 = this_0;
    this.coreFuture_1 = coreFuture_1;
  }
  _Future__asyncComplete_closure.builtin$cls = "_Future__asyncComplete_closure";
  if (!"name" in _Future__asyncComplete_closure)
    _Future__asyncComplete_closure.name = "_Future__asyncComplete_closure";
  $desc = $collectedClasses._Future__asyncComplete_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncComplete_closure.prototype = $desc;
  function _Future__asyncComplete_closure0(this_2, value_3) {
    this.this_2 = this_2;
    this.value_3 = value_3;
  }
  _Future__asyncComplete_closure0.builtin$cls = "_Future__asyncComplete_closure0";
  if (!"name" in _Future__asyncComplete_closure0)
    _Future__asyncComplete_closure0.name = "_Future__asyncComplete_closure0";
  $desc = $collectedClasses._Future__asyncComplete_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncComplete_closure0.prototype = $desc;
  function _Future__asyncCompleteError_closure(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _Future__asyncCompleteError_closure.builtin$cls = "_Future__asyncCompleteError_closure";
  if (!"name" in _Future__asyncCompleteError_closure)
    _Future__asyncCompleteError_closure.name = "_Future__asyncCompleteError_closure";
  $desc = $collectedClasses._Future__asyncCompleteError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncCompleteError_closure.prototype = $desc;
  function _Future__propagateToListeners_handleValueCallback(box_1, listener_3, sourceValue_4, zone_5) {
    this.box_1 = box_1;
    this.listener_3 = listener_3;
    this.sourceValue_4 = sourceValue_4;
    this.zone_5 = zone_5;
  }
  _Future__propagateToListeners_handleValueCallback.builtin$cls = "_Future__propagateToListeners_handleValueCallback";
  if (!"name" in _Future__propagateToListeners_handleValueCallback)
    _Future__propagateToListeners_handleValueCallback.name = "_Future__propagateToListeners_handleValueCallback";
  $desc = $collectedClasses._Future__propagateToListeners_handleValueCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleValueCallback.prototype = $desc;
  function _Future__propagateToListeners_handleError(box_2, box_1, listener_6, zone_7) {
    this.box_2 = box_2;
    this.box_1 = box_1;
    this.listener_6 = listener_6;
    this.zone_7 = zone_7;
  }
  _Future__propagateToListeners_handleError.builtin$cls = "_Future__propagateToListeners_handleError";
  if (!"name" in _Future__propagateToListeners_handleError)
    _Future__propagateToListeners_handleError.name = "_Future__propagateToListeners_handleError";
  $desc = $collectedClasses._Future__propagateToListeners_handleError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleError.prototype = $desc;
  function _Future__propagateToListeners_handleWhenCompleteCallback(box_2, box_1, hasError_8, listener_9, zone_10) {
    this.box_2 = box_2;
    this.box_1 = box_1;
    this.hasError_8 = hasError_8;
    this.listener_9 = listener_9;
    this.zone_10 = zone_10;
  }
  _Future__propagateToListeners_handleWhenCompleteCallback.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback";
  if (!"name" in _Future__propagateToListeners_handleWhenCompleteCallback)
    _Future__propagateToListeners_handleWhenCompleteCallback.name = "_Future__propagateToListeners_handleWhenCompleteCallback";
  $desc = $collectedClasses._Future__propagateToListeners_handleWhenCompleteCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleWhenCompleteCallback.prototype = $desc;
  function _Future__propagateToListeners_handleWhenCompleteCallback_closure(box_2, listener_11) {
    this.box_2 = box_2;
    this.listener_11 = listener_11;
  }
  _Future__propagateToListeners_handleWhenCompleteCallback_closure.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback_closure";
  if (!"name" in _Future__propagateToListeners_handleWhenCompleteCallback_closure)
    _Future__propagateToListeners_handleWhenCompleteCallback_closure.name = "_Future__propagateToListeners_handleWhenCompleteCallback_closure";
  $desc = $collectedClasses._Future__propagateToListeners_handleWhenCompleteCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = $desc;
  function _Future__propagateToListeners_handleWhenCompleteCallback_closure0(box_0, listener_12) {
    this.box_0 = box_0;
    this.listener_12 = listener_12;
  }
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback_closure0";
  if (!"name" in _Future__propagateToListeners_handleWhenCompleteCallback_closure0)
    _Future__propagateToListeners_handleWhenCompleteCallback_closure0.name = "_Future__propagateToListeners_handleWhenCompleteCallback_closure0";
  $desc = $collectedClasses._Future__propagateToListeners_handleWhenCompleteCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0.prototype = $desc;
  function _AsyncCallbackEntry(callback, next) {
    this.callback = callback;
    this.next = next;
  }
  _AsyncCallbackEntry.builtin$cls = "_AsyncCallbackEntry";
  if (!"name" in _AsyncCallbackEntry)
    _AsyncCallbackEntry.name = "_AsyncCallbackEntry";
  $desc = $collectedClasses._AsyncCallbackEntry;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncCallbackEntry.prototype = $desc;
  _AsyncCallbackEntry.prototype.get$next = function() {
    return this.next;
  };
  _AsyncCallbackEntry.prototype.set$next = function(v) {
    return this.next = v;
  };
  function Stream() {
  }
  Stream.builtin$cls = "Stream";
  if (!"name" in Stream)
    Stream.name = "Stream";
  $desc = $collectedClasses.Stream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream.prototype = $desc;
  function Stream_fold_closure(box_0, this_1, combine_2, result_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.combine_2 = combine_2;
    this.result_3 = result_3;
  }
  Stream_fold_closure.builtin$cls = "Stream_fold_closure";
  if (!"name" in Stream_fold_closure)
    Stream_fold_closure.name = "Stream_fold_closure";
  $desc = $collectedClasses.Stream_fold_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_fold_closure.prototype = $desc;
  function Stream_fold__closure(box_0, combine_4, element_5) {
    this.box_0 = box_0;
    this.combine_4 = combine_4;
    this.element_5 = element_5;
  }
  Stream_fold__closure.builtin$cls = "Stream_fold__closure";
  if (!"name" in Stream_fold__closure)
    Stream_fold__closure.name = "Stream_fold__closure";
  $desc = $collectedClasses.Stream_fold__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_fold__closure.prototype = $desc;
  function Stream_fold__closure0(box_0) {
    this.box_0 = box_0;
  }
  Stream_fold__closure0.builtin$cls = "Stream_fold__closure0";
  if (!"name" in Stream_fold__closure0)
    Stream_fold__closure0.name = "Stream_fold__closure0";
  $desc = $collectedClasses.Stream_fold__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_fold__closure0.prototype = $desc;
  function Stream_fold_closure1(result_6) {
    this.result_6 = result_6;
  }
  Stream_fold_closure1.builtin$cls = "Stream_fold_closure1";
  if (!"name" in Stream_fold_closure1)
    Stream_fold_closure1.name = "Stream_fold_closure1";
  $desc = $collectedClasses.Stream_fold_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_fold_closure1.prototype = $desc;
  function Stream_fold_closure0(box_0, result_7) {
    this.box_0 = box_0;
    this.result_7 = result_7;
  }
  Stream_fold_closure0.builtin$cls = "Stream_fold_closure0";
  if (!"name" in Stream_fold_closure0)
    Stream_fold_closure0.name = "Stream_fold_closure0";
  $desc = $collectedClasses.Stream_fold_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_fold_closure0.prototype = $desc;
  function Stream_join_closure(box_0, this_1, separator_2, result_3, buffer_4) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.separator_2 = separator_2;
    this.result_3 = result_3;
    this.buffer_4 = buffer_4;
  }
  Stream_join_closure.builtin$cls = "Stream_join_closure";
  if (!"name" in Stream_join_closure)
    Stream_join_closure.name = "Stream_join_closure";
  $desc = $collectedClasses.Stream_join_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_join_closure.prototype = $desc;
  function Stream_join_closure1(result_5) {
    this.result_5 = result_5;
  }
  Stream_join_closure1.builtin$cls = "Stream_join_closure1";
  if (!"name" in Stream_join_closure1)
    Stream_join_closure1.name = "Stream_join_closure1";
  $desc = $collectedClasses.Stream_join_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_join_closure1.prototype = $desc;
  function Stream_join_closure0(result_6, buffer_7) {
    this.result_6 = result_6;
    this.buffer_7 = buffer_7;
  }
  Stream_join_closure0.builtin$cls = "Stream_join_closure0";
  if (!"name" in Stream_join_closure0)
    Stream_join_closure0.name = "Stream_join_closure0";
  $desc = $collectedClasses.Stream_join_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_join_closure0.prototype = $desc;
  function Stream_contains_closure(box_0, this_1, needle_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.needle_2 = needle_2;
    this.future_3 = future_3;
  }
  Stream_contains_closure.builtin$cls = "Stream_contains_closure";
  if (!"name" in Stream_contains_closure)
    Stream_contains_closure.name = "Stream_contains_closure";
  $desc = $collectedClasses.Stream_contains_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains_closure.prototype = $desc;
  function Stream_contains__closure(needle_4, element_5) {
    this.needle_4 = needle_4;
    this.element_5 = element_5;
  }
  Stream_contains__closure.builtin$cls = "Stream_contains__closure";
  if (!"name" in Stream_contains__closure)
    Stream_contains__closure.name = "Stream_contains__closure";
  $desc = $collectedClasses.Stream_contains__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains__closure.prototype = $desc;
  function Stream_contains__closure0(box_0, future_6) {
    this.box_0 = box_0;
    this.future_6 = future_6;
  }
  Stream_contains__closure0.builtin$cls = "Stream_contains__closure0";
  if (!"name" in Stream_contains__closure0)
    Stream_contains__closure0.name = "Stream_contains__closure0";
  $desc = $collectedClasses.Stream_contains__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains__closure0.prototype = $desc;
  function Stream_contains_closure0(future_7) {
    this.future_7 = future_7;
  }
  Stream_contains_closure0.builtin$cls = "Stream_contains_closure0";
  if (!"name" in Stream_contains_closure0)
    Stream_contains_closure0.name = "Stream_contains_closure0";
  $desc = $collectedClasses.Stream_contains_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains_closure0.prototype = $desc;
  function Stream_forEach_closure(box_0, this_1, action_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.action_2 = action_2;
    this.future_3 = future_3;
  }
  Stream_forEach_closure.builtin$cls = "Stream_forEach_closure";
  if (!"name" in Stream_forEach_closure)
    Stream_forEach_closure.name = "Stream_forEach_closure";
  $desc = $collectedClasses.Stream_forEach_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure.prototype = $desc;
  function Stream_forEach__closure(action_4, element_5) {
    this.action_4 = action_4;
    this.element_5 = element_5;
  }
  Stream_forEach__closure.builtin$cls = "Stream_forEach__closure";
  if (!"name" in Stream_forEach__closure)
    Stream_forEach__closure.name = "Stream_forEach__closure";
  $desc = $collectedClasses.Stream_forEach__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure.prototype = $desc;
  function Stream_forEach__closure0() {
  }
  Stream_forEach__closure0.builtin$cls = "Stream_forEach__closure0";
  if (!"name" in Stream_forEach__closure0)
    Stream_forEach__closure0.name = "Stream_forEach__closure0";
  $desc = $collectedClasses.Stream_forEach__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure0.prototype = $desc;
  function Stream_forEach_closure0(future_6) {
    this.future_6 = future_6;
  }
  Stream_forEach_closure0.builtin$cls = "Stream_forEach_closure0";
  if (!"name" in Stream_forEach_closure0)
    Stream_forEach_closure0.name = "Stream_forEach_closure0";
  $desc = $collectedClasses.Stream_forEach_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure0.prototype = $desc;
  function Stream_any_closure(box_0, this_1, test_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.test_2 = test_2;
    this.future_3 = future_3;
  }
  Stream_any_closure.builtin$cls = "Stream_any_closure";
  if (!"name" in Stream_any_closure)
    Stream_any_closure.name = "Stream_any_closure";
  $desc = $collectedClasses.Stream_any_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_any_closure.prototype = $desc;
  function Stream_any__closure(test_4, element_5) {
    this.test_4 = test_4;
    this.element_5 = element_5;
  }
  Stream_any__closure.builtin$cls = "Stream_any__closure";
  if (!"name" in Stream_any__closure)
    Stream_any__closure.name = "Stream_any__closure";
  $desc = $collectedClasses.Stream_any__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_any__closure.prototype = $desc;
  function Stream_any__closure0(box_0, future_6) {
    this.box_0 = box_0;
    this.future_6 = future_6;
  }
  Stream_any__closure0.builtin$cls = "Stream_any__closure0";
  if (!"name" in Stream_any__closure0)
    Stream_any__closure0.name = "Stream_any__closure0";
  $desc = $collectedClasses.Stream_any__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_any__closure0.prototype = $desc;
  function Stream_any_closure0(future_7) {
    this.future_7 = future_7;
  }
  Stream_any_closure0.builtin$cls = "Stream_any_closure0";
  if (!"name" in Stream_any_closure0)
    Stream_any_closure0.name = "Stream_any_closure0";
  $desc = $collectedClasses.Stream_any_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_any_closure0.prototype = $desc;
  function Stream_length_closure(box_0) {
    this.box_0 = box_0;
  }
  Stream_length_closure.builtin$cls = "Stream_length_closure";
  if (!"name" in Stream_length_closure)
    Stream_length_closure.name = "Stream_length_closure";
  $desc = $collectedClasses.Stream_length_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure.prototype = $desc;
  function Stream_length_closure0(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  }
  Stream_length_closure0.builtin$cls = "Stream_length_closure0";
  if (!"name" in Stream_length_closure0)
    Stream_length_closure0.name = "Stream_length_closure0";
  $desc = $collectedClasses.Stream_length_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure0.prototype = $desc;
  function Stream_isEmpty_closure(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  }
  Stream_isEmpty_closure.builtin$cls = "Stream_isEmpty_closure";
  if (!"name" in Stream_isEmpty_closure)
    Stream_isEmpty_closure.name = "Stream_isEmpty_closure";
  $desc = $collectedClasses.Stream_isEmpty_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_isEmpty_closure.prototype = $desc;
  function Stream_isEmpty_closure0(future_2) {
    this.future_2 = future_2;
  }
  Stream_isEmpty_closure0.builtin$cls = "Stream_isEmpty_closure0";
  if (!"name" in Stream_isEmpty_closure0)
    Stream_isEmpty_closure0.name = "Stream_isEmpty_closure0";
  $desc = $collectedClasses.Stream_isEmpty_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_isEmpty_closure0.prototype = $desc;
  function Stream_toList_closure(this_0, result_1) {
    this.this_0 = this_0;
    this.result_1 = result_1;
  }
  Stream_toList_closure.builtin$cls = "Stream_toList_closure";
  if (!"name" in Stream_toList_closure)
    Stream_toList_closure.name = "Stream_toList_closure";
  $desc = $collectedClasses.Stream_toList_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_toList_closure.prototype = $desc;
  function Stream_toList_closure0(result_2, future_3) {
    this.result_2 = result_2;
    this.future_3 = future_3;
  }
  Stream_toList_closure0.builtin$cls = "Stream_toList_closure0";
  if (!"name" in Stream_toList_closure0)
    Stream_toList_closure0.name = "Stream_toList_closure0";
  $desc = $collectedClasses.Stream_toList_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_toList_closure0.prototype = $desc;
  function Stream_first_closure(box_0, this_1, future_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.future_2 = future_2;
  }
  Stream_first_closure.builtin$cls = "Stream_first_closure";
  if (!"name" in Stream_first_closure)
    Stream_first_closure.name = "Stream_first_closure";
  $desc = $collectedClasses.Stream_first_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_first_closure.prototype = $desc;
  function Stream_first_closure0(future_3) {
    this.future_3 = future_3;
  }
  Stream_first_closure0.builtin$cls = "Stream_first_closure0";
  if (!"name" in Stream_first_closure0)
    Stream_first_closure0.name = "Stream_first_closure0";
  $desc = $collectedClasses.Stream_first_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_first_closure0.prototype = $desc;
  function Stream_last_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  Stream_last_closure.builtin$cls = "Stream_last_closure";
  if (!"name" in Stream_last_closure)
    Stream_last_closure.name = "Stream_last_closure";
  $desc = $collectedClasses.Stream_last_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_last_closure.prototype = $desc;
  function Stream_last_closure0(box_0, future_2) {
    this.box_0 = box_0;
    this.future_2 = future_2;
  }
  Stream_last_closure0.builtin$cls = "Stream_last_closure0";
  if (!"name" in Stream_last_closure0)
    Stream_last_closure0.name = "Stream_last_closure0";
  $desc = $collectedClasses.Stream_last_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_last_closure0.prototype = $desc;
  function Stream_firstWhere_closure(box_0, this_1, test_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.test_2 = test_2;
    this.future_3 = future_3;
  }
  Stream_firstWhere_closure.builtin$cls = "Stream_firstWhere_closure";
  if (!"name" in Stream_firstWhere_closure)
    Stream_firstWhere_closure.name = "Stream_firstWhere_closure";
  $desc = $collectedClasses.Stream_firstWhere_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_firstWhere_closure.prototype = $desc;
  function Stream_firstWhere__closure(test_4, value_5) {
    this.test_4 = test_4;
    this.value_5 = value_5;
  }
  Stream_firstWhere__closure.builtin$cls = "Stream_firstWhere__closure";
  if (!"name" in Stream_firstWhere__closure)
    Stream_firstWhere__closure.name = "Stream_firstWhere__closure";
  $desc = $collectedClasses.Stream_firstWhere__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_firstWhere__closure.prototype = $desc;
  function Stream_firstWhere__closure0(box_0, future_6, value_7) {
    this.box_0 = box_0;
    this.future_6 = future_6;
    this.value_7 = value_7;
  }
  Stream_firstWhere__closure0.builtin$cls = "Stream_firstWhere__closure0";
  if (!"name" in Stream_firstWhere__closure0)
    Stream_firstWhere__closure0.name = "Stream_firstWhere__closure0";
  $desc = $collectedClasses.Stream_firstWhere__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_firstWhere__closure0.prototype = $desc;
  function Stream_firstWhere_closure0(defaultValue_8, future_9) {
    this.defaultValue_8 = defaultValue_8;
    this.future_9 = future_9;
  }
  Stream_firstWhere_closure0.builtin$cls = "Stream_firstWhere_closure0";
  if (!"name" in Stream_firstWhere_closure0)
    Stream_firstWhere_closure0.name = "Stream_firstWhere_closure0";
  $desc = $collectedClasses.Stream_firstWhere_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_firstWhere_closure0.prototype = $desc;
  function Stream_elementAt_closure(box_0, this_1, future_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.future_2 = future_2;
  }
  Stream_elementAt_closure.builtin$cls = "Stream_elementAt_closure";
  if (!"name" in Stream_elementAt_closure)
    Stream_elementAt_closure.name = "Stream_elementAt_closure";
  $desc = $collectedClasses.Stream_elementAt_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_elementAt_closure.prototype = $desc;
  function Stream_elementAt_closure0(box_0, future_3) {
    this.box_0 = box_0;
    this.future_3 = future_3;
  }
  Stream_elementAt_closure0.builtin$cls = "Stream_elementAt_closure0";
  if (!"name" in Stream_elementAt_closure0)
    Stream_elementAt_closure0.name = "Stream_elementAt_closure0";
  $desc = $collectedClasses.Stream_elementAt_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_elementAt_closure0.prototype = $desc;
  function StreamSubscription() {
  }
  StreamSubscription.builtin$cls = "StreamSubscription";
  if (!"name" in StreamSubscription)
    StreamSubscription.name = "StreamSubscription";
  $desc = $collectedClasses.StreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StreamSubscription.prototype = $desc;
  function _ControllerStream() {
  }
  _ControllerStream.builtin$cls = "_ControllerStream";
  if (!"name" in _ControllerStream)
    _ControllerStream.name = "_ControllerStream";
  $desc = $collectedClasses._ControllerStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ControllerStream.prototype = $desc;
  function _ControllerSubscription(_async$_controller) {
    this._async$_controller = _async$_controller;
  }
  _ControllerSubscription.builtin$cls = "_ControllerSubscription";
  if (!"name" in _ControllerSubscription)
    _ControllerSubscription.name = "_ControllerSubscription";
  $desc = $collectedClasses._ControllerSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ControllerSubscription.prototype = $desc;
  _ControllerSubscription.prototype.get$_async$_controller = function() {
    return this._async$_controller;
  };
  function _EventSink() {
  }
  _EventSink.builtin$cls = "_EventSink";
  if (!"name" in _EventSink)
    _EventSink.name = "_EventSink";
  $desc = $collectedClasses._EventSink;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventSink.prototype = $desc;
  function _BufferingStreamSubscription(_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._onData = _onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _BufferingStreamSubscription.builtin$cls = "_BufferingStreamSubscription";
  if (!"name" in _BufferingStreamSubscription)
    _BufferingStreamSubscription.name = "_BufferingStreamSubscription";
  $desc = $collectedClasses._BufferingStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription.prototype = $desc;
  _BufferingStreamSubscription.prototype.get$_onError = function() {
    return this._onError;
  };
  _BufferingStreamSubscription.prototype.get$_zone = function() {
    return this._zone;
  };
  function _BufferingStreamSubscription__sendError_sendError(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _BufferingStreamSubscription__sendError_sendError.builtin$cls = "_BufferingStreamSubscription__sendError_sendError";
  if (!"name" in _BufferingStreamSubscription__sendError_sendError)
    _BufferingStreamSubscription__sendError_sendError.name = "_BufferingStreamSubscription__sendError_sendError";
  $desc = $collectedClasses._BufferingStreamSubscription__sendError_sendError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription__sendError_sendError.prototype = $desc;
  function _BufferingStreamSubscription__sendDone_sendDone(this_0) {
    this.this_0 = this_0;
  }
  _BufferingStreamSubscription__sendDone_sendDone.builtin$cls = "_BufferingStreamSubscription__sendDone_sendDone";
  if (!"name" in _BufferingStreamSubscription__sendDone_sendDone)
    _BufferingStreamSubscription__sendDone_sendDone.name = "_BufferingStreamSubscription__sendDone_sendDone";
  $desc = $collectedClasses._BufferingStreamSubscription__sendDone_sendDone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription__sendDone_sendDone.prototype = $desc;
  function _StreamImpl() {
  }
  _StreamImpl.builtin$cls = "_StreamImpl";
  if (!"name" in _StreamImpl)
    _StreamImpl.name = "_StreamImpl";
  $desc = $collectedClasses._StreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamImpl.prototype = $desc;
  function _DelayedEvent(next) {
    this.next = next;
  }
  _DelayedEvent.builtin$cls = "_DelayedEvent";
  if (!"name" in _DelayedEvent)
    _DelayedEvent.name = "_DelayedEvent";
  $desc = $collectedClasses._DelayedEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedEvent.prototype = $desc;
  _DelayedEvent.prototype.get$next = function() {
    return this.next;
  };
  _DelayedEvent.prototype.set$next = function(v) {
    return this.next = v;
  };
  function _DelayedData(value, next) {
    this.value = value;
    this.next = next;
  }
  _DelayedData.builtin$cls = "_DelayedData";
  if (!"name" in _DelayedData)
    _DelayedData.name = "_DelayedData";
  $desc = $collectedClasses._DelayedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedData.prototype = $desc;
  _DelayedData.prototype.get$value = function(receiver) {
    return this.value;
  };
  function _DelayedError(error, stackTrace, next) {
    this.error = error;
    this.stackTrace = stackTrace;
    this.next = next;
  }
  _DelayedError.builtin$cls = "_DelayedError";
  if (!"name" in _DelayedError)
    _DelayedError.name = "_DelayedError";
  $desc = $collectedClasses._DelayedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedError.prototype = $desc;
  _DelayedError.prototype.get$error = function(receiver) {
    return this.error;
  };
  _DelayedError.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function _DelayedDone() {
  }
  _DelayedDone.builtin$cls = "_DelayedDone";
  if (!"name" in _DelayedDone)
    _DelayedDone.name = "_DelayedDone";
  $desc = $collectedClasses._DelayedDone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedDone.prototype = $desc;
  function _PendingEvents() {
  }
  _PendingEvents.builtin$cls = "_PendingEvents";
  if (!"name" in _PendingEvents)
    _PendingEvents.name = "_PendingEvents";
  $desc = $collectedClasses._PendingEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingEvents.prototype = $desc;
  function _PendingEvents_schedule_closure(this_0, dispatch_1) {
    this.this_0 = this_0;
    this.dispatch_1 = dispatch_1;
  }
  _PendingEvents_schedule_closure.builtin$cls = "_PendingEvents_schedule_closure";
  if (!"name" in _PendingEvents_schedule_closure)
    _PendingEvents_schedule_closure.name = "_PendingEvents_schedule_closure";
  $desc = $collectedClasses._PendingEvents_schedule_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingEvents_schedule_closure.prototype = $desc;
  function _StreamImplEvents(firstPendingEvent, lastPendingEvent, _state) {
    this.firstPendingEvent = firstPendingEvent;
    this.lastPendingEvent = lastPendingEvent;
    this._state = _state;
  }
  _StreamImplEvents.builtin$cls = "_StreamImplEvents";
  if (!"name" in _StreamImplEvents)
    _StreamImplEvents.name = "_StreamImplEvents";
  $desc = $collectedClasses._StreamImplEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamImplEvents.prototype = $desc;
  function _DoneStreamSubscription(_zone, _state, _onDone) {
    this._zone = _zone;
    this._state = _state;
    this._onDone = _onDone;
  }
  _DoneStreamSubscription.builtin$cls = "_DoneStreamSubscription";
  if (!"name" in _DoneStreamSubscription)
    _DoneStreamSubscription.name = "_DoneStreamSubscription";
  $desc = $collectedClasses._DoneStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DoneStreamSubscription.prototype = $desc;
  _DoneStreamSubscription.prototype.get$_zone = function() {
    return this._zone;
  };
  function _cancelAndError_closure(future_0, error_1, stackTrace_2) {
    this.future_0 = future_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _cancelAndError_closure.builtin$cls = "_cancelAndError_closure";
  if (!"name" in _cancelAndError_closure)
    _cancelAndError_closure.name = "_cancelAndError_closure";
  $desc = $collectedClasses._cancelAndError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndError_closure.prototype = $desc;
  function _cancelAndErrorClosure_closure(subscription_0, future_1) {
    this.subscription_0 = subscription_0;
    this.future_1 = future_1;
  }
  _cancelAndErrorClosure_closure.builtin$cls = "_cancelAndErrorClosure_closure";
  if (!"name" in _cancelAndErrorClosure_closure)
    _cancelAndErrorClosure_closure.name = "_cancelAndErrorClosure_closure";
  $desc = $collectedClasses._cancelAndErrorClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndErrorClosure_closure.prototype = $desc;
  function _cancelAndValue_closure(future_0, value_1) {
    this.future_0 = future_0;
    this.value_1 = value_1;
  }
  _cancelAndValue_closure.builtin$cls = "_cancelAndValue_closure";
  if (!"name" in _cancelAndValue_closure)
    _cancelAndValue_closure.name = "_cancelAndValue_closure";
  $desc = $collectedClasses._cancelAndValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndValue_closure.prototype = $desc;
  function _ForwardingStream() {
  }
  _ForwardingStream.builtin$cls = "_ForwardingStream";
  if (!"name" in _ForwardingStream)
    _ForwardingStream.name = "_ForwardingStream";
  $desc = $collectedClasses._ForwardingStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ForwardingStream.prototype = $desc;
  function _ForwardingStreamSubscription(_stream, _subscription, _onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._stream = _stream;
    this._subscription = _subscription;
    this._onData = _onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _ForwardingStreamSubscription.builtin$cls = "_ForwardingStreamSubscription";
  if (!"name" in _ForwardingStreamSubscription)
    _ForwardingStreamSubscription.name = "_ForwardingStreamSubscription";
  $desc = $collectedClasses._ForwardingStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ForwardingStreamSubscription.prototype = $desc;
  function _WhereStream(_test, _async$_source) {
    this._test = _test;
    this._async$_source = _async$_source;
  }
  _WhereStream.builtin$cls = "_WhereStream";
  if (!"name" in _WhereStream)
    _WhereStream.name = "_WhereStream";
  $desc = $collectedClasses._WhereStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WhereStream.prototype = $desc;
  function _MapStream(_transform, _async$_source) {
    this._transform = _transform;
    this._async$_source = _async$_source;
  }
  _MapStream.builtin$cls = "_MapStream";
  if (!"name" in _MapStream)
    _MapStream.name = "_MapStream";
  $desc = $collectedClasses._MapStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MapStream.prototype = $desc;
  function _SkipStream(_remaining, _async$_source) {
    this._remaining = _remaining;
    this._async$_source = _async$_source;
  }
  _SkipStream.builtin$cls = "_SkipStream";
  if (!"name" in _SkipStream)
    _SkipStream.name = "_SkipStream";
  $desc = $collectedClasses._SkipStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SkipStream.prototype = $desc;
  function Timer() {
  }
  Timer.builtin$cls = "Timer";
  if (!"name" in Timer)
    Timer.name = "Timer";
  $desc = $collectedClasses.Timer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Timer.prototype = $desc;
  function _ZoneFunction(zone, $function) {
    this.zone = zone;
    this.$function = $function;
  }
  _ZoneFunction.builtin$cls = "_ZoneFunction";
  if (!"name" in _ZoneFunction)
    _ZoneFunction.name = "_ZoneFunction";
  $desc = $collectedClasses._ZoneFunction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ZoneFunction.prototype = $desc;
  _ZoneFunction.prototype.get$zone = function() {
    return this.zone;
  };
  _ZoneFunction.prototype.get$$function = function() {
    return this.$function;
  };
  function ZoneSpecification() {
  }
  ZoneSpecification.builtin$cls = "ZoneSpecification";
  if (!"name" in ZoneSpecification)
    ZoneSpecification.name = "ZoneSpecification";
  $desc = $collectedClasses.ZoneSpecification;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ZoneSpecification.prototype = $desc;
  function _ZoneSpecification(handleUncaughtError, run, runUnary, runBinary, registerCallback, registerUnaryCallback, registerBinaryCallback, scheduleMicrotask, createTimer, createPeriodicTimer, print, fork) {
    this.handleUncaughtError = handleUncaughtError;
    this.run = run;
    this.runUnary = runUnary;
    this.runBinary = runBinary;
    this.registerCallback = registerCallback;
    this.registerUnaryCallback = registerUnaryCallback;
    this.registerBinaryCallback = registerBinaryCallback;
    this.scheduleMicrotask = scheduleMicrotask;
    this.createTimer = createTimer;
    this.createPeriodicTimer = createPeriodicTimer;
    this.print = print;
    this.fork = fork;
  }
  _ZoneSpecification.builtin$cls = "_ZoneSpecification";
  if (!"name" in _ZoneSpecification)
    _ZoneSpecification.name = "_ZoneSpecification";
  $desc = $collectedClasses._ZoneSpecification;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ZoneSpecification.prototype = $desc;
  function ZoneDelegate() {
  }
  ZoneDelegate.builtin$cls = "ZoneDelegate";
  if (!"name" in ZoneDelegate)
    ZoneDelegate.name = "ZoneDelegate";
  $desc = $collectedClasses.ZoneDelegate;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ZoneDelegate.prototype = $desc;
  function Zone() {
  }
  Zone.builtin$cls = "Zone";
  if (!"name" in Zone)
    Zone.name = "Zone";
  $desc = $collectedClasses.Zone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Zone.prototype = $desc;
  function _ZoneDelegate(_delegationTarget) {
    this._delegationTarget = _delegationTarget;
  }
  _ZoneDelegate.builtin$cls = "_ZoneDelegate";
  if (!"name" in _ZoneDelegate)
    _ZoneDelegate.name = "_ZoneDelegate";
  $desc = $collectedClasses._ZoneDelegate;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ZoneDelegate.prototype = $desc;
  function _Zone() {
  }
  _Zone.builtin$cls = "_Zone";
  if (!"name" in _Zone)
    _Zone.name = "_Zone";
  $desc = $collectedClasses._Zone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Zone.prototype = $desc;
  function _CustomZone(_runUnary, _run, _runBinary, _registerCallback, _registerUnaryCallback, _registerBinaryCallback, _scheduleMicrotask, _createTimer, _createPeriodicTimer, _print, _fork, _handleUncaughtError, _delegateCache, parent, _async$_map) {
    this._runUnary = _runUnary;
    this._run = _run;
    this._runBinary = _runBinary;
    this._registerCallback = _registerCallback;
    this._registerUnaryCallback = _registerUnaryCallback;
    this._registerBinaryCallback = _registerBinaryCallback;
    this._scheduleMicrotask = _scheduleMicrotask;
    this._createTimer = _createTimer;
    this._createPeriodicTimer = _createPeriodicTimer;
    this._print = _print;
    this._fork = _fork;
    this._handleUncaughtError = _handleUncaughtError;
    this._delegateCache = _delegateCache;
    this.parent = parent;
    this._async$_map = _async$_map;
  }
  _CustomZone.builtin$cls = "_CustomZone";
  if (!"name" in _CustomZone)
    _CustomZone.name = "_CustomZone";
  $desc = $collectedClasses._CustomZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CustomZone.prototype = $desc;
  _CustomZone.prototype.get$_runUnary = function() {
    return this._runUnary;
  };
  _CustomZone.prototype.get$_run = function() {
    return this._run;
  };
  _CustomZone.prototype.get$_runBinary = function() {
    return this._runBinary;
  };
  _CustomZone.prototype.get$_registerCallback = function() {
    return this._registerCallback;
  };
  _CustomZone.prototype.get$_registerUnaryCallback = function() {
    return this._registerUnaryCallback;
  };
  _CustomZone.prototype.get$_registerBinaryCallback = function() {
    return this._registerBinaryCallback;
  };
  _CustomZone.prototype.get$_scheduleMicrotask = function() {
    return this._scheduleMicrotask;
  };
  _CustomZone.prototype.get$_createTimer = function() {
    return this._createTimer;
  };
  _CustomZone.prototype.get$_createPeriodicTimer = function() {
    return this._createPeriodicTimer;
  };
  _CustomZone.prototype.get$_print = function() {
    return this._print;
  };
  _CustomZone.prototype.get$_fork = function() {
    return this._fork;
  };
  _CustomZone.prototype.get$_handleUncaughtError = function() {
    return this._handleUncaughtError;
  };
  _CustomZone.prototype.get$parent = function(receiver) {
    return this.parent;
  };
  _CustomZone.prototype.get$_async$_map = function() {
    return this._async$_map;
  };
  function _CustomZone_bindCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _CustomZone_bindCallback_closure.builtin$cls = "_CustomZone_bindCallback_closure";
  if (!"name" in _CustomZone_bindCallback_closure)
    _CustomZone_bindCallback_closure.name = "_CustomZone_bindCallback_closure";
  $desc = $collectedClasses._CustomZone_bindCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CustomZone_bindCallback_closure.prototype = $desc;
  function _CustomZone_bindCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _CustomZone_bindCallback_closure0.builtin$cls = "_CustomZone_bindCallback_closure0";
  if (!"name" in _CustomZone_bindCallback_closure0)
    _CustomZone_bindCallback_closure0.name = "_CustomZone_bindCallback_closure0";
  $desc = $collectedClasses._CustomZone_bindCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CustomZone_bindCallback_closure0.prototype = $desc;
  function _CustomZone_bindUnaryCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _CustomZone_bindUnaryCallback_closure.builtin$cls = "_CustomZone_bindUnaryCallback_closure";
  if (!"name" in _CustomZone_bindUnaryCallback_closure)
    _CustomZone_bindUnaryCallback_closure.name = "_CustomZone_bindUnaryCallback_closure";
  $desc = $collectedClasses._CustomZone_bindUnaryCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CustomZone_bindUnaryCallback_closure.prototype = $desc;
  function _CustomZone_bindUnaryCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _CustomZone_bindUnaryCallback_closure0.builtin$cls = "_CustomZone_bindUnaryCallback_closure0";
  if (!"name" in _CustomZone_bindUnaryCallback_closure0)
    _CustomZone_bindUnaryCallback_closure0.name = "_CustomZone_bindUnaryCallback_closure0";
  $desc = $collectedClasses._CustomZone_bindUnaryCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CustomZone_bindUnaryCallback_closure0.prototype = $desc;
  function _CustomZone_bindBinaryCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _CustomZone_bindBinaryCallback_closure.builtin$cls = "_CustomZone_bindBinaryCallback_closure";
  if (!"name" in _CustomZone_bindBinaryCallback_closure)
    _CustomZone_bindBinaryCallback_closure.name = "_CustomZone_bindBinaryCallback_closure";
  $desc = $collectedClasses._CustomZone_bindBinaryCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CustomZone_bindBinaryCallback_closure.prototype = $desc;
  function _CustomZone_bindBinaryCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _CustomZone_bindBinaryCallback_closure0.builtin$cls = "_CustomZone_bindBinaryCallback_closure0";
  if (!"name" in _CustomZone_bindBinaryCallback_closure0)
    _CustomZone_bindBinaryCallback_closure0.name = "_CustomZone_bindBinaryCallback_closure0";
  $desc = $collectedClasses._CustomZone_bindBinaryCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CustomZone_bindBinaryCallback_closure0.prototype = $desc;
  function _rootHandleUncaughtError_closure(error_0, stackTrace_1) {
    this.error_0 = error_0;
    this.stackTrace_1 = stackTrace_1;
  }
  _rootHandleUncaughtError_closure.builtin$cls = "_rootHandleUncaughtError_closure";
  if (!"name" in _rootHandleUncaughtError_closure)
    _rootHandleUncaughtError_closure.name = "_rootHandleUncaughtError_closure";
  $desc = $collectedClasses._rootHandleUncaughtError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootHandleUncaughtError_closure.prototype = $desc;
  function _RootZone() {
  }
  _RootZone.builtin$cls = "_RootZone";
  if (!"name" in _RootZone)
    _RootZone.name = "_RootZone";
  $desc = $collectedClasses._RootZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZone.prototype = $desc;
  function _RootZone_bindCallback_closure(this_0, f_1) {
    this.this_0 = this_0;
    this.f_1 = f_1;
  }
  _RootZone_bindCallback_closure.builtin$cls = "_RootZone_bindCallback_closure";
  if (!"name" in _RootZone_bindCallback_closure)
    _RootZone_bindCallback_closure.name = "_RootZone_bindCallback_closure";
  $desc = $collectedClasses._RootZone_bindCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZone_bindCallback_closure.prototype = $desc;
  function _RootZone_bindCallback_closure0(this_2, f_3) {
    this.this_2 = this_2;
    this.f_3 = f_3;
  }
  _RootZone_bindCallback_closure0.builtin$cls = "_RootZone_bindCallback_closure0";
  if (!"name" in _RootZone_bindCallback_closure0)
    _RootZone_bindCallback_closure0.name = "_RootZone_bindCallback_closure0";
  $desc = $collectedClasses._RootZone_bindCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZone_bindCallback_closure0.prototype = $desc;
  function _RootZone_bindUnaryCallback_closure(this_0, f_1) {
    this.this_0 = this_0;
    this.f_1 = f_1;
  }
  _RootZone_bindUnaryCallback_closure.builtin$cls = "_RootZone_bindUnaryCallback_closure";
  if (!"name" in _RootZone_bindUnaryCallback_closure)
    _RootZone_bindUnaryCallback_closure.name = "_RootZone_bindUnaryCallback_closure";
  $desc = $collectedClasses._RootZone_bindUnaryCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZone_bindUnaryCallback_closure.prototype = $desc;
  function _RootZone_bindUnaryCallback_closure0(this_2, f_3) {
    this.this_2 = this_2;
    this.f_3 = f_3;
  }
  _RootZone_bindUnaryCallback_closure0.builtin$cls = "_RootZone_bindUnaryCallback_closure0";
  if (!"name" in _RootZone_bindUnaryCallback_closure0)
    _RootZone_bindUnaryCallback_closure0.name = "_RootZone_bindUnaryCallback_closure0";
  $desc = $collectedClasses._RootZone_bindUnaryCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZone_bindUnaryCallback_closure0.prototype = $desc;
  function _RootZone_bindBinaryCallback_closure(this_0, f_1) {
    this.this_0 = this_0;
    this.f_1 = f_1;
  }
  _RootZone_bindBinaryCallback_closure.builtin$cls = "_RootZone_bindBinaryCallback_closure";
  if (!"name" in _RootZone_bindBinaryCallback_closure)
    _RootZone_bindBinaryCallback_closure.name = "_RootZone_bindBinaryCallback_closure";
  $desc = $collectedClasses._RootZone_bindBinaryCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZone_bindBinaryCallback_closure.prototype = $desc;
  function _RootZone_bindBinaryCallback_closure0(this_2, f_3) {
    this.this_2 = this_2;
    this.f_3 = f_3;
  }
  _RootZone_bindBinaryCallback_closure0.builtin$cls = "_RootZone_bindBinaryCallback_closure0";
  if (!"name" in _RootZone_bindBinaryCallback_closure0)
    _RootZone_bindBinaryCallback_closure0.name = "_RootZone_bindBinaryCallback_closure0";
  $desc = $collectedClasses._RootZone_bindBinaryCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZone_bindBinaryCallback_closure0.prototype = $desc;
  function _HashMap(_collection$_length, _strings, _nums, _rest, _keys) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._keys = _keys;
  }
  _HashMap.builtin$cls = "_HashMap";
  if (!"name" in _HashMap)
    _HashMap.name = "_HashMap";
  $desc = $collectedClasses._HashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap.prototype = $desc;
  function _HashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _HashMap_values_closure.builtin$cls = "_HashMap_values_closure";
  if (!"name" in _HashMap_values_closure)
    _HashMap_values_closure.name = "_HashMap_values_closure";
  $desc = $collectedClasses._HashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap_values_closure.prototype = $desc;
  function _HashMap_addAll_closure(this_0) {
    this.this_0 = this_0;
  }
  _HashMap_addAll_closure.builtin$cls = "_HashMap_addAll_closure";
  if (!"name" in _HashMap_addAll_closure)
    _HashMap_addAll_closure.name = "_HashMap_addAll_closure";
  $desc = $collectedClasses._HashMap_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap_addAll_closure.prototype = $desc;
  function _IdentityHashMap(_collection$_length, _strings, _nums, _rest, _keys) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._keys = _keys;
  }
  _IdentityHashMap.builtin$cls = "_IdentityHashMap";
  if (!"name" in _IdentityHashMap)
    _IdentityHashMap.name = "_IdentityHashMap";
  $desc = $collectedClasses._IdentityHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IdentityHashMap.prototype = $desc;
  function _CustomHashMap(_equals, _hashCode, _validKey, _collection$_length, _strings, _nums, _rest, _keys) {
    this._equals = _equals;
    this._hashCode = _hashCode;
    this._validKey = _validKey;
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._keys = _keys;
  }
  _CustomHashMap.builtin$cls = "_CustomHashMap";
  if (!"name" in _CustomHashMap)
    _CustomHashMap.name = "_CustomHashMap";
  $desc = $collectedClasses._CustomHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CustomHashMap.prototype = $desc;
  function _CustomHashMap_closure(K_0) {
    this.K_0 = K_0;
  }
  _CustomHashMap_closure.builtin$cls = "_CustomHashMap_closure";
  if (!"name" in _CustomHashMap_closure)
    _CustomHashMap_closure.name = "_CustomHashMap_closure";
  $desc = $collectedClasses._CustomHashMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CustomHashMap_closure.prototype = $desc;
  function HashMapKeyIterable(_map) {
    this._map = _map;
  }
  HashMapKeyIterable.builtin$cls = "HashMapKeyIterable";
  if (!"name" in HashMapKeyIterable)
    HashMapKeyIterable.name = "HashMapKeyIterable";
  $desc = $collectedClasses.HashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterable.prototype = $desc;
  function HashMapKeyIterator(_map, _keys, _offset, _collection$_current) {
    this._map = _map;
    this._keys = _keys;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashMapKeyIterator.builtin$cls = "HashMapKeyIterator";
  if (!"name" in HashMapKeyIterator)
    HashMapKeyIterator.name = "HashMapKeyIterator";
  $desc = $collectedClasses.HashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterator.prototype = $desc;
  function _LinkedHashMap(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashMap.builtin$cls = "_LinkedHashMap";
  if (!"name" in _LinkedHashMap)
    _LinkedHashMap.name = "_LinkedHashMap";
  $desc = $collectedClasses._LinkedHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap.prototype = $desc;
  function _LinkedHashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _LinkedHashMap_values_closure.builtin$cls = "_LinkedHashMap_values_closure";
  if (!"name" in _LinkedHashMap_values_closure)
    _LinkedHashMap_values_closure.name = "_LinkedHashMap_values_closure";
  $desc = $collectedClasses._LinkedHashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap_values_closure.prototype = $desc;
  function _LinkedHashMap_addAll_closure(this_0) {
    this.this_0 = this_0;
  }
  _LinkedHashMap_addAll_closure.builtin$cls = "_LinkedHashMap_addAll_closure";
  if (!"name" in _LinkedHashMap_addAll_closure)
    _LinkedHashMap_addAll_closure.name = "_LinkedHashMap_addAll_closure";
  $desc = $collectedClasses._LinkedHashMap_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap_addAll_closure.prototype = $desc;
  function LinkedHashMapCell(_key, _value, _collection$_next, _previous) {
    this._key = _key;
    this._value = _value;
    this._collection$_next = _collection$_next;
    this._previous = _previous;
  }
  LinkedHashMapCell.builtin$cls = "LinkedHashMapCell";
  if (!"name" in LinkedHashMapCell)
    LinkedHashMapCell.name = "LinkedHashMapCell";
  $desc = $collectedClasses.LinkedHashMapCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapCell.prototype = $desc;
  LinkedHashMapCell.prototype.get$_key = function() {
    return this._key;
  };
  LinkedHashMapCell.prototype.get$_value = function() {
    return this._value;
  };
  LinkedHashMapCell.prototype.set$_value = function(v) {
    return this._value = v;
  };
  LinkedHashMapCell.prototype.get$_collection$_next = function() {
    return this._collection$_next;
  };
  LinkedHashMapCell.prototype.set$_collection$_next = function(v) {
    return this._collection$_next = v;
  };
  LinkedHashMapCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashMapCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashMapKeyIterable(_map) {
    this._map = _map;
  }
  LinkedHashMapKeyIterable.builtin$cls = "LinkedHashMapKeyIterable";
  if (!"name" in LinkedHashMapKeyIterable)
    LinkedHashMapKeyIterable.name = "LinkedHashMapKeyIterable";
  $desc = $collectedClasses.LinkedHashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterable.prototype = $desc;
  function LinkedHashMapKeyIterator(_map, _modifications, _cell, _collection$_current) {
    this._map = _map;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashMapKeyIterator.builtin$cls = "LinkedHashMapKeyIterator";
  if (!"name" in LinkedHashMapKeyIterator)
    LinkedHashMapKeyIterator.name = "LinkedHashMapKeyIterator";
  $desc = $collectedClasses.LinkedHashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterator.prototype = $desc;
  function _HashSet(_collection$_length, _strings, _nums, _rest, _elements) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._elements = _elements;
  }
  _HashSet.builtin$cls = "_HashSet";
  if (!"name" in _HashSet)
    _HashSet.name = "_HashSet";
  $desc = $collectedClasses._HashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSet.prototype = $desc;
  function HashSetIterator(_set, _elements, _offset, _collection$_current) {
    this._set = _set;
    this._elements = _elements;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashSetIterator.builtin$cls = "HashSetIterator";
  if (!"name" in HashSetIterator)
    HashSetIterator.name = "HashSetIterator";
  $desc = $collectedClasses.HashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashSetIterator.prototype = $desc;
  function _LinkedHashSet(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashSet.builtin$cls = "_LinkedHashSet";
  if (!"name" in _LinkedHashSet)
    _LinkedHashSet.name = "_LinkedHashSet";
  $desc = $collectedClasses._LinkedHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashSet.prototype = $desc;
  function LinkedHashSetCell(_element, _collection$_next, _previous) {
    this._element = _element;
    this._collection$_next = _collection$_next;
    this._previous = _previous;
  }
  LinkedHashSetCell.builtin$cls = "LinkedHashSetCell";
  if (!"name" in LinkedHashSetCell)
    LinkedHashSetCell.name = "LinkedHashSetCell";
  $desc = $collectedClasses.LinkedHashSetCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetCell.prototype = $desc;
  LinkedHashSetCell.prototype.get$_element = function(receiver) {
    return this._element;
  };
  LinkedHashSetCell.prototype.get$_collection$_next = function() {
    return this._collection$_next;
  };
  LinkedHashSetCell.prototype.set$_collection$_next = function(v) {
    return this._collection$_next = v;
  };
  LinkedHashSetCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashSetCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashSetIterator(_set, _modifications, _cell, _collection$_current) {
    this._set = _set;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashSetIterator.builtin$cls = "LinkedHashSetIterator";
  if (!"name" in LinkedHashSetIterator)
    LinkedHashSetIterator.name = "LinkedHashSetIterator";
  $desc = $collectedClasses.LinkedHashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetIterator.prototype = $desc;
  function UnmodifiableListView(_source) {
    this._source = _source;
  }
  UnmodifiableListView.builtin$cls = "UnmodifiableListView";
  if (!"name" in UnmodifiableListView)
    UnmodifiableListView.name = "UnmodifiableListView";
  $desc = $collectedClasses.UnmodifiableListView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableListView.prototype = $desc;
  function _HashSetBase() {
  }
  _HashSetBase.builtin$cls = "_HashSetBase";
  if (!"name" in _HashSetBase)
    _HashSetBase.name = "_HashSetBase";
  $desc = $collectedClasses._HashSetBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSetBase.prototype = $desc;
  function IterableBase() {
  }
  IterableBase.builtin$cls = "IterableBase";
  if (!"name" in IterableBase)
    IterableBase.name = "IterableBase";
  $desc = $collectedClasses.IterableBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IterableBase.prototype = $desc;
  function ListBase() {
  }
  ListBase.builtin$cls = "ListBase";
  if (!"name" in ListBase)
    ListBase.name = "ListBase";
  $desc = $collectedClasses.ListBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListBase.prototype = $desc;
  function Object_ListMixin() {
  }
  Object_ListMixin.builtin$cls = "Object_ListMixin";
  if (!"name" in Object_ListMixin)
    Object_ListMixin.name = "Object_ListMixin";
  $desc = $collectedClasses.Object_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object_ListMixin.prototype = $desc;
  function ListMixin() {
  }
  ListMixin.builtin$cls = "ListMixin";
  if (!"name" in ListMixin)
    ListMixin.name = "ListMixin";
  $desc = $collectedClasses.ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListMixin.prototype = $desc;
  function MapBase() {
  }
  MapBase.builtin$cls = "MapBase";
  if (!"name" in MapBase)
    MapBase.name = "MapBase";
  $desc = $collectedClasses.MapBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapBase.prototype = $desc;
  function MapMixin() {
  }
  MapMixin.builtin$cls = "MapMixin";
  if (!"name" in MapMixin)
    MapMixin.name = "MapMixin";
  $desc = $collectedClasses.MapMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapMixin.prototype = $desc;
  function _MapBaseValueIterable(_map) {
    this._map = _map;
  }
  _MapBaseValueIterable.builtin$cls = "_MapBaseValueIterable";
  if (!"name" in _MapBaseValueIterable)
    _MapBaseValueIterable.name = "_MapBaseValueIterable";
  $desc = $collectedClasses._MapBaseValueIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MapBaseValueIterable.prototype = $desc;
  function _MapBaseValueIterator(_keys, _map, _collection$_current) {
    this._keys = _keys;
    this._map = _map;
    this._collection$_current = _collection$_current;
  }
  _MapBaseValueIterator.builtin$cls = "_MapBaseValueIterator";
  if (!"name" in _MapBaseValueIterator)
    _MapBaseValueIterator.name = "_MapBaseValueIterator";
  $desc = $collectedClasses._MapBaseValueIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MapBaseValueIterator.prototype = $desc;
  function _UnmodifiableMapMixin() {
  }
  _UnmodifiableMapMixin.builtin$cls = "_UnmodifiableMapMixin";
  if (!"name" in _UnmodifiableMapMixin)
    _UnmodifiableMapMixin.name = "_UnmodifiableMapMixin";
  $desc = $collectedClasses._UnmodifiableMapMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _UnmodifiableMapMixin.prototype = $desc;
  function MapView() {
  }
  MapView.builtin$cls = "MapView";
  if (!"name" in MapView)
    MapView.name = "MapView";
  $desc = $collectedClasses.MapView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapView.prototype = $desc;
  function UnmodifiableMapView(_map) {
    this._map = _map;
  }
  UnmodifiableMapView.builtin$cls = "UnmodifiableMapView";
  if (!"name" in UnmodifiableMapView)
    UnmodifiableMapView.name = "UnmodifiableMapView";
  $desc = $collectedClasses.UnmodifiableMapView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableMapView.prototype = $desc;
  function Maps_mapToString_closure(box_0, result_1) {
    this.box_0 = box_0;
    this.result_1 = result_1;
  }
  Maps_mapToString_closure.builtin$cls = "Maps_mapToString_closure";
  if (!"name" in Maps_mapToString_closure)
    Maps_mapToString_closure.name = "Maps_mapToString_closure";
  $desc = $collectedClasses.Maps_mapToString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Maps_mapToString_closure.prototype = $desc;
  function ListQueue(_table, _head, _tail, _modificationCount) {
    this._table = _table;
    this._head = _head;
    this._tail = _tail;
    this._modificationCount = _modificationCount;
  }
  ListQueue.builtin$cls = "ListQueue";
  if (!"name" in ListQueue)
    ListQueue.name = "ListQueue";
  $desc = $collectedClasses.ListQueue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListQueue.prototype = $desc;
  function _ListQueueIterator(_queue, _collection$_end, _modificationCount, _collection$_position, _collection$_current) {
    this._queue = _queue;
    this._collection$_end = _collection$_end;
    this._modificationCount = _modificationCount;
    this._collection$_position = _collection$_position;
    this._collection$_current = _collection$_current;
  }
  _ListQueueIterator.builtin$cls = "_ListQueueIterator";
  if (!"name" in _ListQueueIterator)
    _ListQueueIterator.name = "_ListQueueIterator";
  $desc = $collectedClasses._ListQueueIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ListQueueIterator.prototype = $desc;
  function SetMixin() {
  }
  SetMixin.builtin$cls = "SetMixin";
  if (!"name" in SetMixin)
    SetMixin.name = "SetMixin";
  $desc = $collectedClasses.SetMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SetMixin.prototype = $desc;
  function SetBase() {
  }
  SetBase.builtin$cls = "SetBase";
  if (!"name" in SetBase)
    SetBase.name = "SetBase";
  $desc = $collectedClasses.SetBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SetBase.prototype = $desc;
  function _JsonMap(_original, _processed, _data) {
    this._original = _original;
    this._processed = _processed;
    this._data = _data;
  }
  _JsonMap.builtin$cls = "_JsonMap";
  if (!"name" in _JsonMap)
    _JsonMap.name = "_JsonMap";
  $desc = $collectedClasses._JsonMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsonMap.prototype = $desc;
  function _JsonMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _JsonMap_values_closure.builtin$cls = "_JsonMap_values_closure";
  if (!"name" in _JsonMap_values_closure)
    _JsonMap_values_closure.name = "_JsonMap_values_closure";
  $desc = $collectedClasses._JsonMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsonMap_values_closure.prototype = $desc;
  function _JsonMap_addAll_closure(this_0) {
    this.this_0 = this_0;
  }
  _JsonMap_addAll_closure.builtin$cls = "_JsonMap_addAll_closure";
  if (!"name" in _JsonMap_addAll_closure)
    _JsonMap_addAll_closure.name = "_JsonMap_addAll_closure";
  $desc = $collectedClasses._JsonMap_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsonMap_addAll_closure.prototype = $desc;
  function Codec() {
  }
  Codec.builtin$cls = "Codec";
  if (!"name" in Codec)
    Codec.name = "Codec";
  $desc = $collectedClasses.Codec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Codec.prototype = $desc;
  function Converter() {
  }
  Converter.builtin$cls = "Converter";
  if (!"name" in Converter)
    Converter.name = "Converter";
  $desc = $collectedClasses.Converter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Converter.prototype = $desc;
  function Encoding() {
  }
  Encoding.builtin$cls = "Encoding";
  if (!"name" in Encoding)
    Encoding.name = "Encoding";
  $desc = $collectedClasses.Encoding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Encoding.prototype = $desc;
  function HtmlEscapeMode(_convert$_name, escapeLtGt, escapeQuot, escapeApos, escapeSlash) {
    this._convert$_name = _convert$_name;
    this.escapeLtGt = escapeLtGt;
    this.escapeQuot = escapeQuot;
    this.escapeApos = escapeApos;
    this.escapeSlash = escapeSlash;
  }
  HtmlEscapeMode.builtin$cls = "HtmlEscapeMode";
  if (!"name" in HtmlEscapeMode)
    HtmlEscapeMode.name = "HtmlEscapeMode";
  $desc = $collectedClasses.HtmlEscapeMode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlEscapeMode.prototype = $desc;
  function HtmlEscape(mode) {
    this.mode = mode;
  }
  HtmlEscape.builtin$cls = "HtmlEscape";
  if (!"name" in HtmlEscape)
    HtmlEscape.name = "HtmlEscape";
  $desc = $collectedClasses.HtmlEscape;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlEscape.prototype = $desc;
  function JsonCodec(_reviver, _toEncodable) {
    this._reviver = _reviver;
    this._toEncodable = _toEncodable;
  }
  JsonCodec.builtin$cls = "JsonCodec";
  if (!"name" in JsonCodec)
    JsonCodec.name = "JsonCodec";
  $desc = $collectedClasses.JsonCodec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsonCodec.prototype = $desc;
  function JsonDecoder(_reviver) {
    this._reviver = _reviver;
  }
  JsonDecoder.builtin$cls = "JsonDecoder";
  if (!"name" in JsonDecoder)
    JsonDecoder.name = "JsonDecoder";
  $desc = $collectedClasses.JsonDecoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsonDecoder.prototype = $desc;
  function Utf8Codec(_allowMalformed) {
    this._allowMalformed = _allowMalformed;
  }
  Utf8Codec.builtin$cls = "Utf8Codec";
  if (!"name" in Utf8Codec)
    Utf8Codec.name = "Utf8Codec";
  $desc = $collectedClasses.Utf8Codec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Utf8Codec.prototype = $desc;
  function Utf8Encoder() {
  }
  Utf8Encoder.builtin$cls = "Utf8Encoder";
  if (!"name" in Utf8Encoder)
    Utf8Encoder.name = "Utf8Encoder";
  $desc = $collectedClasses.Utf8Encoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Utf8Encoder.prototype = $desc;
  function _Utf8Encoder(_carry, _bufferIndex, _buffer) {
    this._carry = _carry;
    this._bufferIndex = _bufferIndex;
    this._buffer = _buffer;
  }
  _Utf8Encoder.builtin$cls = "_Utf8Encoder";
  if (!"name" in _Utf8Encoder)
    _Utf8Encoder.name = "_Utf8Encoder";
  $desc = $collectedClasses._Utf8Encoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Utf8Encoder.prototype = $desc;
  function Utf8Decoder(_allowMalformed) {
    this._allowMalformed = _allowMalformed;
  }
  Utf8Decoder.builtin$cls = "Utf8Decoder";
  if (!"name" in Utf8Decoder)
    Utf8Decoder.name = "Utf8Decoder";
  $desc = $collectedClasses.Utf8Decoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Utf8Decoder.prototype = $desc;
  function _Utf8Decoder(_allowMalformed, _stringSink, _isFirstCharacter, _convert$_value, _expectedUnits, _extraUnits) {
    this._allowMalformed = _allowMalformed;
    this._stringSink = _stringSink;
    this._isFirstCharacter = _isFirstCharacter;
    this._convert$_value = _convert$_value;
    this._expectedUnits = _expectedUnits;
    this._extraUnits = _extraUnits;
  }
  _Utf8Decoder.builtin$cls = "_Utf8Decoder";
  if (!"name" in _Utf8Decoder)
    _Utf8Decoder.name = "_Utf8Decoder";
  $desc = $collectedClasses._Utf8Decoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Utf8Decoder.prototype = $desc;
  function _Utf8Decoder_convert_scanOneByteCharacters(endIndex_0) {
    this.endIndex_0 = endIndex_0;
  }
  _Utf8Decoder_convert_scanOneByteCharacters.builtin$cls = "_Utf8Decoder_convert_scanOneByteCharacters";
  if (!"name" in _Utf8Decoder_convert_scanOneByteCharacters)
    _Utf8Decoder_convert_scanOneByteCharacters.name = "_Utf8Decoder_convert_scanOneByteCharacters";
  $desc = $collectedClasses._Utf8Decoder_convert_scanOneByteCharacters;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Utf8Decoder_convert_scanOneByteCharacters.prototype = $desc;
  function _Utf8Decoder_convert_addSingleBytes(this_1, codeUnits_2, startIndex_3, endIndex_4) {
    this.this_1 = this_1;
    this.codeUnits_2 = codeUnits_2;
    this.startIndex_3 = startIndex_3;
    this.endIndex_4 = endIndex_4;
  }
  _Utf8Decoder_convert_addSingleBytes.builtin$cls = "_Utf8Decoder_convert_addSingleBytes";
  if (!"name" in _Utf8Decoder_convert_addSingleBytes)
    _Utf8Decoder_convert_addSingleBytes.name = "_Utf8Decoder_convert_addSingleBytes";
  $desc = $collectedClasses._Utf8Decoder_convert_addSingleBytes;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Utf8Decoder_convert_addSingleBytes.prototype = $desc;
  function Function__toMangledNames_closure(result_0) {
    this.result_0 = result_0;
  }
  Function__toMangledNames_closure.builtin$cls = "Function__toMangledNames_closure";
  if (!"name" in Function__toMangledNames_closure)
    Function__toMangledNames_closure.name = "Function__toMangledNames_closure";
  $desc = $collectedClasses.Function__toMangledNames_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Function__toMangledNames_closure.prototype = $desc;
  function NoSuchMethodError_toString_closure(box_0) {
    this.box_0 = box_0;
  }
  NoSuchMethodError_toString_closure.builtin$cls = "NoSuchMethodError_toString_closure";
  if (!"name" in NoSuchMethodError_toString_closure)
    NoSuchMethodError_toString_closure.name = "NoSuchMethodError_toString_closure";
  $desc = $collectedClasses.NoSuchMethodError_toString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoSuchMethodError_toString_closure.prototype = $desc;
  function Deprecated(expires) {
    this.expires = expires;
  }
  Deprecated.builtin$cls = "Deprecated";
  if (!"name" in Deprecated)
    Deprecated.name = "Deprecated";
  $desc = $collectedClasses.Deprecated;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Deprecated.prototype = $desc;
  function _Override() {
  }
  _Override.builtin$cls = "_Override";
  if (!"name" in _Override)
    _Override.name = "_Override";
  $desc = $collectedClasses._Override;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Override.prototype = $desc;
  function _Proxy() {
  }
  _Proxy.builtin$cls = "_Proxy";
  if (!"name" in _Proxy)
    _Proxy.name = "_Proxy";
  $desc = $collectedClasses._Proxy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Proxy.prototype = $desc;
  function bool() {
  }
  bool.builtin$cls = "bool";
  if (!"name" in bool)
    bool.name = "bool";
  $desc = $collectedClasses.bool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  bool.prototype = $desc;
  function Comparable() {
  }
  Comparable.builtin$cls = "Comparable";
  if (!"name" in Comparable)
    Comparable.name = "Comparable";
  $desc = $collectedClasses.Comparable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comparable.prototype = $desc;
  function DateTime(millisecondsSinceEpoch, isUtc) {
    this.millisecondsSinceEpoch = millisecondsSinceEpoch;
    this.isUtc = isUtc;
  }
  DateTime.builtin$cls = "DateTime";
  if (!"name" in DateTime)
    DateTime.name = "DateTime";
  $desc = $collectedClasses.DateTime;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime.prototype = $desc;
  DateTime.prototype.get$millisecondsSinceEpoch = function() {
    return this.millisecondsSinceEpoch;
  };
  function DateTime_parse_parseIntOrZero() {
  }
  DateTime_parse_parseIntOrZero.builtin$cls = "DateTime_parse_parseIntOrZero";
  if (!"name" in DateTime_parse_parseIntOrZero)
    DateTime_parse_parseIntOrZero.name = "DateTime_parse_parseIntOrZero";
  $desc = $collectedClasses.DateTime_parse_parseIntOrZero;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime_parse_parseIntOrZero.prototype = $desc;
  function DateTime_parse_parseDoubleOrZero() {
  }
  DateTime_parse_parseDoubleOrZero.builtin$cls = "DateTime_parse_parseDoubleOrZero";
  if (!"name" in DateTime_parse_parseDoubleOrZero)
    DateTime_parse_parseDoubleOrZero.name = "DateTime_parse_parseDoubleOrZero";
  $desc = $collectedClasses.DateTime_parse_parseDoubleOrZero;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime_parse_parseDoubleOrZero.prototype = $desc;
  function $double() {
  }
  $double.builtin$cls = "$double";
  if (!"name" in $double)
    $double.name = "$double";
  $desc = $collectedClasses.$double;
  if ($desc instanceof Array)
    $desc = $desc[1];
  $double.prototype = $desc;
  function Duration(_core$_duration) {
    this._core$_duration = _core$_duration;
  }
  Duration.builtin$cls = "Duration";
  if (!"name" in Duration)
    Duration.name = "Duration";
  $desc = $collectedClasses.Duration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration.prototype = $desc;
  Duration.prototype.get$_core$_duration = function() {
    return this._core$_duration;
  };
  function Duration_toString_sixDigits() {
  }
  Duration_toString_sixDigits.builtin$cls = "Duration_toString_sixDigits";
  if (!"name" in Duration_toString_sixDigits)
    Duration_toString_sixDigits.name = "Duration_toString_sixDigits";
  $desc = $collectedClasses.Duration_toString_sixDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_sixDigits.prototype = $desc;
  function Duration_toString_twoDigits() {
  }
  Duration_toString_twoDigits.builtin$cls = "Duration_toString_twoDigits";
  if (!"name" in Duration_toString_twoDigits)
    Duration_toString_twoDigits.name = "Duration_toString_twoDigits";
  $desc = $collectedClasses.Duration_toString_twoDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_twoDigits.prototype = $desc;
  function Error() {
  }
  Error.builtin$cls = "Error";
  if (!"name" in Error)
    Error.name = "Error";
  $desc = $collectedClasses.Error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Error.prototype = $desc;
  function NullThrownError() {
  }
  NullThrownError.builtin$cls = "NullThrownError";
  if (!"name" in NullThrownError)
    NullThrownError.name = "NullThrownError";
  $desc = $collectedClasses.NullThrownError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullThrownError.prototype = $desc;
  function ArgumentError(message) {
    this.message = message;
  }
  ArgumentError.builtin$cls = "ArgumentError";
  if (!"name" in ArgumentError)
    ArgumentError.name = "ArgumentError";
  $desc = $collectedClasses.ArgumentError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ArgumentError.prototype = $desc;
  ArgumentError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function RangeError(message) {
    this.message = message;
  }
  RangeError.builtin$cls = "RangeError";
  if (!"name" in RangeError)
    RangeError.name = "RangeError";
  $desc = $collectedClasses.RangeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RangeError.prototype = $desc;
  function NoSuchMethodError(_core$_receiver, _memberName, _core$_arguments, _namedArguments, _existingArgumentNames) {
    this._core$_receiver = _core$_receiver;
    this._memberName = _memberName;
    this._core$_arguments = _core$_arguments;
    this._namedArguments = _namedArguments;
    this._existingArgumentNames = _existingArgumentNames;
  }
  NoSuchMethodError.builtin$cls = "NoSuchMethodError";
  if (!"name" in NoSuchMethodError)
    NoSuchMethodError.name = "NoSuchMethodError";
  $desc = $collectedClasses.NoSuchMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoSuchMethodError.prototype = $desc;
  function UnsupportedError(message) {
    this.message = message;
  }
  UnsupportedError.builtin$cls = "UnsupportedError";
  if (!"name" in UnsupportedError)
    UnsupportedError.name = "UnsupportedError";
  $desc = $collectedClasses.UnsupportedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnsupportedError.prototype = $desc;
  UnsupportedError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function UnimplementedError(message) {
    this.message = message;
  }
  UnimplementedError.builtin$cls = "UnimplementedError";
  if (!"name" in UnimplementedError)
    UnimplementedError.name = "UnimplementedError";
  $desc = $collectedClasses.UnimplementedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnimplementedError.prototype = $desc;
  UnimplementedError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function StateError(message) {
    this.message = message;
  }
  StateError.builtin$cls = "StateError";
  if (!"name" in StateError)
    StateError.name = "StateError";
  $desc = $collectedClasses.StateError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StateError.prototype = $desc;
  StateError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function ConcurrentModificationError(modifiedObject) {
    this.modifiedObject = modifiedObject;
  }
  ConcurrentModificationError.builtin$cls = "ConcurrentModificationError";
  if (!"name" in ConcurrentModificationError)
    ConcurrentModificationError.name = "ConcurrentModificationError";
  $desc = $collectedClasses.ConcurrentModificationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConcurrentModificationError.prototype = $desc;
  function OutOfMemoryError() {
  }
  OutOfMemoryError.builtin$cls = "OutOfMemoryError";
  if (!"name" in OutOfMemoryError)
    OutOfMemoryError.name = "OutOfMemoryError";
  $desc = $collectedClasses.OutOfMemoryError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OutOfMemoryError.prototype = $desc;
  function StackOverflowError() {
  }
  StackOverflowError.builtin$cls = "StackOverflowError";
  if (!"name" in StackOverflowError)
    StackOverflowError.name = "StackOverflowError";
  $desc = $collectedClasses.StackOverflowError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackOverflowError.prototype = $desc;
  function CyclicInitializationError(variableName) {
    this.variableName = variableName;
  }
  CyclicInitializationError.builtin$cls = "CyclicInitializationError";
  if (!"name" in CyclicInitializationError)
    CyclicInitializationError.name = "CyclicInitializationError";
  $desc = $collectedClasses.CyclicInitializationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CyclicInitializationError.prototype = $desc;
  function _ExceptionImplementation(message) {
    this.message = message;
  }
  _ExceptionImplementation.builtin$cls = "_ExceptionImplementation";
  if (!"name" in _ExceptionImplementation)
    _ExceptionImplementation.name = "_ExceptionImplementation";
  $desc = $collectedClasses._ExceptionImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ExceptionImplementation.prototype = $desc;
  _ExceptionImplementation.prototype.get$message = function(receiver) {
    return this.message;
  };
  function FormatException(message, source, offset) {
    this.message = message;
    this.source = source;
    this.offset = offset;
  }
  FormatException.builtin$cls = "FormatException";
  if (!"name" in FormatException)
    FormatException.name = "FormatException";
  $desc = $collectedClasses.FormatException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormatException.prototype = $desc;
  FormatException.prototype.get$message = function(receiver) {
    return this.message;
  };
  FormatException.prototype.get$offset = function(receiver) {
    return this.offset;
  };
  function IntegerDivisionByZeroException() {
  }
  IntegerDivisionByZeroException.builtin$cls = "IntegerDivisionByZeroException";
  if (!"name" in IntegerDivisionByZeroException)
    IntegerDivisionByZeroException.name = "IntegerDivisionByZeroException";
  $desc = $collectedClasses.IntegerDivisionByZeroException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IntegerDivisionByZeroException.prototype = $desc;
  function Expando(name) {
    this.name = name;
  }
  Expando.builtin$cls = "Expando";
  if (!"name" in Expando)
    Expando.name = "Expando";
  $desc = $collectedClasses.Expando;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Expando.prototype = $desc;
  Expando.prototype.get$name = function(receiver) {
    return this.name;
  };
  function Function() {
  }
  Function.builtin$cls = "Function";
  if (!"name" in Function)
    Function.name = "Function";
  $desc = $collectedClasses.Function;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Function.prototype = $desc;
  function $int() {
  }
  $int.builtin$cls = "$int";
  if (!"name" in $int)
    $int.name = "$int";
  $desc = $collectedClasses.$int;
  if ($desc instanceof Array)
    $desc = $desc[1];
  $int.prototype = $desc;
  function Invocation() {
  }
  Invocation.builtin$cls = "Invocation";
  if (!"name" in Invocation)
    Invocation.name = "Invocation";
  $desc = $collectedClasses.Invocation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Invocation.prototype = $desc;
  function Iterable() {
  }
  Iterable.builtin$cls = "Iterable";
  if (!"name" in Iterable)
    Iterable.name = "Iterable";
  $desc = $collectedClasses.Iterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Iterable.prototype = $desc;
  function Iterator() {
  }
  Iterator.builtin$cls = "Iterator";
  if (!"name" in Iterator)
    Iterator.name = "Iterator";
  $desc = $collectedClasses.Iterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Iterator.prototype = $desc;
  function List() {
  }
  List.builtin$cls = "List";
  if (!"name" in List)
    List.name = "List";
  $desc = $collectedClasses.List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  List.prototype = $desc;
  function Map() {
  }
  Map.builtin$cls = "Map";
  if (!"name" in Map)
    Map.name = "Map";
  $desc = $collectedClasses.Map;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Map.prototype = $desc;
  function Null() {
  }
  Null.builtin$cls = "Null";
  if (!"name" in Null)
    Null.name = "Null";
  $desc = $collectedClasses.Null;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Null.prototype = $desc;
  function num() {
  }
  num.builtin$cls = "num";
  if (!"name" in num)
    num.name = "num";
  $desc = $collectedClasses.num;
  if ($desc instanceof Array)
    $desc = $desc[1];
  num.prototype = $desc;
  function Object() {
  }
  Object.builtin$cls = "Object";
  if (!"name" in Object)
    Object.name = "Object";
  $desc = $collectedClasses.Object;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object.prototype = $desc;
  function Match() {
  }
  Match.builtin$cls = "Match";
  if (!"name" in Match)
    Match.name = "Match";
  $desc = $collectedClasses.Match;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Match.prototype = $desc;
  function RegExp() {
  }
  RegExp.builtin$cls = "RegExp";
  if (!"name" in RegExp)
    RegExp.name = "RegExp";
  $desc = $collectedClasses.RegExp;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RegExp.prototype = $desc;
  function StackTrace() {
  }
  StackTrace.builtin$cls = "StackTrace";
  if (!"name" in StackTrace)
    StackTrace.name = "StackTrace";
  $desc = $collectedClasses.StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackTrace.prototype = $desc;
  function String() {
  }
  String.builtin$cls = "String";
  if (!"name" in String)
    String.name = "String";
  $desc = $collectedClasses.String;
  if ($desc instanceof Array)
    $desc = $desc[1];
  String.prototype = $desc;
  function RuneIterator(string, _core$_position, _nextPosition, _currentCodePoint) {
    this.string = string;
    this._core$_position = _core$_position;
    this._nextPosition = _nextPosition;
    this._currentCodePoint = _currentCodePoint;
  }
  RuneIterator.builtin$cls = "RuneIterator";
  if (!"name" in RuneIterator)
    RuneIterator.name = "RuneIterator";
  $desc = $collectedClasses.RuneIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuneIterator.prototype = $desc;
  function StringBuffer(_contents) {
    this._contents = _contents;
  }
  StringBuffer.builtin$cls = "StringBuffer";
  if (!"name" in StringBuffer)
    StringBuffer.name = "StringBuffer";
  $desc = $collectedClasses.StringBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringBuffer.prototype = $desc;
  StringBuffer.prototype.get$_contents = function() {
    return this._contents;
  };
  function Symbol0() {
  }
  Symbol0.builtin$cls = "Symbol0";
  if (!"name" in Symbol0)
    Symbol0.name = "Symbol0";
  $desc = $collectedClasses.Symbol0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Symbol0.prototype = $desc;
  function Type() {
  }
  Type.builtin$cls = "Type";
  if (!"name" in Type)
    Type.name = "Type";
  $desc = $collectedClasses.Type;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Type.prototype = $desc;
  function Uri(_host, _port, _path, scheme, _userInfo, _query, _fragment, _pathSegments, _queryParameters) {
    this._host = _host;
    this._port = _port;
    this._path = _path;
    this.scheme = scheme;
    this._userInfo = _userInfo;
    this._query = _query;
    this._fragment = _fragment;
    this._pathSegments = _pathSegments;
    this._queryParameters = _queryParameters;
  }
  Uri.builtin$cls = "Uri";
  if (!"name" in Uri)
    Uri.name = "Uri";
  $desc = $collectedClasses.Uri;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri.prototype = $desc;
  function Uri_parse_isRegName() {
  }
  Uri_parse_isRegName.builtin$cls = "Uri_parse_isRegName";
  if (!"name" in Uri_parse_isRegName)
    Uri_parse_isRegName.name = "Uri_parse_isRegName";
  $desc = $collectedClasses.Uri_parse_isRegName;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parse_isRegName.prototype = $desc;
  function Uri_parse_parseAuth(box_0, uri_1, EOI_2) {
    this.box_0 = box_0;
    this.uri_1 = uri_1;
    this.EOI_2 = EOI_2;
  }
  Uri_parse_parseAuth.builtin$cls = "Uri_parse_parseAuth";
  if (!"name" in Uri_parse_parseAuth)
    Uri_parse_parseAuth.name = "Uri_parse_parseAuth";
  $desc = $collectedClasses.Uri_parse_parseAuth;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parse_parseAuth.prototype = $desc;
  function Uri__checkNonWindowsPathReservedCharacters_closure(argumentError_0) {
    this.argumentError_0 = argumentError_0;
  }
  Uri__checkNonWindowsPathReservedCharacters_closure.builtin$cls = "Uri__checkNonWindowsPathReservedCharacters_closure";
  if (!"name" in Uri__checkNonWindowsPathReservedCharacters_closure)
    Uri__checkNonWindowsPathReservedCharacters_closure.name = "Uri__checkNonWindowsPathReservedCharacters_closure";
  $desc = $collectedClasses.Uri__checkNonWindowsPathReservedCharacters_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__checkNonWindowsPathReservedCharacters_closure.prototype = $desc;
  function Uri__makePath_closure() {
  }
  Uri__makePath_closure.builtin$cls = "Uri__makePath_closure";
  if (!"name" in Uri__makePath_closure)
    Uri__makePath_closure.name = "Uri__makePath_closure";
  $desc = $collectedClasses.Uri__makePath_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__makePath_closure.prototype = $desc;
  function Uri__makeQuery_closure(box_0, result_1) {
    this.box_0 = box_0;
    this.result_1 = result_1;
  }
  Uri__makeQuery_closure.builtin$cls = "Uri__makeQuery_closure";
  if (!"name" in Uri__makeQuery_closure)
    Uri__makeQuery_closure.name = "Uri__makeQuery_closure";
  $desc = $collectedClasses.Uri__makeQuery_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__makeQuery_closure.prototype = $desc;
  function Uri_hashCode_combine() {
  }
  Uri_hashCode_combine.builtin$cls = "Uri_hashCode_combine";
  if (!"name" in Uri_hashCode_combine)
    Uri_hashCode_combine.name = "Uri_hashCode_combine";
  $desc = $collectedClasses.Uri_hashCode_combine;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_hashCode_combine.prototype = $desc;
  function Uri_parseIPv4Address_error() {
  }
  Uri_parseIPv4Address_error.builtin$cls = "Uri_parseIPv4Address_error";
  if (!"name" in Uri_parseIPv4Address_error)
    Uri_parseIPv4Address_error.name = "Uri_parseIPv4Address_error";
  $desc = $collectedClasses.Uri_parseIPv4Address_error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv4Address_error.prototype = $desc;
  function Uri_parseIPv4Address_closure(error_0) {
    this.error_0 = error_0;
  }
  Uri_parseIPv4Address_closure.builtin$cls = "Uri_parseIPv4Address_closure";
  if (!"name" in Uri_parseIPv4Address_closure)
    Uri_parseIPv4Address_closure.name = "Uri_parseIPv4Address_closure";
  $desc = $collectedClasses.Uri_parseIPv4Address_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv4Address_closure.prototype = $desc;
  function Uri_parseIPv6Address_error(host_0) {
    this.host_0 = host_0;
  }
  Uri_parseIPv6Address_error.builtin$cls = "Uri_parseIPv6Address_error";
  if (!"name" in Uri_parseIPv6Address_error)
    Uri_parseIPv6Address_error.name = "Uri_parseIPv6Address_error";
  $desc = $collectedClasses.Uri_parseIPv6Address_error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv6Address_error.prototype = $desc;
  function Uri_parseIPv6Address_parseHex(host_1, error_2) {
    this.host_1 = host_1;
    this.error_2 = error_2;
  }
  Uri_parseIPv6Address_parseHex.builtin$cls = "Uri_parseIPv6Address_parseHex";
  if (!"name" in Uri_parseIPv6Address_parseHex)
    Uri_parseIPv6Address_parseHex.name = "Uri_parseIPv6Address_parseHex";
  $desc = $collectedClasses.Uri_parseIPv6Address_parseHex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv6Address_parseHex.prototype = $desc;
  function Uri__uriEncode_byteToHex() {
  }
  Uri__uriEncode_byteToHex.builtin$cls = "Uri__uriEncode_byteToHex";
  if (!"name" in Uri__uriEncode_byteToHex)
    Uri__uriEncode_byteToHex.name = "Uri__uriEncode_byteToHex";
  $desc = $collectedClasses.Uri__uriEncode_byteToHex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__uriEncode_byteToHex.prototype = $desc;
  function Interceptor_CssStyleDeclarationBase() {
  }
  Interceptor_CssStyleDeclarationBase.builtin$cls = "Interceptor_CssStyleDeclarationBase";
  if (!"name" in Interceptor_CssStyleDeclarationBase)
    Interceptor_CssStyleDeclarationBase.name = "Interceptor_CssStyleDeclarationBase";
  $desc = $collectedClasses.Interceptor_CssStyleDeclarationBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_CssStyleDeclarationBase.prototype = $desc;
  function CssStyleDeclarationBase() {
  }
  CssStyleDeclarationBase.builtin$cls = "CssStyleDeclarationBase";
  if (!"name" in CssStyleDeclarationBase)
    CssStyleDeclarationBase.name = "CssStyleDeclarationBase";
  $desc = $collectedClasses.CssStyleDeclarationBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssStyleDeclarationBase.prototype = $desc;
  function _FrozenElementList(_nodeList, _elementList) {
    this._nodeList = _nodeList;
    this._elementList = _elementList;
  }
  _FrozenElementList.builtin$cls = "_FrozenElementList";
  if (!"name" in _FrozenElementList)
    _FrozenElementList.name = "_FrozenElementList";
  $desc = $collectedClasses._FrozenElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FrozenElementList.prototype = $desc;
  function _FrozenElementList$_wrap_closure() {
  }
  _FrozenElementList$_wrap_closure.builtin$cls = "_FrozenElementList$_wrap_closure";
  if (!"name" in _FrozenElementList$_wrap_closure)
    _FrozenElementList$_wrap_closure.name = "_FrozenElementList$_wrap_closure";
  $desc = $collectedClasses._FrozenElementList$_wrap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FrozenElementList$_wrap_closure.prototype = $desc;
  function Element_Element$html_closure() {
  }
  Element_Element$html_closure.builtin$cls = "Element_Element$html_closure";
  if (!"name" in Element_Element$html_closure)
    Element_Element$html_closure.name = "Element_Element$html_closure";
  $desc = $collectedClasses.Element_Element$html_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Element_Element$html_closure.prototype = $desc;
  function Entry() {
  }
  Entry.builtin$cls = "Entry";
  if (!"name" in Entry)
    Entry.name = "Entry";
  $desc = $collectedClasses.Entry;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Entry.prototype = $desc;
  function Interceptor_ListMixin() {
  }
  Interceptor_ListMixin.builtin$cls = "Interceptor_ListMixin";
  if (!"name" in Interceptor_ListMixin)
    Interceptor_ListMixin.name = "Interceptor_ListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin() {
  }
  Interceptor_ListMixin_ImmutableListMixin.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin)
    Interceptor_ListMixin_ImmutableListMixin.name = "Interceptor_ListMixin_ImmutableListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin.prototype = $desc;
  function HttpRequest_getString_closure() {
  }
  HttpRequest_getString_closure.builtin$cls = "HttpRequest_getString_closure";
  if (!"name" in HttpRequest_getString_closure)
    HttpRequest_getString_closure.name = "HttpRequest_getString_closure";
  $desc = $collectedClasses.HttpRequest_getString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest_getString_closure.prototype = $desc;
  function HttpRequest_request_closure0(xhr_0) {
    this.xhr_0 = xhr_0;
  }
  HttpRequest_request_closure0.builtin$cls = "HttpRequest_request_closure0";
  if (!"name" in HttpRequest_request_closure0)
    HttpRequest_request_closure0.name = "HttpRequest_request_closure0";
  $desc = $collectedClasses.HttpRequest_request_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest_request_closure0.prototype = $desc;
  function HttpRequest_request_closure(completer_1, xhr_2) {
    this.completer_1 = completer_1;
    this.xhr_2 = xhr_2;
  }
  HttpRequest_request_closure.builtin$cls = "HttpRequest_request_closure";
  if (!"name" in HttpRequest_request_closure)
    HttpRequest_request_closure.name = "HttpRequest_request_closure";
  $desc = $collectedClasses.HttpRequest_request_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest_request_closure.prototype = $desc;
  function MutationObserver_observe_override(parsedOptions_0) {
    this.parsedOptions_0 = parsedOptions_0;
  }
  MutationObserver_observe_override.builtin$cls = "MutationObserver_observe_override";
  if (!"name" in MutationObserver_observe_override)
    MutationObserver_observe_override.name = "MutationObserver_observe_override";
  $desc = $collectedClasses.MutationObserver_observe_override;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MutationObserver_observe_override.prototype = $desc;
  function _ChildNodeListLazy(_this) {
    this._this = _this;
  }
  _ChildNodeListLazy.builtin$cls = "_ChildNodeListLazy";
  if (!"name" in _ChildNodeListLazy)
    _ChildNodeListLazy.name = "_ChildNodeListLazy";
  $desc = $collectedClasses._ChildNodeListLazy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ChildNodeListLazy.prototype = $desc;
  function Interceptor_ListMixin0() {
  }
  Interceptor_ListMixin0.builtin$cls = "Interceptor_ListMixin0";
  if (!"name" in Interceptor_ListMixin0)
    Interceptor_ListMixin0.name = "Interceptor_ListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin0.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin0() {
  }
  Interceptor_ListMixin_ImmutableListMixin0.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin0";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin0)
    Interceptor_ListMixin_ImmutableListMixin0.name = "Interceptor_ListMixin_ImmutableListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin0.prototype = $desc;
  function Interceptor_ListMixin1() {
  }
  Interceptor_ListMixin1.builtin$cls = "Interceptor_ListMixin1";
  if (!"name" in Interceptor_ListMixin1)
    Interceptor_ListMixin1.name = "Interceptor_ListMixin1";
  $desc = $collectedClasses.Interceptor_ListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin1.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin1() {
  }
  Interceptor_ListMixin_ImmutableListMixin1.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin1";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin1)
    Interceptor_ListMixin_ImmutableListMixin1.name = "Interceptor_ListMixin_ImmutableListMixin1";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin1.prototype = $desc;
  function _AttributeMap() {
  }
  _AttributeMap.builtin$cls = "_AttributeMap";
  if (!"name" in _AttributeMap)
    _AttributeMap.name = "_AttributeMap";
  $desc = $collectedClasses._AttributeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AttributeMap.prototype = $desc;
  function _AttributeMap_addAll_closure(this_0) {
    this.this_0 = this_0;
  }
  _AttributeMap_addAll_closure.builtin$cls = "_AttributeMap_addAll_closure";
  if (!"name" in _AttributeMap_addAll_closure)
    _AttributeMap_addAll_closure.name = "_AttributeMap_addAll_closure";
  $desc = $collectedClasses._AttributeMap_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AttributeMap_addAll_closure.prototype = $desc;
  function _ElementAttributeMap(_html$_element) {
    this._html$_element = _html$_element;
  }
  _ElementAttributeMap.builtin$cls = "_ElementAttributeMap";
  if (!"name" in _ElementAttributeMap)
    _ElementAttributeMap.name = "_ElementAttributeMap";
  $desc = $collectedClasses._ElementAttributeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementAttributeMap.prototype = $desc;
  function _MultiElementCssClassSet(_elementIterable, _elementCssClassSetIterable) {
    this._elementIterable = _elementIterable;
    this._elementCssClassSetIterable = _elementCssClassSetIterable;
  }
  _MultiElementCssClassSet.builtin$cls = "_MultiElementCssClassSet";
  if (!"name" in _MultiElementCssClassSet)
    _MultiElementCssClassSet.name = "_MultiElementCssClassSet";
  $desc = $collectedClasses._MultiElementCssClassSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet.prototype = $desc;
  function _MultiElementCssClassSet_closure() {
  }
  _MultiElementCssClassSet_closure.builtin$cls = "_MultiElementCssClassSet_closure";
  if (!"name" in _MultiElementCssClassSet_closure)
    _MultiElementCssClassSet_closure.name = "_MultiElementCssClassSet_closure";
  $desc = $collectedClasses._MultiElementCssClassSet_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet_closure.prototype = $desc;
  function _MultiElementCssClassSet_readClasses_closure(s_0) {
    this.s_0 = s_0;
  }
  _MultiElementCssClassSet_readClasses_closure.builtin$cls = "_MultiElementCssClassSet_readClasses_closure";
  if (!"name" in _MultiElementCssClassSet_readClasses_closure)
    _MultiElementCssClassSet_readClasses_closure.name = "_MultiElementCssClassSet_readClasses_closure";
  $desc = $collectedClasses._MultiElementCssClassSet_readClasses_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet_readClasses_closure.prototype = $desc;
  function _MultiElementCssClassSet_modify_closure(f_0) {
    this.f_0 = f_0;
  }
  _MultiElementCssClassSet_modify_closure.builtin$cls = "_MultiElementCssClassSet_modify_closure";
  if (!"name" in _MultiElementCssClassSet_modify_closure)
    _MultiElementCssClassSet_modify_closure.name = "_MultiElementCssClassSet_modify_closure";
  $desc = $collectedClasses._MultiElementCssClassSet_modify_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet_modify_closure.prototype = $desc;
  function _MultiElementCssClassSet_toggle_closure(value_0, shouldAdd_1) {
    this.value_0 = value_0;
    this.shouldAdd_1 = shouldAdd_1;
  }
  _MultiElementCssClassSet_toggle_closure.builtin$cls = "_MultiElementCssClassSet_toggle_closure";
  if (!"name" in _MultiElementCssClassSet_toggle_closure)
    _MultiElementCssClassSet_toggle_closure.name = "_MultiElementCssClassSet_toggle_closure";
  $desc = $collectedClasses._MultiElementCssClassSet_toggle_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet_toggle_closure.prototype = $desc;
  function _MultiElementCssClassSet_remove_closure(value_0) {
    this.value_0 = value_0;
  }
  _MultiElementCssClassSet_remove_closure.builtin$cls = "_MultiElementCssClassSet_remove_closure";
  if (!"name" in _MultiElementCssClassSet_remove_closure)
    _MultiElementCssClassSet_remove_closure.name = "_MultiElementCssClassSet_remove_closure";
  $desc = $collectedClasses._MultiElementCssClassSet_remove_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet_remove_closure.prototype = $desc;
  function _MultiElementCssClassSet__modifyWithReturnValue_closure(f_0) {
    this.f_0 = f_0;
  }
  _MultiElementCssClassSet__modifyWithReturnValue_closure.builtin$cls = "_MultiElementCssClassSet__modifyWithReturnValue_closure";
  if (!"name" in _MultiElementCssClassSet__modifyWithReturnValue_closure)
    _MultiElementCssClassSet__modifyWithReturnValue_closure.name = "_MultiElementCssClassSet__modifyWithReturnValue_closure";
  $desc = $collectedClasses._MultiElementCssClassSet__modifyWithReturnValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet__modifyWithReturnValue_closure.prototype = $desc;
  function _ElementCssClassSet(_html$_element) {
    this._html$_element = _html$_element;
  }
  _ElementCssClassSet.builtin$cls = "_ElementCssClassSet";
  if (!"name" in _ElementCssClassSet)
    _ElementCssClassSet.name = "_ElementCssClassSet";
  $desc = $collectedClasses._ElementCssClassSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementCssClassSet.prototype = $desc;
  function EventStreamProvider(_eventType) {
    this._eventType = _eventType;
  }
  EventStreamProvider.builtin$cls = "EventStreamProvider";
  if (!"name" in EventStreamProvider)
    EventStreamProvider.name = "EventStreamProvider";
  $desc = $collectedClasses.EventStreamProvider;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventStreamProvider.prototype = $desc;
  function _EventStream(_html$_target, _eventType, _useCapture) {
    this._html$_target = _html$_target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _EventStream.builtin$cls = "_EventStream";
  if (!"name" in _EventStream)
    _EventStream.name = "_EventStream";
  $desc = $collectedClasses._EventStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStream.prototype = $desc;
  function _ElementEventStreamImpl(_html$_target, _eventType, _useCapture) {
    this._html$_target = _html$_target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _ElementEventStreamImpl.builtin$cls = "_ElementEventStreamImpl";
  if (!"name" in _ElementEventStreamImpl)
    _ElementEventStreamImpl.name = "_ElementEventStreamImpl";
  $desc = $collectedClasses._ElementEventStreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementEventStreamImpl.prototype = $desc;
  function _ElementEventStreamImpl_matches_closure(selector_0) {
    this.selector_0 = selector_0;
  }
  _ElementEventStreamImpl_matches_closure.builtin$cls = "_ElementEventStreamImpl_matches_closure";
  if (!"name" in _ElementEventStreamImpl_matches_closure)
    _ElementEventStreamImpl_matches_closure.name = "_ElementEventStreamImpl_matches_closure";
  $desc = $collectedClasses._ElementEventStreamImpl_matches_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementEventStreamImpl_matches_closure.prototype = $desc;
  function _ElementEventStreamImpl_matches_closure0(selector_1) {
    this.selector_1 = selector_1;
  }
  _ElementEventStreamImpl_matches_closure0.builtin$cls = "_ElementEventStreamImpl_matches_closure0";
  if (!"name" in _ElementEventStreamImpl_matches_closure0)
    _ElementEventStreamImpl_matches_closure0.name = "_ElementEventStreamImpl_matches_closure0";
  $desc = $collectedClasses._ElementEventStreamImpl_matches_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementEventStreamImpl_matches_closure0.prototype = $desc;
  function _ElementListEventStreamImpl(_targetList, _useCapture, _eventType) {
    this._targetList = _targetList;
    this._useCapture = _useCapture;
    this._eventType = _eventType;
  }
  _ElementListEventStreamImpl.builtin$cls = "_ElementListEventStreamImpl";
  if (!"name" in _ElementListEventStreamImpl)
    _ElementListEventStreamImpl.name = "_ElementListEventStreamImpl";
  $desc = $collectedClasses._ElementListEventStreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementListEventStreamImpl.prototype = $desc;
  function _ElementListEventStreamImpl_matches_closure(selector_0) {
    this.selector_0 = selector_0;
  }
  _ElementListEventStreamImpl_matches_closure.builtin$cls = "_ElementListEventStreamImpl_matches_closure";
  if (!"name" in _ElementListEventStreamImpl_matches_closure)
    _ElementListEventStreamImpl_matches_closure.name = "_ElementListEventStreamImpl_matches_closure";
  $desc = $collectedClasses._ElementListEventStreamImpl_matches_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementListEventStreamImpl_matches_closure.prototype = $desc;
  function _ElementListEventStreamImpl_matches_closure0(selector_1) {
    this.selector_1 = selector_1;
  }
  _ElementListEventStreamImpl_matches_closure0.builtin$cls = "_ElementListEventStreamImpl_matches_closure0";
  if (!"name" in _ElementListEventStreamImpl_matches_closure0)
    _ElementListEventStreamImpl_matches_closure0.name = "_ElementListEventStreamImpl_matches_closure0";
  $desc = $collectedClasses._ElementListEventStreamImpl_matches_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementListEventStreamImpl_matches_closure0.prototype = $desc;
  function _EventStreamSubscription(_pauseCount, _html$_target, _eventType, _html$_onData, _useCapture) {
    this._pauseCount = _pauseCount;
    this._html$_target = _html$_target;
    this._eventType = _eventType;
    this._html$_onData = _html$_onData;
    this._useCapture = _useCapture;
  }
  _EventStreamSubscription.builtin$cls = "_EventStreamSubscription";
  if (!"name" in _EventStreamSubscription)
    _EventStreamSubscription.name = "_EventStreamSubscription";
  $desc = $collectedClasses._EventStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStreamSubscription.prototype = $desc;
  function _StreamPool(_html$_controller, _subscriptions) {
    this._html$_controller = _html$_controller;
    this._subscriptions = _subscriptions;
  }
  _StreamPool.builtin$cls = "_StreamPool";
  if (!"name" in _StreamPool)
    _StreamPool.name = "_StreamPool";
  $desc = $collectedClasses._StreamPool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamPool.prototype = $desc;
  function _StreamPool_add_closure(this_0, stream_1) {
    this.this_0 = this_0;
    this.stream_1 = stream_1;
  }
  _StreamPool_add_closure.builtin$cls = "_StreamPool_add_closure";
  if (!"name" in _StreamPool_add_closure)
    _StreamPool_add_closure.name = "_StreamPool_add_closure";
  $desc = $collectedClasses._StreamPool_add_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamPool_add_closure.prototype = $desc;
  function _Html5NodeValidator(uriPolicy) {
    this.uriPolicy = uriPolicy;
  }
  _Html5NodeValidator.builtin$cls = "_Html5NodeValidator";
  if (!"name" in _Html5NodeValidator)
    _Html5NodeValidator.name = "_Html5NodeValidator";
  $desc = $collectedClasses._Html5NodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Html5NodeValidator.prototype = $desc;
  _Html5NodeValidator.prototype.get$uriPolicy = function() {
    return this.uriPolicy;
  };
  function ImmutableListMixin() {
  }
  ImmutableListMixin.builtin$cls = "ImmutableListMixin";
  if (!"name" in ImmutableListMixin)
    ImmutableListMixin.name = "ImmutableListMixin";
  $desc = $collectedClasses.ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImmutableListMixin.prototype = $desc;
  function NodeValidatorBuilder(_validators) {
    this._validators = _validators;
  }
  NodeValidatorBuilder.builtin$cls = "NodeValidatorBuilder";
  if (!"name" in NodeValidatorBuilder)
    NodeValidatorBuilder.name = "NodeValidatorBuilder";
  $desc = $collectedClasses.NodeValidatorBuilder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder.prototype = $desc;
  function NodeValidatorBuilder_allowsElement_closure(element_0) {
    this.element_0 = element_0;
  }
  NodeValidatorBuilder_allowsElement_closure.builtin$cls = "NodeValidatorBuilder_allowsElement_closure";
  if (!"name" in NodeValidatorBuilder_allowsElement_closure)
    NodeValidatorBuilder_allowsElement_closure.name = "NodeValidatorBuilder_allowsElement_closure";
  $desc = $collectedClasses.NodeValidatorBuilder_allowsElement_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder_allowsElement_closure.prototype = $desc;
  function NodeValidatorBuilder_allowsAttribute_closure(element_0, attributeName_1, value_2) {
    this.element_0 = element_0;
    this.attributeName_1 = attributeName_1;
    this.value_2 = value_2;
  }
  NodeValidatorBuilder_allowsAttribute_closure.builtin$cls = "NodeValidatorBuilder_allowsAttribute_closure";
  if (!"name" in NodeValidatorBuilder_allowsAttribute_closure)
    NodeValidatorBuilder_allowsAttribute_closure.name = "NodeValidatorBuilder_allowsAttribute_closure";
  $desc = $collectedClasses.NodeValidatorBuilder_allowsAttribute_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder_allowsAttribute_closure.prototype = $desc;
  function _SimpleNodeValidator(allowedElements, allowedAttributes, allowedUriAttributes, uriPolicy) {
    this.allowedElements = allowedElements;
    this.allowedAttributes = allowedAttributes;
    this.allowedUriAttributes = allowedUriAttributes;
    this.uriPolicy = uriPolicy;
  }
  _SimpleNodeValidator.builtin$cls = "_SimpleNodeValidator";
  if (!"name" in _SimpleNodeValidator)
    _SimpleNodeValidator.name = "_SimpleNodeValidator";
  $desc = $collectedClasses._SimpleNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SimpleNodeValidator.prototype = $desc;
  _SimpleNodeValidator.prototype.get$uriPolicy = function() {
    return this.uriPolicy;
  };
  function _TemplatingNodeValidator(_templateAttrs, allowedElements, allowedAttributes, allowedUriAttributes, uriPolicy) {
    this._templateAttrs = _templateAttrs;
    this.allowedElements = allowedElements;
    this.allowedAttributes = allowedAttributes;
    this.allowedUriAttributes = allowedUriAttributes;
    this.uriPolicy = uriPolicy;
  }
  _TemplatingNodeValidator.builtin$cls = "_TemplatingNodeValidator";
  if (!"name" in _TemplatingNodeValidator)
    _TemplatingNodeValidator.name = "_TemplatingNodeValidator";
  $desc = $collectedClasses._TemplatingNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplatingNodeValidator.prototype = $desc;
  function _TemplatingNodeValidator_closure() {
  }
  _TemplatingNodeValidator_closure.builtin$cls = "_TemplatingNodeValidator_closure";
  if (!"name" in _TemplatingNodeValidator_closure)
    _TemplatingNodeValidator_closure.name = "_TemplatingNodeValidator_closure";
  $desc = $collectedClasses._TemplatingNodeValidator_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplatingNodeValidator_closure.prototype = $desc;
  function FixedSizeListIterator(_array, _html$_length, _position, _html$_current) {
    this._array = _array;
    this._html$_length = _html$_length;
    this._position = _position;
    this._html$_current = _html$_current;
  }
  FixedSizeListIterator.builtin$cls = "FixedSizeListIterator";
  if (!"name" in FixedSizeListIterator)
    FixedSizeListIterator.name = "FixedSizeListIterator";
  $desc = $collectedClasses.FixedSizeListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedSizeListIterator.prototype = $desc;
  function _callConstructor_closure(constructor_0, interceptor_1) {
    this.constructor_0 = constructor_0;
    this.interceptor_1 = interceptor_1;
  }
  _callConstructor_closure.builtin$cls = "_callConstructor_closure";
  if (!"name" in _callConstructor_closure)
    _callConstructor_closure.name = "_callConstructor_closure";
  $desc = $collectedClasses._callConstructor_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _callConstructor_closure.prototype = $desc;
  function _JSElementUpgrader(_interceptor, _constructor, _nativeType) {
    this._interceptor = _interceptor;
    this._constructor = _constructor;
    this._nativeType = _nativeType;
  }
  _JSElementUpgrader.builtin$cls = "_JSElementUpgrader";
  if (!"name" in _JSElementUpgrader)
    _JSElementUpgrader.name = "_JSElementUpgrader";
  $desc = $collectedClasses._JSElementUpgrader;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JSElementUpgrader.prototype = $desc;
  function _DOMWindowCrossFrame(_window) {
    this._window = _window;
  }
  _DOMWindowCrossFrame.builtin$cls = "_DOMWindowCrossFrame";
  if (!"name" in _DOMWindowCrossFrame)
    _DOMWindowCrossFrame.name = "_DOMWindowCrossFrame";
  $desc = $collectedClasses._DOMWindowCrossFrame;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DOMWindowCrossFrame.prototype = $desc;
  function NodeValidator() {
  }
  NodeValidator.builtin$cls = "NodeValidator";
  if (!"name" in NodeValidator)
    NodeValidator.name = "NodeValidator";
  $desc = $collectedClasses.NodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidator.prototype = $desc;
  function _SameOriginUriPolicy(_hiddenAnchor, _loc) {
    this._hiddenAnchor = _hiddenAnchor;
    this._loc = _loc;
  }
  _SameOriginUriPolicy.builtin$cls = "_SameOriginUriPolicy";
  if (!"name" in _SameOriginUriPolicy)
    _SameOriginUriPolicy.name = "_SameOriginUriPolicy";
  $desc = $collectedClasses._SameOriginUriPolicy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SameOriginUriPolicy.prototype = $desc;
  function _ValidatingTreeSanitizer(validator) {
    this.validator = validator;
  }
  _ValidatingTreeSanitizer.builtin$cls = "_ValidatingTreeSanitizer";
  if (!"name" in _ValidatingTreeSanitizer)
    _ValidatingTreeSanitizer.name = "_ValidatingTreeSanitizer";
  $desc = $collectedClasses._ValidatingTreeSanitizer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ValidatingTreeSanitizer.prototype = $desc;
  function _ValidatingTreeSanitizer_sanitizeTree_walk(this_0) {
    this.this_0 = this_0;
  }
  _ValidatingTreeSanitizer_sanitizeTree_walk.builtin$cls = "_ValidatingTreeSanitizer_sanitizeTree_walk";
  if (!"name" in _ValidatingTreeSanitizer_sanitizeTree_walk)
    _ValidatingTreeSanitizer_sanitizeTree_walk.name = "_ValidatingTreeSanitizer_sanitizeTree_walk";
  $desc = $collectedClasses._ValidatingTreeSanitizer_sanitizeTree_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ValidatingTreeSanitizer_sanitizeTree_walk.prototype = $desc;
  function _AttributeClassSet(_svg$_element) {
    this._svg$_element = _svg$_element;
  }
  _AttributeClassSet.builtin$cls = "_AttributeClassSet";
  if (!"name" in _AttributeClassSet)
    _AttributeClassSet.name = "_AttributeClassSet";
  $desc = $collectedClasses._AttributeClassSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AttributeClassSet.prototype = $desc;
  function Capability() {
  }
  Capability.builtin$cls = "Capability";
  if (!"name" in Capability)
    Capability.name = "Capability";
  $desc = $collectedClasses.Capability;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Capability.prototype = $desc;
  function JsObject(_jsObject) {
    this._jsObject = _jsObject;
  }
  JsObject.builtin$cls = "JsObject";
  if (!"name" in JsObject)
    JsObject.name = "JsObject";
  $desc = $collectedClasses.JsObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsObject.prototype = $desc;
  function JsObject__convertDataTree__convert(_convertedObjects_0) {
    this._convertedObjects_0 = _convertedObjects_0;
  }
  JsObject__convertDataTree__convert.builtin$cls = "JsObject__convertDataTree__convert";
  if (!"name" in JsObject__convertDataTree__convert)
    JsObject__convertDataTree__convert.name = "JsObject__convertDataTree__convert";
  $desc = $collectedClasses.JsObject__convertDataTree__convert;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsObject__convertDataTree__convert.prototype = $desc;
  function JsFunction(_jsObject) {
    this._jsObject = _jsObject;
  }
  JsFunction.builtin$cls = "JsFunction";
  if (!"name" in JsFunction)
    JsFunction.name = "JsFunction";
  $desc = $collectedClasses.JsFunction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsFunction.prototype = $desc;
  function JsArray(_jsObject) {
    this._jsObject = _jsObject;
  }
  JsArray.builtin$cls = "JsArray";
  if (!"name" in JsArray)
    JsArray.name = "JsArray";
  $desc = $collectedClasses.JsArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsArray.prototype = $desc;
  function JsObject_ListMixin() {
  }
  JsObject_ListMixin.builtin$cls = "JsObject_ListMixin";
  if (!"name" in JsObject_ListMixin)
    JsObject_ListMixin.name = "JsObject_ListMixin";
  $desc = $collectedClasses.JsObject_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsObject_ListMixin.prototype = $desc;
  function _convertToJS_closure() {
  }
  _convertToJS_closure.builtin$cls = "_convertToJS_closure";
  if (!"name" in _convertToJS_closure)
    _convertToJS_closure.name = "_convertToJS_closure";
  $desc = $collectedClasses._convertToJS_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertToJS_closure.prototype = $desc;
  function _convertToJS_closure0(ctor_0) {
    this.ctor_0 = ctor_0;
  }
  _convertToJS_closure0.builtin$cls = "_convertToJS_closure0";
  if (!"name" in _convertToJS_closure0)
    _convertToJS_closure0.name = "_convertToJS_closure0";
  $desc = $collectedClasses._convertToJS_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertToJS_closure0.prototype = $desc;
  function _wrapToDart_closure() {
  }
  _wrapToDart_closure.builtin$cls = "_wrapToDart_closure";
  if (!"name" in _wrapToDart_closure)
    _wrapToDart_closure.name = "_wrapToDart_closure";
  $desc = $collectedClasses._wrapToDart_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _wrapToDart_closure.prototype = $desc;
  function _wrapToDart_closure0() {
  }
  _wrapToDart_closure0.builtin$cls = "_wrapToDart_closure0";
  if (!"name" in _wrapToDart_closure0)
    _wrapToDart_closure0.name = "_wrapToDart_closure0";
  $desc = $collectedClasses._wrapToDart_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _wrapToDart_closure0.prototype = $desc;
  function _wrapToDart_closure1() {
  }
  _wrapToDart_closure1.builtin$cls = "_wrapToDart_closure1";
  if (!"name" in _wrapToDart_closure1)
    _wrapToDart_closure1.name = "_wrapToDart_closure1";
  $desc = $collectedClasses._wrapToDart_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _wrapToDart_closure1.prototype = $desc;
  function _JSRandom() {
  }
  _JSRandom.builtin$cls = "_JSRandom";
  if (!"name" in _JSRandom)
    _JSRandom.name = "_JSRandom";
  $desc = $collectedClasses._JSRandom;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JSRandom.prototype = $desc;
  function Point(x, y) {
    this.x = x;
    this.y = y;
  }
  Point.builtin$cls = "Point";
  if (!"name" in Point)
    Point.name = "Point";
  $desc = $collectedClasses.Point;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Point.prototype = $desc;
  Point.prototype.get$x = function(receiver) {
    return this.x;
  };
  Point.prototype.get$y = function(receiver) {
    return this.y;
  };
  function _RectangleBase() {
  }
  _RectangleBase.builtin$cls = "_RectangleBase";
  if (!"name" in _RectangleBase)
    _RectangleBase.name = "_RectangleBase";
  $desc = $collectedClasses._RectangleBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RectangleBase.prototype = $desc;
  function Rectangle(left, top, width, height) {
    this.left = left;
    this.top = top;
    this.width = width;
    this.height = height;
  }
  Rectangle.builtin$cls = "Rectangle";
  if (!"name" in Rectangle)
    Rectangle.name = "Rectangle";
  $desc = $collectedClasses.Rectangle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Rectangle.prototype = $desc;
  Rectangle.prototype.get$left = function(receiver) {
    return this.left;
  };
  Rectangle.prototype.get$top = function(receiver) {
    return this.top;
  };
  Rectangle.prototype.get$width = function(receiver) {
    return this.width;
  };
  Rectangle.prototype.get$height = function(receiver) {
    return this.height;
  };
  function Mirror() {
  }
  Mirror.builtin$cls = "Mirror";
  if (!"name" in Mirror)
    Mirror.name = "Mirror";
  $desc = $collectedClasses.Mirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Mirror.prototype = $desc;
  function DeclarationMirror() {
  }
  DeclarationMirror.builtin$cls = "DeclarationMirror";
  if (!"name" in DeclarationMirror)
    DeclarationMirror.name = "DeclarationMirror";
  $desc = $collectedClasses.DeclarationMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeclarationMirror.prototype = $desc;
  function InstanceMirror() {
  }
  InstanceMirror.builtin$cls = "InstanceMirror";
  if (!"name" in InstanceMirror)
    InstanceMirror.name = "InstanceMirror";
  $desc = $collectedClasses.InstanceMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InstanceMirror.prototype = $desc;
  function LibraryMirror() {
  }
  LibraryMirror.builtin$cls = "LibraryMirror";
  if (!"name" in LibraryMirror)
    LibraryMirror.name = "LibraryMirror";
  $desc = $collectedClasses.LibraryMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LibraryMirror.prototype = $desc;
  function TypeMirror() {
  }
  TypeMirror.builtin$cls = "TypeMirror";
  if (!"name" in TypeMirror)
    TypeMirror.name = "TypeMirror";
  $desc = $collectedClasses.TypeMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeMirror.prototype = $desc;
  function ClassMirror() {
  }
  ClassMirror.builtin$cls = "ClassMirror";
  if (!"name" in ClassMirror)
    ClassMirror.name = "ClassMirror";
  $desc = $collectedClasses.ClassMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClassMirror.prototype = $desc;
  function TypeVariableMirror() {
  }
  TypeVariableMirror.builtin$cls = "TypeVariableMirror";
  if (!"name" in TypeVariableMirror)
    TypeVariableMirror.name = "TypeVariableMirror";
  $desc = $collectedClasses.TypeVariableMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeVariableMirror.prototype = $desc;
  function MethodMirror() {
  }
  MethodMirror.builtin$cls = "MethodMirror";
  if (!"name" in MethodMirror)
    MethodMirror.name = "MethodMirror";
  $desc = $collectedClasses.MethodMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MethodMirror.prototype = $desc;
  function VariableMirror() {
  }
  VariableMirror.builtin$cls = "VariableMirror";
  if (!"name" in VariableMirror)
    VariableMirror.name = "VariableMirror";
  $desc = $collectedClasses.VariableMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VariableMirror.prototype = $desc;
  function ParameterMirror() {
  }
  ParameterMirror.builtin$cls = "ParameterMirror";
  if (!"name" in ParameterMirror)
    ParameterMirror.name = "ParameterMirror";
  $desc = $collectedClasses.ParameterMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParameterMirror.prototype = $desc;
  function MirrorsUsed(symbols, targets, metaTargets, override) {
    this.symbols = symbols;
    this.targets = targets;
    this.metaTargets = metaTargets;
    this.override = override;
  }
  MirrorsUsed.builtin$cls = "MirrorsUsed";
  if (!"name" in MirrorsUsed)
    MirrorsUsed.name = "MirrorsUsed";
  $desc = $collectedClasses.MirrorsUsed;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MirrorsUsed.prototype = $desc;
  function Endianness(_littleEndian) {
    this._littleEndian = _littleEndian;
  }
  Endianness.builtin$cls = "Endianness";
  if (!"name" in Endianness)
    Endianness.name = "Endianness";
  $desc = $collectedClasses.Endianness;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Endianness.prototype = $desc;
  function NativeTypedArray() {
  }
  NativeTypedArray.builtin$cls = "NativeTypedArray";
  if (!"name" in NativeTypedArray)
    NativeTypedArray.name = "NativeTypedArray";
  $desc = $collectedClasses.NativeTypedArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray.prototype = $desc;
  function NativeTypedArrayOfDouble() {
  }
  NativeTypedArrayOfDouble.builtin$cls = "NativeTypedArrayOfDouble";
  if (!"name" in NativeTypedArrayOfDouble)
    NativeTypedArrayOfDouble.name = "NativeTypedArrayOfDouble";
  $desc = $collectedClasses.NativeTypedArrayOfDouble;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArrayOfDouble.prototype = $desc;
  function NativeTypedArray_ListMixin() {
  }
  NativeTypedArray_ListMixin.builtin$cls = "NativeTypedArray_ListMixin";
  if (!"name" in NativeTypedArray_ListMixin)
    NativeTypedArray_ListMixin.name = "NativeTypedArray_ListMixin";
  $desc = $collectedClasses.NativeTypedArray_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray_ListMixin.prototype = $desc;
  function NativeTypedArray_ListMixin_FixedLengthListMixin() {
  }
  NativeTypedArray_ListMixin_FixedLengthListMixin.builtin$cls = "NativeTypedArray_ListMixin_FixedLengthListMixin";
  if (!"name" in NativeTypedArray_ListMixin_FixedLengthListMixin)
    NativeTypedArray_ListMixin_FixedLengthListMixin.name = "NativeTypedArray_ListMixin_FixedLengthListMixin";
  $desc = $collectedClasses.NativeTypedArray_ListMixin_FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = $desc;
  function NativeTypedArrayOfInt() {
  }
  NativeTypedArrayOfInt.builtin$cls = "NativeTypedArrayOfInt";
  if (!"name" in NativeTypedArrayOfInt)
    NativeTypedArrayOfInt.name = "NativeTypedArrayOfInt";
  $desc = $collectedClasses.NativeTypedArrayOfInt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArrayOfInt.prototype = $desc;
  function NativeTypedArray_ListMixin0() {
  }
  NativeTypedArray_ListMixin0.builtin$cls = "NativeTypedArray_ListMixin0";
  if (!"name" in NativeTypedArray_ListMixin0)
    NativeTypedArray_ListMixin0.name = "NativeTypedArray_ListMixin0";
  $desc = $collectedClasses.NativeTypedArray_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray_ListMixin0.prototype = $desc;
  function NativeTypedArray_ListMixin_FixedLengthListMixin0() {
  }
  NativeTypedArray_ListMixin_FixedLengthListMixin0.builtin$cls = "NativeTypedArray_ListMixin_FixedLengthListMixin0";
  if (!"name" in NativeTypedArray_ListMixin_FixedLengthListMixin0)
    NativeTypedArray_ListMixin_FixedLengthListMixin0.name = "NativeTypedArray_ListMixin_FixedLengthListMixin0";
  $desc = $collectedClasses.NativeTypedArray_ListMixin_FixedLengthListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray_ListMixin_FixedLengthListMixin0.prototype = $desc;
  function DuplicateEventSettingError(type, emitter, detector, existingAction, newAction) {
    this.type = type;
    this.emitter = emitter;
    this.detector = detector;
    this.existingAction = existingAction;
    this.newAction = newAction;
  }
  DuplicateEventSettingError.builtin$cls = "DuplicateEventSettingError";
  if (!"name" in DuplicateEventSettingError)
    DuplicateEventSettingError.name = "DuplicateEventSettingError";
  $desc = $collectedClasses.DuplicateEventSettingError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DuplicateEventSettingError.prototype = $desc;
  DuplicateEventSettingError.prototype.get$type = function(receiver) {
    return this.type;
  };
  function EmitTimeQueueChangeError(type, emitter, action) {
    this.type = type;
    this.emitter = emitter;
    this.action = action;
  }
  EmitTimeQueueChangeError.builtin$cls = "EmitTimeQueueChangeError";
  if (!"name" in EmitTimeQueueChangeError)
    EmitTimeQueueChangeError.name = "EmitTimeQueueChangeError";
  $desc = $collectedClasses.EmitTimeQueueChangeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmitTimeQueueChangeError.prototype = $desc;
  EmitTimeQueueChangeError.prototype.get$type = function(receiver) {
    return this.type;
  };
  function Event(emitter, data, _finished) {
    this.emitter = emitter;
    this.data = data;
    this._finished = _finished;
  }
  Event.builtin$cls = "Event";
  if (!"name" in Event)
    Event.name = "Event";
  $desc = $collectedClasses.Event;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Event.prototype = $desc;
  Event.prototype.get$data = function(receiver) {
    return this.data;
  };
  function EventDetector(eventable$EventDetector$_typeIndexes, eventable$EventDetector$_emitterIndexes) {
    this.eventable$EventDetector$_typeIndexes = eventable$EventDetector$_typeIndexes;
    this.eventable$EventDetector$_emitterIndexes = eventable$EventDetector$_emitterIndexes;
  }
  EventDetector.builtin$cls = "EventDetector";
  if (!"name" in EventDetector)
    EventDetector.name = "EventDetector";
  $desc = $collectedClasses.EventDetector;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventDetector.prototype = $desc;
  EventDetector.prototype.get$_typeIndexes = function(receiver) {
    return receiver.eventable$EventDetector$_typeIndexes;
  };
  EventDetector.prototype.get$_typeIndexes.$reflectable = 1;
  EventDetector.prototype.set$_typeIndexes = function(receiver, v) {
    return receiver.eventable$EventDetector$_typeIndexes = v;
  };
  EventDetector.prototype.set$_typeIndexes.$reflectable = 1;
  EventDetector.prototype.get$_emitterIndexes = function(receiver) {
    return receiver.eventable$EventDetector$_emitterIndexes;
  };
  EventDetector.prototype.get$_emitterIndexes.$reflectable = 1;
  EventDetector.prototype.set$_emitterIndexes = function(receiver, v) {
    return receiver.eventable$EventDetector$_emitterIndexes = v;
  };
  EventDetector.prototype.set$_emitterIndexes.$reflectable = 1;
  function EventEmitter(eventable$EventEmitter$_actionQueues, eventable$EventEmitter$_emittingType) {
    this.eventable$EventEmitter$_actionQueues = eventable$EventEmitter$_actionQueues;
    this.eventable$EventEmitter$_emittingType = eventable$EventEmitter$_emittingType;
  }
  EventEmitter.builtin$cls = "EventEmitter";
  if (!"name" in EventEmitter)
    EventEmitter.name = "EventEmitter";
  $desc = $collectedClasses.EventEmitter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventEmitter.prototype = $desc;
  EventEmitter.prototype.get$_actionQueues = function() {
    return this.eventable$EventEmitter$_actionQueues;
  };
  EventEmitter.prototype.get$_actionQueues.$reflectable = 1;
  EventEmitter.prototype.set$_actionQueues = function(v) {
    return this.eventable$EventEmitter$_actionQueues = v;
  };
  EventEmitter.prototype.set$_actionQueues.$reflectable = 1;
  EventEmitter.prototype.get$_emittingType = function() {
    return this.eventable$EventEmitter$_emittingType;
  };
  EventEmitter.prototype.get$_emittingType.$reflectable = 1;
  EventEmitter.prototype.set$_emittingType = function(v) {
    return this.eventable$EventEmitter$_emittingType = v;
  };
  EventEmitter.prototype.set$_emittingType.$reflectable = 1;
  function EventEmitter_emitEvent_closure(box_0, this_1, data_2, event_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.data_2 = data_2;
    this.event_3 = event_3;
  }
  EventEmitter_emitEvent_closure.builtin$cls = "EventEmitter_emitEvent_closure";
  if (!"name" in EventEmitter_emitEvent_closure)
    EventEmitter_emitEvent_closure.name = "EventEmitter_emitEvent_closure";
  $desc = $collectedClasses.EventEmitter_emitEvent_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventEmitter_emitEvent_closure.prototype = $desc;
  function EventEmitter_emitEvent__closure(event_4) {
    this.event_4 = event_4;
  }
  EventEmitter_emitEvent__closure.builtin$cls = "EventEmitter_emitEvent__closure";
  if (!"name" in EventEmitter_emitEvent__closure)
    EventEmitter_emitEvent__closure.name = "EventEmitter_emitEvent__closure";
  $desc = $collectedClasses.EventEmitter_emitEvent__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventEmitter_emitEvent__closure.prototype = $desc;
  function EventEmitter_emitEvent__closure0(event_5) {
    this.event_5 = event_5;
  }
  EventEmitter_emitEvent__closure0.builtin$cls = "EventEmitter_emitEvent__closure0";
  if (!"name" in EventEmitter_emitEvent__closure0)
    EventEmitter_emitEvent__closure0.name = "EventEmitter_emitEvent__closure0";
  $desc = $collectedClasses.EventEmitter_emitEvent__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventEmitter_emitEvent__closure0.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_findSlot(values_1, copies_2) {
    this.values_1 = values_1;
    this.copies_2 = copies_2;
  }
  _convertDartToNative_PrepareForStructuredClone_findSlot.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_findSlot";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_findSlot)
    _convertDartToNative_PrepareForStructuredClone_findSlot.name = "_convertDartToNative_PrepareForStructuredClone_findSlot";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_findSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_findSlot.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_readSlot(copies_3) {
    this.copies_3 = copies_3;
  }
  _convertDartToNative_PrepareForStructuredClone_readSlot.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_readSlot";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_readSlot)
    _convertDartToNative_PrepareForStructuredClone_readSlot.name = "_convertDartToNative_PrepareForStructuredClone_readSlot";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_readSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_readSlot.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_writeSlot(copies_4) {
    this.copies_4 = copies_4;
  }
  _convertDartToNative_PrepareForStructuredClone_writeSlot.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_writeSlot";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_writeSlot)
    _convertDartToNative_PrepareForStructuredClone_writeSlot.name = "_convertDartToNative_PrepareForStructuredClone_writeSlot";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_writeSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_writeSlot.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_cleanupSlots() {
  }
  _convertDartToNative_PrepareForStructuredClone_cleanupSlots.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_cleanupSlots";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_cleanupSlots)
    _convertDartToNative_PrepareForStructuredClone_cleanupSlots.name = "_convertDartToNative_PrepareForStructuredClone_cleanupSlots";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_cleanupSlots;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_cleanupSlots.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_walk(findSlot_5, readSlot_6, writeSlot_7) {
    this.findSlot_5 = findSlot_5;
    this.readSlot_6 = readSlot_6;
    this.writeSlot_7 = writeSlot_7;
  }
  _convertDartToNative_PrepareForStructuredClone_walk.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_walk";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_walk)
    _convertDartToNative_PrepareForStructuredClone_walk.name = "_convertDartToNative_PrepareForStructuredClone_walk";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_walk.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_walk_closure(box_0, walk_8) {
    this.box_0 = box_0;
    this.walk_8 = walk_8;
  }
  _convertDartToNative_PrepareForStructuredClone_walk_closure.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_walk_closure";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_walk_closure)
    _convertDartToNative_PrepareForStructuredClone_walk_closure.name = "_convertDartToNative_PrepareForStructuredClone_walk_closure";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_walk_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_walk_closure.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_findSlot(values_0, copies_1) {
    this.values_0 = values_0;
    this.copies_1 = copies_1;
  }
  convertNativeToDart_AcceptStructuredClone_findSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_findSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_findSlot)
    convertNativeToDart_AcceptStructuredClone_findSlot.name = "convertNativeToDart_AcceptStructuredClone_findSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_findSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_findSlot.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_readSlot(copies_2) {
    this.copies_2 = copies_2;
  }
  convertNativeToDart_AcceptStructuredClone_readSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_readSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_readSlot)
    convertNativeToDart_AcceptStructuredClone_readSlot.name = "convertNativeToDart_AcceptStructuredClone_readSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_readSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_readSlot.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_writeSlot(copies_3) {
    this.copies_3 = copies_3;
  }
  convertNativeToDart_AcceptStructuredClone_writeSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_writeSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_writeSlot)
    convertNativeToDart_AcceptStructuredClone_writeSlot.name = "convertNativeToDart_AcceptStructuredClone_writeSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_writeSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_writeSlot.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_walk(mustCopy_4, findSlot_5, readSlot_6, writeSlot_7) {
    this.mustCopy_4 = mustCopy_4;
    this.findSlot_5 = findSlot_5;
    this.readSlot_6 = readSlot_6;
    this.writeSlot_7 = writeSlot_7;
  }
  convertNativeToDart_AcceptStructuredClone_walk.builtin$cls = "convertNativeToDart_AcceptStructuredClone_walk";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_walk)
    convertNativeToDart_AcceptStructuredClone_walk.name = "convertNativeToDart_AcceptStructuredClone_walk";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_walk.prototype = $desc;
  function CssClassSetImpl() {
  }
  CssClassSetImpl.builtin$cls = "CssClassSetImpl";
  if (!"name" in CssClassSetImpl)
    CssClassSetImpl.name = "CssClassSetImpl";
  $desc = $collectedClasses.CssClassSetImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl.prototype = $desc;
  function CssClassSetImpl_add_closure(value_0) {
    this.value_0 = value_0;
  }
  CssClassSetImpl_add_closure.builtin$cls = "CssClassSetImpl_add_closure";
  if (!"name" in CssClassSetImpl_add_closure)
    CssClassSetImpl_add_closure.name = "CssClassSetImpl_add_closure";
  $desc = $collectedClasses.CssClassSetImpl_add_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl_add_closure.prototype = $desc;
  function CssClassSetImpl_addAll_closure(iterable_0) {
    this.iterable_0 = iterable_0;
  }
  CssClassSetImpl_addAll_closure.builtin$cls = "CssClassSetImpl_addAll_closure";
  if (!"name" in CssClassSetImpl_addAll_closure)
    CssClassSetImpl_addAll_closure.name = "CssClassSetImpl_addAll_closure";
  $desc = $collectedClasses.CssClassSetImpl_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl_addAll_closure.prototype = $desc;
  function CssClassSetImpl_clear_closure() {
  }
  CssClassSetImpl_clear_closure.builtin$cls = "CssClassSetImpl_clear_closure";
  if (!"name" in CssClassSetImpl_clear_closure)
    CssClassSetImpl_clear_closure.name = "CssClassSetImpl_clear_closure";
  $desc = $collectedClasses.CssClassSetImpl_clear_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl_clear_closure.prototype = $desc;
  function Logger(name, parent, _level, _children, children, _controller) {
    this.name = name;
    this.parent = parent;
    this._level = _level;
    this._children = _children;
    this.children = children;
    this._controller = _controller;
  }
  Logger.builtin$cls = "Logger";
  if (!"name" in Logger)
    Logger.name = "Logger";
  $desc = $collectedClasses.Logger;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Logger.prototype = $desc;
  Logger.prototype.get$name = function(receiver) {
    return this.name;
  };
  Logger.prototype.get$parent = function(receiver) {
    return this.parent;
  };
  Logger.prototype.get$_children = function(receiver) {
    return this._children;
  };
  function Logger_Logger_closure(name_0) {
    this.name_0 = name_0;
  }
  Logger_Logger_closure.builtin$cls = "Logger_Logger_closure";
  if (!"name" in Logger_Logger_closure)
    Logger_Logger_closure.name = "Logger_Logger_closure";
  $desc = $collectedClasses.Logger_Logger_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Logger_Logger_closure.prototype = $desc;
  function Level(name, value) {
    this.name = name;
    this.value = value;
  }
  Level.builtin$cls = "Level";
  if (!"name" in Level)
    Level.name = "Level";
  $desc = $collectedClasses.Level;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Level.prototype = $desc;
  Level.prototype.get$name = function(receiver) {
    return this.name;
  };
  Level.prototype.get$value = function(receiver) {
    return this.value;
  };
  function LogRecord(level, message, loggerName, time, sequenceNumber, error, stackTrace) {
    this.level = level;
    this.message = message;
    this.loggerName = loggerName;
    this.time = time;
    this.sequenceNumber = sequenceNumber;
    this.error = error;
    this.stackTrace = stackTrace;
  }
  LogRecord.builtin$cls = "LogRecord";
  if (!"name" in LogRecord)
    LogRecord.name = "LogRecord";
  $desc = $collectedClasses.LogRecord;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogRecord.prototype = $desc;
  LogRecord.prototype.get$level = function() {
    return this.level;
  };
  LogRecord.prototype.get$message = function(receiver) {
    return this.message;
  };
  LogRecord.prototype.get$error = function(receiver) {
    return this.error;
  };
  LogRecord.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function SupportedBrowser(browserName, minimumVersion) {
    this.browserName = browserName;
    this.minimumVersion = minimumVersion;
  }
  SupportedBrowser.builtin$cls = "SupportedBrowser";
  if (!"name" in SupportedBrowser)
    SupportedBrowser.name = "SupportedBrowser";
  $desc = $collectedClasses.SupportedBrowser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SupportedBrowser.prototype = $desc;
  function Experimental() {
  }
  Experimental.builtin$cls = "Experimental";
  if (!"name" in Experimental)
    Experimental.name = "Experimental";
  $desc = $collectedClasses.Experimental;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Experimental.prototype = $desc;
  function DomName(name) {
    this.name = name;
  }
  DomName.builtin$cls = "DomName";
  if (!"name" in DomName)
    DomName.name = "DomName";
  $desc = $collectedClasses.DomName;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomName.prototype = $desc;
  DomName.prototype.get$name = function(receiver) {
    return this.name;
  };
  function DocsEditable() {
  }
  DocsEditable.builtin$cls = "DocsEditable";
  if (!"name" in DocsEditable)
    DocsEditable.name = "DocsEditable";
  $desc = $collectedClasses.DocsEditable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocsEditable.prototype = $desc;
  function Unstable() {
  }
  Unstable.builtin$cls = "Unstable";
  if (!"name" in Unstable)
    Unstable.name = "Unstable";
  $desc = $collectedClasses.Unstable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Unstable.prototype = $desc;
  function Bindable() {
  }
  Bindable.builtin$cls = "Bindable";
  if (!"name" in Bindable)
    Bindable.name = "Bindable";
  $desc = $collectedClasses.Bindable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Bindable.prototype = $desc;
  function ChangeNotifier() {
  }
  ChangeNotifier.builtin$cls = "ChangeNotifier";
  if (!"name" in ChangeNotifier)
    ChangeNotifier.name = "ChangeNotifier";
  $desc = $collectedClasses.ChangeNotifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ChangeNotifier.prototype = $desc;
  function ChangeRecord() {
  }
  ChangeRecord.builtin$cls = "ChangeRecord";
  if (!"name" in ChangeRecord)
    ChangeRecord.name = "ChangeRecord";
  $desc = $collectedClasses.ChangeRecord;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ChangeRecord.prototype = $desc;
  function PropertyChangeRecord(object, name, oldValue, newValue) {
    this.object = object;
    this.name = name;
    this.oldValue = oldValue;
    this.newValue = newValue;
  }
  PropertyChangeRecord.builtin$cls = "PropertyChangeRecord";
  if (!"name" in PropertyChangeRecord)
    PropertyChangeRecord.name = "PropertyChangeRecord";
  $desc = $collectedClasses.PropertyChangeRecord;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PropertyChangeRecord.prototype = $desc;
  PropertyChangeRecord.prototype.get$name = function(receiver) {
    return this.name;
  };
  function dirtyCheckZoneSpec_enqueueDirtyCheck(box_0) {
    this.box_0 = box_0;
  }
  dirtyCheckZoneSpec_enqueueDirtyCheck.builtin$cls = "dirtyCheckZoneSpec_enqueueDirtyCheck";
  if (!"name" in dirtyCheckZoneSpec_enqueueDirtyCheck)
    dirtyCheckZoneSpec_enqueueDirtyCheck.name = "dirtyCheckZoneSpec_enqueueDirtyCheck";
  $desc = $collectedClasses.dirtyCheckZoneSpec_enqueueDirtyCheck;
  if ($desc instanceof Array)
    $desc = $desc[1];
  dirtyCheckZoneSpec_enqueueDirtyCheck.prototype = $desc;
  function dirtyCheckZoneSpec_enqueueDirtyCheck_closure(box_0) {
    this.box_0 = box_0;
  }
  dirtyCheckZoneSpec_enqueueDirtyCheck_closure.builtin$cls = "dirtyCheckZoneSpec_enqueueDirtyCheck_closure";
  if (!"name" in dirtyCheckZoneSpec_enqueueDirtyCheck_closure)
    dirtyCheckZoneSpec_enqueueDirtyCheck_closure.name = "dirtyCheckZoneSpec_enqueueDirtyCheck_closure";
  $desc = $collectedClasses.dirtyCheckZoneSpec_enqueueDirtyCheck_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  dirtyCheckZoneSpec_enqueueDirtyCheck_closure.prototype = $desc;
  function dirtyCheckZoneSpec_wrapCallback(enqueueDirtyCheck_1) {
    this.enqueueDirtyCheck_1 = enqueueDirtyCheck_1;
  }
  dirtyCheckZoneSpec_wrapCallback.builtin$cls = "dirtyCheckZoneSpec_wrapCallback";
  if (!"name" in dirtyCheckZoneSpec_wrapCallback)
    dirtyCheckZoneSpec_wrapCallback.name = "dirtyCheckZoneSpec_wrapCallback";
  $desc = $collectedClasses.dirtyCheckZoneSpec_wrapCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  dirtyCheckZoneSpec_wrapCallback.prototype = $desc;
  function dirtyCheckZoneSpec_wrapCallback_closure(enqueueDirtyCheck_2, parent_3, zone_4, f_5) {
    this.enqueueDirtyCheck_2 = enqueueDirtyCheck_2;
    this.parent_3 = parent_3;
    this.zone_4 = zone_4;
    this.f_5 = f_5;
  }
  dirtyCheckZoneSpec_wrapCallback_closure.builtin$cls = "dirtyCheckZoneSpec_wrapCallback_closure";
  if (!"name" in dirtyCheckZoneSpec_wrapCallback_closure)
    dirtyCheckZoneSpec_wrapCallback_closure.name = "dirtyCheckZoneSpec_wrapCallback_closure";
  $desc = $collectedClasses.dirtyCheckZoneSpec_wrapCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  dirtyCheckZoneSpec_wrapCallback_closure.prototype = $desc;
  function dirtyCheckZoneSpec_wrapUnaryCallback(enqueueDirtyCheck_6) {
    this.enqueueDirtyCheck_6 = enqueueDirtyCheck_6;
  }
  dirtyCheckZoneSpec_wrapUnaryCallback.builtin$cls = "dirtyCheckZoneSpec_wrapUnaryCallback";
  if (!"name" in dirtyCheckZoneSpec_wrapUnaryCallback)
    dirtyCheckZoneSpec_wrapUnaryCallback.name = "dirtyCheckZoneSpec_wrapUnaryCallback";
  $desc = $collectedClasses.dirtyCheckZoneSpec_wrapUnaryCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  dirtyCheckZoneSpec_wrapUnaryCallback.prototype = $desc;
  function dirtyCheckZoneSpec_wrapUnaryCallback_closure(enqueueDirtyCheck_7, parent_8, zone_9, f_10) {
    this.enqueueDirtyCheck_7 = enqueueDirtyCheck_7;
    this.parent_8 = parent_8;
    this.zone_9 = zone_9;
    this.f_10 = f_10;
  }
  dirtyCheckZoneSpec_wrapUnaryCallback_closure.builtin$cls = "dirtyCheckZoneSpec_wrapUnaryCallback_closure";
  if (!"name" in dirtyCheckZoneSpec_wrapUnaryCallback_closure)
    dirtyCheckZoneSpec_wrapUnaryCallback_closure.name = "dirtyCheckZoneSpec_wrapUnaryCallback_closure";
  $desc = $collectedClasses.dirtyCheckZoneSpec_wrapUnaryCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  dirtyCheckZoneSpec_wrapUnaryCallback_closure.prototype = $desc;
  function ListChangeRecord(object, _unmodifiableRemoved, _removed, _list_diff$_index, _addedCount) {
    this.object = object;
    this._unmodifiableRemoved = _unmodifiableRemoved;
    this._removed = _removed;
    this._list_diff$_index = _list_diff$_index;
    this._addedCount = _addedCount;
  }
  ListChangeRecord.builtin$cls = "ListChangeRecord";
  if (!"name" in ListChangeRecord)
    ListChangeRecord.name = "ListChangeRecord";
  $desc = $collectedClasses.ListChangeRecord;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListChangeRecord.prototype = $desc;
  function ObservableProperty() {
  }
  ObservableProperty.builtin$cls = "ObservableProperty";
  if (!"name" in ObservableProperty)
    ObservableProperty.name = "ObservableProperty";
  $desc = $collectedClasses.ObservableProperty;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObservableProperty.prototype = $desc;
  function Reflectable() {
  }
  Reflectable.builtin$cls = "Reflectable";
  if (!"name" in Reflectable)
    Reflectable.name = "Reflectable";
  $desc = $collectedClasses.Reflectable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Reflectable.prototype = $desc;
  function Observable(observable$Observable$_observable$_changes, observable$Observable$_values, observable$Observable$_records) {
    this.observable$Observable$_observable$_changes = observable$Observable$_observable$_changes;
    this.observable$Observable$_values = observable$Observable$_values;
    this.observable$Observable$_records = observable$Observable$_records;
  }
  Observable.builtin$cls = "Observable";
  if (!"name" in Observable)
    Observable.name = "Observable";
  $desc = $collectedClasses.Observable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Observable.prototype = $desc;
  Observable.prototype.get$_observable$_changes = function(receiver) {
    return receiver.observable$Observable$_observable$_changes;
  };
  Observable.prototype.set$_observable$_changes = function(receiver, v) {
    return receiver.observable$Observable$_observable$_changes = v;
  };
  Observable.prototype.get$_values = function(receiver) {
    return receiver.observable$Observable$_values;
  };
  Observable.prototype.set$_values = function(receiver, v) {
    return receiver.observable$Observable$_values = v;
  };
  Observable.prototype.get$_records = function(receiver) {
    return receiver.observable$Observable$_records;
  };
  Observable.prototype.set$_records = function(receiver, v) {
    return receiver.observable$Observable$_records = v;
  };
  function Observable_deliverChanges_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  Observable_deliverChanges_closure.builtin$cls = "Observable_deliverChanges_closure";
  if (!"name" in Observable_deliverChanges_closure)
    Observable_deliverChanges_closure.name = "Observable_deliverChanges_closure";
  $desc = $collectedClasses.Observable_deliverChanges_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Observable_deliverChanges_closure.prototype = $desc;
  function ObservableBox() {
  }
  ObservableBox.builtin$cls = "ObservableBox";
  if (!"name" in ObservableBox)
    ObservableBox.name = "ObservableBox";
  $desc = $collectedClasses.ObservableBox;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObservableBox.prototype = $desc;
  function MapChangeRecord(key, oldValue, newValue, isInsert, isRemove) {
    this.key = key;
    this.oldValue = oldValue;
    this.newValue = newValue;
    this.isInsert = isInsert;
    this.isRemove = isRemove;
  }
  MapChangeRecord.builtin$cls = "MapChangeRecord";
  if (!"name" in MapChangeRecord)
    MapChangeRecord.name = "MapChangeRecord";
  $desc = $collectedClasses.MapChangeRecord;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapChangeRecord.prototype = $desc;
  MapChangeRecord.prototype.get$key = function(receiver) {
    return this.key;
  };
  function ObservableMap(_observable_map$_map, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_change_notifier$_records) {
    this._observable_map$_map = _observable_map$_map;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_change_notifier$_records = change_notifier$ChangeNotifier$_change_notifier$_records;
  }
  ObservableMap.builtin$cls = "ObservableMap";
  if (!"name" in ObservableMap)
    ObservableMap.name = "ObservableMap";
  $desc = $collectedClasses.ObservableMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObservableMap.prototype = $desc;
  function ObservableMap_addAll_closure(this_0) {
    this.this_0 = this_0;
  }
  ObservableMap_addAll_closure.builtin$cls = "ObservableMap_addAll_closure";
  if (!"name" in ObservableMap_addAll_closure)
    ObservableMap_addAll_closure.name = "ObservableMap_addAll_closure";
  $desc = $collectedClasses.ObservableMap_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObservableMap_addAll_closure.prototype = $desc;
  function ObservableMap_clear_closure(this_0) {
    this.this_0 = this_0;
  }
  ObservableMap_clear_closure.builtin$cls = "ObservableMap_clear_closure";
  if (!"name" in ObservableMap_clear_closure)
    ObservableMap_clear_closure.name = "ObservableMap_clear_closure";
  $desc = $collectedClasses.ObservableMap_clear_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObservableMap_clear_closure.prototype = $desc;
  function ObserverTransform(_bindable, _getTransformer, _setTransformer, _observer_transform$_notifyCallback, _observer_transform$_value) {
    this._bindable = _bindable;
    this._getTransformer = _getTransformer;
    this._setTransformer = _setTransformer;
    this._observer_transform$_notifyCallback = _observer_transform$_notifyCallback;
    this._observer_transform$_value = _observer_transform$_value;
  }
  ObserverTransform.builtin$cls = "ObserverTransform";
  if (!"name" in ObserverTransform)
    ObserverTransform.name = "ObserverTransform";
  $desc = $collectedClasses.ObserverTransform;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObserverTransform.prototype = $desc;
  function PathObserver(_path_observer$_path, _object, _directObserver, _notifyCallback, _notifyArgumentCount, _path_observer$_value, _path_observer$_state) {
    this._path_observer$_path = _path_observer$_path;
    this._object = _object;
    this._directObserver = _directObserver;
    this._notifyCallback = _notifyCallback;
    this._notifyArgumentCount = _notifyArgumentCount;
    this._path_observer$_value = _path_observer$_value;
    this._path_observer$_state = _path_observer$_state;
  }
  PathObserver.builtin$cls = "PathObserver";
  if (!"name" in PathObserver)
    PathObserver.name = "PathObserver";
  $desc = $collectedClasses.PathObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathObserver.prototype = $desc;
  function PropertyPath(_segments) {
    this._segments = _segments;
  }
  PropertyPath.builtin$cls = "PropertyPath";
  if (!"name" in PropertyPath)
    PropertyPath.name = "PropertyPath";
  $desc = $collectedClasses.PropertyPath;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PropertyPath.prototype = $desc;
  function _InvalidPropertyPath(_segments) {
    this._segments = _segments;
  }
  _InvalidPropertyPath.builtin$cls = "_InvalidPropertyPath";
  if (!"name" in _InvalidPropertyPath)
    _InvalidPropertyPath.name = "_InvalidPropertyPath";
  $desc = $collectedClasses._InvalidPropertyPath;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _InvalidPropertyPath.prototype = $desc;
  function closure7() {
  }
  closure7.builtin$cls = "closure7";
  if (!"name" in closure7)
    closure7.name = "closure7";
  $desc = $collectedClasses.closure7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure7.prototype = $desc;
  function _PathParser(keys, index, key, _pathStateMachine) {
    this.keys = keys;
    this.index = index;
    this.key = key;
    this._pathStateMachine = _pathStateMachine;
  }
  _PathParser.builtin$cls = "_PathParser";
  if (!"name" in _PathParser)
    _PathParser.name = "_PathParser";
  $desc = $collectedClasses._PathParser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PathParser.prototype = $desc;
  _PathParser.prototype.get$keys = function() {
    return this.keys;
  };
  _PathParser.prototype.get$index = function(receiver) {
    return this.index;
  };
  _PathParser.prototype.get$key = function(receiver) {
    return this.key;
  };
  function _PathParser_push_closure() {
  }
  _PathParser_push_closure.builtin$cls = "_PathParser_push_closure";
  if (!"name" in _PathParser_push_closure)
    _PathParser_push_closure.name = "_PathParser_push_closure";
  $desc = $collectedClasses._PathParser_push_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PathParser_push_closure.prototype = $desc;
  function CompoundObserver(_directObserver, _reportChangesOnOpen, _observed, _notifyCallback, _notifyArgumentCount, _path_observer$_value, _path_observer$_state) {
    this._directObserver = _directObserver;
    this._reportChangesOnOpen = _reportChangesOnOpen;
    this._observed = _observed;
    this._notifyCallback = _notifyCallback;
    this._notifyArgumentCount = _notifyArgumentCount;
    this._path_observer$_value = _path_observer$_value;
    this._path_observer$_state = _path_observer$_state;
  }
  CompoundObserver.builtin$cls = "CompoundObserver";
  if (!"name" in CompoundObserver)
    CompoundObserver.name = "CompoundObserver";
  $desc = $collectedClasses.CompoundObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CompoundObserver.prototype = $desc;
  function CompoundObserver_addObserver_closure(this_0) {
    this.this_0 = this_0;
  }
  CompoundObserver_addObserver_closure.builtin$cls = "CompoundObserver_addObserver_closure";
  if (!"name" in CompoundObserver_addObserver_closure)
    CompoundObserver_addObserver_closure.name = "CompoundObserver_addObserver_closure";
  $desc = $collectedClasses.CompoundObserver_addObserver_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CompoundObserver_addObserver_closure.prototype = $desc;
  function CompoundObserver__check_closure(this_0) {
    this.this_0 = this_0;
  }
  CompoundObserver__check_closure.builtin$cls = "CompoundObserver__check_closure";
  if (!"name" in CompoundObserver__check_closure)
    CompoundObserver__check_closure.name = "CompoundObserver__check_closure";
  $desc = $collectedClasses.CompoundObserver__check_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CompoundObserver__check_closure.prototype = $desc;
  function _ObserverSentinel() {
  }
  _ObserverSentinel.builtin$cls = "_ObserverSentinel";
  if (!"name" in _ObserverSentinel)
    _ObserverSentinel.name = "_ObserverSentinel";
  $desc = $collectedClasses._ObserverSentinel;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ObserverSentinel.prototype = $desc;
  function _Observer() {
  }
  _Observer.builtin$cls = "_Observer";
  if (!"name" in _Observer)
    _Observer.name = "_Observer";
  $desc = $collectedClasses._Observer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Observer.prototype = $desc;
  function _ObservedSet(_rootObject, _rootObjectProperties, _path_observer$_observers, _objects) {
    this._rootObject = _rootObject;
    this._rootObjectProperties = _rootObjectProperties;
    this._path_observer$_observers = _path_observer$_observers;
    this._objects = _objects;
  }
  _ObservedSet.builtin$cls = "_ObservedSet";
  if (!"name" in _ObservedSet)
    _ObservedSet.name = "_ObservedSet";
  $desc = $collectedClasses._ObservedSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ObservedSet.prototype = $desc;
  function Context(style, _context1$_current) {
    this.style = style;
    this._context1$_current = _context1$_current;
  }
  Context.builtin$cls = "Context";
  if (!"name" in Context)
    Context.name = "Context";
  $desc = $collectedClasses.Context;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Context.prototype = $desc;
  function Context_join_closure() {
  }
  Context_join_closure.builtin$cls = "Context_join_closure";
  if (!"name" in Context_join_closure)
    Context_join_closure.name = "Context_join_closure";
  $desc = $collectedClasses.Context_join_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Context_join_closure.prototype = $desc;
  function Context_joinAll_closure() {
  }
  Context_joinAll_closure.builtin$cls = "Context_joinAll_closure";
  if (!"name" in Context_joinAll_closure)
    Context_joinAll_closure.name = "Context_joinAll_closure";
  $desc = $collectedClasses.Context_joinAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Context_joinAll_closure.prototype = $desc;
  function Context_split_closure() {
  }
  Context_split_closure.builtin$cls = "Context_split_closure";
  if (!"name" in Context_split_closure)
    Context_split_closure.name = "Context_split_closure";
  $desc = $collectedClasses.Context_split_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Context_split_closure.prototype = $desc;
  function _validateArgList_closure() {
  }
  _validateArgList_closure.builtin$cls = "_validateArgList_closure";
  if (!"name" in _validateArgList_closure)
    _validateArgList_closure.name = "_validateArgList_closure";
  $desc = $collectedClasses._validateArgList_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _validateArgList_closure.prototype = $desc;
  function InternalStyle() {
  }
  InternalStyle.builtin$cls = "InternalStyle";
  if (!"name" in InternalStyle)
    InternalStyle.name = "InternalStyle";
  $desc = $collectedClasses.InternalStyle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InternalStyle.prototype = $desc;
  function ParsedPath(style, root, isRootRelative, parts, separators) {
    this.style = style;
    this.root = root;
    this.isRootRelative = isRootRelative;
    this.parts = parts;
    this.separators = separators;
  }
  ParsedPath.builtin$cls = "ParsedPath";
  if (!"name" in ParsedPath)
    ParsedPath.name = "ParsedPath";
  $desc = $collectedClasses.ParsedPath;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParsedPath.prototype = $desc;
  function ParsedPath_normalize_closure(this_0) {
    this.this_0 = this_0;
  }
  ParsedPath_normalize_closure.builtin$cls = "ParsedPath_normalize_closure";
  if (!"name" in ParsedPath_normalize_closure)
    ParsedPath_normalize_closure.name = "ParsedPath_normalize_closure";
  $desc = $collectedClasses.ParsedPath_normalize_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParsedPath_normalize_closure.prototype = $desc;
  function PathException(message) {
    this.message = message;
  }
  PathException.builtin$cls = "PathException";
  if (!"name" in PathException)
    PathException.name = "PathException";
  $desc = $collectedClasses.PathException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathException.prototype = $desc;
  PathException.prototype.get$message = function(receiver) {
    return this.message;
  };
  PathException.prototype.set$message = function(receiver, v) {
    return this.message = v;
  };
  function Style() {
  }
  Style.builtin$cls = "Style";
  if (!"name" in Style)
    Style.name = "Style";
  $desc = $collectedClasses.Style;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Style.prototype = $desc;
  function PosixStyle(name, separator, separators, separatorPattern, needsSeparatorPattern, rootPattern, relativeRootPattern) {
    this.name = name;
    this.separator = separator;
    this.separators = separators;
    this.separatorPattern = separatorPattern;
    this.needsSeparatorPattern = needsSeparatorPattern;
    this.rootPattern = rootPattern;
    this.relativeRootPattern = relativeRootPattern;
  }
  PosixStyle.builtin$cls = "PosixStyle";
  if (!"name" in PosixStyle)
    PosixStyle.name = "PosixStyle";
  $desc = $collectedClasses.PosixStyle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PosixStyle.prototype = $desc;
  PosixStyle.prototype.get$name = function(receiver) {
    return this.name;
  };
  PosixStyle.prototype.get$separator = function() {
    return this.separator;
  };
  function UrlStyle(name, separator, separators, separatorPattern, needsSeparatorPattern, rootPattern, relativeRootPattern) {
    this.name = name;
    this.separator = separator;
    this.separators = separators;
    this.separatorPattern = separatorPattern;
    this.needsSeparatorPattern = needsSeparatorPattern;
    this.rootPattern = rootPattern;
    this.relativeRootPattern = relativeRootPattern;
  }
  UrlStyle.builtin$cls = "UrlStyle";
  if (!"name" in UrlStyle)
    UrlStyle.name = "UrlStyle";
  $desc = $collectedClasses.UrlStyle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UrlStyle.prototype = $desc;
  UrlStyle.prototype.get$name = function(receiver) {
    return this.name;
  };
  UrlStyle.prototype.get$separator = function() {
    return this.separator;
  };
  function WindowsStyle(name, separator, separators, separatorPattern, needsSeparatorPattern, rootPattern, relativeRootPattern) {
    this.name = name;
    this.separator = separator;
    this.separators = separators;
    this.separatorPattern = separatorPattern;
    this.needsSeparatorPattern = needsSeparatorPattern;
    this.rootPattern = rootPattern;
    this.relativeRootPattern = relativeRootPattern;
  }
  WindowsStyle.builtin$cls = "WindowsStyle";
  if (!"name" in WindowsStyle)
    WindowsStyle.name = "WindowsStyle";
  $desc = $collectedClasses.WindowsStyle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WindowsStyle.prototype = $desc;
  WindowsStyle.prototype.get$name = function(receiver) {
    return this.name;
  };
  WindowsStyle.prototype.get$separator = function() {
    return this.separator;
  };
  function PolymerDeclaration(element, type, superDeclaration, name, _polymer$_publish, _publishLC, _observe, _computed, _instanceAttributes, _reflect, _sheets, _styles, syntax, _eventDelegates, _templateDelegates, _rootUri) {
    this.element = element;
    this.type = type;
    this.superDeclaration = superDeclaration;
    this.name = name;
    this._polymer$_publish = _polymer$_publish;
    this._publishLC = _publishLC;
    this._observe = _observe;
    this._computed = _computed;
    this._instanceAttributes = _instanceAttributes;
    this._reflect = _reflect;
    this._sheets = _sheets;
    this._styles = _styles;
    this.syntax = syntax;
    this._eventDelegates = _eventDelegates;
    this._templateDelegates = _templateDelegates;
    this._rootUri = _rootUri;
  }
  PolymerDeclaration.builtin$cls = "PolymerDeclaration";
  if (!"name" in PolymerDeclaration)
    PolymerDeclaration.name = "PolymerDeclaration";
  $desc = $collectedClasses.PolymerDeclaration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration.prototype = $desc;
  PolymerDeclaration.prototype.get$element = function(receiver) {
    return this.element;
  };
  PolymerDeclaration.prototype.get$type = function(receiver) {
    return this.type;
  };
  PolymerDeclaration.prototype.get$superDeclaration = function() {
    return this.superDeclaration;
  };
  PolymerDeclaration.prototype.get$name = function(receiver) {
    return this.name;
  };
  PolymerDeclaration.prototype.get$_polymer$_publish = function() {
    return this._polymer$_publish;
  };
  PolymerDeclaration.prototype.get$_publishLC = function() {
    return this._publishLC;
  };
  PolymerDeclaration.prototype.get$_observe = function(receiver) {
    return this._observe;
  };
  PolymerDeclaration.prototype.get$_computed = function() {
    return this._computed;
  };
  PolymerDeclaration.prototype.get$_instanceAttributes = function() {
    return this._instanceAttributes;
  };
  PolymerDeclaration.prototype.get$_reflect = function() {
    return this._reflect;
  };
  PolymerDeclaration.prototype.get$syntax = function(receiver) {
    return this.syntax;
  };
  PolymerDeclaration.prototype.get$_eventDelegates = function() {
    return this._eventDelegates;
  };
  function PolymerDeclaration__getPublishedProperties_closure() {
  }
  PolymerDeclaration__getPublishedProperties_closure.builtin$cls = "PolymerDeclaration__getPublishedProperties_closure";
  if (!"name" in PolymerDeclaration__getPublishedProperties_closure)
    PolymerDeclaration__getPublishedProperties_closure.name = "PolymerDeclaration__getPublishedProperties_closure";
  $desc = $collectedClasses.PolymerDeclaration__getPublishedProperties_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration__getPublishedProperties_closure.prototype = $desc;
  function PolymerDeclaration__getPublishedProperties_closure0() {
  }
  PolymerDeclaration__getPublishedProperties_closure0.builtin$cls = "PolymerDeclaration__getPublishedProperties_closure0";
  if (!"name" in PolymerDeclaration__getPublishedProperties_closure0)
    PolymerDeclaration__getPublishedProperties_closure0.name = "PolymerDeclaration__getPublishedProperties_closure0";
  $desc = $collectedClasses.PolymerDeclaration__getPublishedProperties_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration__getPublishedProperties_closure0.prototype = $desc;
  function PolymerDeclaration_accumulateInstanceAttributes_closure(this_0) {
    this.this_0 = this_0;
  }
  PolymerDeclaration_accumulateInstanceAttributes_closure.builtin$cls = "PolymerDeclaration_accumulateInstanceAttributes_closure";
  if (!"name" in PolymerDeclaration_accumulateInstanceAttributes_closure)
    PolymerDeclaration_accumulateInstanceAttributes_closure.name = "PolymerDeclaration_accumulateInstanceAttributes_closure";
  $desc = $collectedClasses.PolymerDeclaration_accumulateInstanceAttributes_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration_accumulateInstanceAttributes_closure.prototype = $desc;
  function PolymerDeclaration_addAttributeDelegates_closure(delegates_0) {
    this.delegates_0 = delegates_0;
  }
  PolymerDeclaration_addAttributeDelegates_closure.builtin$cls = "PolymerDeclaration_addAttributeDelegates_closure";
  if (!"name" in PolymerDeclaration_addAttributeDelegates_closure)
    PolymerDeclaration_addAttributeDelegates_closure.name = "PolymerDeclaration_addAttributeDelegates_closure";
  $desc = $collectedClasses.PolymerDeclaration_addAttributeDelegates_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration_addAttributeDelegates_closure.prototype = $desc;
  function PolymerDeclaration_installLocalSheets_closure() {
  }
  PolymerDeclaration_installLocalSheets_closure.builtin$cls = "PolymerDeclaration_installLocalSheets_closure";
  if (!"name" in PolymerDeclaration_installLocalSheets_closure)
    PolymerDeclaration_installLocalSheets_closure.name = "PolymerDeclaration_installLocalSheets_closure";
  $desc = $collectedClasses.PolymerDeclaration_installLocalSheets_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration_installLocalSheets_closure.prototype = $desc;
  function PolymerDeclaration_cssTextForScope_matcher(selector_0) {
    this.selector_0 = selector_0;
  }
  PolymerDeclaration_cssTextForScope_matcher.builtin$cls = "PolymerDeclaration_cssTextForScope_matcher";
  if (!"name" in PolymerDeclaration_cssTextForScope_matcher)
    PolymerDeclaration_cssTextForScope_matcher.name = "PolymerDeclaration_cssTextForScope_matcher";
  $desc = $collectedClasses.PolymerDeclaration_cssTextForScope_matcher;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration_cssTextForScope_matcher.prototype = $desc;
  function PolymerDeclaration_explodeObservers_closure() {
  }
  PolymerDeclaration_explodeObservers_closure.builtin$cls = "PolymerDeclaration_explodeObservers_closure";
  if (!"name" in PolymerDeclaration_explodeObservers_closure)
    PolymerDeclaration_explodeObservers_closure.name = "PolymerDeclaration_explodeObservers_closure";
  $desc = $collectedClasses.PolymerDeclaration_explodeObservers_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration_explodeObservers_closure.prototype = $desc;
  function PolymerDeclaration__lowerCaseMap_closure(map_0) {
    this.map_0 = map_0;
  }
  PolymerDeclaration__lowerCaseMap_closure.builtin$cls = "PolymerDeclaration__lowerCaseMap_closure";
  if (!"name" in PolymerDeclaration__lowerCaseMap_closure)
    PolymerDeclaration__lowerCaseMap_closure.name = "PolymerDeclaration__lowerCaseMap_closure";
  $desc = $collectedClasses.PolymerDeclaration__lowerCaseMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration__lowerCaseMap_closure.prototype = $desc;
  function PolymerDeclaration_createPropertyAccessors_closure() {
  }
  PolymerDeclaration_createPropertyAccessors_closure.builtin$cls = "PolymerDeclaration_createPropertyAccessors_closure";
  if (!"name" in PolymerDeclaration_createPropertyAccessors_closure)
    PolymerDeclaration_createPropertyAccessors_closure.name = "PolymerDeclaration_createPropertyAccessors_closure";
  $desc = $collectedClasses.PolymerDeclaration_createPropertyAccessors_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration_createPropertyAccessors_closure.prototype = $desc;
  function PolymerExpressions(_polymer$_delegate, _bindingMaps) {
    this._polymer$_delegate = _polymer$_delegate;
    this._bindingMaps = _bindingMaps;
  }
  PolymerExpressions.builtin$cls = "PolymerExpressions";
  if (!"name" in PolymerExpressions)
    PolymerExpressions.name = "PolymerExpressions";
  $desc = $collectedClasses.PolymerExpressions;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerExpressions.prototype = $desc;
  function BindingDelegate_PolymerEventBindings() {
  }
  BindingDelegate_PolymerEventBindings.builtin$cls = "BindingDelegate_PolymerEventBindings";
  if (!"name" in BindingDelegate_PolymerEventBindings)
    BindingDelegate_PolymerEventBindings.name = "BindingDelegate_PolymerEventBindings";
  $desc = $collectedClasses.BindingDelegate_PolymerEventBindings;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BindingDelegate_PolymerEventBindings.prototype = $desc;
  function PolymerEventBindings() {
  }
  PolymerEventBindings.builtin$cls = "PolymerEventBindings";
  if (!"name" in PolymerEventBindings)
    PolymerEventBindings.name = "PolymerEventBindings";
  $desc = $collectedClasses.PolymerEventBindings;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerEventBindings.prototype = $desc;
  function PolymerEventBindings_getEventHandler_closure(box_0, this_1, target_2, method_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.target_2 = target_2;
    this.method_3 = method_3;
  }
  PolymerEventBindings_getEventHandler_closure.builtin$cls = "PolymerEventBindings_getEventHandler_closure";
  if (!"name" in PolymerEventBindings_getEventHandler_closure)
    PolymerEventBindings_getEventHandler_closure.name = "PolymerEventBindings_getEventHandler_closure";
  $desc = $collectedClasses.PolymerEventBindings_getEventHandler_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerEventBindings_getEventHandler_closure.prototype = $desc;
  function PolymerEventBindings_prepareEventBinding_closure(box_0, this_1, path_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.path_2 = path_2;
  }
  PolymerEventBindings_prepareEventBinding_closure.builtin$cls = "PolymerEventBindings_prepareEventBinding_closure";
  if (!"name" in PolymerEventBindings_prepareEventBinding_closure)
    PolymerEventBindings_prepareEventBinding_closure.name = "PolymerEventBindings_prepareEventBinding_closure";
  $desc = $collectedClasses.PolymerEventBindings_prepareEventBinding_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerEventBindings_prepareEventBinding_closure.prototype = $desc;
  function PolymerEventBindings_prepareEventBinding__closure(eventHandler_3) {
    this.eventHandler_3 = eventHandler_3;
  }
  PolymerEventBindings_prepareEventBinding__closure.builtin$cls = "PolymerEventBindings_prepareEventBinding__closure";
  if (!"name" in PolymerEventBindings_prepareEventBinding__closure)
    PolymerEventBindings_prepareEventBinding__closure.name = "PolymerEventBindings_prepareEventBinding__closure";
  $desc = $collectedClasses.PolymerEventBindings_prepareEventBinding__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerEventBindings_prepareEventBinding__closure.prototype = $desc;
  function _EventBindable(_polymer$_path, _polymer$_node, _polymer$_eventType, _polymer$_handler) {
    this._polymer$_path = _polymer$_path;
    this._polymer$_node = _polymer$_node;
    this._polymer$_eventType = _polymer$_eventType;
    this._polymer$_handler = _polymer$_handler;
  }
  _EventBindable.builtin$cls = "_EventBindable";
  if (!"name" in _EventBindable)
    _EventBindable.name = "_EventBindable";
  $desc = $collectedClasses._EventBindable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventBindable.prototype = $desc;
  function PublishedProperty(reflect) {
    this.reflect = reflect;
  }
  PublishedProperty.builtin$cls = "PublishedProperty";
  if (!"name" in PublishedProperty)
    PublishedProperty.name = "PublishedProperty";
  $desc = $collectedClasses.PublishedProperty;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PublishedProperty.prototype = $desc;
  PublishedProperty.prototype.get$reflect = function() {
    return this.reflect;
  };
  function PolymerElement(change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_change_notifier$_records, polymer$Polymer$_polymer$_element, polymer$Polymer$_namedObservers, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$_readied, polymer$Polymer$_jsElem, polymer$Polymer$_hasBeenAttached, polymer$Polymer$shadowRoots, polymer$Polymer$$, polymer$Polymer$_properties, polymer$Polymer$_polyfillScopeStyleCache) {
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_change_notifier$_records = change_notifier$ChangeNotifier$_change_notifier$_records;
    this.polymer$Polymer$_polymer$_element = polymer$Polymer$_polymer$_element;
    this.polymer$Polymer$_namedObservers = polymer$Polymer$_namedObservers;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$_readied = polymer$Polymer$_readied;
    this.polymer$Polymer$_jsElem = polymer$Polymer$_jsElem;
    this.polymer$Polymer$_hasBeenAttached = polymer$Polymer$_hasBeenAttached;
    this.polymer$Polymer$shadowRoots = polymer$Polymer$shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
    this.polymer$Polymer$_properties = polymer$Polymer$_properties;
    this.polymer$Polymer$_polyfillScopeStyleCache = polymer$Polymer$_polyfillScopeStyleCache;
  }
  PolymerElement.builtin$cls = "PolymerElement";
  if (!"name" in PolymerElement)
    PolymerElement.name = "PolymerElement";
  $desc = $collectedClasses.PolymerElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerElement.prototype = $desc;
  function HtmlElement_Polymer(polymer$Polymer$_jsElem, polymer$Polymer$$) {
    this.polymer$Polymer$_jsElem = polymer$Polymer$_jsElem;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  HtmlElement_Polymer.builtin$cls = "HtmlElement_Polymer";
  if (!"name" in HtmlElement_Polymer)
    HtmlElement_Polymer.name = "HtmlElement_Polymer";
  $desc = $collectedClasses.HtmlElement_Polymer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement_Polymer.prototype = $desc;
  Polymer.prototype.get$_jsElem = function(receiver) {
    return receiver.polymer$Polymer$_jsElem;
  };
  Polymer.prototype.get$$$ = function(receiver) {
    return receiver.polymer$Polymer$$;
  };
  function HtmlElement_Polymer_ChangeNotifier() {
  }
  HtmlElement_Polymer_ChangeNotifier.builtin$cls = "HtmlElement_Polymer_ChangeNotifier";
  if (!"name" in HtmlElement_Polymer_ChangeNotifier)
    HtmlElement_Polymer_ChangeNotifier.name = "HtmlElement_Polymer_ChangeNotifier";
  $desc = $collectedClasses.HtmlElement_Polymer_ChangeNotifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement_Polymer_ChangeNotifier.prototype = $desc;
  function Polymer(polymer$Polymer$_jsElem, polymer$Polymer$$) {
    this.polymer$Polymer$_jsElem = polymer$Polymer$_jsElem;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  Polymer.builtin$cls = "Polymer";
  if (!"name" in Polymer)
    Polymer.name = "Polymer";
  $desc = $collectedClasses.Polymer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer.prototype = $desc;
  Polymer.prototype.get$_jsElem = function(receiver) {
    return receiver.polymer$Polymer$_jsElem;
  };
  Polymer.prototype.get$$$ = function(receiver) {
    return receiver.polymer$Polymer$$;
  };
  function Polymer_makeElementReady_closure(this_0) {
    this.this_0 = this_0;
  }
  Polymer_makeElementReady_closure.builtin$cls = "Polymer_makeElementReady_closure";
  if (!"name" in Polymer_makeElementReady_closure)
    Polymer_makeElementReady_closure.name = "Polymer_makeElementReady_closure";
  $desc = $collectedClasses.Polymer_makeElementReady_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_makeElementReady_closure.prototype = $desc;
  function Polymer_attached_closure(this_0) {
    this.this_0 = this_0;
  }
  Polymer_attached_closure.builtin$cls = "Polymer_attached_closure";
  if (!"name" in Polymer_attached_closure)
    Polymer_attached_closure.name = "Polymer_attached_closure";
  $desc = $collectedClasses.Polymer_attached_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_attached_closure.prototype = $desc;
  function Polymer_copyInstanceAttributes_closure(this_0) {
    this.this_0 = this_0;
  }
  Polymer_copyInstanceAttributes_closure.builtin$cls = "Polymer_copyInstanceAttributes_closure";
  if (!"name" in Polymer_copyInstanceAttributes_closure)
    Polymer_copyInstanceAttributes_closure.name = "Polymer_copyInstanceAttributes_closure";
  $desc = $collectedClasses.Polymer_copyInstanceAttributes_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_copyInstanceAttributes_closure.prototype = $desc;
  function Polymer_copyInstanceAttributes__closure(value_1) {
    this.value_1 = value_1;
  }
  Polymer_copyInstanceAttributes__closure.builtin$cls = "Polymer_copyInstanceAttributes__closure";
  if (!"name" in Polymer_copyInstanceAttributes__closure)
    Polymer_copyInstanceAttributes__closure.name = "Polymer_copyInstanceAttributes__closure";
  $desc = $collectedClasses.Polymer_copyInstanceAttributes__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_copyInstanceAttributes__closure.prototype = $desc;
  function Polymer_asyncUnbindAll_closure(this_0) {
    this.this_0 = this_0;
  }
  Polymer_asyncUnbindAll_closure.builtin$cls = "Polymer_asyncUnbindAll_closure";
  if (!"name" in Polymer_asyncUnbindAll_closure)
    Polymer_asyncUnbindAll_closure.name = "Polymer_asyncUnbindAll_closure";
  $desc = $collectedClasses.Polymer_asyncUnbindAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_asyncUnbindAll_closure.prototype = $desc;
  function Polymer_cancelUnbindAll_closure(this_0) {
    this.this_0 = this_0;
  }
  Polymer_cancelUnbindAll_closure.builtin$cls = "Polymer_cancelUnbindAll_closure";
  if (!"name" in Polymer_cancelUnbindAll_closure)
    Polymer_cancelUnbindAll_closure.name = "Polymer_cancelUnbindAll_closure";
  $desc = $collectedClasses.Polymer_cancelUnbindAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_cancelUnbindAll_closure.prototype = $desc;
  function Polymer_cancelUnbindAll_closure0(this_1) {
    this.this_1 = this_1;
  }
  Polymer_cancelUnbindAll_closure0.builtin$cls = "Polymer_cancelUnbindAll_closure0";
  if (!"name" in Polymer_cancelUnbindAll_closure0)
    Polymer_cancelUnbindAll_closure0.name = "Polymer_cancelUnbindAll_closure0";
  $desc = $collectedClasses.Polymer_cancelUnbindAll_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_cancelUnbindAll_closure0.prototype = $desc;
  function Polymer_notifyPropertyChanges_closure(this_0, newValues_1, oldValues_2, paths_3, observe_4, called_5) {
    this.this_0 = this_0;
    this.newValues_1 = newValues_1;
    this.oldValues_2 = oldValues_2;
    this.paths_3 = paths_3;
    this.observe_4 = observe_4;
    this.called_5 = called_5;
  }
  Polymer_notifyPropertyChanges_closure.builtin$cls = "Polymer_notifyPropertyChanges_closure";
  if (!"name" in Polymer_notifyPropertyChanges_closure)
    Polymer_notifyPropertyChanges_closure.name = "Polymer_notifyPropertyChanges_closure";
  $desc = $collectedClasses.Polymer_notifyPropertyChanges_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_notifyPropertyChanges_closure.prototype = $desc;
  function Polymer__propertyChange_closure(this_0, nameSymbol_1, newValue_2, oldValue_3) {
    this.this_0 = this_0;
    this.nameSymbol_1 = nameSymbol_1;
    this.newValue_2 = newValue_2;
    this.oldValue_3 = oldValue_3;
  }
  Polymer__propertyChange_closure.builtin$cls = "Polymer__propertyChange_closure";
  if (!"name" in Polymer__propertyChange_closure)
    Polymer__propertyChange_closure.name = "Polymer__propertyChange_closure";
  $desc = $collectedClasses.Polymer__propertyChange_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer__propertyChange_closure.prototype = $desc;
  function Polymer_observeArrayValue_closure(this_0, name_1) {
    this.this_0 = this_0;
    this.name_1 = name_1;
  }
  Polymer_observeArrayValue_closure.builtin$cls = "Polymer_observeArrayValue_closure";
  if (!"name" in Polymer_observeArrayValue_closure)
    Polymer_observeArrayValue_closure.name = "Polymer_observeArrayValue_closure";
  $desc = $collectedClasses.Polymer_observeArrayValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_observeArrayValue_closure.prototype = $desc;
  function Polymer_observeArrayValue_closure0(this_2, name_3) {
    this.this_2 = this_2;
    this.name_3 = name_3;
  }
  Polymer_observeArrayValue_closure0.builtin$cls = "Polymer_observeArrayValue_closure0";
  if (!"name" in Polymer_observeArrayValue_closure0)
    Polymer_observeArrayValue_closure0.name = "Polymer_observeArrayValue_closure0";
  $desc = $collectedClasses.Polymer_observeArrayValue_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_observeArrayValue_closure0.prototype = $desc;
  function Polymer_observeArrayValue_closure1(this_4, callbacks_5) {
    this.this_4 = this_4;
    this.callbacks_5 = callbacks_5;
  }
  Polymer_observeArrayValue_closure1.builtin$cls = "Polymer_observeArrayValue_closure1";
  if (!"name" in Polymer_observeArrayValue_closure1)
    Polymer_observeArrayValue_closure1.name = "Polymer_observeArrayValue_closure1";
  $desc = $collectedClasses.Polymer_observeArrayValue_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_observeArrayValue_closure1.prototype = $desc;
  function Polymer_bindProperty_closure(this_0, name_1, bindableOrValue_2) {
    this.this_0 = this_0;
    this.name_1 = name_1;
    this.bindableOrValue_2 = bindableOrValue_2;
  }
  Polymer_bindProperty_closure.builtin$cls = "Polymer_bindProperty_closure";
  if (!"name" in Polymer_bindProperty_closure)
    Polymer_bindProperty_closure.name = "Polymer_bindProperty_closure";
  $desc = $collectedClasses.Polymer_bindProperty_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_bindProperty_closure.prototype = $desc;
  function Polymer_bindProperty_closure0(this_3, name_4, bindableOrValue_5) {
    this.this_3 = this_3;
    this.name_4 = name_4;
    this.bindableOrValue_5 = bindableOrValue_5;
  }
  Polymer_bindProperty_closure0.builtin$cls = "Polymer_bindProperty_closure0";
  if (!"name" in Polymer_bindProperty_closure0)
    Polymer_bindProperty_closure0.name = "Polymer_bindProperty_closure0";
  $desc = $collectedClasses.Polymer_bindProperty_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_bindProperty_closure0.prototype = $desc;
  function Polymer_addHostListeners_closure(this_0, events_1) {
    this.this_0 = this_0;
    this.events_1 = events_1;
  }
  Polymer_addHostListeners_closure.builtin$cls = "Polymer_addHostListeners_closure";
  if (!"name" in Polymer_addHostListeners_closure)
    Polymer_addHostListeners_closure.name = "Polymer_addHostListeners_closure";
  $desc = $collectedClasses.Polymer_addHostListeners_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_addHostListeners_closure.prototype = $desc;
  function Polymer_addHostListeners_closure0(this_2) {
    this.this_2 = this_2;
  }
  Polymer_addHostListeners_closure0.builtin$cls = "Polymer_addHostListeners_closure0";
  if (!"name" in Polymer_addHostListeners_closure0)
    Polymer_addHostListeners_closure0.name = "Polymer_addHostListeners_closure0";
  $desc = $collectedClasses.Polymer_addHostListeners_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_addHostListeners_closure0.prototype = $desc;
  function Polymer_dispatchMethod_closure(this_0, callbackOrMethod_1) {
    this.this_0 = this_0;
    this.callbackOrMethod_1 = callbackOrMethod_1;
  }
  Polymer_dispatchMethod_closure.builtin$cls = "Polymer_dispatchMethod_closure";
  if (!"name" in Polymer_dispatchMethod_closure)
    Polymer_dispatchMethod_closure.name = "Polymer_dispatchMethod_closure";
  $desc = $collectedClasses.Polymer_dispatchMethod_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_dispatchMethod_closure.prototype = $desc;
  function Polymer_dispatchMethod_closure0(this_2, callbackOrMethod_3) {
    this.this_2 = this_2;
    this.callbackOrMethod_3 = callbackOrMethod_3;
  }
  Polymer_dispatchMethod_closure0.builtin$cls = "Polymer_dispatchMethod_closure0";
  if (!"name" in Polymer_dispatchMethod_closure0)
    Polymer_dispatchMethod_closure0.name = "Polymer_dispatchMethod_closure0";
  $desc = $collectedClasses.Polymer_dispatchMethod_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_dispatchMethod_closure0.prototype = $desc;
  function _PolymerBinding(_polymer$_target, _property, _polymer$_bindable, _sub, _lastValue) {
    this._polymer$_target = _polymer$_target;
    this._property = _property;
    this._polymer$_bindable = _polymer$_bindable;
    this._sub = _sub;
    this._lastValue = _lastValue;
  }
  _PolymerBinding.builtin$cls = "_PolymerBinding";
  if (!"name" in _PolymerBinding)
    _PolymerBinding.name = "_PolymerBinding";
  $desc = $collectedClasses._PolymerBinding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PolymerBinding.prototype = $desc;
  function _CloseOnlyBinding(accessor) {
    this.accessor = accessor;
  }
  _CloseOnlyBinding.builtin$cls = "_CloseOnlyBinding";
  if (!"name" in _CloseOnlyBinding)
    _CloseOnlyBinding.name = "_CloseOnlyBinding";
  $desc = $collectedClasses._CloseOnlyBinding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CloseOnlyBinding.prototype = $desc;
  function PolymerJob(_callback, _polymer$_timer, _id) {
    this._callback = _callback;
    this._polymer$_timer = _polymer$_timer;
    this._id = _id;
  }
  PolymerJob.builtin$cls = "PolymerJob";
  if (!"name" in PolymerJob)
    PolymerJob.name = "PolymerJob";
  $desc = $collectedClasses.PolymerJob;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerJob.prototype = $desc;
  function PolymerJob_start_closure(this_0) {
    this.this_0 = this_0;
  }
  PolymerJob_start_closure.builtin$cls = "PolymerJob_start_closure";
  if (!"name" in PolymerJob_start_closure)
    PolymerJob_start_closure.name = "PolymerJob_start_closure";
  $desc = $collectedClasses.PolymerJob_start_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerJob_start_closure.prototype = $desc;
  function CustomTag(tagName) {
    this.tagName = tagName;
  }
  CustomTag.builtin$cls = "CustomTag";
  if (!"name" in CustomTag)
    CustomTag.name = "CustomTag";
  $desc = $collectedClasses.CustomTag;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CustomTag.prototype = $desc;
  CustomTag.prototype.get$tagName = function(receiver) {
    return this.tagName;
  };
  function InitMethodAnnotation() {
  }
  InitMethodAnnotation.builtin$cls = "InitMethodAnnotation";
  if (!"name" in InitMethodAnnotation)
    InitMethodAnnotation.name = "InitMethodAnnotation";
  $desc = $collectedClasses.InitMethodAnnotation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InitMethodAnnotation.prototype = $desc;
  function initPolymer_closure() {
  }
  initPolymer_closure.builtin$cls = "initPolymer_closure";
  if (!"name" in initPolymer_closure)
    initPolymer_closure.name = "initPolymer_closure";
  $desc = $collectedClasses.initPolymer_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initPolymer_closure.prototype = $desc;
  function _hookJsPolymer_closure() {
  }
  _hookJsPolymer_closure.builtin$cls = "_hookJsPolymer_closure";
  if (!"name" in _hookJsPolymer_closure)
    _hookJsPolymer_closure.name = "_hookJsPolymer_closure";
  $desc = $collectedClasses._hookJsPolymer_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _hookJsPolymer_closure.prototype = $desc;
  function _hookJsPolymer_registerDart(zone_0, originalRegister_1) {
    this.zone_0 = zone_0;
    this.originalRegister_1 = originalRegister_1;
  }
  _hookJsPolymer_registerDart.builtin$cls = "_hookJsPolymer_registerDart";
  if (!"name" in _hookJsPolymer_registerDart)
    _hookJsPolymer_registerDart.name = "_hookJsPolymer_registerDart";
  $desc = $collectedClasses._hookJsPolymer_registerDart;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _hookJsPolymer_registerDart.prototype = $desc;
  function _hookJsPolymer_registerDart_closure(jsElem_2, name_3, type_4, extendsDecl_5) {
    this.jsElem_2 = jsElem_2;
    this.name_3 = name_3;
    this.type_4 = type_4;
    this.extendsDecl_5 = extendsDecl_5;
  }
  _hookJsPolymer_registerDart_closure.builtin$cls = "_hookJsPolymer_registerDart_closure";
  if (!"name" in _hookJsPolymer_registerDart_closure)
    _hookJsPolymer_registerDart_closure.name = "_hookJsPolymer_registerDart_closure";
  $desc = $collectedClasses._hookJsPolymer_registerDart_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _hookJsPolymer_registerDart_closure.prototype = $desc;
  function closure() {
  }
  closure.builtin$cls = "closure";
  if (!"name" in closure)
    closure.name = "closure";
  $desc = $collectedClasses.closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure.prototype = $desc;
  function _initializeLogging_closure(box_0) {
    this.box_0 = box_0;
  }
  _initializeLogging_closure.builtin$cls = "_initializeLogging_closure";
  if (!"name" in _initializeLogging_closure)
    _initializeLogging_closure.name = "_initializeLogging_closure";
  $desc = $collectedClasses._initializeLogging_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _initializeLogging_closure.prototype = $desc;
  function _initializeLogging_closure0(box_0) {
    this.box_0 = box_0;
  }
  _initializeLogging_closure0.builtin$cls = "_initializeLogging_closure0";
  if (!"name" in _initializeLogging_closure0)
    _initializeLogging_closure0.name = "_initializeLogging_closure0";
  $desc = $collectedClasses._initializeLogging_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _initializeLogging_closure0.prototype = $desc;
  function _initializeLogging_closure1() {
  }
  _initializeLogging_closure1.builtin$cls = "_initializeLogging_closure1";
  if (!"name" in _initializeLogging_closure1)
    _initializeLogging_closure1.name = "_initializeLogging_closure1";
  $desc = $collectedClasses._initializeLogging_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _initializeLogging_closure1.prototype = $desc;
  function _initializeLogging_closure2() {
  }
  _initializeLogging_closure2.builtin$cls = "_initializeLogging_closure2";
  if (!"name" in _initializeLogging_closure2)
    _initializeLogging_closure2.name = "_initializeLogging_closure2";
  $desc = $collectedClasses._initializeLogging_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _initializeLogging_closure2.prototype = $desc;
  function _PropertyAccessor(_polymer$_name, _polymer$_value, _polymer$_target, bindable) {
    this._polymer$_name = _polymer$_name;
    this._polymer$_value = _polymer$_value;
    this._polymer$_target = _polymer$_target;
    this.bindable = bindable;
  }
  _PropertyAccessor.builtin$cls = "_PropertyAccessor";
  if (!"name" in _PropertyAccessor)
    _PropertyAccessor.name = "_PropertyAccessor";
  $desc = $collectedClasses._PropertyAccessor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PropertyAccessor.prototype = $desc;
  function AutoBindingElement(_auto_binding$_self, observable$Observable$_observable$_changes, observable$Observable$_values, observable$Observable$_records, polymer$Polymer$_polymer$_element, polymer$Polymer$_namedObservers, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$_readied, polymer$Polymer$_jsElem, polymer$Polymer$_hasBeenAttached, polymer$Polymer$shadowRoots, polymer$Polymer$$, polymer$Polymer$_properties, polymer$Polymer$_polyfillScopeStyleCache) {
    this._auto_binding$_self = _auto_binding$_self;
    this.observable$Observable$_observable$_changes = observable$Observable$_observable$_changes;
    this.observable$Observable$_values = observable$Observable$_values;
    this.observable$Observable$_records = observable$Observable$_records;
    this.polymer$Polymer$_polymer$_element = polymer$Polymer$_polymer$_element;
    this.polymer$Polymer$_namedObservers = polymer$Polymer$_namedObservers;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$_readied = polymer$Polymer$_readied;
    this.polymer$Polymer$_jsElem = polymer$Polymer$_jsElem;
    this.polymer$Polymer$_hasBeenAttached = polymer$Polymer$_hasBeenAttached;
    this.polymer$Polymer$shadowRoots = polymer$Polymer$shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
    this.polymer$Polymer$_properties = polymer$Polymer$_properties;
    this.polymer$Polymer$_polyfillScopeStyleCache = polymer$Polymer$_polyfillScopeStyleCache;
  }
  AutoBindingElement.builtin$cls = "AutoBindingElement";
  if (!"name" in AutoBindingElement)
    AutoBindingElement.name = "AutoBindingElement";
  $desc = $collectedClasses.AutoBindingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AutoBindingElement.prototype = $desc;
  function TemplateElement_Polymer(polymer$Polymer$_jsElem, polymer$Polymer$$) {
    this.polymer$Polymer$_jsElem = polymer$Polymer$_jsElem;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  TemplateElement_Polymer.builtin$cls = "TemplateElement_Polymer";
  if (!"name" in TemplateElement_Polymer)
    TemplateElement_Polymer.name = "TemplateElement_Polymer";
  $desc = $collectedClasses.TemplateElement_Polymer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateElement_Polymer.prototype = $desc;
  Polymer.prototype.get$_jsElem = function(receiver) {
    return receiver.polymer$Polymer$_jsElem;
  };
  Polymer.prototype.get$$$ = function(receiver) {
    return receiver.polymer$Polymer$$;
  };
  function TemplateElement_Polymer_Observable(observable$Observable$_observable$_changes, observable$Observable$_values, observable$Observable$_records) {
    this.observable$Observable$_observable$_changes = observable$Observable$_observable$_changes;
    this.observable$Observable$_values = observable$Observable$_values;
    this.observable$Observable$_records = observable$Observable$_records;
  }
  TemplateElement_Polymer_Observable.builtin$cls = "TemplateElement_Polymer_Observable";
  if (!"name" in TemplateElement_Polymer_Observable)
    TemplateElement_Polymer_Observable.name = "TemplateElement_Polymer_Observable";
  $desc = $collectedClasses.TemplateElement_Polymer_Observable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateElement_Polymer_Observable.prototype = $desc;
  Observable.prototype.get$_observable$_changes = function(receiver) {
    return receiver.observable$Observable$_observable$_changes;
  };
  Observable.prototype.set$_observable$_changes = function(receiver, v) {
    return receiver.observable$Observable$_observable$_changes = v;
  };
  Observable.prototype.get$_values = function(receiver) {
    return receiver.observable$Observable$_values;
  };
  Observable.prototype.set$_values = function(receiver, v) {
    return receiver.observable$Observable$_values = v;
  };
  Observable.prototype.get$_records = function(receiver) {
    return receiver.observable$Observable$_records;
  };
  Observable.prototype.set$_records = function(receiver, v) {
    return receiver.observable$Observable$_records = v;
  };
  function AutoBindingElement$created_closure(this_0) {
    this.this_0 = this_0;
  }
  AutoBindingElement$created_closure.builtin$cls = "AutoBindingElement$created_closure";
  if (!"name" in AutoBindingElement$created_closure)
    AutoBindingElement$created_closure.name = "AutoBindingElement$created_closure";
  $desc = $collectedClasses.AutoBindingElement$created_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AutoBindingElement$created_closure.prototype = $desc;
  function AutoBindingElement$created__closure(this_1) {
    this.this_1 = this_1;
  }
  AutoBindingElement$created__closure.builtin$cls = "AutoBindingElement$created__closure";
  if (!"name" in AutoBindingElement$created__closure)
    AutoBindingElement$created__closure.name = "AutoBindingElement$created__closure";
  $desc = $collectedClasses.AutoBindingElement$created__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AutoBindingElement$created__closure.prototype = $desc;
  function _AutoBindingSyntax(_auto_binding$_node, _polymer$_delegate, _bindingMaps) {
    this._auto_binding$_node = _auto_binding$_node;
    this._polymer$_delegate = _polymer$_delegate;
    this._bindingMaps = _bindingMaps;
  }
  _AutoBindingSyntax.builtin$cls = "_AutoBindingSyntax";
  if (!"name" in _AutoBindingSyntax)
    _AutoBindingSyntax.name = "_AutoBindingSyntax";
  $desc = $collectedClasses._AutoBindingSyntax;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AutoBindingSyntax.prototype = $desc;
  function LogInjector(selectedMenu, selectedContent) {
    this.selectedMenu = selectedMenu;
    this.selectedContent = selectedContent;
  }
  LogInjector.builtin$cls = "LogInjector";
  if (!"name" in LogInjector)
    LogInjector.name = "LogInjector";
  $desc = $collectedClasses.LogInjector;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogInjector.prototype = $desc;
  function LogInjector_injectLogsFromUrl_closure(this_0) {
    this.this_0 = this_0;
  }
  LogInjector_injectLogsFromUrl_closure.builtin$cls = "LogInjector_injectLogsFromUrl_closure";
  if (!"name" in LogInjector_injectLogsFromUrl_closure)
    LogInjector_injectLogsFromUrl_closure.name = "LogInjector_injectLogsFromUrl_closure";
  $desc = $collectedClasses.LogInjector_injectLogsFromUrl_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogInjector_injectLogsFromUrl_closure.prototype = $desc;
  function LogInjector_injectLogs_closure(logsByLevel_0) {
    this.logsByLevel_0 = logsByLevel_0;
  }
  LogInjector_injectLogs_closure.builtin$cls = "LogInjector_injectLogs_closure";
  if (!"name" in LogInjector_injectLogs_closure)
    LogInjector_injectLogs_closure.name = "LogInjector_injectLogs_closure";
  $desc = $collectedClasses.LogInjector_injectLogs_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogInjector_injectLogs_closure.prototype = $desc;
  function LogInjector_injectLogs__closure2(logsByLevel_1) {
    this.logsByLevel_1 = logsByLevel_1;
  }
  LogInjector_injectLogs__closure2.builtin$cls = "LogInjector_injectLogs__closure2";
  if (!"name" in LogInjector_injectLogs__closure2)
    LogInjector_injectLogs__closure2.name = "LogInjector_injectLogs__closure2";
  $desc = $collectedClasses.LogInjector_injectLogs__closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogInjector_injectLogs__closure2.prototype = $desc;
  function LogInjector_injectLogs___closure() {
  }
  LogInjector_injectLogs___closure.builtin$cls = "LogInjector_injectLogs___closure";
  if (!"name" in LogInjector_injectLogs___closure)
    LogInjector_injectLogs___closure.name = "LogInjector_injectLogs___closure";
  $desc = $collectedClasses.LogInjector_injectLogs___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogInjector_injectLogs___closure.prototype = $desc;
  function LogInjector_injectLogs_closure0(this_2, menuWrapper_3, contentWrapper_4) {
    this.this_2 = this_2;
    this.menuWrapper_3 = menuWrapper_3;
    this.contentWrapper_4 = contentWrapper_4;
  }
  LogInjector_injectLogs_closure0.builtin$cls = "LogInjector_injectLogs_closure0";
  if (!"name" in LogInjector_injectLogs_closure0)
    LogInjector_injectLogs_closure0.name = "LogInjector_injectLogs_closure0";
  $desc = $collectedClasses.LogInjector_injectLogs_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogInjector_injectLogs_closure0.prototype = $desc;
  function LogInjector_injectLogs__closure(this_5, menuItem_6, contentItem_7) {
    this.this_5 = this_5;
    this.menuItem_6 = menuItem_6;
    this.contentItem_7 = contentItem_7;
  }
  LogInjector_injectLogs__closure.builtin$cls = "LogInjector_injectLogs__closure";
  if (!"name" in LogInjector_injectLogs__closure)
    LogInjector_injectLogs__closure.name = "LogInjector_injectLogs__closure";
  $desc = $collectedClasses.LogInjector_injectLogs__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogInjector_injectLogs__closure.prototype = $desc;
  function LogInjector_injectLogs__closure0() {
  }
  LogInjector_injectLogs__closure0.builtin$cls = "LogInjector_injectLogs__closure0";
  if (!"name" in LogInjector_injectLogs__closure0)
    LogInjector_injectLogs__closure0.name = "LogInjector_injectLogs__closure0";
  $desc = $collectedClasses.LogInjector_injectLogs__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogInjector_injectLogs__closure0.prototype = $desc;
  function LogInjector_injectLogs__closure1(messageElement_8) {
    this.messageElement_8 = messageElement_8;
  }
  LogInjector_injectLogs__closure1.builtin$cls = "LogInjector_injectLogs__closure1";
  if (!"name" in LogInjector_injectLogs__closure1)
    LogInjector_injectLogs__closure1.name = "LogInjector_injectLogs__closure1";
  $desc = $collectedClasses.LogInjector_injectLogs__closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogInjector_injectLogs__closure1.prototype = $desc;
  function _OpenUriPolicy() {
  }
  _OpenUriPolicy.builtin$cls = "_OpenUriPolicy";
  if (!"name" in _OpenUriPolicy)
    _OpenUriPolicy.name = "_OpenUriPolicy";
  $desc = $collectedClasses._OpenUriPolicy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _OpenUriPolicy.prototype = $desc;
  function closure0() {
  }
  closure0.builtin$cls = "closure0";
  if (!"name" in closure0)
    closure0.name = "closure0";
  $desc = $collectedClasses.closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure0.prototype = $desc;
  function closure1() {
  }
  closure1.builtin$cls = "closure1";
  if (!"name" in closure1)
    closure1.name = "closure1";
  $desc = $collectedClasses.closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure1.prototype = $desc;
  function closure2() {
  }
  closure2.builtin$cls = "closure2";
  if (!"name" in closure2)
    closure2.name = "closure2";
  $desc = $collectedClasses.closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure2.prototype = $desc;
  function closure3() {
  }
  closure3.builtin$cls = "closure3";
  if (!"name" in closure3)
    closure3.name = "closure3";
  $desc = $collectedClasses.closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure3.prototype = $desc;
  function closure4() {
  }
  closure4.builtin$cls = "closure4";
  if (!"name" in closure4)
    closure4.name = "closure4";
  $desc = $collectedClasses.closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure4.prototype = $desc;
  function _closure0(def_0) {
    this.def_0 = def_0;
  }
  _closure0.builtin$cls = "_closure0";
  if (!"name" in _closure0)
    _closure0.name = "_closure0";
  $desc = $collectedClasses._closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _closure0.prototype = $desc;
  function closure5() {
  }
  closure5.builtin$cls = "closure5";
  if (!"name" in closure5)
    closure5.name = "closure5";
  $desc = $collectedClasses.closure5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure5.prototype = $desc;
  function _closure(def_1) {
    this.def_1 = def_1;
  }
  _closure.builtin$cls = "_closure";
  if (!"name" in _closure)
    _closure.name = "_closure";
  $desc = $collectedClasses._closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _closure.prototype = $desc;
  function _classAttributeConverter_closure(v_0) {
    this.v_0 = v_0;
  }
  _classAttributeConverter_closure.builtin$cls = "_classAttributeConverter_closure";
  if (!"name" in _classAttributeConverter_closure)
    _classAttributeConverter_closure.name = "_classAttributeConverter_closure";
  $desc = $collectedClasses._classAttributeConverter_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _classAttributeConverter_closure.prototype = $desc;
  function _styleAttributeConverter_closure(v_0) {
    this.v_0 = v_0;
  }
  _styleAttributeConverter_closure.builtin$cls = "_styleAttributeConverter_closure";
  if (!"name" in _styleAttributeConverter_closure)
    _styleAttributeConverter_closure.name = "_styleAttributeConverter_closure";
  $desc = $collectedClasses._styleAttributeConverter_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _styleAttributeConverter_closure.prototype = $desc;
  function PolymerExpressions0(_scopeFactory, globals, _scopes, _scopeIdents, _bindingMaps) {
    this._scopeFactory = _scopeFactory;
    this.globals = globals;
    this._scopes = _scopes;
    this._scopeIdents = _scopeIdents;
    this._bindingMaps = _bindingMaps;
  }
  PolymerExpressions0.builtin$cls = "PolymerExpressions0";
  if (!"name" in PolymerExpressions0)
    PolymerExpressions0.name = "PolymerExpressions0";
  $desc = $collectedClasses.PolymerExpressions0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerExpressions0.prototype = $desc;
  PolymerExpressions0.prototype.get$globals = function() {
    return this.globals;
  };
  function PolymerExpressions_prepareBinding_closure(this_1, identifier_2, bindExpr_3) {
    this.this_1 = this_1;
    this.identifier_2 = identifier_2;
    this.bindExpr_3 = bindExpr_3;
  }
  PolymerExpressions_prepareBinding_closure.builtin$cls = "PolymerExpressions_prepareBinding_closure";
  if (!"name" in PolymerExpressions_prepareBinding_closure)
    PolymerExpressions_prepareBinding_closure.name = "PolymerExpressions_prepareBinding_closure";
  $desc = $collectedClasses.PolymerExpressions_prepareBinding_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerExpressions_prepareBinding_closure.prototype = $desc;
  function PolymerExpressions_prepareBinding_closure0(this_4, expr_5) {
    this.this_4 = this_4;
    this.expr_5 = expr_5;
  }
  PolymerExpressions_prepareBinding_closure0.builtin$cls = "PolymerExpressions_prepareBinding_closure0";
  if (!"name" in PolymerExpressions_prepareBinding_closure0)
    PolymerExpressions_prepareBinding_closure0.name = "PolymerExpressions_prepareBinding_closure0";
  $desc = $collectedClasses.PolymerExpressions_prepareBinding_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerExpressions_prepareBinding_closure0.prototype = $desc;
  function PolymerExpressions_prepareBinding_closure1(box_0, this_6, expr_7) {
    this.box_0 = box_0;
    this.this_6 = this_6;
    this.expr_7 = expr_7;
  }
  PolymerExpressions_prepareBinding_closure1.builtin$cls = "PolymerExpressions_prepareBinding_closure1";
  if (!"name" in PolymerExpressions_prepareBinding_closure1)
    PolymerExpressions_prepareBinding_closure1.name = "PolymerExpressions_prepareBinding_closure1";
  $desc = $collectedClasses.PolymerExpressions_prepareBinding_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerExpressions_prepareBinding_closure1.prototype = $desc;
  function PolymerExpressions_prepareInstanceModel_closure(this_0, template_1) {
    this.this_0 = this_0;
    this.template_1 = template_1;
  }
  PolymerExpressions_prepareInstanceModel_closure.builtin$cls = "PolymerExpressions_prepareInstanceModel_closure";
  if (!"name" in PolymerExpressions_prepareInstanceModel_closure)
    PolymerExpressions_prepareInstanceModel_closure.name = "PolymerExpressions_prepareInstanceModel_closure";
  $desc = $collectedClasses.PolymerExpressions_prepareInstanceModel_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerExpressions_prepareInstanceModel_closure.prototype = $desc;
  function PolymerExpressions_prepareInstanceModel_closure0(this_2, template_3, ident_4) {
    this.this_2 = this_2;
    this.template_3 = template_3;
    this.ident_4 = ident_4;
  }
  PolymerExpressions_prepareInstanceModel_closure0.builtin$cls = "PolymerExpressions_prepareInstanceModel_closure0";
  if (!"name" in PolymerExpressions_prepareInstanceModel_closure0)
    PolymerExpressions_prepareInstanceModel_closure0.name = "PolymerExpressions_prepareInstanceModel_closure0";
  $desc = $collectedClasses.PolymerExpressions_prepareInstanceModel_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerExpressions_prepareInstanceModel_closure0.prototype = $desc;
  function _Binding(_scope, _converter, _polymer_expressions$_expr, _polymer_expressions$_callback, _polymer_expressions$_sub, _observer, _polymer_expressions$_value) {
    this._scope = _scope;
    this._converter = _converter;
    this._polymer_expressions$_expr = _polymer_expressions$_expr;
    this._polymer_expressions$_callback = _polymer_expressions$_callback;
    this._polymer_expressions$_sub = _polymer_expressions$_sub;
    this._observer = _observer;
    this._polymer_expressions$_value = _polymer_expressions$_value;
  }
  _Binding.builtin$cls = "_Binding";
  if (!"name" in _Binding)
    _Binding.name = "_Binding";
  $desc = $collectedClasses._Binding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Binding.prototype = $desc;
  function _Binding_open_closure(this_0) {
    this.this_0 = this_0;
  }
  _Binding_open_closure.builtin$cls = "_Binding_open_closure";
  if (!"name" in _Binding_open_closure)
    _Binding_open_closure.name = "_Binding_open_closure";
  $desc = $collectedClasses._Binding_open_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Binding_open_closure.prototype = $desc;
  function ScopeFactory() {
  }
  ScopeFactory.builtin$cls = "ScopeFactory";
  if (!"name" in ScopeFactory)
    ScopeFactory.name = "ScopeFactory";
  $desc = $collectedClasses.ScopeFactory;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScopeFactory.prototype = $desc;
  function StreamBinding(stream, _observable_box$_value, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_change_notifier$_records) {
    this.stream = stream;
    this._observable_box$_value = _observable_box$_value;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_change_notifier$_records = change_notifier$ChangeNotifier$_change_notifier$_records;
  }
  StreamBinding.builtin$cls = "StreamBinding";
  if (!"name" in StreamBinding)
    StreamBinding.name = "StreamBinding";
  $desc = $collectedClasses.StreamBinding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StreamBinding.prototype = $desc;
  function StreamBinding_closure(T_0, this_1) {
    this.T_0 = T_0;
    this.this_1 = this_1;
  }
  StreamBinding_closure.builtin$cls = "StreamBinding_closure";
  if (!"name" in StreamBinding_closure)
    StreamBinding_closure.name = "StreamBinding_closure";
  $desc = $collectedClasses.StreamBinding_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StreamBinding_closure.prototype = $desc;
  function closure13() {
  }
  closure13.builtin$cls = "closure13";
  if (!"name" in closure13)
    closure13.name = "closure13";
  $desc = $collectedClasses.closure13;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure13.prototype = $desc;
  function closure14() {
  }
  closure14.builtin$cls = "closure14";
  if (!"name" in closure14)
    closure14.name = "closure14";
  $desc = $collectedClasses.closure14;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure14.prototype = $desc;
  function closure15() {
  }
  closure15.builtin$cls = "closure15";
  if (!"name" in closure15)
    closure15.name = "closure15";
  $desc = $collectedClasses.closure15;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure15.prototype = $desc;
  function closure16() {
  }
  closure16.builtin$cls = "closure16";
  if (!"name" in closure16)
    closure16.name = "closure16";
  $desc = $collectedClasses.closure16;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure16.prototype = $desc;
  function closure17() {
  }
  closure17.builtin$cls = "closure17";
  if (!"name" in closure17)
    closure17.name = "closure17";
  $desc = $collectedClasses.closure17;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure17.prototype = $desc;
  function closure18() {
  }
  closure18.builtin$cls = "closure18";
  if (!"name" in closure18)
    closure18.name = "closure18";
  $desc = $collectedClasses.closure18;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure18.prototype = $desc;
  function closure19() {
  }
  closure19.builtin$cls = "closure19";
  if (!"name" in closure19)
    closure19.name = "closure19";
  $desc = $collectedClasses.closure19;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure19.prototype = $desc;
  function closure20() {
  }
  closure20.builtin$cls = "closure20";
  if (!"name" in closure20)
    closure20.name = "closure20";
  $desc = $collectedClasses.closure20;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure20.prototype = $desc;
  function closure21() {
  }
  closure21.builtin$cls = "closure21";
  if (!"name" in closure21)
    closure21.name = "closure21";
  $desc = $collectedClasses.closure21;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure21.prototype = $desc;
  function closure22() {
  }
  closure22.builtin$cls = "closure22";
  if (!"name" in closure22)
    closure22.name = "closure22";
  $desc = $collectedClasses.closure22;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure22.prototype = $desc;
  function closure23() {
  }
  closure23.builtin$cls = "closure23";
  if (!"name" in closure23)
    closure23.name = "closure23";
  $desc = $collectedClasses.closure23;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure23.prototype = $desc;
  function closure24() {
  }
  closure24.builtin$cls = "closure24";
  if (!"name" in closure24)
    closure24.name = "closure24";
  $desc = $collectedClasses.closure24;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure24.prototype = $desc;
  function closure25() {
  }
  closure25.builtin$cls = "closure25";
  if (!"name" in closure25)
    closure25.name = "closure25";
  $desc = $collectedClasses.closure25;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure25.prototype = $desc;
  function closure26() {
  }
  closure26.builtin$cls = "closure26";
  if (!"name" in closure26)
    closure26.name = "closure26";
  $desc = $collectedClasses.closure26;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure26.prototype = $desc;
  function closure27() {
  }
  closure27.builtin$cls = "closure27";
  if (!"name" in closure27)
    closure27.name = "closure27";
  $desc = $collectedClasses.closure27;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure27.prototype = $desc;
  function closure28() {
  }
  closure28.builtin$cls = "closure28";
  if (!"name" in closure28)
    closure28.name = "closure28";
  $desc = $collectedClasses.closure28;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure28.prototype = $desc;
  function closure10() {
  }
  closure10.builtin$cls = "closure10";
  if (!"name" in closure10)
    closure10.name = "closure10";
  $desc = $collectedClasses.closure10;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure10.prototype = $desc;
  function closure11() {
  }
  closure11.builtin$cls = "closure11";
  if (!"name" in closure11)
    closure11.name = "closure11";
  $desc = $collectedClasses.closure11;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure11.prototype = $desc;
  function closure12() {
  }
  closure12.builtin$cls = "closure12";
  if (!"name" in closure12)
    closure12.name = "closure12";
  $desc = $collectedClasses.closure12;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure12.prototype = $desc;
  function Scope() {
  }
  Scope.builtin$cls = "Scope";
  if (!"name" in Scope)
    Scope.name = "Scope";
  $desc = $collectedClasses.Scope;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Scope.prototype = $desc;
  function _ModelScope(model) {
    this.model = model;
  }
  _ModelScope.builtin$cls = "_ModelScope";
  if (!"name" in _ModelScope)
    _ModelScope.name = "_ModelScope";
  $desc = $collectedClasses._ModelScope;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ModelScope.prototype = $desc;
  _ModelScope.prototype.get$model = function(receiver) {
    return this.model;
  };
  function _LocalVariableScope(parent, varName, value) {
    this.parent = parent;
    this.varName = varName;
    this.value = value;
  }
  _LocalVariableScope.builtin$cls = "_LocalVariableScope";
  if (!"name" in _LocalVariableScope)
    _LocalVariableScope.name = "_LocalVariableScope";
  $desc = $collectedClasses._LocalVariableScope;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LocalVariableScope.prototype = $desc;
  _LocalVariableScope.prototype.get$parent = function(receiver) {
    return this.parent;
  };
  _LocalVariableScope.prototype.get$value = function(receiver) {
    return this.value;
  };
  function _GlobalsScope(parent, variables) {
    this.parent = parent;
    this.variables = variables;
  }
  _GlobalsScope.builtin$cls = "_GlobalsScope";
  if (!"name" in _GlobalsScope)
    _GlobalsScope.name = "_GlobalsScope";
  $desc = $collectedClasses._GlobalsScope;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GlobalsScope.prototype = $desc;
  _GlobalsScope.prototype.get$parent = function(receiver) {
    return this.parent;
  };
  function ExpressionObserver(_parent, _eval$_value) {
    this._parent = _parent;
    this._eval$_value = _eval$_value;
  }
  ExpressionObserver.builtin$cls = "ExpressionObserver";
  if (!"name" in ExpressionObserver)
    ExpressionObserver.name = "ExpressionObserver";
  $desc = $collectedClasses.ExpressionObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ExpressionObserver.prototype = $desc;
  ExpressionObserver.prototype.set$_parent = function(v) {
    return this._parent = v;
  };
  ExpressionObserver.prototype.get$_eval$_value = function() {
    return this._eval$_value;
  };
  function Updater(scope, skipChanges) {
    this.scope = scope;
    this.skipChanges = skipChanges;
  }
  Updater.builtin$cls = "Updater";
  if (!"name" in Updater)
    Updater.name = "Updater";
  $desc = $collectedClasses.Updater;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Updater.prototype = $desc;
  function Closer() {
  }
  Closer.builtin$cls = "Closer";
  if (!"name" in Closer)
    Closer.name = "Closer";
  $desc = $collectedClasses.Closer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closer.prototype = $desc;
  function EvalVisitor(scope) {
    this.scope = scope;
  }
  EvalVisitor.builtin$cls = "EvalVisitor";
  if (!"name" in EvalVisitor)
    EvalVisitor.name = "EvalVisitor";
  $desc = $collectedClasses.EvalVisitor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EvalVisitor.prototype = $desc;
  function ObserverBuilder(parents) {
    this.parents = parents;
  }
  ObserverBuilder.builtin$cls = "ObserverBuilder";
  if (!"name" in ObserverBuilder)
    ObserverBuilder.name = "ObserverBuilder";
  $desc = $collectedClasses.ObserverBuilder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObserverBuilder.prototype = $desc;
  ObserverBuilder.prototype.get$parents = function() {
    return this.parents;
  };
  function ObserverBuilder_visitInvoke_closure(invoke_0) {
    this.invoke_0 = invoke_0;
  }
  ObserverBuilder_visitInvoke_closure.builtin$cls = "ObserverBuilder_visitInvoke_closure";
  if (!"name" in ObserverBuilder_visitInvoke_closure)
    ObserverBuilder_visitInvoke_closure.name = "ObserverBuilder_visitInvoke_closure";
  $desc = $collectedClasses.ObserverBuilder_visitInvoke_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObserverBuilder_visitInvoke_closure.prototype = $desc;
  function ObserverBuilder_visitListLiteral_closure(list_0) {
    this.list_0 = list_0;
  }
  ObserverBuilder_visitListLiteral_closure.builtin$cls = "ObserverBuilder_visitListLiteral_closure";
  if (!"name" in ObserverBuilder_visitListLiteral_closure)
    ObserverBuilder_visitListLiteral_closure.name = "ObserverBuilder_visitListLiteral_closure";
  $desc = $collectedClasses.ObserverBuilder_visitListLiteral_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObserverBuilder_visitListLiteral_closure.prototype = $desc;
  function ObserverBuilder_visitMapLiteral_closure(map_0) {
    this.map_0 = map_0;
  }
  ObserverBuilder_visitMapLiteral_closure.builtin$cls = "ObserverBuilder_visitMapLiteral_closure";
  if (!"name" in ObserverBuilder_visitMapLiteral_closure)
    ObserverBuilder_visitMapLiteral_closure.name = "ObserverBuilder_visitMapLiteral_closure";
  $desc = $collectedClasses.ObserverBuilder_visitMapLiteral_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObserverBuilder_visitMapLiteral_closure.prototype = $desc;
  function EmptyObserver(_eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  EmptyObserver.builtin$cls = "EmptyObserver";
  if (!"name" in EmptyObserver)
    EmptyObserver.name = "EmptyObserver";
  $desc = $collectedClasses.EmptyObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmptyObserver.prototype = $desc;
  function LiteralObserver(_eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  LiteralObserver.builtin$cls = "LiteralObserver";
  if (!"name" in LiteralObserver)
    LiteralObserver.name = "LiteralObserver";
  $desc = $collectedClasses.LiteralObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LiteralObserver.prototype = $desc;
  function ListLiteralObserver(items, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.items = items;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  ListLiteralObserver.builtin$cls = "ListLiteralObserver";
  if (!"name" in ListLiteralObserver)
    ListLiteralObserver.name = "ListLiteralObserver";
  $desc = $collectedClasses.ListLiteralObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListLiteralObserver.prototype = $desc;
  ListLiteralObserver.prototype.get$items = function() {
    return this.items;
  };
  function ListLiteralObserver__updateSelf_closure() {
  }
  ListLiteralObserver__updateSelf_closure.builtin$cls = "ListLiteralObserver__updateSelf_closure";
  if (!"name" in ListLiteralObserver__updateSelf_closure)
    ListLiteralObserver__updateSelf_closure.name = "ListLiteralObserver__updateSelf_closure";
  $desc = $collectedClasses.ListLiteralObserver__updateSelf_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListLiteralObserver__updateSelf_closure.prototype = $desc;
  function MapLiteralObserver(entries, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.entries = entries;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  MapLiteralObserver.builtin$cls = "MapLiteralObserver";
  if (!"name" in MapLiteralObserver)
    MapLiteralObserver.name = "MapLiteralObserver";
  $desc = $collectedClasses.MapLiteralObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapLiteralObserver.prototype = $desc;
  MapLiteralObserver.prototype.get$entries = function(receiver) {
    return this.entries;
  };
  function MapLiteralObserver__updateSelf_closure() {
  }
  MapLiteralObserver__updateSelf_closure.builtin$cls = "MapLiteralObserver__updateSelf_closure";
  if (!"name" in MapLiteralObserver__updateSelf_closure)
    MapLiteralObserver__updateSelf_closure.name = "MapLiteralObserver__updateSelf_closure";
  $desc = $collectedClasses.MapLiteralObserver__updateSelf_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapLiteralObserver__updateSelf_closure.prototype = $desc;
  function MapLiteralEntryObserver(key, entryValue, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.key = key;
    this.entryValue = entryValue;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  MapLiteralEntryObserver.builtin$cls = "MapLiteralEntryObserver";
  if (!"name" in MapLiteralEntryObserver)
    MapLiteralEntryObserver.name = "MapLiteralEntryObserver";
  $desc = $collectedClasses.MapLiteralEntryObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapLiteralEntryObserver.prototype = $desc;
  MapLiteralEntryObserver.prototype.get$key = function(receiver) {
    return this.key;
  };
  MapLiteralEntryObserver.prototype.get$entryValue = function() {
    return this.entryValue;
  };
  function IdentifierObserver(_eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  IdentifierObserver.builtin$cls = "IdentifierObserver";
  if (!"name" in IdentifierObserver)
    IdentifierObserver.name = "IdentifierObserver";
  $desc = $collectedClasses.IdentifierObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IdentifierObserver.prototype = $desc;
  function IdentifierObserver__updateSelf_closure(this_0, scope_1, symbol_2) {
    this.this_0 = this_0;
    this.scope_1 = scope_1;
    this.symbol_2 = symbol_2;
  }
  IdentifierObserver__updateSelf_closure.builtin$cls = "IdentifierObserver__updateSelf_closure";
  if (!"name" in IdentifierObserver__updateSelf_closure)
    IdentifierObserver__updateSelf_closure.name = "IdentifierObserver__updateSelf_closure";
  $desc = $collectedClasses.IdentifierObserver__updateSelf_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IdentifierObserver__updateSelf_closure.prototype = $desc;
  function IdentifierObserver__updateSelf__closure(symbol_3) {
    this.symbol_3 = symbol_3;
  }
  IdentifierObserver__updateSelf__closure.builtin$cls = "IdentifierObserver__updateSelf__closure";
  if (!"name" in IdentifierObserver__updateSelf__closure)
    IdentifierObserver__updateSelf__closure.name = "IdentifierObserver__updateSelf__closure";
  $desc = $collectedClasses.IdentifierObserver__updateSelf__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IdentifierObserver__updateSelf__closure.prototype = $desc;
  function UnaryObserver(child, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.child = child;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  UnaryObserver.builtin$cls = "UnaryObserver";
  if (!"name" in UnaryObserver)
    UnaryObserver.name = "UnaryObserver";
  $desc = $collectedClasses.UnaryObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnaryObserver.prototype = $desc;
  UnaryObserver.prototype.get$child = function() {
    return this.child;
  };
  function BinaryObserver(left, right, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.left = left;
    this.right = right;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  BinaryObserver.builtin$cls = "BinaryObserver";
  if (!"name" in BinaryObserver)
    BinaryObserver.name = "BinaryObserver";
  $desc = $collectedClasses.BinaryObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BinaryObserver.prototype = $desc;
  BinaryObserver.prototype.get$left = function(receiver) {
    return this.left;
  };
  BinaryObserver.prototype.get$right = function(receiver) {
    return this.right;
  };
  function BinaryObserver__updateSelf_closure(this_0, scope_1) {
    this.this_0 = this_0;
    this.scope_1 = scope_1;
  }
  BinaryObserver__updateSelf_closure.builtin$cls = "BinaryObserver__updateSelf_closure";
  if (!"name" in BinaryObserver__updateSelf_closure)
    BinaryObserver__updateSelf_closure.name = "BinaryObserver__updateSelf_closure";
  $desc = $collectedClasses.BinaryObserver__updateSelf_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BinaryObserver__updateSelf_closure.prototype = $desc;
  function TernaryObserver(condition, trueExpr, falseExpr, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.condition = condition;
    this.trueExpr = trueExpr;
    this.falseExpr = falseExpr;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  TernaryObserver.builtin$cls = "TernaryObserver";
  if (!"name" in TernaryObserver)
    TernaryObserver.name = "TernaryObserver";
  $desc = $collectedClasses.TernaryObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TernaryObserver.prototype = $desc;
  TernaryObserver.prototype.get$condition = function() {
    return this.condition;
  };
  TernaryObserver.prototype.get$trueExpr = function() {
    return this.trueExpr;
  };
  TernaryObserver.prototype.get$falseExpr = function() {
    return this.falseExpr;
  };
  function GetterObserver(receiver, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.receiver = receiver;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  GetterObserver.builtin$cls = "GetterObserver";
  if (!"name" in GetterObserver)
    GetterObserver.name = "GetterObserver";
  $desc = $collectedClasses.GetterObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GetterObserver.prototype = $desc;
  GetterObserver.prototype.get$receiver = function() {
    return this.receiver;
  };
  function GetterObserver__updateSelf_closure(this_0, scope_1, symbol_2) {
    this.this_0 = this_0;
    this.scope_1 = scope_1;
    this.symbol_2 = symbol_2;
  }
  GetterObserver__updateSelf_closure.builtin$cls = "GetterObserver__updateSelf_closure";
  if (!"name" in GetterObserver__updateSelf_closure)
    GetterObserver__updateSelf_closure.name = "GetterObserver__updateSelf_closure";
  $desc = $collectedClasses.GetterObserver__updateSelf_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GetterObserver__updateSelf_closure.prototype = $desc;
  function GetterObserver__updateSelf__closure(symbol_3) {
    this.symbol_3 = symbol_3;
  }
  GetterObserver__updateSelf__closure.builtin$cls = "GetterObserver__updateSelf__closure";
  if (!"name" in GetterObserver__updateSelf__closure)
    GetterObserver__updateSelf__closure.name = "GetterObserver__updateSelf__closure";
  $desc = $collectedClasses.GetterObserver__updateSelf__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GetterObserver__updateSelf__closure.prototype = $desc;
  function IndexObserver(receiver, argument, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.receiver = receiver;
    this.argument = argument;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  IndexObserver.builtin$cls = "IndexObserver";
  if (!"name" in IndexObserver)
    IndexObserver.name = "IndexObserver";
  $desc = $collectedClasses.IndexObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IndexObserver.prototype = $desc;
  IndexObserver.prototype.get$receiver = function() {
    return this.receiver;
  };
  IndexObserver.prototype.get$argument = function() {
    return this.argument;
  };
  function IndexObserver__updateSelf_closure0(this_0, scope_1, key_2) {
    this.this_0 = this_0;
    this.scope_1 = scope_1;
    this.key_2 = key_2;
  }
  IndexObserver__updateSelf_closure0.builtin$cls = "IndexObserver__updateSelf_closure0";
  if (!"name" in IndexObserver__updateSelf_closure0)
    IndexObserver__updateSelf_closure0.name = "IndexObserver__updateSelf_closure0";
  $desc = $collectedClasses.IndexObserver__updateSelf_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IndexObserver__updateSelf_closure0.prototype = $desc;
  function IndexObserver__updateSelf__closure0(key_3) {
    this.key_3 = key_3;
  }
  IndexObserver__updateSelf__closure0.builtin$cls = "IndexObserver__updateSelf__closure0";
  if (!"name" in IndexObserver__updateSelf__closure0)
    IndexObserver__updateSelf__closure0.name = "IndexObserver__updateSelf__closure0";
  $desc = $collectedClasses.IndexObserver__updateSelf__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IndexObserver__updateSelf__closure0.prototype = $desc;
  function IndexObserver__updateSelf_closure(this_4, scope_5, key_6) {
    this.this_4 = this_4;
    this.scope_5 = scope_5;
    this.key_6 = key_6;
  }
  IndexObserver__updateSelf_closure.builtin$cls = "IndexObserver__updateSelf_closure";
  if (!"name" in IndexObserver__updateSelf_closure)
    IndexObserver__updateSelf_closure.name = "IndexObserver__updateSelf_closure";
  $desc = $collectedClasses.IndexObserver__updateSelf_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IndexObserver__updateSelf_closure.prototype = $desc;
  function IndexObserver__updateSelf__closure(key_7) {
    this.key_7 = key_7;
  }
  IndexObserver__updateSelf__closure.builtin$cls = "IndexObserver__updateSelf__closure";
  if (!"name" in IndexObserver__updateSelf__closure)
    IndexObserver__updateSelf__closure.name = "IndexObserver__updateSelf__closure";
  $desc = $collectedClasses.IndexObserver__updateSelf__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IndexObserver__updateSelf__closure.prototype = $desc;
  function InvokeObserver(receiver, arguments, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.receiver = receiver;
    this.arguments = arguments;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  InvokeObserver.builtin$cls = "InvokeObserver";
  if (!"name" in InvokeObserver)
    InvokeObserver.name = "InvokeObserver";
  $desc = $collectedClasses.InvokeObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InvokeObserver.prototype = $desc;
  InvokeObserver.prototype.get$receiver = function() {
    return this.receiver;
  };
  InvokeObserver.prototype.get$arguments = function() {
    return this.arguments;
  };
  function InvokeObserver__updateSelf_closure() {
  }
  InvokeObserver__updateSelf_closure.builtin$cls = "InvokeObserver__updateSelf_closure";
  if (!"name" in InvokeObserver__updateSelf_closure)
    InvokeObserver__updateSelf_closure.name = "InvokeObserver__updateSelf_closure";
  $desc = $collectedClasses.InvokeObserver__updateSelf_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InvokeObserver__updateSelf_closure.prototype = $desc;
  function InvokeObserver__updateSelf_closure0(this_0, scope_1, symbol_2) {
    this.this_0 = this_0;
    this.scope_1 = scope_1;
    this.symbol_2 = symbol_2;
  }
  InvokeObserver__updateSelf_closure0.builtin$cls = "InvokeObserver__updateSelf_closure0";
  if (!"name" in InvokeObserver__updateSelf_closure0)
    InvokeObserver__updateSelf_closure0.name = "InvokeObserver__updateSelf_closure0";
  $desc = $collectedClasses.InvokeObserver__updateSelf_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InvokeObserver__updateSelf_closure0.prototype = $desc;
  function InvokeObserver__updateSelf__closure(symbol_3) {
    this.symbol_3 = symbol_3;
  }
  InvokeObserver__updateSelf__closure.builtin$cls = "InvokeObserver__updateSelf__closure";
  if (!"name" in InvokeObserver__updateSelf__closure)
    InvokeObserver__updateSelf__closure.name = "InvokeObserver__updateSelf__closure";
  $desc = $collectedClasses.InvokeObserver__updateSelf__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InvokeObserver__updateSelf__closure.prototype = $desc;
  function EvalException(message) {
    this.message = message;
  }
  EvalException.builtin$cls = "EvalException";
  if (!"name" in EvalException)
    EvalException.name = "EvalException";
  $desc = $collectedClasses.EvalException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EvalException.prototype = $desc;
  EvalException.prototype.get$message = function(receiver) {
    return this.message;
  };
  function AstFactory() {
  }
  AstFactory.builtin$cls = "AstFactory";
  if (!"name" in AstFactory)
    AstFactory.name = "AstFactory";
  $desc = $collectedClasses.AstFactory;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AstFactory.prototype = $desc;
  function Expression() {
  }
  Expression.builtin$cls = "Expression";
  if (!"name" in Expression)
    Expression.name = "Expression";
  $desc = $collectedClasses.Expression;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Expression.prototype = $desc;
  function EmptyExpression() {
  }
  EmptyExpression.builtin$cls = "EmptyExpression";
  if (!"name" in EmptyExpression)
    EmptyExpression.name = "EmptyExpression";
  $desc = $collectedClasses.EmptyExpression;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmptyExpression.prototype = $desc;
  function Literal(value) {
    this.value = value;
  }
  Literal.builtin$cls = "Literal";
  if (!"name" in Literal)
    Literal.name = "Literal";
  $desc = $collectedClasses.Literal;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Literal.prototype = $desc;
  Literal.prototype.get$value = function(receiver) {
    return this.value;
  };
  function ListLiteral(items) {
    this.items = items;
  }
  ListLiteral.builtin$cls = "ListLiteral";
  if (!"name" in ListLiteral)
    ListLiteral.name = "ListLiteral";
  $desc = $collectedClasses.ListLiteral;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListLiteral.prototype = $desc;
  ListLiteral.prototype.get$items = function() {
    return this.items;
  };
  function MapLiteral(entries) {
    this.entries = entries;
  }
  MapLiteral.builtin$cls = "MapLiteral";
  if (!"name" in MapLiteral)
    MapLiteral.name = "MapLiteral";
  $desc = $collectedClasses.MapLiteral;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapLiteral.prototype = $desc;
  MapLiteral.prototype.get$entries = function(receiver) {
    return this.entries;
  };
  function MapLiteralEntry(key, entryValue) {
    this.key = key;
    this.entryValue = entryValue;
  }
  MapLiteralEntry.builtin$cls = "MapLiteralEntry";
  if (!"name" in MapLiteralEntry)
    MapLiteralEntry.name = "MapLiteralEntry";
  $desc = $collectedClasses.MapLiteralEntry;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapLiteralEntry.prototype = $desc;
  MapLiteralEntry.prototype.get$key = function(receiver) {
    return this.key;
  };
  MapLiteralEntry.prototype.get$entryValue = function() {
    return this.entryValue;
  };
  function ParenthesizedExpression(child) {
    this.child = child;
  }
  ParenthesizedExpression.builtin$cls = "ParenthesizedExpression";
  if (!"name" in ParenthesizedExpression)
    ParenthesizedExpression.name = "ParenthesizedExpression";
  $desc = $collectedClasses.ParenthesizedExpression;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParenthesizedExpression.prototype = $desc;
  function Identifier(value) {
    this.value = value;
  }
  Identifier.builtin$cls = "Identifier";
  if (!"name" in Identifier)
    Identifier.name = "Identifier";
  $desc = $collectedClasses.Identifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Identifier.prototype = $desc;
  Identifier.prototype.get$value = function(receiver) {
    return this.value;
  };
  function UnaryOperator(operator, child) {
    this.operator = operator;
    this.child = child;
  }
  UnaryOperator.builtin$cls = "UnaryOperator";
  if (!"name" in UnaryOperator)
    UnaryOperator.name = "UnaryOperator";
  $desc = $collectedClasses.UnaryOperator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnaryOperator.prototype = $desc;
  UnaryOperator.prototype.get$operator = function(receiver) {
    return this.operator;
  };
  UnaryOperator.prototype.get$child = function() {
    return this.child;
  };
  function BinaryOperator(operator, left, right) {
    this.operator = operator;
    this.left = left;
    this.right = right;
  }
  BinaryOperator.builtin$cls = "BinaryOperator";
  if (!"name" in BinaryOperator)
    BinaryOperator.name = "BinaryOperator";
  $desc = $collectedClasses.BinaryOperator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BinaryOperator.prototype = $desc;
  BinaryOperator.prototype.get$operator = function(receiver) {
    return this.operator;
  };
  BinaryOperator.prototype.get$left = function(receiver) {
    return this.left;
  };
  BinaryOperator.prototype.get$right = function(receiver) {
    return this.right;
  };
  function TernaryOperator(condition, trueExpr, falseExpr) {
    this.condition = condition;
    this.trueExpr = trueExpr;
    this.falseExpr = falseExpr;
  }
  TernaryOperator.builtin$cls = "TernaryOperator";
  if (!"name" in TernaryOperator)
    TernaryOperator.name = "TernaryOperator";
  $desc = $collectedClasses.TernaryOperator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TernaryOperator.prototype = $desc;
  TernaryOperator.prototype.get$condition = function() {
    return this.condition;
  };
  TernaryOperator.prototype.get$trueExpr = function() {
    return this.trueExpr;
  };
  TernaryOperator.prototype.get$falseExpr = function() {
    return this.falseExpr;
  };
  function InExpression(left, right) {
    this.left = left;
    this.right = right;
  }
  InExpression.builtin$cls = "InExpression";
  if (!"name" in InExpression)
    InExpression.name = "InExpression";
  $desc = $collectedClasses.InExpression;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InExpression.prototype = $desc;
  InExpression.prototype.get$left = function(receiver) {
    return this.left;
  };
  InExpression.prototype.get$right = function(receiver) {
    return this.right;
  };
  function AsExpression(left, right) {
    this.left = left;
    this.right = right;
  }
  AsExpression.builtin$cls = "AsExpression";
  if (!"name" in AsExpression)
    AsExpression.name = "AsExpression";
  $desc = $collectedClasses.AsExpression;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AsExpression.prototype = $desc;
  AsExpression.prototype.get$left = function(receiver) {
    return this.left;
  };
  AsExpression.prototype.get$right = function(receiver) {
    return this.right;
  };
  function Index(receiver, argument) {
    this.receiver = receiver;
    this.argument = argument;
  }
  Index.builtin$cls = "Index";
  if (!"name" in Index)
    Index.name = "Index";
  $desc = $collectedClasses.Index;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Index.prototype = $desc;
  Index.prototype.get$receiver = function() {
    return this.receiver;
  };
  Index.prototype.get$argument = function() {
    return this.argument;
  };
  function Getter(receiver, name) {
    this.receiver = receiver;
    this.name = name;
  }
  Getter.builtin$cls = "Getter";
  if (!"name" in Getter)
    Getter.name = "Getter";
  $desc = $collectedClasses.Getter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Getter.prototype = $desc;
  Getter.prototype.get$receiver = function() {
    return this.receiver;
  };
  Getter.prototype.get$name = function(receiver) {
    return this.name;
  };
  function Invoke(receiver, method, arguments) {
    this.receiver = receiver;
    this.method = method;
    this.arguments = arguments;
  }
  Invoke.builtin$cls = "Invoke";
  if (!"name" in Invoke)
    Invoke.name = "Invoke";
  $desc = $collectedClasses.Invoke;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Invoke.prototype = $desc;
  Invoke.prototype.get$receiver = function() {
    return this.receiver;
  };
  Invoke.prototype.get$method = function(receiver) {
    return this.method;
  };
  Invoke.prototype.get$arguments = function() {
    return this.arguments;
  };
  function _hashList_closure() {
  }
  _hashList_closure.builtin$cls = "_hashList_closure";
  if (!"name" in _hashList_closure)
    _hashList_closure.name = "_hashList_closure";
  $desc = $collectedClasses._hashList_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _hashList_closure.prototype = $desc;
  function Parser(_astFactory, _tokenizer, _tokens, _parser$_iterator) {
    this._astFactory = _astFactory;
    this._tokenizer = _tokenizer;
    this._tokens = _tokens;
    this._parser$_iterator = _parser$_iterator;
  }
  Parser.builtin$cls = "Parser";
  if (!"name" in Parser)
    Parser.name = "Parser";
  $desc = $collectedClasses.Parser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser.prototype = $desc;
  function IndexedValue(index, value) {
    this.index = index;
    this.value = value;
  }
  IndexedValue.builtin$cls = "IndexedValue";
  if (!"name" in IndexedValue)
    IndexedValue.name = "IndexedValue";
  $desc = $collectedClasses.IndexedValue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IndexedValue.prototype = $desc;
  IndexedValue.prototype.get$index = function(receiver) {
    return this.index;
  };
  IndexedValue.prototype.get$value = function(receiver) {
    return this.value;
  };
  function EnumerateIterable(_globals$_iterable) {
    this._globals$_iterable = _globals$_iterable;
  }
  EnumerateIterable.builtin$cls = "EnumerateIterable";
  if (!"name" in EnumerateIterable)
    EnumerateIterable.name = "EnumerateIterable";
  $desc = $collectedClasses.EnumerateIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EnumerateIterable.prototype = $desc;
  function EnumerateIterator(_globals$_iterator, _globals$_index, _globals$_current) {
    this._globals$_iterator = _globals$_iterator;
    this._globals$_index = _globals$_index;
    this._globals$_current = _globals$_current;
  }
  EnumerateIterator.builtin$cls = "EnumerateIterator";
  if (!"name" in EnumerateIterator)
    EnumerateIterator.name = "EnumerateIterator";
  $desc = $collectedClasses.EnumerateIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EnumerateIterator.prototype = $desc;
  function Token(kind, value, precedence) {
    this.kind = kind;
    this.value = value;
    this.precedence = precedence;
  }
  Token.builtin$cls = "Token";
  if (!"name" in Token)
    Token.name = "Token";
  $desc = $collectedClasses.Token;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Token.prototype = $desc;
  Token.prototype.get$kind = function(receiver) {
    return this.kind;
  };
  Token.prototype.get$value = function(receiver) {
    return this.value;
  };
  Token.prototype.get$precedence = function() {
    return this.precedence;
  };
  function Tokenizer(_tokenizer$_tokens, _sb, _tokenizer$_iterator, _tokenizer$_next) {
    this._tokenizer$_tokens = _tokenizer$_tokens;
    this._sb = _sb;
    this._tokenizer$_iterator = _tokenizer$_iterator;
    this._tokenizer$_next = _tokenizer$_next;
  }
  Tokenizer.builtin$cls = "Tokenizer";
  if (!"name" in Tokenizer)
    Tokenizer.name = "Tokenizer";
  $desc = $collectedClasses.Tokenizer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Tokenizer.prototype = $desc;
  function ParseException(message) {
    this.message = message;
  }
  ParseException.builtin$cls = "ParseException";
  if (!"name" in ParseException)
    ParseException.name = "ParseException";
  $desc = $collectedClasses.ParseException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParseException.prototype = $desc;
  ParseException.prototype.get$message = function(receiver) {
    return this.message;
  };
  function Visitor() {
  }
  Visitor.builtin$cls = "Visitor";
  if (!"name" in Visitor)
    Visitor.name = "Visitor";
  $desc = $collectedClasses.Visitor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Visitor.prototype = $desc;
  function RecursiveVisitor() {
  }
  RecursiveVisitor.builtin$cls = "RecursiveVisitor";
  if (!"name" in RecursiveVisitor)
    RecursiveVisitor.name = "RecursiveVisitor";
  $desc = $collectedClasses.RecursiveVisitor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RecursiveVisitor.prototype = $desc;
  function _Base(_purityId) {
    this._purityId = _purityId;
  }
  _Base.builtin$cls = "_Base";
  if (!"name" in _Base)
    _Base.name = "_Base";
  $desc = $collectedClasses._Base;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Base.prototype = $desc;
  _Base.prototype.get$_purityId = function() {
    return this._purityId;
  };
  _Base.prototype.get$_purityId.$reflectable = 1;
  function Object_EventEmitter(eventable$EventEmitter$_actionQueues, eventable$EventEmitter$_emittingType) {
    this.eventable$EventEmitter$_actionQueues = eventable$EventEmitter$_actionQueues;
    this.eventable$EventEmitter$_emittingType = eventable$EventEmitter$_emittingType;
  }
  Object_EventEmitter.builtin$cls = "Object_EventEmitter";
  if (!"name" in Object_EventEmitter)
    Object_EventEmitter.name = "Object_EventEmitter";
  $desc = $collectedClasses.Object_EventEmitter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object_EventEmitter.prototype = $desc;
  EventEmitter.prototype.get$_actionQueues = function() {
    return this.eventable$EventEmitter$_actionQueues;
  };
  EventEmitter.prototype.get$_actionQueues.$reflectable = 1;
  EventEmitter.prototype.set$_actionQueues = function(v) {
    return this.eventable$EventEmitter$_actionQueues = v;
  };
  EventEmitter.prototype.set$_actionQueues.$reflectable = 1;
  EventEmitter.prototype.get$_emittingType = function() {
    return this.eventable$EventEmitter$_emittingType;
  };
  EventEmitter.prototype.get$_emittingType.$reflectable = 1;
  EventEmitter.prototype.set$_emittingType = function(v) {
    return this.eventable$EventEmitter$_emittingType = v;
  };
  EventEmitter.prototype.set$_emittingType.$reflectable = 1;
  function Object_EventEmitter_EventDetector(eventable$EventDetector$_typeIndexes, eventable$EventDetector$_emitterIndexes) {
    this.eventable$EventDetector$_typeIndexes = eventable$EventDetector$_typeIndexes;
    this.eventable$EventDetector$_emitterIndexes = eventable$EventDetector$_emitterIndexes;
  }
  Object_EventEmitter_EventDetector.builtin$cls = "Object_EventEmitter_EventDetector";
  if (!"name" in Object_EventEmitter_EventDetector)
    Object_EventEmitter_EventDetector.name = "Object_EventEmitter_EventDetector";
  $desc = $collectedClasses.Object_EventEmitter_EventDetector;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object_EventEmitter_EventDetector.prototype = $desc;
  EventDetector.prototype.get$_typeIndexes = function(receiver) {
    return receiver.eventable$EventDetector$_typeIndexes;
  };
  EventDetector.prototype.get$_typeIndexes.$reflectable = 1;
  EventDetector.prototype.set$_typeIndexes = function(receiver, v) {
    return receiver.eventable$EventDetector$_typeIndexes = v;
  };
  EventDetector.prototype.set$_typeIndexes.$reflectable = 1;
  EventDetector.prototype.get$_emitterIndexes = function(receiver) {
    return receiver.eventable$EventDetector$_emitterIndexes;
  };
  EventDetector.prototype.get$_emitterIndexes.$reflectable = 1;
  EventDetector.prototype.set$_emitterIndexes = function(receiver, v) {
    return receiver.eventable$EventDetector$_emitterIndexes = v;
  };
  EventDetector.prototype.set$_emitterIndexes.$reflectable = 1;
  function Consumer() {
  }
  Consumer.builtin$cls = "Consumer";
  if (!"name" in Consumer)
    Consumer.name = "Consumer";
  $desc = $collectedClasses.Consumer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Consumer.prototype = $desc;
  function Object_EventDetector(eventable$EventDetector$_typeIndexes, eventable$EventDetector$_emitterIndexes) {
    this.eventable$EventDetector$_typeIndexes = eventable$EventDetector$_typeIndexes;
    this.eventable$EventDetector$_emitterIndexes = eventable$EventDetector$_emitterIndexes;
  }
  Object_EventDetector.builtin$cls = "Object_EventDetector";
  if (!"name" in Object_EventDetector)
    Object_EventDetector.name = "Object_EventDetector";
  $desc = $collectedClasses.Object_EventDetector;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object_EventDetector.prototype = $desc;
  EventDetector.prototype.get$_typeIndexes = function(receiver) {
    return receiver.eventable$EventDetector$_typeIndexes;
  };
  EventDetector.prototype.get$_typeIndexes.$reflectable = 1;
  EventDetector.prototype.set$_typeIndexes = function(receiver, v) {
    return receiver.eventable$EventDetector$_typeIndexes = v;
  };
  EventDetector.prototype.set$_typeIndexes.$reflectable = 1;
  EventDetector.prototype.get$_emitterIndexes = function(receiver) {
    return receiver.eventable$EventDetector$_emitterIndexes;
  };
  EventDetector.prototype.get$_emitterIndexes.$reflectable = 1;
  EventDetector.prototype.set$_emitterIndexes = function(receiver, v) {
    return receiver.eventable$EventDetector$_emitterIndexes = v;
  };
  EventDetector.prototype.set$_emitterIndexes.$reflectable = 1;
  function RestrictedMethodError(method) {
    this.method = method;
  }
  RestrictedMethodError.builtin$cls = "RestrictedMethodError";
  if (!"name" in RestrictedMethodError)
    RestrictedMethodError.name = "RestrictedMethodError";
  $desc = $collectedClasses.RestrictedMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RestrictedMethodError.prototype = $desc;
  RestrictedMethodError.prototype.get$method = function(receiver) {
    return this.method;
  };
  function Source(_core0$_this) {
    this._core0$_this = _core0$_this;
  }
  Source.builtin$cls = "Source";
  if (!"name" in Source)
    Source.name = "Source";
  $desc = $collectedClasses.Source;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Source.prototype = $desc;
  Source.prototype.get$_core0$_this = function() {
    return this._core0$_this;
  };
  Source.prototype.get$_core0$_this.$reflectable = 1;
  Source.prototype.set$_core0$_this = function(v) {
    return this._core0$_this = v;
  };
  Source.prototype.set$_core0$_this.$reflectable = 1;
  function IEndPointMessage(endPointName, isProxyToSource, message) {
    this.endPointName = endPointName;
    this.isProxyToSource = isProxyToSource;
    this.message = message;
  }
  IEndPointMessage.builtin$cls = "IEndPointMessage";
  if (!"name" in IEndPointMessage)
    IEndPointMessage.name = "IEndPointMessage";
  $desc = $collectedClasses.IEndPointMessage;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IEndPointMessage.prototype = $desc;
  IEndPointMessage.prototype.get$endPointName = function() {
    return this.endPointName;
  };
  IEndPointMessage.prototype.get$endPointName.$reflectable = 1;
  IEndPointMessage.prototype.set$endPointName = function(v) {
    return this.endPointName = v;
  };
  IEndPointMessage.prototype.set$endPointName.$reflectable = 1;
  IEndPointMessage.prototype.get$isProxyToSource = function() {
    return this.isProxyToSource;
  };
  IEndPointMessage.prototype.get$isProxyToSource.$reflectable = 1;
  IEndPointMessage.prototype.set$isProxyToSource = function(v) {
    return this.isProxyToSource = v;
  };
  IEndPointMessage.prototype.set$isProxyToSource.$reflectable = 1;
  IEndPointMessage.prototype.get$message = function(receiver) {
    return this.message;
  };
  IEndPointMessage.prototype.get$message.$reflectable = 1;
  IEndPointMessage.prototype.set$message = function(receiver, v) {
    return this.message = v;
  };
  IEndPointMessage.prototype.set$message.$reflectable = 1;
  function _IGarbageCollectionReport(proxies) {
    this.proxies = proxies;
  }
  _IGarbageCollectionReport.builtin$cls = "_IGarbageCollectionReport";
  if (!"name" in _IGarbageCollectionReport)
    _IGarbageCollectionReport.name = "_IGarbageCollectionReport";
  $desc = $collectedClasses._IGarbageCollectionReport;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IGarbageCollectionReport.prototype = $desc;
  _IGarbageCollectionReport.prototype.get$proxies = function() {
    return this.proxies;
  };
  _IGarbageCollectionReport.prototype.get$proxies.$reflectable = 1;
  _IGarbageCollectionReport.prototype.set$proxies = function(v) {
    return this.proxies = v;
  };
  _IGarbageCollectionReport.prototype.set$proxies.$reflectable = 1;
  function _ProxyInvocation() {
  }
  _ProxyInvocation.builtin$cls = "_ProxyInvocation";
  if (!"name" in _ProxyInvocation)
    _ProxyInvocation.name = "_ProxyInvocation";
  $desc = $collectedClasses._ProxyInvocation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ProxyInvocation.prototype = $desc;
  function _IProxyInvocation(src, method, posArgs, namArgs) {
    this.src = src;
    this.method = method;
    this.posArgs = posArgs;
    this.namArgs = namArgs;
  }
  _IProxyInvocation.builtin$cls = "_IProxyInvocation";
  if (!"name" in _IProxyInvocation)
    _IProxyInvocation.name = "_IProxyInvocation";
  $desc = $collectedClasses._IProxyInvocation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IProxyInvocation.prototype = $desc;
  _IProxyInvocation.prototype.get$src = function(receiver) {
    return this.src;
  };
  _IProxyInvocation.prototype.get$src.$reflectable = 1;
  _IProxyInvocation.prototype.set$src = function(receiver, v) {
    return this.src = v;
  };
  _IProxyInvocation.prototype.set$src.$reflectable = 1;
  _IProxyInvocation.prototype.get$method = function(receiver) {
    return this.method;
  };
  _IProxyInvocation.prototype.get$method.$reflectable = 1;
  _IProxyInvocation.prototype.set$method = function(receiver, v) {
    return this.method = v;
  };
  _IProxyInvocation.prototype.set$method.$reflectable = 1;
  _IProxyInvocation.prototype.get$posArgs = function() {
    return this.posArgs;
  };
  _IProxyInvocation.prototype.get$posArgs.$reflectable = 1;
  _IProxyInvocation.prototype.set$posArgs = function(v) {
    return this.posArgs = v;
  };
  _IProxyInvocation.prototype.set$posArgs.$reflectable = 1;
  _IProxyInvocation.prototype.get$namArgs = function() {
    return this.namArgs;
  };
  _IProxyInvocation.prototype.get$namArgs.$reflectable = 1;
  _IProxyInvocation.prototype.set$namArgs = function(v) {
    return this.namArgs = v;
  };
  _IProxyInvocation.prototype.set$namArgs.$reflectable = 1;
  function _ISourceEvent(proxy, data) {
    this.proxy = proxy;
    this.data = data;
  }
  _ISourceEvent.builtin$cls = "_ISourceEvent";
  if (!"name" in _ISourceEvent)
    _ISourceEvent.name = "_ISourceEvent";
  $desc = $collectedClasses._ISourceEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ISourceEvent.prototype = $desc;
  _ISourceEvent.prototype.get$proxy = function() {
    return this.proxy;
  };
  _ISourceEvent.prototype.get$proxy.$reflectable = 1;
  _ISourceEvent.prototype.set$proxy = function(v) {
    return this.proxy = v;
  };
  _ISourceEvent.prototype.set$proxy.$reflectable = 1;
  _ISourceEvent.prototype.get$data = function(receiver) {
    return this.data;
  };
  _ISourceEvent.prototype.get$data.$reflectable = 1;
  _ISourceEvent.prototype.set$data = function(receiver, v) {
    return this.data = v;
  };
  _ISourceEvent.prototype.set$data.$reflectable = 1;
  function _ISourceReady(src) {
    this.src = src;
  }
  _ISourceReady.builtin$cls = "_ISourceReady";
  if (!"name" in _ISourceReady)
    _ISourceReady.name = "_ISourceReady";
  $desc = $collectedClasses._ISourceReady;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ISourceReady.prototype = $desc;
  _ISourceReady.prototype.get$src = function(receiver) {
    return this.src;
  };
  _ISourceReady.prototype.get$src.$reflectable = 1;
  _ISourceReady.prototype.set$src = function(receiver, v) {
    return this.src = v;
  };
  _ISourceReady.prototype.set$src.$reflectable = 1;
  function _Transmission() {
  }
  _Transmission.builtin$cls = "_Transmission";
  if (!"name" in _Transmission)
    _Transmission.name = "_Transmission";
  $desc = $collectedClasses._Transmission;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Transmission.prototype = $desc;
  function QueryOptions(includeFields, includeProperties, includeInherited, includeUpTo, excludeFinal, includeMethods, withAnnotations, matches) {
    this.includeFields = includeFields;
    this.includeProperties = includeProperties;
    this.includeInherited = includeInherited;
    this.includeUpTo = includeUpTo;
    this.excludeFinal = excludeFinal;
    this.includeMethods = includeMethods;
    this.withAnnotations = withAnnotations;
    this.matches = matches;
  }
  QueryOptions.builtin$cls = "QueryOptions";
  if (!"name" in QueryOptions)
    QueryOptions.name = "QueryOptions";
  $desc = $collectedClasses.QueryOptions;
  if ($desc instanceof Array)
    $desc = $desc[1];
  QueryOptions.prototype = $desc;
  function Declaration(name, kind, isFinal, type, isStatic, annotations) {
    this.name = name;
    this.kind = kind;
    this.isFinal = isFinal;
    this.type = type;
    this.isStatic = isStatic;
    this.annotations = annotations;
  }
  Declaration.builtin$cls = "Declaration";
  if (!"name" in Declaration)
    Declaration.name = "Declaration";
  $desc = $collectedClasses.Declaration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Declaration.prototype = $desc;
  Declaration.prototype.get$name = function(receiver) {
    return this.name;
  };
  Declaration.prototype.get$kind = function(receiver) {
    return this.kind;
  };
  Declaration.prototype.get$isFinal = function() {
    return this.isFinal;
  };
  Declaration.prototype.get$type = function(receiver) {
    return this.type;
  };
  Declaration.prototype.get$isStatic = function() {
    return this.isStatic;
  };
  Declaration.prototype.get$annotations = function() {
    return this.annotations;
  };
  function DeclarationKind(kind) {
    this.kind = kind;
  }
  DeclarationKind.builtin$cls = "DeclarationKind";
  if (!"name" in DeclarationKind)
    DeclarationKind.name = "DeclarationKind";
  $desc = $collectedClasses.DeclarationKind;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeclarationKind.prototype = $desc;
  DeclarationKind.prototype.get$kind = function(receiver) {
    return this.kind;
  };
  function StaticConfiguration(getters, setters, parents, declarations, staticMethods, names, _symbols, checkedMode) {
    this.getters = getters;
    this.setters = setters;
    this.parents = parents;
    this.declarations = declarations;
    this.staticMethods = staticMethods;
    this.names = names;
    this._symbols = _symbols;
    this.checkedMode = checkedMode;
  }
  StaticConfiguration.builtin$cls = "StaticConfiguration";
  if (!"name" in StaticConfiguration)
    StaticConfiguration.name = "StaticConfiguration";
  $desc = $collectedClasses.StaticConfiguration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StaticConfiguration.prototype = $desc;
  StaticConfiguration.prototype.get$getters = function() {
    return this.getters;
  };
  StaticConfiguration.prototype.get$setters = function() {
    return this.setters;
  };
  StaticConfiguration.prototype.get$parents = function() {
    return this.parents;
  };
  StaticConfiguration.prototype.get$declarations = function() {
    return this.declarations;
  };
  StaticConfiguration.prototype.get$staticMethods = function() {
    return this.staticMethods;
  };
  StaticConfiguration.prototype.get$names = function() {
    return this.names;
  };
  function StaticConfiguration_closure(this_0) {
    this.this_0 = this_0;
  }
  StaticConfiguration_closure.builtin$cls = "StaticConfiguration_closure";
  if (!"name" in StaticConfiguration_closure)
    StaticConfiguration_closure.name = "StaticConfiguration_closure";
  $desc = $collectedClasses.StaticConfiguration_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StaticConfiguration_closure.prototype = $desc;
  function StaticConfiguration_addAll_closure(this_0) {
    this.this_0 = this_0;
  }
  StaticConfiguration_addAll_closure.builtin$cls = "StaticConfiguration_addAll_closure";
  if (!"name" in StaticConfiguration_addAll_closure)
    StaticConfiguration_addAll_closure.name = "StaticConfiguration_addAll_closure";
  $desc = $collectedClasses.StaticConfiguration_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StaticConfiguration_addAll_closure.prototype = $desc;
  function StaticConfiguration__nestedAddAll_closure() {
  }
  StaticConfiguration__nestedAddAll_closure.builtin$cls = "StaticConfiguration__nestedAddAll_closure";
  if (!"name" in StaticConfiguration__nestedAddAll_closure)
    StaticConfiguration__nestedAddAll_closure.name = "StaticConfiguration__nestedAddAll_closure";
  $desc = $collectedClasses.StaticConfiguration__nestedAddAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StaticConfiguration__nestedAddAll_closure.prototype = $desc;
  function GeneratedObjectAccessorService(_configuration) {
    this._configuration = _configuration;
  }
  GeneratedObjectAccessorService.builtin$cls = "GeneratedObjectAccessorService";
  if (!"name" in GeneratedObjectAccessorService)
    GeneratedObjectAccessorService.name = "GeneratedObjectAccessorService";
  $desc = $collectedClasses.GeneratedObjectAccessorService;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GeneratedObjectAccessorService.prototype = $desc;
  function GeneratedTypeInspectorService(_configuration) {
    this._configuration = _configuration;
  }
  GeneratedTypeInspectorService.builtin$cls = "GeneratedTypeInspectorService";
  if (!"name" in GeneratedTypeInspectorService)
    GeneratedTypeInspectorService.name = "GeneratedTypeInspectorService";
  $desc = $collectedClasses.GeneratedTypeInspectorService;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GeneratedTypeInspectorService.prototype = $desc;
  function GeneratedSymbolConverterService(_configuration) {
    this._configuration = _configuration;
  }
  GeneratedSymbolConverterService.builtin$cls = "GeneratedSymbolConverterService";
  if (!"name" in GeneratedSymbolConverterService)
    GeneratedSymbolConverterService.name = "GeneratedSymbolConverterService";
  $desc = $collectedClasses.GeneratedSymbolConverterService;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GeneratedSymbolConverterService.prototype = $desc;
  function MissingCodeException(description) {
    this.description = description;
  }
  MissingCodeException.builtin$cls = "MissingCodeException";
  if (!"name" in MissingCodeException)
    MissingCodeException.name = "MissingCodeException";
  $desc = $collectedClasses.MissingCodeException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MissingCodeException.prototype = $desc;
  function SourceLocation(sourceUrl, offset, line, column) {
    this.sourceUrl = sourceUrl;
    this.offset = offset;
    this.line = line;
    this.column = column;
  }
  SourceLocation.builtin$cls = "SourceLocation";
  if (!"name" in SourceLocation)
    SourceLocation.name = "SourceLocation";
  $desc = $collectedClasses.SourceLocation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SourceLocation.prototype = $desc;
  SourceLocation.prototype.get$sourceUrl = function() {
    return this.sourceUrl;
  };
  SourceLocation.prototype.get$offset = function(receiver) {
    return this.offset;
  };
  function SourceSpan() {
  }
  SourceSpan.builtin$cls = "SourceSpan";
  if (!"name" in SourceSpan)
    SourceSpan.name = "SourceSpan";
  $desc = $collectedClasses.SourceSpan;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SourceSpan.prototype = $desc;
  function SourceSpanBase(start, end, text) {
    this.start = start;
    this.end = end;
    this.text = text;
  }
  SourceSpanBase.builtin$cls = "SourceSpanBase";
  if (!"name" in SourceSpanBase)
    SourceSpanBase.name = "SourceSpanBase";
  $desc = $collectedClasses.SourceSpanBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SourceSpanBase.prototype = $desc;
  SourceSpanBase.prototype.get$start = function(receiver) {
    return this.start;
  };
  SourceSpanBase.prototype.get$end = function() {
    return this.end;
  };
  SourceSpanBase.prototype.get$text = function(receiver) {
    return this.text;
  };
  function SourceSpanMixin() {
  }
  SourceSpanMixin.builtin$cls = "SourceSpanMixin";
  if (!"name" in SourceSpanMixin)
    SourceSpanMixin.name = "SourceSpanMixin";
  $desc = $collectedClasses.SourceSpanMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SourceSpanMixin.prototype = $desc;
  function registerStopwatchTranTypes_closure() {
  }
  registerStopwatchTranTypes_closure.builtin$cls = "registerStopwatchTranTypes_closure";
  if (!"name" in registerStopwatchTranTypes_closure)
    registerStopwatchTranTypes_closure.name = "registerStopwatchTranTypes_closure";
  $desc = $collectedClasses.registerStopwatchTranTypes_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  registerStopwatchTranTypes_closure.prototype = $desc;
  function registerStopwatchTranTypes__closure() {
  }
  registerStopwatchTranTypes__closure.builtin$cls = "registerStopwatchTranTypes__closure";
  if (!"name" in registerStopwatchTranTypes__closure)
    registerStopwatchTranTypes__closure.name = "registerStopwatchTranTypes__closure";
  $desc = $collectedClasses.registerStopwatchTranTypes__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  registerStopwatchTranTypes__closure.prototype = $desc;
  function registerStopwatchTranTypes__closure0() {
  }
  registerStopwatchTranTypes__closure0.builtin$cls = "registerStopwatchTranTypes__closure0";
  if (!"name" in registerStopwatchTranTypes__closure0)
    registerStopwatchTranTypes__closure0.name = "registerStopwatchTranTypes__closure0";
  $desc = $collectedClasses.registerStopwatchTranTypes__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  registerStopwatchTranTypes__closure0.prototype = $desc;
  function registerStopwatchTranTypes__closure1() {
  }
  registerStopwatchTranTypes__closure1.builtin$cls = "registerStopwatchTranTypes__closure1";
  if (!"name" in registerStopwatchTranTypes__closure1)
    registerStopwatchTranTypes__closure1.name = "registerStopwatchTranTypes__closure1";
  $desc = $collectedClasses.registerStopwatchTranTypes__closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  registerStopwatchTranTypes__closure1.prototype = $desc;
  function DurationChange(_internal) {
    this._internal = _internal;
  }
  DurationChange.builtin$cls = "DurationChange";
  if (!"name" in DurationChange)
    DurationChange.name = "DurationChange";
  $desc = $collectedClasses.DurationChange;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DurationChange.prototype = $desc;
  function IDurationChange(duration) {
    this.duration = duration;
  }
  IDurationChange.builtin$cls = "IDurationChange";
  if (!"name" in IDurationChange)
    IDurationChange.name = "IDurationChange";
  $desc = $collectedClasses.IDurationChange;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IDurationChange.prototype = $desc;
  IDurationChange.prototype.get$duration = function(receiver) {
    return this.duration;
  };
  IDurationChange.prototype.get$duration.$reflectable = 1;
  IDurationChange.prototype.set$duration = function(receiver, v) {
    return this.duration = v;
  };
  IDurationChange.prototype.set$duration.$reflectable = 1;
  function Start(_internal) {
    this._internal = _internal;
  }
  Start.builtin$cls = "Start";
  if (!"name" in Start)
    Start.name = "Start";
  $desc = $collectedClasses.Start;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Start.prototype = $desc;
  function Stop(_internal) {
    this._internal = _internal;
  }
  Stop.builtin$cls = "Stop";
  if (!"name" in Stop)
    Stop.name = "Stop";
  $desc = $collectedClasses.Stop;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stop.prototype = $desc;
  function Stopwatch(_timer, _du, _core0$_this, _purityId, eventable$EventDetector$_typeIndexes, eventable$EventDetector$_emitterIndexes, eventable$EventEmitter$_actionQueues, eventable$EventEmitter$_emittingType) {
    this._timer = _timer;
    this._du = _du;
    this._core0$_this = _core0$_this;
    this._purityId = _purityId;
    this.eventable$EventDetector$_typeIndexes = eventable$EventDetector$_typeIndexes;
    this.eventable$EventDetector$_emitterIndexes = eventable$EventDetector$_emitterIndexes;
    this.eventable$EventEmitter$_actionQueues = eventable$EventEmitter$_actionQueues;
    this.eventable$EventEmitter$_emittingType = eventable$EventEmitter$_emittingType;
  }
  Stopwatch.builtin$cls = "Stopwatch";
  if (!"name" in Stopwatch)
    Stopwatch.name = "Stopwatch";
  $desc = $collectedClasses.Stopwatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stopwatch.prototype = $desc;
  Stopwatch.prototype.get$_timer = function() {
    return this._timer;
  };
  Stopwatch.prototype.get$_timer.$reflectable = 1;
  Stopwatch.prototype.set$_timer = function(v) {
    return this._timer = v;
  };
  Stopwatch.prototype.set$_timer.$reflectable = 1;
  Stopwatch.prototype.get$_du = function() {
    return this._du;
  };
  Stopwatch.prototype.get$_du.$reflectable = 1;
  Stopwatch.prototype.set$_du = function(v) {
    return this._du = v;
  };
  Stopwatch.prototype.set$_du.$reflectable = 1;
  function PurityStopwatch(_view$__$counter, consumer, stopButton, startButton, resetButton, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_change_notifier$_records, eventable$EventDetector$_typeIndexes, eventable$EventDetector$_emitterIndexes, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_change_notifier$_records, polymer$Polymer$_polymer$_element, polymer$Polymer$_namedObservers, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$_readied, polymer$Polymer$_jsElem, polymer$Polymer$_hasBeenAttached, polymer$Polymer$shadowRoots, polymer$Polymer$$, polymer$Polymer$_properties, polymer$Polymer$_polyfillScopeStyleCache) {
    this._view$__$counter = _view$__$counter;
    this.consumer = consumer;
    this.stopButton = stopButton;
    this.startButton = startButton;
    this.resetButton = resetButton;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_change_notifier$_records = change_notifier$ChangeNotifier$_change_notifier$_records;
    this.eventable$EventDetector$_typeIndexes = eventable$EventDetector$_typeIndexes;
    this.eventable$EventDetector$_emitterIndexes = eventable$EventDetector$_emitterIndexes;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_change_notifier$_records = change_notifier$ChangeNotifier$_change_notifier$_records;
    this.polymer$Polymer$_polymer$_element = polymer$Polymer$_polymer$_element;
    this.polymer$Polymer$_namedObservers = polymer$Polymer$_namedObservers;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$_readied = polymer$Polymer$_readied;
    this.polymer$Polymer$_jsElem = polymer$Polymer$_jsElem;
    this.polymer$Polymer$_hasBeenAttached = polymer$Polymer$_hasBeenAttached;
    this.polymer$Polymer$shadowRoots = polymer$Polymer$shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
    this.polymer$Polymer$_properties = polymer$Polymer$_properties;
    this.polymer$Polymer$_polyfillScopeStyleCache = polymer$Polymer$_polyfillScopeStyleCache;
  }
  PurityStopwatch.builtin$cls = "PurityStopwatch";
  if (!"name" in PurityStopwatch)
    PurityStopwatch.name = "PurityStopwatch";
  $desc = $collectedClasses.PurityStopwatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PurityStopwatch.prototype = $desc;
  PurityStopwatch.prototype.set$consumer = function(receiver, v) {
    return receiver.consumer = v;
  };
  function PolymerElement_EventDetector(eventable$EventDetector$_typeIndexes, eventable$EventDetector$_emitterIndexes) {
    this.eventable$EventDetector$_typeIndexes = eventable$EventDetector$_typeIndexes;
    this.eventable$EventDetector$_emitterIndexes = eventable$EventDetector$_emitterIndexes;
  }
  PolymerElement_EventDetector.builtin$cls = "PolymerElement_EventDetector";
  if (!"name" in PolymerElement_EventDetector)
    PolymerElement_EventDetector.name = "PolymerElement_EventDetector";
  $desc = $collectedClasses.PolymerElement_EventDetector;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerElement_EventDetector.prototype = $desc;
  EventDetector.prototype.get$_typeIndexes = function(receiver) {
    return receiver.eventable$EventDetector$_typeIndexes;
  };
  EventDetector.prototype.get$_typeIndexes.$reflectable = 1;
  EventDetector.prototype.set$_typeIndexes = function(receiver, v) {
    return receiver.eventable$EventDetector$_typeIndexes = v;
  };
  EventDetector.prototype.set$_typeIndexes.$reflectable = 1;
  EventDetector.prototype.get$_emitterIndexes = function(receiver) {
    return receiver.eventable$EventDetector$_emitterIndexes;
  };
  EventDetector.prototype.get$_emitterIndexes.$reflectable = 1;
  EventDetector.prototype.set$_emitterIndexes = function(receiver, v) {
    return receiver.eventable$EventDetector$_emitterIndexes = v;
  };
  EventDetector.prototype.set$_emitterIndexes.$reflectable = 1;
  function PolymerElement_EventDetector_ChangeNotifier() {
  }
  PolymerElement_EventDetector_ChangeNotifier.builtin$cls = "PolymerElement_EventDetector_ChangeNotifier";
  if (!"name" in PolymerElement_EventDetector_ChangeNotifier)
    PolymerElement_EventDetector_ChangeNotifier.name = "PolymerElement_EventDetector_ChangeNotifier";
  $desc = $collectedClasses.PolymerElement_EventDetector_ChangeNotifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerElement_EventDetector_ChangeNotifier.prototype = $desc;
  function StopwatchConsumer(view, _src, eventable$EventDetector$_typeIndexes, eventable$EventDetector$_emitterIndexes) {
    this.view = view;
    this._src = _src;
    this.eventable$EventDetector$_typeIndexes = eventable$EventDetector$_typeIndexes;
    this.eventable$EventDetector$_emitterIndexes = eventable$EventDetector$_emitterIndexes;
  }
  StopwatchConsumer.builtin$cls = "StopwatchConsumer";
  if (!"name" in StopwatchConsumer)
    StopwatchConsumer.name = "StopwatchConsumer";
  $desc = $collectedClasses.StopwatchConsumer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StopwatchConsumer.prototype = $desc;
  function BindingDelegate(_bindingMaps) {
    this._bindingMaps = _bindingMaps;
  }
  BindingDelegate.builtin$cls = "BindingDelegate";
  if (!"name" in BindingDelegate)
    BindingDelegate.name = "BindingDelegate";
  $desc = $collectedClasses.BindingDelegate;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BindingDelegate.prototype = $desc;
  BindingDelegate.prototype.get$_bindingMaps = function() {
    return this._bindingMaps;
  };
  BindingDelegate.prototype.set$_bindingMaps = function(v) {
    return this._bindingMaps = v;
  };
  function _InstanceBindingMap(bindings, children, content) {
    this.bindings = bindings;
    this.children = children;
    this.content = content;
  }
  _InstanceBindingMap.builtin$cls = "_InstanceBindingMap";
  if (!"name" in _InstanceBindingMap)
    _InstanceBindingMap.name = "_InstanceBindingMap";
  $desc = $collectedClasses._InstanceBindingMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _InstanceBindingMap.prototype = $desc;
  _InstanceBindingMap.prototype.get$bindings = function(receiver) {
    return this.bindings;
  };
  _InstanceBindingMap.prototype.get$content = function(receiver) {
    return this.content;
  };
  function _TemplateBindingMap(_if, _bind, _repeat, bindings, children, content) {
    this._if = _if;
    this._bind = _bind;
    this._repeat = _repeat;
    this.bindings = bindings;
    this.children = children;
    this.content = content;
  }
  _TemplateBindingMap.builtin$cls = "_TemplateBindingMap";
  if (!"name" in _TemplateBindingMap)
    _TemplateBindingMap.name = "_TemplateBindingMap";
  $desc = $collectedClasses._TemplateBindingMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplateBindingMap.prototype = $desc;
  function NodeBindExtension(_node, _js, _templateInstance) {
    this._node = _node;
    this._js = _js;
    this._templateInstance = _templateInstance;
  }
  NodeBindExtension.builtin$cls = "NodeBindExtension";
  if (!"name" in NodeBindExtension)
    NodeBindExtension.name = "NodeBindExtension";
  $desc = $collectedClasses.NodeBindExtension;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeBindExtension.prototype = $desc;
  NodeBindExtension.prototype.get$_node = function() {
    return this._node;
  };
  NodeBindExtension.prototype.set$_templateInstance = function(v) {
    return this._templateInstance = v;
  };
  function _NodeBindingsMap(_node, _bindings) {
    this._node = _node;
    this._bindings = _bindings;
  }
  _NodeBindingsMap.builtin$cls = "_NodeBindingsMap";
  if (!"name" in _NodeBindingsMap)
    _NodeBindingsMap.name = "_NodeBindingsMap";
  $desc = $collectedClasses._NodeBindingsMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NodeBindingsMap.prototype = $desc;
  _NodeBindingsMap.prototype.get$_node = function() {
    return this._node;
  };
  _NodeBindingsMap.prototype.get$_bindings = function() {
    return this._bindings;
  };
  function _NodeBindingsMap_keys_closure(this_0) {
    this.this_0 = this_0;
  }
  _NodeBindingsMap_keys_closure.builtin$cls = "_NodeBindingsMap_keys_closure";
  if (!"name" in _NodeBindingsMap_keys_closure)
    _NodeBindingsMap_keys_closure.name = "_NodeBindingsMap_keys_closure";
  $desc = $collectedClasses._NodeBindingsMap_keys_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NodeBindingsMap_keys_closure.prototype = $desc;
  function _JsBindable(_js) {
    this._js = _js;
  }
  _JsBindable.builtin$cls = "_JsBindable";
  if (!"name" in _JsBindable)
    _JsBindable.name = "_JsBindable";
  $desc = $collectedClasses._JsBindable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsBindable.prototype = $desc;
  function bindableToJsObject_inZone(zone_0) {
    this.zone_0 = zone_0;
  }
  bindableToJsObject_inZone.builtin$cls = "bindableToJsObject_inZone";
  if (!"name" in bindableToJsObject_inZone)
    bindableToJsObject_inZone.name = "bindableToJsObject_inZone";
  $desc = $collectedClasses.bindableToJsObject_inZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  bindableToJsObject_inZone.prototype = $desc;
  function bindableToJsObject_inZoneUnary(zone_1) {
    this.zone_1 = zone_1;
  }
  bindableToJsObject_inZoneUnary.builtin$cls = "bindableToJsObject_inZoneUnary";
  if (!"name" in bindableToJsObject_inZoneUnary)
    bindableToJsObject_inZoneUnary.name = "bindableToJsObject_inZoneUnary";
  $desc = $collectedClasses.bindableToJsObject_inZoneUnary;
  if ($desc instanceof Array)
    $desc = $desc[1];
  bindableToJsObject_inZoneUnary.prototype = $desc;
  function bindableToJsObject_closure(bindable_2) {
    this.bindable_2 = bindable_2;
  }
  bindableToJsObject_closure.builtin$cls = "bindableToJsObject_closure";
  if (!"name" in bindableToJsObject_closure)
    bindableToJsObject_closure.name = "bindableToJsObject_closure";
  $desc = $collectedClasses.bindableToJsObject_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  bindableToJsObject_closure.prototype = $desc;
  function bindableToJsObject__closure(callback_3) {
    this.callback_3 = callback_3;
  }
  bindableToJsObject__closure.builtin$cls = "bindableToJsObject__closure";
  if (!"name" in bindableToJsObject__closure)
    bindableToJsObject__closure.name = "bindableToJsObject__closure";
  $desc = $collectedClasses.bindableToJsObject__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  bindableToJsObject__closure.prototype = $desc;
  function bindableToJsObject_closure0(bindable_4) {
    this.bindable_4 = bindable_4;
  }
  bindableToJsObject_closure0.builtin$cls = "bindableToJsObject_closure0";
  if (!"name" in bindableToJsObject_closure0)
    bindableToJsObject_closure0.name = "bindableToJsObject_closure0";
  $desc = $collectedClasses.bindableToJsObject_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  bindableToJsObject_closure0.prototype = $desc;
  function bindableToJsObject_closure1(bindable_5) {
    this.bindable_5 = bindable_5;
  }
  bindableToJsObject_closure1.builtin$cls = "bindableToJsObject_closure1";
  if (!"name" in bindableToJsObject_closure1)
    bindableToJsObject_closure1.name = "bindableToJsObject_closure1";
  $desc = $collectedClasses.bindableToJsObject_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  bindableToJsObject_closure1.prototype = $desc;
  function bindableToJsObject_closure2(bindable_6) {
    this.bindable_6 = bindable_6;
  }
  bindableToJsObject_closure2.builtin$cls = "bindableToJsObject_closure2";
  if (!"name" in bindableToJsObject_closure2)
    bindableToJsObject_closure2.name = "bindableToJsObject_closure2";
  $desc = $collectedClasses.bindableToJsObject_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  bindableToJsObject_closure2.prototype = $desc;
  function bindableToJsObject_closure3(bindable_7) {
    this.bindable_7 = bindable_7;
  }
  bindableToJsObject_closure3.builtin$cls = "bindableToJsObject_closure3";
  if (!"name" in bindableToJsObject_closure3)
    bindableToJsObject_closure3.name = "bindableToJsObject_closure3";
  $desc = $collectedClasses.bindableToJsObject_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  bindableToJsObject_closure3.prototype = $desc;
  function TemplateInstance(model, _firstNode, _lastNode) {
    this.model = model;
    this._firstNode = _firstNode;
    this._lastNode = _lastNode;
  }
  TemplateInstance.builtin$cls = "TemplateInstance";
  if (!"name" in TemplateInstance)
    TemplateInstance.name = "TemplateInstance";
  $desc = $collectedClasses.TemplateInstance;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateInstance.prototype = $desc;
  TemplateInstance.prototype.get$model = function(receiver) {
    return this.model;
  };
  function TemplateBindExtension(_model, _bindingDelegate, _template_binding$_iterator, _setModelScheduled, _templateInstanceRef, _content, _templateIsDecorated, _stagingDocument, _bindingMap, _refContent, _node, _js, _templateInstance) {
    this._model = _model;
    this._bindingDelegate = _bindingDelegate;
    this._template_binding$_iterator = _template_binding$_iterator;
    this._setModelScheduled = _setModelScheduled;
    this._templateInstanceRef = _templateInstanceRef;
    this._content = _content;
    this._templateIsDecorated = _templateIsDecorated;
    this._stagingDocument = _stagingDocument;
    this._bindingMap = _bindingMap;
    this._refContent = _refContent;
    this._node = _node;
    this._js = _js;
    this._templateInstance = _templateInstance;
  }
  TemplateBindExtension.builtin$cls = "TemplateBindExtension";
  if (!"name" in TemplateBindExtension)
    TemplateBindExtension.name = "TemplateBindExtension";
  $desc = $collectedClasses.TemplateBindExtension;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateBindExtension.prototype = $desc;
  TemplateBindExtension.prototype.set$_model = function(v) {
    return this._model = v;
  };
  TemplateBindExtension.prototype.get$_template_binding$_iterator = function() {
    return this._template_binding$_iterator;
  };
  TemplateBindExtension.prototype.set$_templateInstanceRef = function(v) {
    return this._templateInstanceRef = v;
  };
  TemplateBindExtension.prototype.set$_content = function(v) {
    return this._content = v;
  };
  TemplateBindExtension.prototype.set$_templateIsDecorated = function(v) {
    return this._templateIsDecorated = v;
  };
  function TemplateBindExtension_bind_closure(this_0) {
    this.this_0 = this_0;
  }
  TemplateBindExtension_bind_closure.builtin$cls = "TemplateBindExtension_bind_closure";
  if (!"name" in TemplateBindExtension_bind_closure)
    TemplateBindExtension_bind_closure.name = "TemplateBindExtension_bind_closure";
  $desc = $collectedClasses.TemplateBindExtension_bind_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateBindExtension_bind_closure.prototype = $desc;
  function TemplateBindExtension_bootstrap__bootstrap() {
  }
  TemplateBindExtension_bootstrap__bootstrap.builtin$cls = "TemplateBindExtension_bootstrap__bootstrap";
  if (!"name" in TemplateBindExtension_bootstrap__bootstrap)
    TemplateBindExtension_bootstrap__bootstrap.name = "TemplateBindExtension_bootstrap__bootstrap";
  $desc = $collectedClasses.TemplateBindExtension_bootstrap__bootstrap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateBindExtension_bootstrap__bootstrap.prototype = $desc;
  function closure6() {
  }
  closure6.builtin$cls = "closure6";
  if (!"name" in closure6)
    closure6.name = "closure6";
  $desc = $collectedClasses.closure6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure6.prototype = $desc;
  function closure8() {
  }
  closure8.builtin$cls = "closure8";
  if (!"name" in closure8)
    closure8.name = "closure8";
  $desc = $collectedClasses.closure8;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure8.prototype = $desc;
  function closure9() {
  }
  closure9.builtin$cls = "closure9";
  if (!"name" in closure9)
    closure9.name = "closure9";
  $desc = $collectedClasses.closure9;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure9.prototype = $desc;
  function _InstanceExtension(_bindings, _terminator, _templateCreator, _protoContent) {
    this._bindings = _bindings;
    this._terminator = _terminator;
    this._templateCreator = _templateCreator;
    this._protoContent = _protoContent;
  }
  _InstanceExtension.builtin$cls = "_InstanceExtension";
  if (!"name" in _InstanceExtension)
    _InstanceExtension.name = "_InstanceExtension";
  $desc = $collectedClasses._InstanceExtension;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _InstanceExtension.prototype = $desc;
  _InstanceExtension.prototype.get$_bindings = function() {
    return this._bindings;
  };
  _InstanceExtension.prototype.get$_terminator = function() {
    return this._terminator;
  };
  _InstanceExtension.prototype.get$_templateCreator = function() {
    return this._templateCreator;
  };
  _InstanceExtension.prototype.get$_protoContent = function() {
    return this._protoContent;
  };
  function _getDelegateFactory_closure(name_0, node_1, delegate_2) {
    this.name_0 = name_0;
    this.node_1 = node_1;
    this.delegate_2 = delegate_2;
  }
  _getDelegateFactory_closure.builtin$cls = "_getDelegateFactory_closure";
  if (!"name" in _getDelegateFactory_closure)
    _getDelegateFactory_closure.name = "_getDelegateFactory_closure";
  $desc = $collectedClasses._getDelegateFactory_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _getDelegateFactory_closure.prototype = $desc;
  function _parseAttributeBindings_closure(box_0, element_1, delegate_2, isTemplateNode_3) {
    this.box_0 = box_0;
    this.element_1 = element_1;
    this.delegate_2 = delegate_2;
    this.isTemplateNode_3 = isTemplateNode_3;
  }
  _parseAttributeBindings_closure.builtin$cls = "_parseAttributeBindings_closure";
  if (!"name" in _parseAttributeBindings_closure)
    _parseAttributeBindings_closure.name = "_parseAttributeBindings_closure";
  $desc = $collectedClasses._parseAttributeBindings_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _parseAttributeBindings_closure.prototype = $desc;
  function _TemplateIterator(_templateExt, _instances, _iteratedValue, _presentValue, _closed, _ifValue, _template_binding$_value, _hasIf, _hasRepeat, _ifOneTime, _oneTime, _listSub, _initPrepareFunctions, _instanceModelFn, _instancePositionChangedFn) {
    this._templateExt = _templateExt;
    this._instances = _instances;
    this._iteratedValue = _iteratedValue;
    this._presentValue = _presentValue;
    this._closed = _closed;
    this._ifValue = _ifValue;
    this._template_binding$_value = _template_binding$_value;
    this._hasIf = _hasIf;
    this._hasRepeat = _hasRepeat;
    this._ifOneTime = _ifOneTime;
    this._oneTime = _oneTime;
    this._listSub = _listSub;
    this._initPrepareFunctions = _initPrepareFunctions;
    this._instanceModelFn = _instanceModelFn;
    this._instancePositionChangedFn = _instancePositionChangedFn;
  }
  _TemplateIterator.builtin$cls = "_TemplateIterator";
  if (!"name" in _TemplateIterator)
    _TemplateIterator.name = "_TemplateIterator";
  $desc = $collectedClasses._TemplateIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplateIterator.prototype = $desc;
  function MustacheTokens(_mustache_tokens$_tokens, onlyOneTime, _combinator) {
    this._mustache_tokens$_tokens = _mustache_tokens$_tokens;
    this.onlyOneTime = onlyOneTime;
    this._combinator = _combinator;
  }
  MustacheTokens.builtin$cls = "MustacheTokens";
  if (!"name" in MustacheTokens)
    MustacheTokens.name = "MustacheTokens";
  $desc = $collectedClasses.MustacheTokens;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MustacheTokens.prototype = $desc;
  MustacheTokens.prototype.get$onlyOneTime = function() {
    return this.onlyOneTime;
  };
  function DuplicateTranKeyError(key, mapping) {
    this.key = key;
    this.mapping = mapping;
  }
  DuplicateTranKeyError.builtin$cls = "DuplicateTranKeyError";
  if (!"name" in DuplicateTranKeyError)
    DuplicateTranKeyError.name = "DuplicateTranKeyError";
  $desc = $collectedClasses.DuplicateTranKeyError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DuplicateTranKeyError.prototype = $desc;
  DuplicateTranKeyError.prototype.get$key = function(receiver) {
    return this.key;
  };
  function DuplicateTranNamespaceError(namespace, namespaceFull, registeredNamespaces) {
    this.namespace = namespace;
    this.namespaceFull = namespaceFull;
    this.registeredNamespaces = registeredNamespaces;
  }
  DuplicateTranNamespaceError.builtin$cls = "DuplicateTranNamespaceError";
  if (!"name" in DuplicateTranNamespaceError)
    DuplicateTranNamespaceError.name = "DuplicateTranNamespaceError";
  $desc = $collectedClasses.DuplicateTranNamespaceError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DuplicateTranNamespaceError.prototype = $desc;
  function DuplicateTranTypeError(type, mapping) {
    this.type = type;
    this.mapping = mapping;
  }
  DuplicateTranTypeError.builtin$cls = "DuplicateTranTypeError";
  if (!"name" in DuplicateTranTypeError)
    DuplicateTranTypeError.name = "DuplicateTranTypeError";
  $desc = $collectedClasses.DuplicateTranTypeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DuplicateTranTypeError.prototype = $desc;
  DuplicateTranTypeError.prototype.get$type = function(receiver) {
    return this.type;
  };
  function InvalidTranNamespaceError(namespace) {
    this.namespace = namespace;
  }
  InvalidTranNamespaceError.builtin$cls = "InvalidTranNamespaceError";
  if (!"name" in InvalidTranNamespaceError)
    InvalidTranNamespaceError.name = "InvalidTranNamespaceError";
  $desc = $collectedClasses.InvalidTranNamespaceError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InvalidTranNamespaceError.prototype = $desc;
  function NestedRegisterTranTypesCallError(currentNamespace, nestedNamespace) {
    this.currentNamespace = currentNamespace;
    this.nestedNamespace = nestedNamespace;
  }
  NestedRegisterTranTypesCallError.builtin$cls = "NestedRegisterTranTypesCallError";
  if (!"name" in NestedRegisterTranTypesCallError)
    NestedRegisterTranTypesCallError.name = "NestedRegisterTranTypesCallError";
  $desc = $collectedClasses.NestedRegisterTranTypesCallError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NestedRegisterTranTypesCallError.prototype = $desc;
  function TranMethodError(methodName) {
    this.methodName = methodName;
  }
  TranMethodError.builtin$cls = "TranMethodError";
  if (!"name" in TranMethodError)
    TranMethodError.name = "TranMethodError";
  $desc = $collectedClasses.TranMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TranMethodError.prototype = $desc;
  function TranRegistrationOutsideOfNamespaceError(type) {
    this.type = type;
  }
  TranRegistrationOutsideOfNamespaceError.builtin$cls = "TranRegistrationOutsideOfNamespaceError";
  if (!"name" in TranRegistrationOutsideOfNamespaceError)
    TranRegistrationOutsideOfNamespaceError.name = "TranRegistrationOutsideOfNamespaceError";
  $desc = $collectedClasses.TranRegistrationOutsideOfNamespaceError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TranRegistrationOutsideOfNamespaceError.prototype = $desc;
  TranRegistrationOutsideOfNamespaceError.prototype.get$type = function(receiver) {
    return this.type;
  };
  function TransmittableLockedError(setter) {
    this.setter = setter;
  }
  TransmittableLockedError.builtin$cls = "TransmittableLockedError";
  if (!"name" in TransmittableLockedError)
    TransmittableLockedError.name = "TransmittableLockedError";
  $desc = $collectedClasses.TransmittableLockedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TransmittableLockedError.prototype = $desc;
  function UnregisteredTypeError(type) {
    this.type = type;
  }
  UnregisteredTypeError.builtin$cls = "UnregisteredTypeError";
  if (!"name" in UnregisteredTypeError)
    UnregisteredTypeError.name = "UnregisteredTypeError";
  $desc = $collectedClasses.UnregisteredTypeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnregisteredTypeError.prototype = $desc;
  UnregisteredTypeError.prototype.get$type = function(receiver) {
    return this.type;
  };
  function _InternalPointer(_uniqueValueIndex) {
    this._uniqueValueIndex = _uniqueValueIndex;
  }
  _InternalPointer.builtin$cls = "_InternalPointer";
  if (!"name" in _InternalPointer)
    _InternalPointer.name = "_InternalPointer";
  $desc = $collectedClasses._InternalPointer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _InternalPointer.prototype = $desc;
  _InternalPointer.prototype.get$_uniqueValueIndex = function() {
    return this._uniqueValueIndex;
  };
  function registerTranSubtype_closure(constructor_0) {
    this.constructor_0 = constructor_0;
  }
  registerTranSubtype_closure.builtin$cls = "registerTranSubtype_closure";
  if (!"name" in registerTranSubtype_closure)
    registerTranSubtype_closure.name = "registerTranSubtype_closure";
  $desc = $collectedClasses.registerTranSubtype_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  registerTranSubtype_closure.prototype = $desc;
  function _registerTranTranTypes_closure() {
  }
  _registerTranTranTypes_closure.builtin$cls = "_registerTranTranTypes_closure";
  if (!"name" in _registerTranTranTypes_closure)
    _registerTranTranTypes_closure.name = "_registerTranTranTypes_closure";
  $desc = $collectedClasses._registerTranTranTypes_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes_closure.prototype = $desc;
  function _registerTranTranTypes__closure() {
  }
  _registerTranTranTypes__closure.builtin$cls = "_registerTranTranTypes__closure";
  if (!"name" in _registerTranTranTypes__closure)
    _registerTranTranTypes__closure.name = "_registerTranTranTypes__closure";
  $desc = $collectedClasses._registerTranTranTypes__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure.prototype = $desc;
  function _registerTranTranTypes__closure0() {
  }
  _registerTranTranTypes__closure0.builtin$cls = "_registerTranTranTypes__closure0";
  if (!"name" in _registerTranTranTypes__closure0)
    _registerTranTranTypes__closure0.name = "_registerTranTranTypes__closure0";
  $desc = $collectedClasses._registerTranTranTypes__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure0.prototype = $desc;
  function _registerTranTranTypes__closure1() {
  }
  _registerTranTranTypes__closure1.builtin$cls = "_registerTranTranTypes__closure1";
  if (!"name" in _registerTranTranTypes__closure1)
    _registerTranTranTypes__closure1.name = "_registerTranTranTypes__closure1";
  $desc = $collectedClasses._registerTranTranTypes__closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure1.prototype = $desc;
  function _registerTranTranTypes__closure2() {
  }
  _registerTranTranTypes__closure2.builtin$cls = "_registerTranTranTypes__closure2";
  if (!"name" in _registerTranTranTypes__closure2)
    _registerTranTranTypes__closure2.name = "_registerTranTranTypes__closure2";
  $desc = $collectedClasses._registerTranTranTypes__closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure2.prototype = $desc;
  function _registerTranTranTypes__closure3() {
  }
  _registerTranTranTypes__closure3.builtin$cls = "_registerTranTranTypes__closure3";
  if (!"name" in _registerTranTranTypes__closure3)
    _registerTranTranTypes__closure3.name = "_registerTranTranTypes__closure3";
  $desc = $collectedClasses._registerTranTranTypes__closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure3.prototype = $desc;
  function _registerTranTranTypes__closure4() {
  }
  _registerTranTranTypes__closure4.builtin$cls = "_registerTranTranTypes__closure4";
  if (!"name" in _registerTranTranTypes__closure4)
    _registerTranTranTypes__closure4.name = "_registerTranTranTypes__closure4";
  $desc = $collectedClasses._registerTranTranTypes__closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure4.prototype = $desc;
  function _registerTranTranTypes__closure5() {
  }
  _registerTranTranTypes__closure5.builtin$cls = "_registerTranTranTypes__closure5";
  if (!"name" in _registerTranTranTypes__closure5)
    _registerTranTranTypes__closure5.name = "_registerTranTranTypes__closure5";
  $desc = $collectedClasses._registerTranTranTypes__closure5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure5.prototype = $desc;
  function _registerTranTranTypes__closure6() {
  }
  _registerTranTranTypes__closure6.builtin$cls = "_registerTranTranTypes__closure6";
  if (!"name" in _registerTranTranTypes__closure6)
    _registerTranTranTypes__closure6.name = "_registerTranTranTypes__closure6";
  $desc = $collectedClasses._registerTranTranTypes__closure6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure6.prototype = $desc;
  function _registerTranTranTypes__closure7() {
  }
  _registerTranTranTypes__closure7.builtin$cls = "_registerTranTranTypes__closure7";
  if (!"name" in _registerTranTranTypes__closure7)
    _registerTranTranTypes__closure7.name = "_registerTranTranTypes__closure7";
  $desc = $collectedClasses._registerTranTranTypes__closure7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure7.prototype = $desc;
  function _registerTranTranTypes__closure8() {
  }
  _registerTranTranTypes__closure8.builtin$cls = "_registerTranTranTypes__closure8";
  if (!"name" in _registerTranTranTypes__closure8)
    _registerTranTranTypes__closure8.name = "_registerTranTranTypes__closure8";
  $desc = $collectedClasses._registerTranTranTypes__closure8;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure8.prototype = $desc;
  function _registerTranTranTypes__closure9() {
  }
  _registerTranTranTypes__closure9.builtin$cls = "_registerTranTranTypes__closure9";
  if (!"name" in _registerTranTranTypes__closure9)
    _registerTranTranTypes__closure9.name = "_registerTranTranTypes__closure9";
  $desc = $collectedClasses._registerTranTranTypes__closure9;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure9.prototype = $desc;
  function _registerTranTranTypes__closure10() {
  }
  _registerTranTranTypes__closure10.builtin$cls = "_registerTranTranTypes__closure10";
  if (!"name" in _registerTranTranTypes__closure10)
    _registerTranTranTypes__closure10.name = "_registerTranTranTypes__closure10";
  $desc = $collectedClasses._registerTranTranTypes__closure10;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure10.prototype = $desc;
  function _registerTranTranTypes__closure11() {
  }
  _registerTranTranTypes__closure11.builtin$cls = "_registerTranTranTypes__closure11";
  if (!"name" in _registerTranTranTypes__closure11)
    _registerTranTranTypes__closure11.name = "_registerTranTranTypes__closure11";
  $desc = $collectedClasses._registerTranTranTypes__closure11;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure11.prototype = $desc;
  function _registerTranTranTypes__closure12() {
  }
  _registerTranTranTypes__closure12.builtin$cls = "_registerTranTranTypes__closure12";
  if (!"name" in _registerTranTranTypes__closure12)
    _registerTranTranTypes__closure12.name = "_registerTranTranTypes__closure12";
  $desc = $collectedClasses._registerTranTranTypes__closure12;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure12.prototype = $desc;
  function _registerTranTranTypes__closure13() {
  }
  _registerTranTranTypes__closure13.builtin$cls = "_registerTranTranTypes__closure13";
  if (!"name" in _registerTranTranTypes__closure13)
    _registerTranTranTypes__closure13.name = "_registerTranTranTypes__closure13";
  $desc = $collectedClasses._registerTranTranTypes__closure13;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure13.prototype = $desc;
  function _registerTranTranTypes__closure14() {
  }
  _registerTranTranTypes__closure14.builtin$cls = "_registerTranTranTypes__closure14";
  if (!"name" in _registerTranTranTypes__closure14)
    _registerTranTranTypes__closure14.name = "_registerTranTranTypes__closure14";
  $desc = $collectedClasses._registerTranTranTypes__closure14;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure14.prototype = $desc;
  function _registerTranTranTypes__closure15() {
  }
  _registerTranTranTypes__closure15.builtin$cls = "_registerTranTranTypes__closure15";
  if (!"name" in _registerTranTranTypes__closure15)
    _registerTranTranTypes__closure15.name = "_registerTranTranTypes__closure15";
  $desc = $collectedClasses._registerTranTranTypes__closure15;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure15.prototype = $desc;
  function _registerTranTranTypes__closure16() {
  }
  _registerTranTranTypes__closure16.builtin$cls = "_registerTranTranTypes__closure16";
  if (!"name" in _registerTranTranTypes__closure16)
    _registerTranTranTypes__closure16.name = "_registerTranTranTypes__closure16";
  $desc = $collectedClasses._registerTranTranTypes__closure16;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure16.prototype = $desc;
  function _registerTranTranTypes__closure17() {
  }
  _registerTranTranTypes__closure17.builtin$cls = "_registerTranTranTypes__closure17";
  if (!"name" in _registerTranTranTypes__closure17)
    _registerTranTranTypes__closure17.name = "_registerTranTranTypes__closure17";
  $desc = $collectedClasses._registerTranTranTypes__closure17;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure17.prototype = $desc;
  function _registerTranTranTypes__closure18() {
  }
  _registerTranTranTypes__closure18.builtin$cls = "_registerTranTranTypes__closure18";
  if (!"name" in _registerTranTranTypes__closure18)
    _registerTranTranTypes__closure18.name = "_registerTranTranTypes__closure18";
  $desc = $collectedClasses._registerTranTranTypes__closure18;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure18.prototype = $desc;
  function _registerTranTranTypes__closure19() {
  }
  _registerTranTranTypes__closure19.builtin$cls = "_registerTranTranTypes__closure19";
  if (!"name" in _registerTranTranTypes__closure19)
    _registerTranTranTypes__closure19.name = "_registerTranTranTypes__closure19";
  $desc = $collectedClasses._registerTranTranTypes__closure19;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure19.prototype = $desc;
  function _registerTranTranTypes__closure20() {
  }
  _registerTranTranTypes__closure20.builtin$cls = "_registerTranTranTypes__closure20";
  if (!"name" in _registerTranTranTypes__closure20)
    _registerTranTranTypes__closure20.name = "_registerTranTranTypes__closure20";
  $desc = $collectedClasses._registerTranTranTypes__closure20;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure20.prototype = $desc;
  function _registerTranTranTypes__closure21() {
  }
  _registerTranTranTypes__closure21.builtin$cls = "_registerTranTranTypes__closure21";
  if (!"name" in _registerTranTranTypes__closure21)
    _registerTranTranTypes__closure21.name = "_registerTranTranTypes__closure21";
  $desc = $collectedClasses._registerTranTranTypes__closure21;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure21.prototype = $desc;
  function _registerTranTranTypes__closure22() {
  }
  _registerTranTranTypes__closure22.builtin$cls = "_registerTranTranTypes__closure22";
  if (!"name" in _registerTranTranTypes__closure22)
    _registerTranTranTypes__closure22.name = "_registerTranTranTypes__closure22";
  $desc = $collectedClasses._registerTranTranTypes__closure22;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure22.prototype = $desc;
  function _registerTranTranTypes__closure23() {
  }
  _registerTranTranTypes__closure23.builtin$cls = "_registerTranTranTypes__closure23";
  if (!"name" in _registerTranTranTypes__closure23)
    _registerTranTranTypes__closure23.name = "_registerTranTranTypes__closure23";
  $desc = $collectedClasses._registerTranTranTypes__closure23;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _registerTranTranTypes__closure23.prototype = $desc;
  function _processIterableToString_closure(strB_0) {
    this.strB_0 = strB_0;
  }
  _processIterableToString_closure.builtin$cls = "_processIterableToString_closure";
  if (!"name" in _processIterableToString_closure)
    _processIterableToString_closure.name = "_processIterableToString_closure";
  $desc = $collectedClasses._processIterableToString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _processIterableToString_closure.prototype = $desc;
  function _processMapToString_closure(strB_0) {
    this.strB_0 = strB_0;
  }
  _processMapToString_closure.builtin$cls = "_processMapToString_closure";
  if (!"name" in _processMapToString_closure)
    _processMapToString_closure.name = "_processMapToString_closure";
  $desc = $collectedClasses._processMapToString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _processMapToString_closure.prototype = $desc;
  function _TranCodec(_isTranSubtype, _transmittable$_key, _type, _encode, _decode) {
    this._isTranSubtype = _isTranSubtype;
    this._transmittable$_key = _transmittable$_key;
    this._type = _type;
    this._encode = _encode;
    this._decode = _decode;
  }
  _TranCodec.builtin$cls = "_TranCodec";
  if (!"name" in _TranCodec)
    _TranCodec.name = "_TranCodec";
  $desc = $collectedClasses._TranCodec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TranCodec.prototype = $desc;
  _TranCodec.prototype.get$_isTranSubtype = function() {
    return this._isTranSubtype;
  };
  _TranCodec.prototype.get$_transmittable$_key = function() {
    return this._transmittable$_key;
  };
  _TranCodec.prototype.get$_type = function() {
    return this._type;
  };
  function getRegisteredMappingsByType_closure(map_0) {
    this.map_0 = map_0;
  }
  getRegisteredMappingsByType_closure.builtin$cls = "getRegisteredMappingsByType_closure";
  if (!"name" in getRegisteredMappingsByType_closure)
    getRegisteredMappingsByType_closure.name = "getRegisteredMappingsByType_closure";
  $desc = $collectedClasses.getRegisteredMappingsByType_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  getRegisteredMappingsByType_closure.prototype = $desc;
  function getRegisteredMappingsByKey_closure(map_0) {
    this.map_0 = map_0;
  }
  getRegisteredMappingsByKey_closure.builtin$cls = "getRegisteredMappingsByKey_closure";
  if (!"name" in getRegisteredMappingsByKey_closure)
    getRegisteredMappingsByKey_closure.name = "getRegisteredMappingsByKey_closure";
  $desc = $collectedClasses.getRegisteredMappingsByKey_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  getRegisteredMappingsByKey_closure.prototype = $desc;
  function Transmittable(_internal) {
    this._internal = _internal;
  }
  Transmittable.builtin$cls = "Transmittable";
  if (!"name" in Transmittable)
    Transmittable.name = "Transmittable";
  $desc = $collectedClasses.Transmittable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Transmittable.prototype = $desc;
  Transmittable.prototype.get$_internal = function() {
    return this._internal;
  };
  Transmittable.prototype.set$_internal = function(v) {
    return this._internal = v;
  };
  function ListRange(_list_range$_source, _list_range$_offset, _list_range$_length) {
    this._list_range$_source = _list_range$_source;
    this._list_range$_offset = _list_range$_offset;
    this._list_range$_length = _list_range$_length;
  }
  ListRange.builtin$cls = "ListRange";
  if (!"name" in ListRange)
    ListRange.name = "ListRange";
  $desc = $collectedClasses.ListRange;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListRange.prototype = $desc;
  function _ListRangeIteratorImpl(_list_range$_source, _list_range$_offset, _end) {
    this._list_range$_source = _list_range$_source;
    this._list_range$_offset = _list_range$_offset;
    this._end = _end;
  }
  _ListRangeIteratorImpl.builtin$cls = "_ListRangeIteratorImpl";
  if (!"name" in _ListRangeIteratorImpl)
    _ListRangeIteratorImpl.name = "_ListRangeIteratorImpl";
  $desc = $collectedClasses._ListRangeIteratorImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ListRangeIteratorImpl.prototype = $desc;
  function Utf16CodeUnitDecoder(utf16CodeUnitIterator, replacementCodepoint, _utf_16_code_unit_decoder$_current) {
    this.utf16CodeUnitIterator = utf16CodeUnitIterator;
    this.replacementCodepoint = replacementCodepoint;
    this._utf_16_code_unit_decoder$_current = _utf_16_code_unit_decoder$_current;
  }
  Utf16CodeUnitDecoder.builtin$cls = "Utf16CodeUnitDecoder";
  if (!"name" in Utf16CodeUnitDecoder)
    Utf16CodeUnitDecoder.name = "Utf16CodeUnitDecoder";
  $desc = $collectedClasses.Utf16CodeUnitDecoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Utf16CodeUnitDecoder.prototype = $desc;
  function registerDartType_upgradeElement(dartType_0, upgrader_1) {
    this.dartType_0 = dartType_0;
    this.upgrader_1 = upgrader_1;
  }
  registerDartType_upgradeElement.builtin$cls = "registerDartType_upgradeElement";
  if (!"name" in registerDartType_upgradeElement)
    registerDartType_upgradeElement.name = "registerDartType_upgradeElement";
  $desc = $collectedClasses.registerDartType_upgradeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  registerDartType_upgradeElement.prototype = $desc;
  return [HtmlElement, _EntryArray, AnchorElement, AnimationEvent, AreaElement, AudioElement, AutocompleteErrorEvent, BRElement, BaseElement, BeforeLoadEvent, BeforeUnloadEvent, Blob, BodyElement, ButtonElement, CDataSection, CanvasElement, CharacterData, CloseEvent, Comment, CompositionEvent, ContentElement, CssFontFaceLoadEvent, CssStyleDeclaration, CustomEvent, DListElement, DataListElement, DetailsElement, DeviceMotionEvent, DeviceOrientationEvent, DialogElement, DivElement, Document, DocumentFragment, DomError, DomException, DomImplementation, Element, EmbedElement, ErrorEvent, Event0, EventTarget, FieldSetElement, File, FileError, FocusEvent, FormElement, HRElement, HashChangeEvent, HeadElement, HeadingElement, HtmlCollection, HtmlDocument, HtmlFormControlsCollection, HtmlHtmlElement, HtmlOptionsCollection, HttpRequest, HttpRequestEventTarget, IFrameElement, ImageData, ImageElement, InputElement, InstallEvent, InstallPhaseEvent, KeyboardEvent, KeygenElement, LIElement, LabelElement, LegendElement, LinkElement, Location, MapElement, MediaElement, MediaError, MediaKeyError, MediaKeyEvent, MediaKeyMessageEvent, MediaKeyNeededEvent, MediaStream, MediaStreamEvent, MediaStreamTrackEvent, MenuElement, MessageEvent, MetaElement, MeterElement, MidiConnectionEvent, MidiInput, MidiMessageEvent, MidiOutput, MidiPort, ModElement, MouseEvent, MutationObserver, MutationRecord, Navigator, NavigatorUserMediaError, Node, NodeList, OListElement, ObjectElement, OptGroupElement, OptionElement, OutputElement, OverflowEvent, PageTransitionEvent, ParagraphElement, ParamElement, PopStateEvent, PositionError, PreElement, ProcessingInstruction, ProgressElement, ProgressEvent, QuoteElement, Range, ResourceProgressEvent, RtcDataChannelEvent, RtcDtmfToneChangeEvent, RtcIceCandidateEvent, ScriptElement, SecurityPolicyViolationEvent, SelectElement, ShadowElement, ShadowRoot, SourceElement, SpanElement, SpeechInputEvent, SpeechRecognitionError, SpeechRecognitionEvent, SpeechSynthesisEvent, StorageEvent, StyleElement, TableCaptionElement, TableCellElement, TableColElement, TableElement, TableRowElement, TableSectionElement, TemplateElement, Text, TextAreaElement, TextEvent, TitleElement, TouchEvent, TrackElement, TrackEvent, TransitionEvent, UIEvent, UListElement, UnknownElement, VideoElement, WheelEvent, Window, XmlDocument, _Attr, _ClientRect, _DocumentType, _HTMLAppletElement, _HTMLDirectoryElement, _HTMLFontElement, _HTMLFrameElement, _HTMLFrameSetElement, _HTMLMarqueeElement, _MutationEvent, _NamedNodeMap, _Notation, _XMLHttpRequestProgressEvent, KeyRange, VersionChangeEvent, AElement, AltGlyphElement, AnimateElement, AnimateMotionElement, AnimateTransformElement, AnimatedEnumeration, AnimatedLength, AnimatedLengthList, AnimatedNumber, AnimatedNumberList, AnimatedString, AnimationElement, CircleElement, ClipPathElement, DefsElement, DescElement, DiscardElement, EllipseElement, FEBlendElement, FEColorMatrixElement, FEComponentTransferElement, FECompositeElement, FEConvolveMatrixElement, FEDiffuseLightingElement, FEDisplacementMapElement, FEDistantLightElement, FEFloodElement, FEFuncAElement, FEFuncBElement, FEFuncGElement, FEFuncRElement, FEGaussianBlurElement, FEImageElement, FEMergeElement, FEMergeNodeElement, FEMorphologyElement, FEOffsetElement, FEPointLightElement, FESpecularLightingElement, FESpotLightElement, FETileElement, FETurbulenceElement, FilterElement, ForeignObjectElement, GElement, GeometryElement, GraphicsElement, ImageElement0, LineElement, LinearGradientElement, MarkerElement, MaskElement, MetadataElement, PathElement, PatternElement, PolygonElement, PolylineElement, RadialGradientElement, RectElement, ScriptElement0, SetElement, StopElement, StyleElement0, SvgElement, SvgSvgElement, SwitchElement, SymbolElement, TSpanElement, TextContentElement, TextElement, TextPathElement, TextPositioningElement, TitleElement0, UseElement, ViewElement, ZoomEvent, _GradientElement, _SVGAltGlyphDefElement, _SVGAltGlyphItemElement, _SVGComponentTransferFunctionElement, _SVGCursorElement, _SVGFEDropShadowElement, _SVGFontElement, _SVGFontFaceElement, _SVGFontFaceFormatElement, _SVGFontFaceNameElement, _SVGFontFaceSrcElement, _SVGFontFaceUriElement, _SVGGlyphElement, _SVGGlyphRefElement, _SVGHKernElement, _SVGMPathElement, _SVGMissingGlyphElement, _SVGVKernElement, AudioProcessingEvent, OfflineAudioCompletionEvent, ContextEvent, SqlError, NativeByteBuffer, NativeTypedData, NativeByteData, NativeFloat32List, NativeFloat64List, NativeInt16List, NativeInt32List, NativeInt8List, NativeUint16List, NativeUint32List, NativeUint8ClampedList, NativeUint8List, JS_CONST, Interceptor, JSBool, JSNull, JavaScriptObject, PlainJavaScriptObject, UnknownJavaScriptObject, JSArray, JSMutableArray, JSFixedArray, JSExtendableArray, JSNumber, JSInt, JSDouble, JSPositiveInt, JSUInt32, JSUInt31, JSString, _CodeUnits, startRootIsolate_closure, startRootIsolate_closure0, _Manager, _IsolateContext, _IsolateContext_handlePing_respond, _EventLoop, _EventLoop__runHelper_next, _IsolateEvent, _MainManagerStub, IsolateNatives__processWorkerMessage_closure, IsolateNatives__startIsolate_runStartFunction, _BaseSendPort, _NativeJsSendPort, _NativeJsSendPort_send_closure, _WorkerSendPort, RawReceivePortImpl, _JsSerializer, _JsCopier, _JsDeserializer, _JsVisitedMap, _MessageTraverserVisitedMap, _MessageTraverser, _Copier, _Copier_visitMap_closure, _Serializer, _Deserializer, TimerImpl, TimerImpl_internalCallback, TimerImpl_internalCallback0, TimerImpl$periodic_closure, CapabilityImpl, NoSideEffects, NoThrows, NoInline, Native, ConstantMap, ConstantStringMap, ConstantStringMap_values_closure, _ConstantMapKeyIterable, _Patch, JSInvocationMirror, CachedInvocation, CachedCatchAllInvocation, CachedNoSuchMethodInvocation, ReflectionInfo, ReflectionInfo_sortedIndex_closure, Primitives_functionNoSuchMethod_closure, Primitives_applyFunction_closure, TypeErrorDecoder, NullError, JsNoSuchMethodError, UnknownJsTypeError, unwrapException_saveStackTrace, _StackTrace, invokeClosure_closure, invokeClosure_closure0, invokeClosure_closure1, invokeClosure_closure2, invokeClosure_closure3, Closure, TearOffClosure, BoundClosure, Creates, Returns, JSName, CastErrorImplementation, RuntimeError, RuntimeType, RuntimeFunctionType, DynamicRuntimeType, RuntimeTypePlain, RuntimeTypeGeneric, UnimplementedNoSuchMethodError, TypeImpl, initHooks_closure, initHooks_closure0, initHooks_closure1, JSSyntaxRegExp, _MatchImplementation, _AllMatchesIterable, _AllMatchesIterator, StringMatch, main_closure, main_closure0, main_closure1, main_closure2, main_closure3, main_closure4, main_closure5, main_closure6, main_closure7, main_closure8, main_closure9, main_closure10, main_closure11, main_closure12, main_closure13, main_closure14, main_closure15, main_closure16, main_closure17, BsonObject, BsonBinary, ObjectId, ObjectId_createId_getOctet, Timestamp, MessageId, Message, BuildLogEntry, LogEntryTable, LogEntryTable_LogEntryTable$fromJson_closure, LogEntryTable_toJson_closure, LogEntryTable_toJson__closure, LogEntryTable_add_closure, LogEntryTable_addAll_closure, CoreIcon, HtmlElement_DomProxyMixin, CoreIconset, CoreMeta, HtmlElement_DomProxyMixin0, PaperButton, PaperFocusable, HtmlElement_DomProxyMixin1, PaperRipple, HtmlElement_DomProxyMixin2, PaperShadow, HtmlElement_DomProxyMixin3, DomProxyMixin, ListIterable, SubListIterable, ListIterator, MappedIterable, EfficientLengthMappedIterable, MappedIterator, MappedListIterable, WhereIterable, WhereIterator, SkipIterable, EfficientLengthSkipIterable, SkipIterator, EmptyIterable, EmptyIterator, IterableMixinWorkaround, FixedLengthListMixin, UnmodifiableListMixin, UnmodifiableListBase, ReversedListIterable, Symbol, JsMirrorSystem, JsMirrorSystem_computeLibrariesByName_closure, JsMirror, JsIsolateMirror, JsDeclarationMirror, JsTypeVariableMirror, JsTypeMirror, JsLibraryMirror, JsDeclarationMirror_JsObjectMirror, JsLibraryMirror___members_addToResult, JsLibraryMirror_declarations_addToResult, filterMembers_closure, JsMixinApplication, JsTypeMirror_JsObjectMirror, JsObjectMirror, JsInstanceMirror, JsInstanceMirror__invokeMethodWithNamedArguments_closure, JsTypeBoundClassMirror, JsTypeBoundClassMirror_typeArguments_addTypeArgument, JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure, JsTypeBoundClassMirror_typeArguments_closure, JsTypeBoundClassMirror_declarations_closure, JsClassMirror, JsTypeMirror_JsObjectMirror0, JsClassMirror_declarations_addToResult, JsClassMirror_declarations_closure, JsVariableMirror, JsClosureMirror, JsMethodMirror, JsParameterMirror, JsTypedefMirror, BrokenClassMirror, JsFunctionTypeMirror, typeMirrorFromRuntimeTypeRepresentation_getTypeArgument, typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable, extractMetadata_closure, NoSuchStaticMethodError, computeReflectiveNames_closure, _AsyncRun__initializeScheduleImmediate_internalCallback, _AsyncRun__initializeScheduleImmediate_closure, _AsyncRun__scheduleImmediateJsOverride_internalCallback, _AsyncError, _UncaughtAsyncError, _BroadcastStream, _BroadcastSubscription, _BroadcastStreamController, _SyncBroadcastStreamController, _SyncBroadcastStreamController__sendData_closure, _SyncBroadcastStreamController__sendError_closure, _SyncBroadcastStreamController__sendDone_closure, _AsyncBroadcastStreamController, Future, Future_Future$delayed_closure, _Completer, _AsyncCompleter, _SyncCompleter, _Future, _Future__addListener_closure, _Future__chainForeignFuture_closure, _Future__chainForeignFuture_closure0, _Future__asyncComplete_closure, _Future__asyncComplete_closure0, _Future__asyncCompleteError_closure, _Future__propagateToListeners_handleValueCallback, _Future__propagateToListeners_handleError, _Future__propagateToListeners_handleWhenCompleteCallback, _Future__propagateToListeners_handleWhenCompleteCallback_closure, _Future__propagateToListeners_handleWhenCompleteCallback_closure0, _AsyncCallbackEntry, Stream, Stream_fold_closure, Stream_fold__closure, Stream_fold__closure0, Stream_fold_closure1, Stream_fold_closure0, Stream_join_closure, Stream_join_closure1, Stream_join_closure0, Stream_contains_closure, Stream_contains__closure, Stream_contains__closure0, Stream_contains_closure0, Stream_forEach_closure, Stream_forEach__closure, Stream_forEach__closure0, Stream_forEach_closure0, Stream_any_closure, Stream_any__closure, Stream_any__closure0, Stream_any_closure0, Stream_length_closure, Stream_length_closure0, Stream_isEmpty_closure, Stream_isEmpty_closure0, Stream_toList_closure, Stream_toList_closure0, Stream_first_closure, Stream_first_closure0, Stream_last_closure, Stream_last_closure0, Stream_firstWhere_closure, Stream_firstWhere__closure, Stream_firstWhere__closure0, Stream_firstWhere_closure0, Stream_elementAt_closure, Stream_elementAt_closure0, StreamSubscription, _ControllerStream, _ControllerSubscription, _EventSink, _BufferingStreamSubscription, _BufferingStreamSubscription__sendError_sendError, _BufferingStreamSubscription__sendDone_sendDone, _StreamImpl, _DelayedEvent, _DelayedData, _DelayedError, _DelayedDone, _PendingEvents, _PendingEvents_schedule_closure, _StreamImplEvents, _DoneStreamSubscription, _cancelAndError_closure, _cancelAndErrorClosure_closure, _cancelAndValue_closure, _ForwardingStream, _ForwardingStreamSubscription, _WhereStream, _MapStream, _SkipStream, Timer, _ZoneFunction, ZoneSpecification, _ZoneSpecification, ZoneDelegate, Zone, _ZoneDelegate, _Zone, _CustomZone, _CustomZone_bindCallback_closure, _CustomZone_bindCallback_closure0, _CustomZone_bindUnaryCallback_closure, _CustomZone_bindUnaryCallback_closure0, _CustomZone_bindBinaryCallback_closure, _CustomZone_bindBinaryCallback_closure0, _rootHandleUncaughtError_closure, _RootZone, _RootZone_bindCallback_closure, _RootZone_bindCallback_closure0, _RootZone_bindUnaryCallback_closure, _RootZone_bindUnaryCallback_closure0, _RootZone_bindBinaryCallback_closure, _RootZone_bindBinaryCallback_closure0, _HashMap, _HashMap_values_closure, _HashMap_addAll_closure, _IdentityHashMap, _CustomHashMap, _CustomHashMap_closure, HashMapKeyIterable, HashMapKeyIterator, _LinkedHashMap, _LinkedHashMap_values_closure, _LinkedHashMap_addAll_closure, LinkedHashMapCell, LinkedHashMapKeyIterable, LinkedHashMapKeyIterator, _HashSet, HashSetIterator, _LinkedHashSet, LinkedHashSetCell, LinkedHashSetIterator, UnmodifiableListView, _HashSetBase, IterableBase, ListBase, Object_ListMixin, ListMixin, MapBase, MapMixin, _MapBaseValueIterable, _MapBaseValueIterator, _UnmodifiableMapMixin, MapView, UnmodifiableMapView, Maps_mapToString_closure, ListQueue, _ListQueueIterator, SetMixin, SetBase, _JsonMap, _JsonMap_values_closure, _JsonMap_addAll_closure, Codec, Converter, Encoding, HtmlEscapeMode, HtmlEscape, JsonCodec, JsonDecoder, Utf8Codec, Utf8Encoder, _Utf8Encoder, Utf8Decoder, _Utf8Decoder, _Utf8Decoder_convert_scanOneByteCharacters, _Utf8Decoder_convert_addSingleBytes, Function__toMangledNames_closure, NoSuchMethodError_toString_closure, Deprecated, _Override, _Proxy, bool, Comparable, DateTime, DateTime_parse_parseIntOrZero, DateTime_parse_parseDoubleOrZero, $double, Duration, Duration_toString_sixDigits, Duration_toString_twoDigits, Error, NullThrownError, ArgumentError, RangeError, NoSuchMethodError, UnsupportedError, UnimplementedError, StateError, ConcurrentModificationError, OutOfMemoryError, StackOverflowError, CyclicInitializationError, _ExceptionImplementation, FormatException, IntegerDivisionByZeroException, Expando, Function, $int, Invocation, Iterable, Iterator, List, Map, Null, num, Object, Match, RegExp, StackTrace, String, RuneIterator, StringBuffer, Symbol0, Type, Uri, Uri_parse_isRegName, Uri_parse_parseAuth, Uri__checkNonWindowsPathReservedCharacters_closure, Uri__makePath_closure, Uri__makeQuery_closure, Uri_hashCode_combine, Uri_parseIPv4Address_error, Uri_parseIPv4Address_closure, Uri_parseIPv6Address_error, Uri_parseIPv6Address_parseHex, Uri__uriEncode_byteToHex, Interceptor_CssStyleDeclarationBase, CssStyleDeclarationBase, _FrozenElementList, _FrozenElementList$_wrap_closure, Element_Element$html_closure, Entry, Interceptor_ListMixin, Interceptor_ListMixin_ImmutableListMixin, HttpRequest_getString_closure, HttpRequest_request_closure0, HttpRequest_request_closure, MutationObserver_observe_override, _ChildNodeListLazy, Interceptor_ListMixin0, Interceptor_ListMixin_ImmutableListMixin0, Interceptor_ListMixin1, Interceptor_ListMixin_ImmutableListMixin1, _AttributeMap, _AttributeMap_addAll_closure, _ElementAttributeMap, _MultiElementCssClassSet, _MultiElementCssClassSet_closure, _MultiElementCssClassSet_readClasses_closure, _MultiElementCssClassSet_modify_closure, _MultiElementCssClassSet_toggle_closure, _MultiElementCssClassSet_remove_closure, _MultiElementCssClassSet__modifyWithReturnValue_closure, _ElementCssClassSet, EventStreamProvider, _EventStream, _ElementEventStreamImpl, _ElementEventStreamImpl_matches_closure, _ElementEventStreamImpl_matches_closure0, _ElementListEventStreamImpl, _ElementListEventStreamImpl_matches_closure, _ElementListEventStreamImpl_matches_closure0, _EventStreamSubscription, _StreamPool, _StreamPool_add_closure, _Html5NodeValidator, ImmutableListMixin, NodeValidatorBuilder, NodeValidatorBuilder_allowsElement_closure, NodeValidatorBuilder_allowsAttribute_closure, _SimpleNodeValidator, _TemplatingNodeValidator, _TemplatingNodeValidator_closure, FixedSizeListIterator, _callConstructor_closure, _JSElementUpgrader, _DOMWindowCrossFrame, NodeValidator, _SameOriginUriPolicy, _ValidatingTreeSanitizer, _ValidatingTreeSanitizer_sanitizeTree_walk, _AttributeClassSet, Capability, JsObject, JsObject__convertDataTree__convert, JsFunction, JsArray, JsObject_ListMixin, _convertToJS_closure, _convertToJS_closure0, _wrapToDart_closure, _wrapToDart_closure0, _wrapToDart_closure1, _JSRandom, Point, _RectangleBase, Rectangle, Mirror, DeclarationMirror, InstanceMirror, LibraryMirror, TypeMirror, ClassMirror, TypeVariableMirror, MethodMirror, VariableMirror, ParameterMirror, MirrorsUsed, Endianness, NativeTypedArray, NativeTypedArrayOfDouble, NativeTypedArray_ListMixin, NativeTypedArray_ListMixin_FixedLengthListMixin, NativeTypedArrayOfInt, NativeTypedArray_ListMixin0, NativeTypedArray_ListMixin_FixedLengthListMixin0, DuplicateEventSettingError, EmitTimeQueueChangeError, Event, EventDetector, EventEmitter, EventEmitter_emitEvent_closure, EventEmitter_emitEvent__closure, EventEmitter_emitEvent__closure0, _convertDartToNative_PrepareForStructuredClone_findSlot, _convertDartToNative_PrepareForStructuredClone_readSlot, _convertDartToNative_PrepareForStructuredClone_writeSlot, _convertDartToNative_PrepareForStructuredClone_cleanupSlots, _convertDartToNative_PrepareForStructuredClone_walk, _convertDartToNative_PrepareForStructuredClone_walk_closure, convertNativeToDart_AcceptStructuredClone_findSlot, convertNativeToDart_AcceptStructuredClone_readSlot, convertNativeToDart_AcceptStructuredClone_writeSlot, convertNativeToDart_AcceptStructuredClone_walk, CssClassSetImpl, CssClassSetImpl_add_closure, CssClassSetImpl_addAll_closure, CssClassSetImpl_clear_closure, Logger, Logger_Logger_closure, Level, LogRecord, SupportedBrowser, Experimental, DomName, DocsEditable, Unstable, Bindable, ChangeNotifier, ChangeRecord, PropertyChangeRecord, dirtyCheckZoneSpec_enqueueDirtyCheck, dirtyCheckZoneSpec_enqueueDirtyCheck_closure, dirtyCheckZoneSpec_wrapCallback, dirtyCheckZoneSpec_wrapCallback_closure, dirtyCheckZoneSpec_wrapUnaryCallback, dirtyCheckZoneSpec_wrapUnaryCallback_closure, ListChangeRecord, ObservableProperty, Reflectable, Observable, Observable_deliverChanges_closure, ObservableBox, MapChangeRecord, ObservableMap, ObservableMap_addAll_closure, ObservableMap_clear_closure, ObserverTransform, PathObserver, PropertyPath, _InvalidPropertyPath, closure7, _PathParser, _PathParser_push_closure, CompoundObserver, CompoundObserver_addObserver_closure, CompoundObserver__check_closure, _ObserverSentinel, _Observer, _ObservedSet, Context, Context_join_closure, Context_joinAll_closure, Context_split_closure, _validateArgList_closure, InternalStyle, ParsedPath, ParsedPath_normalize_closure, PathException, Style, PosixStyle, UrlStyle, WindowsStyle, PolymerDeclaration, PolymerDeclaration__getPublishedProperties_closure, PolymerDeclaration__getPublishedProperties_closure0, PolymerDeclaration_accumulateInstanceAttributes_closure, PolymerDeclaration_addAttributeDelegates_closure, PolymerDeclaration_installLocalSheets_closure, PolymerDeclaration_cssTextForScope_matcher, PolymerDeclaration_explodeObservers_closure, PolymerDeclaration__lowerCaseMap_closure, PolymerDeclaration_createPropertyAccessors_closure, PolymerExpressions, BindingDelegate_PolymerEventBindings, PolymerEventBindings, PolymerEventBindings_getEventHandler_closure, PolymerEventBindings_prepareEventBinding_closure, PolymerEventBindings_prepareEventBinding__closure, _EventBindable, PublishedProperty, PolymerElement, HtmlElement_Polymer, HtmlElement_Polymer_ChangeNotifier, Polymer, Polymer_makeElementReady_closure, Polymer_attached_closure, Polymer_copyInstanceAttributes_closure, Polymer_copyInstanceAttributes__closure, Polymer_asyncUnbindAll_closure, Polymer_cancelUnbindAll_closure, Polymer_cancelUnbindAll_closure0, Polymer_notifyPropertyChanges_closure, Polymer__propertyChange_closure, Polymer_observeArrayValue_closure, Polymer_observeArrayValue_closure0, Polymer_observeArrayValue_closure1, Polymer_bindProperty_closure, Polymer_bindProperty_closure0, Polymer_addHostListeners_closure, Polymer_addHostListeners_closure0, Polymer_dispatchMethod_closure, Polymer_dispatchMethod_closure0, _PolymerBinding, _CloseOnlyBinding, PolymerJob, PolymerJob_start_closure, CustomTag, InitMethodAnnotation, initPolymer_closure, _hookJsPolymer_closure, _hookJsPolymer_registerDart, _hookJsPolymer_registerDart_closure, closure, _initializeLogging_closure, _initializeLogging_closure0, _initializeLogging_closure1, _initializeLogging_closure2, _PropertyAccessor, AutoBindingElement, TemplateElement_Polymer, TemplateElement_Polymer_Observable, AutoBindingElement$created_closure, AutoBindingElement$created__closure, _AutoBindingSyntax, LogInjector, LogInjector_injectLogsFromUrl_closure, LogInjector_injectLogs_closure, LogInjector_injectLogs__closure2, LogInjector_injectLogs___closure, LogInjector_injectLogs_closure0, LogInjector_injectLogs__closure, LogInjector_injectLogs__closure0, LogInjector_injectLogs__closure1, _OpenUriPolicy, closure0, closure1, closure2, closure3, closure4, _closure0, closure5, _closure, _classAttributeConverter_closure, _styleAttributeConverter_closure, PolymerExpressions0, PolymerExpressions_prepareBinding_closure, PolymerExpressions_prepareBinding_closure0, PolymerExpressions_prepareBinding_closure1, PolymerExpressions_prepareInstanceModel_closure, PolymerExpressions_prepareInstanceModel_closure0, _Binding, _Binding_open_closure, ScopeFactory, StreamBinding, StreamBinding_closure, closure13, closure14, closure15, closure16, closure17, closure18, closure19, closure20, closure21, closure22, closure23, closure24, closure25, closure26, closure27, closure28, closure10, closure11, closure12, Scope, _ModelScope, _LocalVariableScope, _GlobalsScope, ExpressionObserver, Updater, Closer, EvalVisitor, ObserverBuilder, ObserverBuilder_visitInvoke_closure, ObserverBuilder_visitListLiteral_closure, ObserverBuilder_visitMapLiteral_closure, EmptyObserver, LiteralObserver, ListLiteralObserver, ListLiteralObserver__updateSelf_closure, MapLiteralObserver, MapLiteralObserver__updateSelf_closure, MapLiteralEntryObserver, IdentifierObserver, IdentifierObserver__updateSelf_closure, IdentifierObserver__updateSelf__closure, UnaryObserver, BinaryObserver, BinaryObserver__updateSelf_closure, TernaryObserver, GetterObserver, GetterObserver__updateSelf_closure, GetterObserver__updateSelf__closure, IndexObserver, IndexObserver__updateSelf_closure0, IndexObserver__updateSelf__closure0, IndexObserver__updateSelf_closure, IndexObserver__updateSelf__closure, InvokeObserver, InvokeObserver__updateSelf_closure, InvokeObserver__updateSelf_closure0, InvokeObserver__updateSelf__closure, EvalException, AstFactory, Expression, EmptyExpression, Literal, ListLiteral, MapLiteral, MapLiteralEntry, ParenthesizedExpression, Identifier, UnaryOperator, BinaryOperator, TernaryOperator, InExpression, AsExpression, Index, Getter, Invoke, _hashList_closure, Parser, IndexedValue, EnumerateIterable, EnumerateIterator, Token, Tokenizer, ParseException, Visitor, RecursiveVisitor, _Base, Object_EventEmitter, Object_EventEmitter_EventDetector, Consumer, Object_EventDetector, RestrictedMethodError, Source, IEndPointMessage, _IGarbageCollectionReport, _ProxyInvocation, _IProxyInvocation, _ISourceEvent, _ISourceReady, _Transmission, QueryOptions, Declaration, DeclarationKind, StaticConfiguration, StaticConfiguration_closure, StaticConfiguration_addAll_closure, StaticConfiguration__nestedAddAll_closure, GeneratedObjectAccessorService, GeneratedTypeInspectorService, GeneratedSymbolConverterService, MissingCodeException, SourceLocation, SourceSpan, SourceSpanBase, SourceSpanMixin, registerStopwatchTranTypes_closure, registerStopwatchTranTypes__closure, registerStopwatchTranTypes__closure0, registerStopwatchTranTypes__closure1, DurationChange, IDurationChange, Start, Stop, Stopwatch, PurityStopwatch, PolymerElement_EventDetector, PolymerElement_EventDetector_ChangeNotifier, StopwatchConsumer, BindingDelegate, _InstanceBindingMap, _TemplateBindingMap, NodeBindExtension, _NodeBindingsMap, _NodeBindingsMap_keys_closure, _JsBindable, bindableToJsObject_inZone, bindableToJsObject_inZoneUnary, bindableToJsObject_closure, bindableToJsObject__closure, bindableToJsObject_closure0, bindableToJsObject_closure1, bindableToJsObject_closure2, bindableToJsObject_closure3, TemplateInstance, TemplateBindExtension, TemplateBindExtension_bind_closure, TemplateBindExtension_bootstrap__bootstrap, closure6, closure8, closure9, _InstanceExtension, _getDelegateFactory_closure, _parseAttributeBindings_closure, _TemplateIterator, MustacheTokens, DuplicateTranKeyError, DuplicateTranNamespaceError, DuplicateTranTypeError, InvalidTranNamespaceError, NestedRegisterTranTypesCallError, TranMethodError, TranRegistrationOutsideOfNamespaceError, TransmittableLockedError, UnregisteredTypeError, _InternalPointer, registerTranSubtype_closure, _registerTranTranTypes_closure, _registerTranTranTypes__closure, _registerTranTranTypes__closure0, _registerTranTranTypes__closure1, _registerTranTranTypes__closure2, _registerTranTranTypes__closure3, _registerTranTranTypes__closure4, _registerTranTranTypes__closure5, _registerTranTranTypes__closure6, _registerTranTranTypes__closure7, _registerTranTranTypes__closure8, _registerTranTranTypes__closure9, _registerTranTranTypes__closure10, _registerTranTranTypes__closure11, _registerTranTranTypes__closure12, _registerTranTranTypes__closure13, _registerTranTranTypes__closure14, _registerTranTranTypes__closure15, _registerTranTranTypes__closure16, _registerTranTranTypes__closure17, _registerTranTranTypes__closure18, _registerTranTranTypes__closure19, _registerTranTranTypes__closure20, _registerTranTranTypes__closure21, _registerTranTranTypes__closure22, _registerTranTranTypes__closure23, _processIterableToString_closure, _processMapToString_closure, _TranCodec, getRegisteredMappingsByType_closure, getRegisteredMappingsByKey_closure, Transmittable, ListRange, _ListRangeIteratorImpl, Utf16CodeUnitDecoder, registerDartType_upgradeElement];
}
